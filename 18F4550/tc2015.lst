

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 08 14:19:33 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	pa_nodes,global,class=CODE,delta=1
    66  0000                     tblptru	equ	0xFF8
    67                           tblptrh	equ	0xFF7
    68                           tblptrl	equ	0xFF6
    69                           tablat	equ	0xFF5
    70                           prodh	equ	0xFF4
    71                           prodl	equ	0xFF3
    72                           intcon	equ	0xFF2
    73                           intcon2	equ	0xFF1
    74                           wreg	equ	0xFE8
    75                           indf1	equ	0xFE7
    76                           postinc1	equ	0xFE6
    77                           plusw1	equ	0xFE3
    78                           fsr1h	equ	0xFE2
    79                           fsr1l	equ	0xFE1
    80                           indf2	equ	0xFDF
    81                           postinc2	equ	0xFDE
    82                           postdec2	equ	0xFDD
    83                           plusw2	equ	0xFDB
    84                           fsr2h	equ	0xFDA
    85                           fsr2l	equ	0xFD9
    86                           status	equ	0xFD8
    87                           
    88                           	psect	idataCOMRAM
    89  001004                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _qtd_max_dias
    93  001004  1F                 	db	31
    94                           tblptru	equ	0xFF8
    95                           tblptrh	equ	0xFF7
    96                           tblptrl	equ	0xFF6
    97                           tablat	equ	0xFF5
    98                           prodh	equ	0xFF4
    99                           prodl	equ	0xFF3
   100                           intcon	equ	0xFF2
   101                           intcon2	equ	0xFF1
   102                           wreg	equ	0xFE8
   103                           indf1	equ	0xFE7
   104                           postinc1	equ	0xFE6
   105                           plusw1	equ	0xFE3
   106                           fsr1h	equ	0xFE2
   107                           fsr1l	equ	0xFE1
   108                           indf2	equ	0xFDF
   109                           postinc2	equ	0xFDE
   110                           postdec2	equ	0xFDD
   111                           plusw2	equ	0xFDB
   112                           fsr2h	equ	0xFDA
   113                           fsr2l	equ	0xFD9
   114                           status	equ	0xFD8
   115                           
   116                           	psect	idataBANK0
   117  002EAE                     __pidataBANK0:
   118                           	opt stack 0
   119                           
   120                           ;initializer for dia_da_semana@F5265
   121  002EAE  00                 	db	0
   122  002EAF  03                 	db	3
   123  002EB0  03                 	db	3
   124  002EB1  06                 	db	6
   125  002EB2  01                 	db	1
   126  002EB3  04                 	db	4
   127  002EB4  06                 	db	6
   128  002EB5  02                 	db	2
   129  002EB6  05                 	db	5
   130  002EB7  00                 	db	0
   131  002EB8  03                 	db	3
   132  002EB9  05                 	db	5
   133                           tblptru	equ	0xFF8
   134                           tblptrh	equ	0xFF7
   135                           tblptrl	equ	0xFF6
   136                           tablat	equ	0xFF5
   137                           prodh	equ	0xFF4
   138                           prodl	equ	0xFF3
   139                           intcon	equ	0xFF2
   140                           intcon2	equ	0xFF1
   141                           wreg	equ	0xFE8
   142                           indf1	equ	0xFE7
   143                           postinc1	equ	0xFE6
   144                           plusw1	equ	0xFE3
   145                           fsr1h	equ	0xFE2
   146                           fsr1l	equ	0xFE1
   147                           indf2	equ	0xFDF
   148                           postinc2	equ	0xFDE
   149                           postdec2	equ	0xFDD
   150                           plusw2	equ	0xFDB
   151                           fsr2h	equ	0xFDA
   152                           fsr2l	equ	0xFD9
   153                           status	equ	0xFD8
   154                           
   155                           	psect	smallconst
   156  001100                     __psmallconst:
   157                           	opt stack 0
   158  001100  00                 	db	0
   159  001101                     _dpowers:
   160                           	opt stack 0
   161  001101  0001               	dw	1
   162  001103  000A               	dw	10
   163  001105  0064               	dw	100
   164  001107  03E8               	dw	1000
   165  001109  2710               	dw	10000
   166  00110B                     __end_of_dpowers:
   167                           	opt stack 0
   168  0000                     _ADCON1	set	4033
   169  0000                     _CMCON	set	4020
   170  0000                     _EEADR	set	4009
   171  0000                     _EECON1bits	set	4006
   172  0000                     _EECON2	set	4007
   173  0000                     _EEDATA	set	4008
   174  0000                     _INTCON	set	4082
   175  0000                     _INTCON2	set	4081
   176  0000                     _INTCONbits	set	4082
   177  0000                     _LATA	set	3977
   178  0000                     _LATB	set	3978
   179  0000                     _LATCbits	set	3979
   180  0000                     _LATD	set	3980
   181  0000                     _LATDbits	set	3980
   182  0000                     _LATEbits	set	3981
   183  0000                     _OSCCON	set	4051
   184  0000                     _PIE1	set	3997
   185  0000                     _PORTB	set	3969
   186  0000                     _PORTBbits	set	3969
   187  0000                     _PORTD	set	3971
   188  0000                     _PORTDbits	set	3971
   189  0000                     _PORTEbits	set	3972
   190  0000                     _RCONbits	set	4048
   191  0000                     _RCREG	set	4014
   192  0000                     _SPBRG	set	4015
   193  0000                     _T0CON	set	4053
   194  0000                     _T1CON	set	4045
   195  0000                     _TMR0H	set	4055
   196  0000                     _TMR0L	set	4054
   197  0000                     _TMR1H	set	4047
   198  0000                     _TMR1L	set	4046
   199  0000                     _TRISA	set	3986
   200  0000                     _TRISB	set	3987
   201  0000                     _TRISC	set	3988
   202  0000                     _TRISD	set	3989
   203  0000                     _TRISE	set	3990
   204  0000                     _TXREG	set	4013
   205  0000                     _BRG16	set	32195
   206  0000                     _BRGH	set	32098
   207  0000                     _CREN	set	32092
   208  0000                     _FERR	set	32090
   209  0000                     _OERR	set	32089
   210  0000                     _RBIE	set	32659
   211  0000                     _RBIF	set	32656
   212  0000                     _RCIE	set	31981
   213  0000                     _RCIF	set	31989
   214  0000                     _RX9	set	32094
   215  0000                     _SPEN	set	32095
   216  0000                     _SYNC	set	32100
   217  0000                     _TMR0IE	set	32661
   218  0000                     _TMR0IF	set	32658
   219  0000                     _TMR1IE	set	31976
   220  0000                     _TMR1IF	set	31984
   221  0000                     _TMR1ON	set	32360
   222  0000                     _TRMT	set	32097
   223  0000                     _TX9	set	32102
   224  0000                     _TXCKP	set	32196
   225  0000                     _TXEN	set	32101
   226  0000                     _TXIE	set	31980
   227  0000                     _WR	set	32049
   228  00110B                     STR_19:
   229  00110B  0A                 	db	10
   230  00110C  0A                 	db	10
   231  00110D  0A                 	db	10
   232  00110E  25                 	db	37
   233  00110F  30                 	db	48	;'0'
   234  001110  32                 	db	50	;'2'
   235  001111  64                 	db	100	;'d'
   236  001112  3A                 	db	58	;':'
   237  001113  25                 	db	37
   238  001114  30                 	db	48	;'0'
   239  001115  32                 	db	50	;'2'
   240  001116  64                 	db	100	;'d'
   241  001117  3A                 	db	58	;':'
   242  001118  25                 	db	37
   243  001119  30                 	db	48	;'0'
   244  00111A  32                 	db	50	;'2'
   245  00111B  64                 	db	100	;'d'
   246  00111C  2D                 	db	45
   247  00111D  25                 	db	37
   248  00111E  30                 	db	48	;'0'
   249  00111F  32                 	db	50	;'2'
   250  001120  64                 	db	100	;'d'
   251  001121  2E                 	db	46
   252  001122  25                 	db	37
   253  001123  30                 	db	48	;'0'
   254  001124  32                 	db	50	;'2'
   255  001125  64                 	db	100	;'d'
   256  001126  2E                 	db	46
   257  001127  25                 	db	37
   258  001128  30                 	db	48	;'0'
   259  001129  32                 	db	50	;'2'
   260  00112A  64                 	db	100	;'d'
   261  00112B  00                 	db	0
   262  00112C                     STR_13:
   263  00112C  0A                 	db	10
   264  00112D  0A                 	db	10
   265  00112E  43                 	db	67	;'C'
   266  00112F  6F                 	db	111	;'o'
   267  001130  6E                 	db	110	;'n'
   268  001131  74                 	db	116	;'t'
   269  001132  61                 	db	97	;'a'
   270  001133  20                 	db	32
   271  001134  6E                 	db	110	;'n'
   272  001135  61                 	db	97	;'a'
   273  001136  6F                 	db	111	;'o'
   274  001137  20                 	db	32
   275  001138  65                 	db	101	;'e'
   276  001139  78                 	db	120	;'x'
   277  00113A  69                 	db	105	;'i'
   278  00113B  73                 	db	115	;'s'
   279  00113C  74                 	db	116	;'t'
   280  00113D  65                 	db	101	;'e'
   281  00113E  6E                 	db	110	;'n'
   282  00113F  74                 	db	116	;'t'
   283  001140  65                 	db	101	;'e'
   284  001141  00                 	db	0
   285  001142                     STR_12:
   286  001142  0A                 	db	10
   287  001143  0A                 	db	10
   288  001144  45                 	db	69	;'E'
   289  001145  72                 	db	114	;'r'
   290  001146  72                 	db	114	;'r'
   291  001147  6F                 	db	111	;'o'
   292  001148  20                 	db	32
   293  001149  64                 	db	100	;'d'
   294  00114A  65                 	db	101	;'e'
   295  00114B  20                 	db	32
   296  00114C  70                 	db	112	;'p'
   297  00114D  72                 	db	114	;'r'
   298  00114E  6F                 	db	111	;'o'
   299  00114F  74                 	db	116	;'t'
   300  001150  6F                 	db	111	;'o'
   301  001151  63                 	db	99	;'c'
   302  001152  6F                 	db	111	;'o'
   303  001153  6C                 	db	108	;'l'
   304  001154  6F                 	db	111	;'o'
   305  001155  00                 	db	0
   306  001156                     STR_10:
   307  001156  0A                 	db	10
   308  001157  0A                 	db	10
   309  001158  45                 	db	69	;'E'
   310  001159  72                 	db	114	;'r'
   311  00115A  72                 	db	114	;'r'
   312  00115B  6F                 	db	111	;'o'
   313  00115C  20                 	db	32
   314  00115D  64                 	db	100	;'d'
   315  00115E  65                 	db	101	;'e'
   316  00115F  20                 	db	32
   317  001160  61                 	db	97	;'a'
   318  001161  62                 	db	98	;'b'
   319  001162  65                 	db	101	;'e'
   320  001163  72                 	db	114	;'r'
   321  001164  74                 	db	116	;'t'
   322  001165  75                 	db	117	;'u'
   323  001166  72                 	db	114	;'r'
   324  001167  61                 	db	97	;'a'
   325  001168  00                 	db	0
   326  001169                     STR_14:
   327  001169  0A                 	db	10
   328  00116A  0A                 	db	10
   329  00116B  53                 	db	83	;'S'
   330  00116C  65                 	db	101	;'e'
   331  00116D  6E                 	db	110	;'n'
   332  00116E  68                 	db	104	;'h'
   333  00116F  61                 	db	97	;'a'
   334  001170  20                 	db	32
   335  001171  69                 	db	105	;'i'
   336  001172  6E                 	db	110	;'n'
   337  001173  63                 	db	99	;'c'
   338  001174  6F                 	db	111	;'o'
   339  001175  72                 	db	114	;'r'
   340  001176  72                 	db	114	;'r'
   341  001177  65                 	db	101	;'e'
   342  001178  74                 	db	116	;'t'
   343  001179  61                 	db	97	;'a'
   344  00117A  00                 	db	0
   345  00117B                     STR_8:
   346  00117B  0A                 	db	10
   347  00117C  0A                 	db	10
   348  00117D  44                 	db	68	;'D'
   349  00117E  65                 	db	101	;'e'
   350  00117F  73                 	db	115	;'s'
   351  001180  74                 	db	116	;'t'
   352  001181  72                 	db	114	;'r'
   353  001182  61                 	db	97	;'a'
   354  001183  76                 	db	118	;'v'
   355  001184  61                 	db	97	;'a'
   356  001185  6E                 	db	110	;'n'
   357  001186  64                 	db	100	;'d'
   358  001187  6F                 	db	111	;'o'
   359  001188  2E                 	db	46
   360  001189  2E                 	db	46
   361  00118A  2E                 	db	46
   362  00118B  00                 	db	0
   363  00118C                     STR_11:
   364  00118C  0A                 	db	10
   365  00118D  0A                 	db	10
   366  00118E  50                 	db	80	;'P'
   367  00118F  6F                 	db	111	;'o'
   368  001190  72                 	db	114	;'r'
   369  001191  74                 	db	116	;'t'
   370  001192  61                 	db	97	;'a'
   371  001193  20                 	db	32
   372  001194  61                 	db	97	;'a'
   373  001195  62                 	db	98	;'b'
   374  001196  65                 	db	101	;'e'
   375  001197  72                 	db	114	;'r'
   376  001198  74                 	db	116	;'t'
   377  001199  61                 	db	97	;'a'
   378  00119A  00                 	db	0
   379  00119B                     STR_32:
   380  00119B  28                 	db	40
   381  00119C  6E                 	db	110	;'n'
   382  00119D  75                 	db	117	;'u'
   383  00119E  6C                 	db	108	;'l'
   384  00119F  6C                 	db	108	;'l'
   385  0011A0  29                 	db	41
   386  0011A1  00                 	db	0
   387  0011A2                     STR_4:
   388  0011A2  41                 	db	65	;'A'
   389  0011A3  54                 	db	84	;'T'
   390  0011A4  2B                 	db	43
   391  0011A5  43                 	db	67	;'C'
   392  0011A6  4F                 	db	79	;'O'
   393  0011A7  4E                 	db	78	;'N'
   394  0011A8  00                 	db	0
   395  0011A9  44                 	db	68	;'D'
   396  0011AA  49                 	db	73	;'I'
   397  0011AB  53                 	db	83	;'S'
   398  0011AC  43                 	db	67	;'C'
   399  0011AD  3F                 	db	63	;'?'
   400  0011AE  00                 	db	0
   401  0011AF  52                 	db	82	;'R'
   402  0011B0  41                 	db	65	;'A'
   403  0011B1  44                 	db	68	;'D'
   404  0011B2  44                 	db	68	;'D'
   405  0011B3  3F                 	db	63	;'?'
   406  0011B4  00                 	db	0
   407  0011B5  41                 	db	65	;'A'
   408  0011B6  44                 	db	68	;'D'
   409  0011B7  44                 	db	68	;'D'
   410  0011B8  52                 	db	82	;'R'
   411  0011B9  3F                 	db	63	;'?'
   412  0011BA  00                 	db	0
   413  0011BB  53                 	db	83	;'S'
   414  0011BC  4C                 	db	76	;'L'
   415  0011BD  45                 	db	69	;'E'
   416  0011BE  45                 	db	69	;'E'
   417  0011BF  50                 	db	80	;'P'
   418  0011C0  00                 	db	0
   419  0011C1  52                 	db	82	;'R'
   420  0011C2  45                 	db	69	;'E'
   421  0011C3  53                 	db	83	;'S'
   422  0011C4  45                 	db	69	;'E'
   423  0011C5  54                 	db	84	;'T'
   424  0011C6  00                 	db	0
   425  0011C7  53                 	db	83	;'S'
   426  0011C8  54                 	db	84	;'T'
   427  0011C9  41                 	db	65	;'A'
   428  0011CA  52                 	db	82	;'R'
   429  0011CB  54                 	db	84	;'T'
   430  0011CC  00                 	db	0
   431  0011CD  42                 	db	66	;'B'
   432  0011CE  41                 	db	65	;'A'
   433  0011CF  55                 	db	85	;'U'
   434  0011D0  44                 	db	68	;'D'
   435  0011D1  00                 	db	0
   436  0011D2  52                 	db	82	;'R'
   437  0011D3  4F                 	db	79	;'O'
   438  0011D4  4C                 	db	76	;'L'
   439  0011D5  45                 	db	69	;'E'
   440  0011D6  00                 	db	0
   441  0011D7  4E                 	db	78	;'N'
   442  0011D8  41                 	db	65	;'A'
   443  0011D9  4D                 	db	77	;'M'
   444  0011DA  45                 	db	69	;'E'
   445  0011DB  00                 	db	0
   446  0011DC                     STR_5:
   447  0011DC  0A                 	db	10
   448  0011DD  0A                 	db	10
   449  0011DE  25                 	db	37
   450  0011DF  73                 	db	115	;'s'
   451  0011E0  00                 	db	0
   452  0011E1  41                 	db	65	;'A'
   453  0011E2  54                 	db	84	;'T'
   454  0011E3  2B                 	db	43
   455  0011E4  00                 	db	0
   456  0011E5                     STR_6:
   457  0011E5  2A                 	db	42
   458  0011E6  25                 	db	37
   459  0011E7  63                 	db	99	;'c'
   460  0011E8  00                 	db	0
   461  0011E9                     STR_17:
   462  0011E9  53                 	db	83	;'S'
   463  0011EA  45                 	db	69	;'E'
   464  0011EB  00                 	db	0
   465  0011EC                     STR_15:
   466  0011EC  0A                 	db	10
   467  0011ED  49                 	db	73	;'I'
   468  0011EE  00                 	db	0
   469  0011EF                     STR_16:
   470  0011EF  4F                 	db	79	;'O'
   471  0011F0  4B                 	db	75	;'K'
   472  0011F1  00                 	db	0
   473  0011F2                     STR_3:
   474  0011F2  41                 	db	65	;'A'
   475  0011F3  54                 	db	84	;'T'
   476  0011F4  00                 	db	0
   477  0011F5                     STR_18:
   478  0011F5  20                 	db	32
   479  0011F6  00                 	db	0
   480  0011F7                     STR_1:
   481  0011F7  2A                 	db	42
   482  0011F8  00                 	db	0
   483  0000                     
   484                           ; #config settings
   485  0011F9  00                 	db	0	; dummy byte at the end
   486  0000                     tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           prodh	equ	0xFF4
   491                           prodl	equ	0xFF3
   492                           intcon	equ	0xFF2
   493                           intcon2	equ	0xFF1
   494                           wreg	equ	0xFE8
   495                           indf1	equ	0xFE7
   496                           postinc1	equ	0xFE6
   497                           plusw1	equ	0xFE3
   498                           fsr1h	equ	0xFE2
   499                           fsr1l	equ	0xFE1
   500                           indf2	equ	0xFDF
   501                           postinc2	equ	0xFDE
   502                           postdec2	equ	0xFDD
   503                           plusw2	equ	0xFDB
   504                           fsr2h	equ	0xFDA
   505                           fsr2l	equ	0xFD9
   506                           status	equ	0xFD8
   507                           
   508                           	psect	cinit
   509  002812                     __pcinit:
   510                           	opt stack 0
   511  002812                     start_initialization:
   512                           	opt stack 0
   513  002812                     __initialization:
   514                           	opt stack 0
   515                           
   516                           ; Clear objects allocated to BIGRAM (272 bytes)
   517  002812  EE01  F050         	lfsr	0,__pbssBIGRAM
   518  002816  EE11 F010          	lfsr	1,272
   519  00281A                     clear_0:
   520  00281A  6AEE               	clrf	postinc0,c
   521  00281C  50E5               	movf	postdec1,w,c
   522  00281E  50E1               	movf	fsr1l,w,c
   523  002820  E1FC               	bnz	clear_0
   524  002822  50E2               	movf	fsr1h,w,c
   525  002824  E1FA               	bnz	clear_0
   526                           
   527                           ; Clear objects allocated to BANK1 (80 bytes)
   528  002826  EE01  F000         	lfsr	0,__pbssBANK1
   529  00282A  0E50               	movlw	80
   530  00282C                     clear_1:
   531  00282C  6AEE               	clrf	postinc0,c
   532  00282E  06E8               	decf	wreg,f,c
   533  002830  E1FD               	bnz	clear_1
   534                           
   535                           ; Clear objects allocated to BANK0 (61 bytes)
   536  002832  EE00  F0AF         	lfsr	0,__pbssBANK0
   537  002836  0E3D               	movlw	61
   538  002838                     clear_2:
   539  002838  6AEE               	clrf	postinc0,c
   540  00283A  06E8               	decf	wreg,f,c
   541  00283C  E1FD               	bnz	clear_2
   542                           
   543                           ; Clear objects allocated to COMRAM (18 bytes)
   544  00283E  EE00  F02D         	lfsr	0,__pbssCOMRAM
   545  002842  0E12               	movlw	18
   546  002844                     clear_3:
   547  002844  6AEE               	clrf	postinc0,c
   548  002846  06E8               	decf	wreg,f,c
   549  002848  E1FD               	bnz	clear_3
   550                           
   551                           ; Initialize objects allocated to BANK0 (12 bytes)
   552                           ; load TBLPTR registers with __pidataBANK0
   553  00284A  0EAE               	movlw	low __pidataBANK0
   554  00284C  6EF6               	movwf	tblptrl,c
   555  00284E  0E2E               	movlw	high __pidataBANK0
   556  002850  6EF7               	movwf	tblptrh,c
   557  002852  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   558  002854  6EF8               	movwf	tblptru,c
   559  002856  EE00  F0EC         	lfsr	0,__pdataBANK0
   560  00285A  EE10 F00C          	lfsr	1,12
   561  00285E                     copy_data0:
   562  00285E  0009               	tblrd		*+
   563  002860  CFF5 FFEE          	movff	tablat,postinc0
   564  002864  50E5               	movf	postdec1,w,c
   565  002866  50E1               	movf	fsr1l,w,c
   566  002868  E1FA               	bnz	copy_data0
   567                           
   568                           ; Initialize objects allocated to COMRAM (1 bytes)
   569                           ; load TBLPTR registers with __pidataCOMRAM
   570  00286A  0E04               	movlw	low __pidataCOMRAM
   571  00286C  6EF6               	movwf	tblptrl,c
   572  00286E  0E10               	movlw	high __pidataCOMRAM
   573  002870  6EF7               	movwf	tblptrh,c
   574  002872  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   575  002874  6EF8               	movwf	tblptru,c
   576  002876  0009               	tblrd		*+	;fetch initializer
   577  002878  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   578  00287C                     end_of_initialization:
   579                           	opt stack 0
   580  00287C                     __end_of__initialization:
   581                           	opt stack 0
   582  00287C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   583  00287E  6EF8               	movwf	tblptru,c
   584  002880  0100               	movlb	0
   585  002882  EFFD  F008         	goto	_main	;jump to C main() function
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           prodh	equ	0xFF4
   591                           prodl	equ	0xFF3
   592                           intcon	equ	0xFF2
   593                           intcon2	equ	0xFF1
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           indf1	equ	0xFE7
   597                           postinc1	equ	0xFE6
   598                           postdec1	equ	0xFE5
   599                           plusw1	equ	0xFE3
   600                           fsr1h	equ	0xFE2
   601                           fsr1l	equ	0xFE1
   602                           indf2	equ	0xFDF
   603                           postinc2	equ	0xFDE
   604                           postdec2	equ	0xFDD
   605                           plusw2	equ	0xFDB
   606                           fsr2h	equ	0xFDA
   607                           fsr2l	equ	0xFD9
   608                           status	equ	0xFD8
   609                           
   610                           	psect	bssCOMRAM
   611  00002D                     __pbssCOMRAM:
   612                           	opt stack 0
   613  00002D                     _FLAGS_2:
   614                           	opt stack 0
   615  00002D                     	ds	1
   616  00002E                     _FLAGS_3:
   617                           	opt stack 0
   618  00002E                     	ds	1
   619  00002F                     _Linha_3:
   620                           	opt stack 0
   621  00002F                     	ds	1
   622  000030                     _Linha_4:
   623                           	opt stack 0
   624  000030                     	ds	1
   625  000031                     _PORTB_SR:
   626                           	opt stack 0
   627  000031                     	ds	1
   628  000032                     _lcd_type:
   629                           	opt stack 0
   630  000032                     	ds	1
   631  000033                     _linha_lcd:
   632                           	opt stack 0
   633  000033                     	ds	1
   634  000034                     _num_interrupt_timer1:
   635                           	opt stack 0
   636  000034                     	ds	1
   637  000035                     _qtd_caracteres_recebidos_serial:
   638                           	opt stack 0
   639  000035                     	ds	1
   640  000036                     _qtd_caracteres_recebidos_teclado:
   641                           	opt stack 0
   642  000036                     	ds	1
   643  000037                     _qtd_max_colunas_lcd:
   644                           	opt stack 0
   645  000037                     	ds	1
   646  000038                     _data_atual:
   647                           	opt stack 0
   648  000038                     	ds	7
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           prodh	equ	0xFF4
   654                           prodl	equ	0xFF3
   655                           intcon	equ	0xFF2
   656                           intcon2	equ	0xFF1
   657                           postinc0	equ	0xFEE
   658                           wreg	equ	0xFE8
   659                           indf1	equ	0xFE7
   660                           postinc1	equ	0xFE6
   661                           postdec1	equ	0xFE5
   662                           plusw1	equ	0xFE3
   663                           fsr1h	equ	0xFE2
   664                           fsr1l	equ	0xFE1
   665                           indf2	equ	0xFDF
   666                           postinc2	equ	0xFDE
   667                           postdec2	equ	0xFDD
   668                           plusw2	equ	0xFDB
   669                           fsr2h	equ	0xFDA
   670                           fsr2l	equ	0xFD9
   671                           status	equ	0xFD8
   672                           
   673                           	psect	dataCOMRAM
   674  00003F                     __pdataCOMRAM:
   675                           	opt stack 0
   676  00003F                     _qtd_max_dias:
   677                           	opt stack 0
   678  00003F                     	ds	1
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           prodh	equ	0xFF4
   684                           prodl	equ	0xFF3
   685                           intcon	equ	0xFF2
   686                           intcon2	equ	0xFF1
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           indf1	equ	0xFE7
   690                           postinc1	equ	0xFE6
   691                           postdec1	equ	0xFE5
   692                           plusw1	equ	0xFE3
   693                           fsr1h	equ	0xFE2
   694                           fsr1l	equ	0xFE1
   695                           indf2	equ	0xFDF
   696                           postinc2	equ	0xFDE
   697                           postdec2	equ	0xFDD
   698                           plusw2	equ	0xFDB
   699                           fsr2h	equ	0xFDA
   700                           fsr2l	equ	0xFD9
   701                           status	equ	0xFD8
   702                           
   703                           	psect	bssBANK0
   704  0000AF                     __pbssBANK0:
   705                           	opt stack 0
   706  0000AF                     _ptr_data:
   707                           	opt stack 0
   708  0000AF                     	ds	2
   709  0000B1                     _FLAGS_1:
   710                           	opt stack 0
   711  0000B1                     	ds	1
   712  0000B2                     _caractere_recebido:
   713                           	opt stack 0
   714  0000B2                     	ds	1
   715  0000B3                     _qtd_vezes_mesma_tecla_pressionada:
   716                           	opt stack 0
   717  0000B3                     	ds	1
   718  0000B4                     _buffer_teclado_matricial:
   719                           	opt stack 0
   720  0000B4                     	ds	40
   721  0000DC                     _nova_senha:
   722                           	opt stack 0
   723  0000DC                     	ds	16
   724                           tblptru	equ	0xFF8
   725                           tblptrh	equ	0xFF7
   726                           tblptrl	equ	0xFF6
   727                           tablat	equ	0xFF5
   728                           prodh	equ	0xFF4
   729                           prodl	equ	0xFF3
   730                           intcon	equ	0xFF2
   731                           intcon2	equ	0xFF1
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           indf1	equ	0xFE7
   735                           postinc1	equ	0xFE6
   736                           postdec1	equ	0xFE5
   737                           plusw1	equ	0xFE3
   738                           fsr1h	equ	0xFE2
   739                           fsr1l	equ	0xFE1
   740                           indf2	equ	0xFDF
   741                           postinc2	equ	0xFDE
   742                           postdec2	equ	0xFDD
   743                           plusw2	equ	0xFDB
   744                           fsr2h	equ	0xFDA
   745                           fsr2l	equ	0xFD9
   746                           status	equ	0xFD8
   747                           
   748                           	psect	dataBANK0
   749  0000EC                     __pdataBANK0:
   750                           	opt stack 0
   751  0000EC                     dia_da_semana@F5265:
   752                           	opt stack 0
   753  0000EC                     	ds	12
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           prodh	equ	0xFF4
   759                           prodl	equ	0xFF3
   760                           intcon	equ	0xFF2
   761                           intcon2	equ	0xFF1
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           indf1	equ	0xFE7
   765                           postinc1	equ	0xFE6
   766                           postdec1	equ	0xFE5
   767                           plusw1	equ	0xFE3
   768                           fsr1h	equ	0xFE2
   769                           fsr1l	equ	0xFE1
   770                           indf2	equ	0xFDF
   771                           postinc2	equ	0xFDE
   772                           postdec2	equ	0xFDD
   773                           plusw2	equ	0xFDB
   774                           fsr2h	equ	0xFDA
   775                           fsr2l	equ	0xFD9
   776                           status	equ	0xFD8
   777                           
   778                           	psect	bssBANK1
   779  000100                     __pbssBANK1:
   780                           	opt stack 0
   781  000100                     _buffer_serial:
   782                           	opt stack 0
   783  000100                     	ds	80
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           prodh	equ	0xFF4
   789                           prodl	equ	0xFF3
   790                           intcon	equ	0xFF2
   791                           intcon2	equ	0xFF1
   792                           postinc0	equ	0xFEE
   793                           wreg	equ	0xFE8
   794                           indf1	equ	0xFE7
   795                           postinc1	equ	0xFE6
   796                           postdec1	equ	0xFE5
   797                           plusw1	equ	0xFE3
   798                           fsr1h	equ	0xFE2
   799                           fsr1l	equ	0xFE1
   800                           indf2	equ	0xFDF
   801                           postinc2	equ	0xFDE
   802                           postdec2	equ	0xFDD
   803                           plusw2	equ	0xFDB
   804                           fsr2h	equ	0xFDA
   805                           fsr2l	equ	0xFD9
   806                           status	equ	0xFD8
   807                           
   808                           	psect	bssBIGRAM
   809  000150                     __pbssBIGRAM:
   810                           	opt stack 0
   811  000150                     _senha:
   812                           	opt stack 0
   813  000150                     	ds	272
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           prodh	equ	0xFF4
   819                           prodl	equ	0xFF3
   820                           intcon	equ	0xFF2
   821                           intcon2	equ	0xFF1
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           indf1	equ	0xFE7
   825                           postinc1	equ	0xFE6
   826                           postdec1	equ	0xFE5
   827                           plusw1	equ	0xFE3
   828                           fsr1h	equ	0xFE2
   829                           fsr1l	equ	0xFE1
   830                           indf2	equ	0xFDF
   831                           postinc2	equ	0xFDE
   832                           postdec2	equ	0xFDD
   833                           plusw2	equ	0xFDB
   834                           fsr2h	equ	0xFDA
   835                           fsr2l	equ	0xFD9
   836                           status	equ	0xFD8
   837                           
   838                           	psect	cstackBANK0
   839  000060                     __pcstackBANK0:
   840                           	opt stack 0
   841  000060                     ??_isdigit:
   842  000060                     ?___wmul:
   843                           	opt stack 0
   844  000060                     ?___awmod:
   845                           	opt stack 0
   846  000060                     ?___lwdiv:
   847                           	opt stack 0
   848  000060                     ascii_para_numero@caractere2:
   849                           	opt stack 0
   850  000060                     resetar_timer1@valor_l:
   851                           	opt stack 0
   852  000060                     config_serial@baud:
   853                           	opt stack 0
   854  000060                     enviar_caractere_serial@carater_a_enviar:
   855                           	opt stack 0
   856  000060                     lcd_write@c:
   857                           	opt stack 0
   858  000060                     ___lbdiv@divisor:
   859                           	opt stack 0
   860  000060                     zerar_string@string_a_zerar:
   861                           	opt stack 0
   862  000060                     delay_ms@delay_total:
   863                           	opt stack 0
   864  000060                     enviar_string_serial@string_a_enviar:
   865                           	opt stack 0
   866  000060                     Read_b_eep@badd:
   867                           	opt stack 0
   868  000060                     Write_b_eep@badd:
   869                           	opt stack 0
   870  000060                     ___wmul@multiplier:
   871                           	opt stack 0
   872  000060                     ___awmod@dividend:
   873                           	opt stack 0
   874  000060                     ___lwdiv@dividend:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x0
   878  000060                     	ds	1
   879  000061                     ??_lcd_clear:
   880  000061                     ascii_para_numero@caractere1:
   881                           	opt stack 0
   882  000061                     resetar_timer1@valor_h:
   883                           	opt stack 0
   884  000061                     lcd_gotoxy@coluna:
   885                           	opt stack 0
   886  000061                     _isdigit$1538:
   887                           	opt stack 0
   888  000061                     ___lbdiv@dividend:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x1
   892  000061                     	ds	1
   893  000062                     ??_lcd_gotoxy:
   894  000062                     ??_lcd_init:
   895  000062                     ??_delay_ms:
   896  000062                     ascii_para_numero@caractere3:
   897                           	opt stack 0
   898  000062                     verificar_num_contas@qtd_contas:
   899                           	opt stack 0
   900  000062                     Write_b_eep@bdat:
   901                           	opt stack 0
   902  000062                     isdigit@c:
   903                           	opt stack 0
   904  000062                     ___lbdiv@counter:
   905                           	opt stack 0
   906  000062                     carregar_senha@senha_a_carregar:
   907                           	opt stack 0
   908  000062                     ___wmul@multiplicand:
   909                           	opt stack 0
   910  000062                     ___awmod@divisor:
   911                           	opt stack 0
   912  000062                     ___lwdiv@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x2
   916  000062                     	ds	1
   917  000063                     ascii_para_numero@numero:
   918                           	opt stack 0
   919  000063                     verificar_num_contas@i:
   920                           	opt stack 0
   921  000063                     lcd_init@definir_tipo_lcd:
   922                           	opt stack 0
   923  000063                     lcd_gotoxy@linha:
   924                           	opt stack 0
   925  000063                     Write_b_eep@GIE_BIT_VAL:
   926                           	opt stack 0
   927  000063                     ___lbdiv@quotient:
   928                           	opt stack 0
   929  000063                     delay_ms@temp:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x3
   933  000063                     	ds	1
   934  000064                     ??_carregar_senha:
   935  000064                     eeprom_config_inicial@i:
   936                           	opt stack 0
   937  000064                     limpar_linha@linha:
   938                           	opt stack 0
   939  000064                     lcd_putc@c:
   940                           	opt stack 0
   941  000064                     ___awmod@counter:
   942                           	opt stack 0
   943  000064                     ___lwdiv@counter:
   944                           	opt stack 0
   945  000064                     ___wmul@product:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x4
   949  000064                     	ds	1
   950  000065                     limpar_linha@coluna_atual:
   951                           	opt stack 0
   952  000065                     putch@c:
   953                           	opt stack 0
   954  000065                     ___awmod@sign:
   955                           	opt stack 0
   956  000065                     ___lwdiv@quotient:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x5
   960  000065                     	ds	1
   961  000066                     ?___awdiv:
   962                           	opt stack 0
   963  000066                     ___awdiv@dividend:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x6
   967  000066                     	ds	1
   968  000067                     ?___lwmod:
   969                           	opt stack 0
   970  000067                     ___lwmod@dividend:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x7
   974  000067                     	ds	1
   975  000068                     carregar_senha@i:
   976                           	opt stack 0
   977  000068                     ___awdiv@divisor:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x8
   981  000068                     	ds	1
   982  000069                     carregar_senha@conta:
   983                           	opt stack 0
   984  000069                     ___lwmod@divisor:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x9
   988  000069                     	ds	1
   989  00006A                     ___awdiv@counter:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0xA
   993  00006A                     	ds	1
   994  00006B                     ___awdiv@sign:
   995                           	opt stack 0
   996  00006B                     ___lwmod@counter:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0xB
  1000  00006B                     	ds	1
  1001  00006C                     ?_printf:
  1002                           	opt stack 0
  1003  00006C                     dia_da_semana@ano:
  1004                           	opt stack 0
  1005  00006C                     ___awdiv@quotient:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xC
  1009  00006C                     	ds	2
  1010  00006E                     ??_numero_para_ascii:
  1011  00006E                     dia_da_semana@mes:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0xE
  1015  00006E                     	ds	1
  1016  00006F                     dia_da_semana@dia:
  1017                           	opt stack 0
  1018  00006F                     numero_para_ascii@temp2:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0xF
  1022  00006F                     	ds	1
  1023  000070                     ??_dia_da_semana:
  1024                           
  1025                           ; 0 bytes @ 0x10
  1026  000070                     	ds	1
  1027  000071                     numero_para_ascii@numero:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x11
  1031  000071                     	ds	1
  1032  000072                     numero_para_ascii@temp1:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x12
  1036  000072                     	ds	3
  1037  000075                     dia_da_semana@tabela_mes:
  1038                           	opt stack 0
  1039                           
  1040                           ; 12 bytes @ 0x15
  1041  000075                     	ds	3
  1042  000078                     ??_printf:
  1043                           
  1044                           ; 0 bytes @ 0x18
  1045  000078                     	ds	4
  1046  00007C                     printf@prec:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x1C
  1050  00007C                     	ds	1
  1051  00007D                     printf@cp:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x1D
  1055  00007D                     	ds	2
  1056  00007F                     printf@ap:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x1F
  1060  00007F                     	ds	1
  1061  000080                     printf@val:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x20
  1065  000080                     	ds	1
  1066  000081                     dia_da_semana@seculo:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x21
  1070  000081                     	ds	1
  1071  000082                     printf@len:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x22
  1075  000082                     	ds	2
  1076  000084                     printf@flag:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x24
  1080  000084                     	ds	1
  1081  000085                     printf@f:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x25
  1085  000085                     	ds	1
  1086  000086                     printf@width:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x26
  1090  000086                     	ds	2
  1091  000088                     printf@c:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x28
  1095  000088                     	ds	1
  1096  000089                     ??_main:
  1097                           
  1098                           ; 0 bytes @ 0x29
  1099  000089                     	ds	6
  1100  00008F                     main@endereco_modulo_repasse:
  1101                           	opt stack 0
  1102                           
  1103                           ; 18 bytes @ 0x2F
  1104  00008F                     	ds	18
  1105  0000A1                     main@tentativas:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x41
  1109  0000A1                     	ds	1
  1110  0000A2                     main@tentativas_839:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x42
  1114  0000A2                     	ds	1
  1115  0000A3                     main@contas_cadastradas:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x43
  1119  0000A3                     	ds	2
  1120  0000A5                     main@qtd_total_contas:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x45
  1124  0000A5                     	ds	1
  1125  0000A6                     main@conta_a_ser_alterada:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x46
  1129  0000A6                     	ds	2
  1130  0000A8                     main@ultimo_caractere_recebido:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x48
  1134  0000A8                     	ds	1
  1135  0000A9                     main@i_838:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x49
  1139  0000A9                     	ds	1
  1140  0000AA                     main@etapa:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x4A
  1144  0000AA                     	ds	1
  1145  0000AB                     main@conta:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x4B
  1149  0000AB                     	ds	1
  1150  0000AC                     main@ordem:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x4C
  1154  0000AC                     	ds	1
  1155  0000AD                     main@funcao:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x4D
  1159  0000AD                     	ds	1
  1160  0000AE                     main@cont:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x4E
  1164  0000AE                     	ds	1
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           prodh	equ	0xFF4
  1170                           prodl	equ	0xFF3
  1171                           intcon	equ	0xFF2
  1172                           intcon2	equ	0xFF1
  1173                           postinc0	equ	0xFEE
  1174                           wreg	equ	0xFE8
  1175                           indf1	equ	0xFE7
  1176                           postinc1	equ	0xFE6
  1177                           postdec1	equ	0xFE5
  1178                           plusw1	equ	0xFE3
  1179                           fsr1h	equ	0xFE2
  1180                           fsr1l	equ	0xFE1
  1181                           indf2	equ	0xFDF
  1182                           postinc2	equ	0xFDE
  1183                           postdec2	equ	0xFDD
  1184                           plusw2	equ	0xFDB
  1185                           fsr2h	equ	0xFDA
  1186                           fsr2l	equ	0xFD9
  1187                           status	equ	0xFD8
  1188                           
  1189                           	psect	cstackCOMRAM
  1190  000001                     __pcstackCOMRAM:
  1191                           	opt stack 0
  1192  000001                     ??i2_isdigit:
  1193  000001                     ?i2_printf:
  1194                           	opt stack 0
  1195  000001                     ?i2___wmul:
  1196                           	opt stack 0
  1197  000001                     ?i2___lwdiv:
  1198                           	opt stack 0
  1199  000001                     teclado_matricial@linha:
  1200                           	opt stack 0
  1201  000001                     i2resetar_timer1@valor_l:
  1202                           	opt stack 0
  1203  000001                     i2lcd_write@c:
  1204                           	opt stack 0
  1205  000001                     i2___wmul@multiplier:
  1206                           	opt stack 0
  1207  000001                     i2___lwdiv@dividend:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x0
  1211  000001                     	ds	1
  1212  000002                     ??i2_lcd_clear:
  1213  000002                     teclado_matricial@coluna:
  1214                           	opt stack 0
  1215  000002                     i2resetar_timer1@valor_h:
  1216                           	opt stack 0
  1217  000002                     i2lcd_gotoxy@coluna:
  1218                           	opt stack 0
  1219  000002                     i2_isdigit$1538:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x1
  1223  000002                     	ds	1
  1224  000003                     ??i2_lcd_gotoxy:
  1225  000003                     teclado_matricial@temp:
  1226                           	opt stack 0
  1227  000003                     i2isdigit@c:
  1228                           	opt stack 0
  1229  000003                     i2___wmul@multiplicand:
  1230                           	opt stack 0
  1231  000003                     i2___lwdiv@divisor:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x2
  1235  000003                     	ds	1
  1236  000004                     teclado_matricial@caractere:
  1237                           	opt stack 0
  1238  000004                     i2lcd_gotoxy@linha:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x3
  1242  000004                     	ds	1
  1243  000005                     i2lcd_putc@c:
  1244                           	opt stack 0
  1245  000005                     i2___wmul@product:
  1246                           	opt stack 0
  1247  000005                     i2___lwdiv@quotient:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x4
  1251  000005                     	ds	1
  1252  000006                     i2putch@c:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x5
  1256  000006                     	ds	1
  1257  000007                     i2___lwdiv@counter:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x6
  1261  000007                     	ds	1
  1262  000008                     ?i2___lwmod:
  1263                           	opt stack 0
  1264  000008                     i2___lwmod@dividend:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x7
  1268  000008                     	ds	2
  1269  00000A                     i2___lwmod@divisor:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x9
  1273  00000A                     	ds	2
  1274  00000C                     i2___lwmod@counter:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0xB
  1278  00000C                     	ds	1
  1279  00000D                     ??i2_printf:
  1280                           
  1281                           ; 0 bytes @ 0xC
  1282  00000D                     	ds	4
  1283  000011                     i2printf@f:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x10
  1287  000011                     	ds	1
  1288  000012                     i2printf@prec:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x11
  1292  000012                     	ds	1
  1293  000013                     i2printf@cp:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x12
  1297  000013                     	ds	2
  1298  000015                     i2printf@ap:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x14
  1302  000015                     	ds	1
  1303  000016                     i2printf@val:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x15
  1307  000016                     	ds	2
  1308  000018                     i2printf@len:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x17
  1312  000018                     	ds	2
  1313  00001A                     i2printf@flag:
  1314                           	opt stack 0
  1315                           
  1316                           ; 1 bytes @ 0x19
  1317  00001A                     	ds	1
  1318  00001B                     i2printf@width:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x1A
  1322  00001B                     	ds	2
  1323  00001D                     i2printf@c:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x1C
  1327  00001D                     	ds	1
  1328  00001E                     ??_aux:
  1329                           
  1330                           ; 0 bytes @ 0x1D
  1331  00001E                     	ds	13
  1332  00002B                     aux@coluna:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x2A
  1336  00002B                     	ds	1
  1337  00002C                     aux@linha:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x2B
  1341  00002C                     	ds	1
  1342                           tblptru	equ	0xFF8
  1343                           tblptrh	equ	0xFF7
  1344                           tblptrl	equ	0xFF6
  1345                           tablat	equ	0xFF5
  1346                           prodh	equ	0xFF4
  1347                           prodl	equ	0xFF3
  1348                           intcon	equ	0xFF2
  1349                           intcon2	equ	0xFF1
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           indf1	equ	0xFE7
  1353                           postinc1	equ	0xFE6
  1354                           postdec1	equ	0xFE5
  1355                           plusw1	equ	0xFE3
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           indf2	equ	0xFDF
  1359                           postinc2	equ	0xFDE
  1360                           postdec2	equ	0xFDD
  1361                           plusw2	equ	0xFDB
  1362                           fsr2h	equ	0xFDA
  1363                           fsr2l	equ	0xFD9
  1364                           status	equ	0xFD8
  1365                           
  1366 ;;
  1367 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1368 ;;
  1369 ;; *************** function _main *****************
  1370 ;; Defined at:
  1371 ;;		line 309 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  tentativas      1   66[BANK0 ] unsigned char 
  1376 ;;  i               1   73[BANK0 ] unsigned char 
  1377 ;;  tentativas      1   65[BANK0 ] unsigned char 
  1378 ;;  endereco_mod   18   47[BANK0 ] unsigned char [18]
  1379 ;;  i               1    0        unsigned char 
  1380 ;;  contas_cadas    2   67[BANK0 ] int 
  1381 ;;  cont            1   78[BANK0 ] unsigned char 
  1382 ;;  funcao          1   77[BANK0 ] unsigned char 
  1383 ;;  ordem           1   76[BANK0 ] unsigned char 
  1384 ;;  conta           1   75[BANK0 ] unsigned char 
  1385 ;;  etapa           1   74[BANK0 ] unsigned char 
  1386 ;;  ultimo_carac    1   72[BANK0 ] unsigned char 
  1387 ;;  conta_a_ser_    1   70[BANK0 ] unsigned char 
  1388 ;;  qtd_total_co    1   69[BANK0 ] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  2  252[None  ] int 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1398 ;;      Params:         0       0       0       0       0       0       0       0       0
  1399 ;;      Locals:         0      32       0       0       0       0       0       0       0
  1400 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1401 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1402 ;;Total ram usage:       38 bytes
  1403 ;; Hardware stack levels required when called:   11
  1404 ;; This function calls:
  1405 ;;		_Busy_eep
  1406 ;;		_Read_b_eep
  1407 ;;		_Write_b_eep
  1408 ;;		___awmod
  1409 ;;		_ascii_para_numero
  1410 ;;		_carregar_senha
  1411 ;;		_config_serial
  1412 ;;		_delay_ms
  1413 ;;		_dia_da_semana
  1414 ;;		_eeprom_config_inicial
  1415 ;;		_enviar_caractere_serial
  1416 ;;		_enviar_string_serial
  1417 ;;		_lcd_gotoxy
  1418 ;;		_lcd_init
  1419 ;;		_limpar_linha
  1420 ;;		_numero_para_ascii
  1421 ;;		_printf
  1422 ;;		_resetar_timer1
  1423 ;;		_verificar_num_contas
  1424 ;;		_zerar_string
  1425 ;; This function is called by:
  1426 ;;		Startup code after reset
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text0
  1431  0011FA                     __ptext0:
  1432                           	opt stack 0
  1433  0011FA                     _main:
  1434                           	opt stack 20
  1435                           
  1436                           ;main.c: 313: unsigned char ordem = 0;
  1437                           
  1438                           ;incstack = 0
  1439  0011FA  0100               	movlb	0	; () banked
  1440  0011FC  6BAC               	clrf	main@ordem& (0+255),b
  1441                           
  1442                           ;main.c: 314: unsigned char etapa=0;
  1443  0011FE  6BAA               	clrf	main@etapa& (0+255),b
  1444                           
  1445                           ;main.c: 315: unsigned char funcao=0;
  1446  001200  6BAD               	clrf	main@funcao& (0+255),b
  1447                           
  1448                           ;main.c: 317: unsigned char conta_a_ser_alterada=0;
  1449  001202  6BA6               	clrf	main@conta_a_ser_alterada& (0+255),b
  1450                           
  1451                           ;main.c: 318: unsigned char cont=0;
  1452  001204  6BAE               	clrf	main@cont& (0+255),b
  1453                           
  1454                           ;main.c: 319: unsigned char qtd_total_contas=0;
  1455  001206  6BA5               	clrf	main@qtd_total_contas& (0+255),b
  1456                           
  1457                           ;main.c: 320: unsigned char ultimo_caractere_recebido=0;
  1458  001208  6BA8               	clrf	main@ultimo_caractere_recebido& (0+255),b
  1459                           
  1460                           ;main.c: 321: int contas_cadastradas=0;
  1461  00120A  6BA3               	clrf	main@contas_cadastradas& (0+255),b
  1462  00120C  6BA4               	clrf	(main@contas_cadastradas+1)& (0+255),b
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 323: OSCCON=0XF0;
  1466  00120E  0EF0               	movlw	240
  1467  001210  6ED3               	movwf	4051,c	;volatile
  1468                           
  1469                           ;main.c: 326: INTCON = 0b11100000;
  1470  001212  0EE0               	movlw	224
  1471  001214  6EF2               	movwf	intcon,c	;volatile
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;main.c: 327: INTCON2 =0b00000000;
  1475  001216  6AF1               	clrf	intcon2,c	;volatile
  1476                           
  1477                           ;main.c: 328: PIE1=0b00100001;
  1478  001218  0E21               	movlw	33
  1479  00121A  6E9D               	movwf	3997,c	;volatile
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;main.c: 329: RCONbits.IPEN = 0;
  1483  00121C  9ED0               	bcf	4048,7,c	;volatile
  1484                           
  1485                           ;main.c: 333: T0CON = 0b10000111;
  1486  00121E  0E87               	movlw	135
  1487  001220  6ED5               	movwf	4053,c	;volatile
  1488                           
  1489                           ;main.c: 334: TMR0H=0xC2;
  1490  001222  0EC2               	movlw	194
  1491  001224  6ED7               	movwf	4055,c	;volatile
  1492                           
  1493                           ;main.c: 335: TMR0L= 0xF7;
  1494  001226  0EF7               	movlw	247
  1495  001228  6ED6               	movwf	4054,c	;volatile
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;main.c: 338: LATD=0;
  1499  00122A  6A8C               	clrf	3980,c	;volatile
  1500                           
  1501                           ;main.c: 342: TRISB=0xF0;
  1502  00122C  0EF0               	movlw	240
  1503  00122E  6E93               	movwf	3987,c	;volatile
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 343: TRISA=0x00;
  1507  001230  6A92               	clrf	3986,c	;volatile
  1508                           
  1509                           ;main.c: 344: TRISE=0X04;
  1510  001232  0E04               	movlw	4
  1511  001234  6E96               	movwf	3990,c	;volatile
  1512                           
  1513                           ;main.c: 345: LATB=0x0F;
  1514  001236  0E0F               	movlw	15
  1515  001238  6E8A               	movwf	3978,c	;volatile
  1516                           
  1517                           ;main.c: 346: TRISC=0xDF;
  1518  00123A  0EDF               	movlw	223
  1519  00123C  6E94               	movwf	3988,c	;volatile
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 347: TRISD=0x00;
  1523  00123E  6A95               	clrf	3989,c	;volatile
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;main.c: 348: ADCON1=0XFF;
  1527  001240  68C1               	setf	4033,c	;volatile
  1528                           
  1529                           ;main.c: 349: CMCON=0X07;
  1530  001242  0E07               	movlw	7
  1531  001244  6EB4               	movwf	4020,c	;volatile
  1532                           
  1533                           ;main.c: 352: T1CON = 0b00001110;
  1534  001246  0E0E               	movlw	14
  1535  001248  6ECD               	movwf	4045,c	;volatile
  1536                           
  1537                           ;main.c: 353: TMR1H=0XC0;
  1538  00124A  0EC0               	movlw	192
  1539  00124C  6ECF               	movwf	4047,c	;volatile
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;main.c: 354: TMR1L=0;
  1543  00124E  6ACE               	clrf	4046,c	;volatile
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;main.c: 357: if(Read_b_eep(0) == 0xFF) eeprom_config_inicial();
  1547  001250  6B61               	clrf	(Read_b_eep@badd+1)& (0+255),b
  1548  001252  6B60               	clrf	Read_b_eep@badd& (0+255),b
  1549  001254  EC39  F017         	call	_Read_b_eep	;wreg free
  1550  001258  0AFF               	xorlw	255
  1551  00125A  B4D8               	btfsc	status,2,c
  1552  00125C  EC49  F013         	call	_eeprom_config_inicial	;wreg free
  1553                           
  1554                           ;main.c: 359: config_serial(35);
  1555  001260  0E23               	movlw	35
  1556  001262  ECE2  F016         	call	_config_serial
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;main.c: 362: qtd_total_contas = verificar_num_contas();
  1560  001266  EC5D  F016         	call	_verificar_num_contas	;wreg free
  1561  00126A  6FA5               	movwf	main@qtd_total_contas& (0+255),b
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 365: numero_para_ascii(qtd_total_contas);
  1565  00126C  51A5               	movf	main@qtd_total_contas& (0+255),w,b
  1566  00126E  EC8D  F013         	call	_numero_para_ascii
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 367: for(conta=0;conta<qtd_total_contas;conta++){
  1570  001272  6BAB               	clrf	main@conta& (0+255),b
  1571  001274  D020               	goto	l5562
  1572  001276                     l5552:
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;main.c: 368: carregar_senha(conta,senha);
  1576  001276  0E50               	movlw	low _senha
  1577  001278  6F62               	movwf	carregar_senha@senha_a_carregar& (0+255),b
  1578  00127A  0E01               	movlw	high _senha
  1579  00127C  6F63               	movwf	(carregar_senha@senha_a_carregar+1)& (0+255),b
  1580  00127E  51AB               	movf	main@conta& (0+255),w,b
  1581  001280  ECFF  F012         	call	_carregar_senha
  1582                           
  1583                           ;main.c: 370: enviar_string_serial(&senha[conta][0]);
  1584  001284  0100               	movlb	0	; () banked
  1585  001286  51AB               	movf	main@conta& (0+255),w,b
  1586  001288  0D11               	mullw	17
  1587  00128A  0E50               	movlw	low _senha
  1588  00128C  24F3               	addwf	prodl,w,c
  1589  00128E  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1590  001290  0E01               	movlw	high _senha
  1591  001292  20F4               	addwfc	prodh,w,c
  1592  001294  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1593  001296  EC16  F015         	call	_enviar_string_serial	;wreg free
  1594                           
  1595                           ;main.c: 371: numero_para_ascii(senha[conta][16-1]);
  1596  00129A  0100               	movlb	0	; () banked
  1597  00129C  ECAE  F00D         	call	PL6	;call to abstracted procedure
  1598  0012A0  EC8D  F013         	call	_numero_para_ascii
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 373: (contas_cadastradas |= (1<<conta));
  1602  0012A4  C0AB  F089         	movff	main@conta,??_main
  1603  0012A8  ECA2  F00D         	call	PL4	;call to abstracted procedure
  1604  0012AC  518A               	movf	(??_main+1)& (0+255),w,b
  1605  0012AE  13A3               	iorwf	main@contas_cadastradas& (0+255),f,b
  1606  0012B0  518B               	movf	(??_main+2)& (0+255),w,b
  1607  0012B2  13A4               	iorwf	(main@contas_cadastradas+1)& (0+255),f,b
  1608                           
  1609                           ; BSR set to: 0
  1610  0012B4  2BAB               	incf	main@conta& (0+255),f,b
  1611  0012B6                     l5562:
  1612                           
  1613                           ; BSR set to: 0
  1614  0012B6  51A5               	movf	main@qtd_total_contas& (0+255),w,b
  1615  0012B8  5DAB               	subwf	main@conta& (0+255),w,b
  1616  0012BA  E3DD               	bnc	l5552
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;main.c: 374: }
  1620                           ;main.c: 377: conta=0;
  1621  0012BC  6BAB               	clrf	main@conta& (0+255),b
  1622                           
  1623                           ;main.c: 378: RCIE=1;
  1624  0012BE  8A9D               	bsf	3997,5,c	;volatile
  1625                           
  1626                           ;main.c: 379: _delay((unsigned long)((1)*(16000000/4000000.0)));
  1627  0012C0  D000               	nop2		;2 cycle nop
  1628  0012C2  D000               	nop2		;2 cycle nop
  1629                           
  1630                           ;main.c: 380: data_atual.ano=0;
  1631  0012C4  6A38               	clrf	_data_atual,c
  1632                           
  1633                           ;main.c: 381: data_atual.mes= 1;
  1634  0012C6  0E01               	movlw	1
  1635  0012C8  6E39               	movwf	_data_atual+1,c
  1636                           
  1637                           ;main.c: 382: data_atual.dia=1;
  1638  0012CA  6E3A               	movwf	_data_atual+2,c
  1639                           
  1640                           ;main.c: 383: data_atual.dia_da_semana= dia_da_semana(data_atual.ano,data_atual.mes,data
      +                          _atual.dia);
  1641  0012CC  C038  F06C         	movff	_data_atual,dia_da_semana@ano
  1642  0012D0  0100               	movlb	0	; () banked
  1643  0012D2  6B6D               	clrf	(dia_da_semana@ano+1)& (0+255),b
  1644  0012D4  C039  F06E         	movff	_data_atual+1,dia_da_semana@mes
  1645  0012D8  C03A  F06F         	movff	_data_atual+2,dia_da_semana@dia
  1646  0012DC  ECE8  F011         	call	_dia_da_semana	;wreg free
  1647  0012E0  6E3E               	movwf	_data_atual+6,c
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;main.c: 384: data_atual.hora=0;
  1651  0012E2  6A3B               	clrf	_data_atual+3,c
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 385: data_atual.minuto=0;
  1655  0012E4  6A3C               	clrf	_data_atual+4,c
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 386: data_atual.segundo=0;
  1659  0012E6  6A3D               	clrf	_data_atual+5,c
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 387: PORTB_SR=PORTB;
  1663  0012E8  CF81 F031          	movff	3969,_PORTB_SR	;volatile
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;main.c: 388: RBIE=1;
  1667  0012EC  86F2               	bsf	intcon,3,c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;main.c: 389: RBIF=0;
  1671  0012EE  90F2               	bcf	intcon,0,c	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 390: cont=0;
  1675  0012F0  6BAE               	clrf	main@cont& (0+255),b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 392: lcd_init(3);
  1679  0012F2  0E03               	movlw	3
  1680  0012F4  EC5F  F012         	call	_lcd_init
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 393: lcd_gotoxy(1,20);
  1684  0012F8  0E14               	movlw	20
  1685  0012FA  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  1686  0012FC  0E01               	movlw	1
  1687  0012FE  EC41  F015         	call	_lcd_gotoxy
  1688  001302  0E01               	movlw	1
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 394: printf("%c",!PORTEbits.RE2);
  1692  001304  B484               	btfsc	3972,2,c	;volatile
  1693  001306  0E00               	movlw	0
  1694  001308  6F6C               	movwf	?_printf& (0+255),b
  1695  00130A  6B6D               	clrf	(?_printf+1)& (0+255),b
  1696  00130C  0EE6               	movlw	(STR_6+1)& (0+255)
  1697  00130E  ECDC  F00D         	call	_printf
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 395: lcd_gotoxy(1,1);
  1701  001312  0E01               	movlw	1
  1702  001314  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  1703  001316  EC41  F015         	call	_lcd_gotoxy
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;main.c: 396: LATEbits.LE0=1;
  1707  00131A  808D               	bsf	3981,0,c	;volatile
  1708  00131C                     l5592:
  1709                           
  1710                           ;main.c: 400: if((FLAGS_2 & (1<<1))){
  1711  00131C  A22D               	btfss	_FLAGS_2,1,c
  1712  00131E  D231               	goto	l5912
  1713                           
  1714                           ;main.c: 403: (FLAGS_2 &= ~(1<<1));
  1715  001320  922D               	bcf	_FLAGS_2,1,c
  1716                           
  1717                           ;main.c: 404: if((!((FLAGS_3 & (1<<3))))){
  1718  001322  B62E               	btfsc	_FLAGS_3,3,c
  1719  001324  D17E               	goto	l259
  1720                           
  1721                           ;main.c: 406: enviar_caractere_serial('\n');
  1722  001326  0E0A               	movlw	10
  1723  001328  EC49  F017         	call	_enviar_caractere_serial
  1724                           
  1725                           ;main.c: 408: enviar_string_serial(buffer_serial);
  1726  00132C  0E00               	movlw	low _buffer_serial
  1727  00132E  0100               	movlb	0	; () banked
  1728  001330  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1729  001332  0E01               	movlw	high _buffer_serial
  1730  001334  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1731  001336  EC16  F015         	call	_enviar_string_serial	;wreg free
  1732                           
  1733                           ;main.c: 410: enviar_caractere_serial('\n');
  1734  00133A  0E0A               	movlw	10
  1735  00133C  EC49  F017         	call	_enviar_caractere_serial
  1736                           
  1737                           ;main.c: 429: else{
  1738                           ;main.c: 430: for(cont=0;cont<qtd_caracteres_recebidos_serial;cont++){
  1739                           
  1740                           ;main.c: 412: if(0){
  1741  001340  0100               	movlb	0	; () banked
  1742  001342  6BAE               	clrf	main@cont& (0+255),b
  1743  001344  D169               	goto	l5826
  1744  001346                     l266:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 433: if((FLAGS_1 & (1<<0))){
  1748  001346  A1B1               	btfss	_FLAGS_1& (0+255),0,b
  1749  001348  D00A               	goto	l5634
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 435: if(buffer_serial[cont] != '>') {
  1753  00134A  DBF5               	call	PL2	;call to abstracted procedure
  1754  00134C  0E3E               	movlw	62
  1755  00134E  18DE               	xorwf	postinc2,w,c
  1756  001350  E002               	bz	l5630
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;main.c: 436: (FLAGS_1 |= (1<<7));}
  1760  001352  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  1761  001354  D157               	goto	l5814
  1762  001356                     l5630:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 438: else{
  1766                           ;main.c: 439: (FLAGS_1 &= ~(1<<0));
  1767  001356  91B1               	bcf	_FLAGS_1& (0+255),0,b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 440: ordem=0;
  1771  001358  6BAC               	clrf	main@ordem& (0+255),b
  1772                           
  1773                           ;main.c: 441: etapa++;}
  1774  00135A  2BAA               	incf	main@etapa& (0+255),f,b
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 443: }
  1778  00135C  D153               	goto	l5814
  1779  00135E                     l5634:
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 445: else if(etapa == 0){
  1783  00135E  51AA               	movf	main@etapa& (0+255),w,b
  1784  001360  E107               	bnz	l5640
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 447: if(buffer_serial[cont] != 'I') {(FLAGS_1 |= (1<<7));}
  1788  001362  DBE9               	call	PL2	;call to abstracted procedure
  1789  001364  0E49               	movlw	73
  1790  001366  18DE               	xorwf	postinc2,w,c
  1791  001368  A4D8               	btfss	status,2,c
  1792                           
  1793                           ; BSR set to: 0
  1794  00136A  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  1795  00136C                     l272:
  1796                           
  1797                           ;main.c: 449: (FLAGS_1 |= (1<<0));
  1798  00136C  0100               	movlb	0	; () banked
  1799  00136E  D078               	goto	L1
  1800  001370                     l5640:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;main.c: 452: else if(etapa == 1){
  1804  001370  05AA               	decf	main@etapa& (0+255),w,b
  1805  001372  E150               	bnz	l5672
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 454: funcao = buffer_serial[cont++];
  1809  001374  DBE0               	call	PL2	;call to abstracted procedure
  1810  001376  50DF               	movf	indf2,w,c
  1811  001378  6FAD               	movwf	main@funcao& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814  00137A  2BAE               	incf	main@cont& (0+255),f,b
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;main.c: 457: if(funcao<'0' || funcao>'7') {(FLAGS_1 |= (1<<7));}
  1818  00137C  0E2F               	movlw	47
  1819  00137E  65AD               	cpfsgt	main@funcao& (0+255),b
  1820  001380  D003               	goto	l5650
  1821                           
  1822                           ; BSR set to: 0
  1823  001382  0E37               	movlw	55
  1824  001384  65AD               	cpfsgt	main@funcao& (0+255),b
  1825  001386  D001               	goto	l5652
  1826  001388                     l5650:
  1827                           
  1828                           ; BSR set to: 0
  1829  001388  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  1830  00138A                     l5652:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 461: conta = ascii_para_numero('0',(buffer_serial[cont]),(buffer_serial[++cont]
      +                          ) );
  1834  00138A  DBD5               	call	PL2	;call to abstracted procedure
  1835  00138C  50DF               	movf	indf2,w,c
  1836  00138E  6F60               	movwf	ascii_para_numero@caractere2& (0+255),b
  1837  001390  2BAE               	incf	main@cont& (0+255),f,b
  1838  001392  DBD1               	call	PL2	;call to abstracted procedure
  1839  001394  50DF               	movf	indf2,w,c
  1840  001396  6F61               	movwf	ascii_para_numero@caractere1& (0+255),b
  1841  001398  0E30               	movlw	48
  1842  00139A  ECF3  F016         	call	_ascii_para_numero
  1843  00139E  6FAB               	movwf	main@conta& (0+255),b
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 466: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  1847  0013A0  0E0F               	movlw	15
  1848  0013A2  65AB               	cpfsgt	main@conta& (0+255),b
  1849  0013A4  D002               	goto	l5658
  1850  0013A6                     l5656:
  1851                           
  1852                           ; BSR set to: 0
  1853  0013A6  85B1               	bsf	_FLAGS_1& (0+255),2,b
  1854  0013A8  D008               	goto	l5664
  1855  0013AA                     l5658:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 471: else if(funcao != '6' && (!(contas_cadastradas & (1<<conta))) ){
  1859  0013AA  0E36               	movlw	54
  1860  0013AC  19AD               	xorwf	main@funcao& (0+255),w,b
  1861  0013AE  E005               	bz	l5664
  1862                           
  1863                           ; BSR set to: 0
  1864  0013B0  C0AB  F089         	movff	main@conta,??_main
  1865  0013B4  DBC7               	call	PL4	;call to abstracted procedure
  1866  0013B6  DBF9               	call	PL34	;call to abstracted procedure
  1867  0013B8  E0F6               	bz	l5656
  1868  0013BA                     l5664:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;main.c: 474: if(!((senha[conta][16-1] & (1<<ascii_para_numero('0','0',funcao)))) ) {
  1872  0013BA  DBD0               	call	PL6	;call to abstracted procedure
  1873  0013BC  6F89               	movwf	??_main& (0+255),b
  1874  0013BE  0E30               	movlw	48
  1875  0013C0  6F60               	movwf	ascii_para_numero@caractere2& (0+255),b
  1876  0013C2  C0AD  F061         	movff	main@funcao,ascii_para_numero@caractere1
  1877  0013C6  ECF3  F016         	call	_ascii_para_numero
  1878  0013CA  6F8A               	movwf	(??_main+1)& (0+255),b
  1879  0013CC  0E01               	movlw	1
  1880  0013CE  6F8B               	movwf	(??_main+2)& (0+255),b
  1881  0013D0  2B8A               	incf	(??_main+1)& (0+255),f,b
  1882  0013D2  D002               	goto	u6484
  1883  0013D4                     u6485:
  1884  0013D4  90D8               	bcf	status,0,c
  1885  0013D6  378B               	rlcf	(??_main+2)& (0+255),f,b
  1886  0013D8                     u6484:
  1887  0013D8  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1888  0013DA  D7FC               	goto	u6485
  1889  0013DC  0100               	movlb	0	; () banked
  1890  0013DE  518B               	movf	(??_main+2)& (0+255),w,b
  1891  0013E0  1589               	andwf	??_main& (0+255),w,b
  1892  0013E2  E1C4               	bnz	l272
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 475: (FLAGS_1 |= (1<<3));
  1896  0013E4  87B1               	bsf	_FLAGS_1& (0+255),3,b
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 476: numero_para_ascii(((senha[conta][16-1] & (1<<(funcao-'0'))) ));
  1900  0013E6  DBBA               	call	PL6	;call to abstracted procedure
  1901  0013E8  6F89               	movwf	??_main& (0+255),b
  1902  0013EA  C0AD  F08A         	movff	main@funcao,??_main+1
  1903  0013EE  0ED0               	movlw	208
  1904  0013F0  278A               	addwf	(??_main+1)& (0+255),f,b
  1905  0013F2  0E01               	movlw	1
  1906  0013F4  6F8B               	movwf	(??_main+2)& (0+255),b
  1907  0013F6  2B8A               	incf	(??_main+1)& (0+255),f,b
  1908  0013F8  D002               	goto	u6504
  1909  0013FA                     u6505:
  1910  0013FA  90D8               	bcf	status,0,c
  1911  0013FC  378B               	rlcf	(??_main+2)& (0+255),f,b
  1912  0013FE                     u6504:
  1913  0013FE  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1914  001400  D7FC               	goto	u6505
  1915  001402  0100               	movlb	0	; () banked
  1916  001404  518B               	movf	(??_main+2)& (0+255),w,b
  1917  001406  1589               	andwf	??_main& (0+255),w,b
  1918  001408  EC8D  F013         	call	_numero_para_ascii
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 477: numero_para_ascii(senha[conta][16-1]);}
  1922  00140C  DBA7               	call	PL6	;call to abstracted procedure
  1923  00140E  EC8D  F013         	call	_numero_para_ascii
  1924  001412  D7AC               	goto	l272
  1925  001414                     l5672:
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 485: else if(etapa == 2){
  1929  001414  0E02               	movlw	2
  1930  001416  19AA               	xorwf	main@etapa& (0+255),w,b
  1931  001418  E125               	bnz	l5684
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;main.c: 489: for(ordem=0;senha[conta][ordem]!= 0;ordem++){
  1935  00141A  6BAC               	clrf	main@ordem& (0+255),b
  1936  00141C  D016               	goto	l5680
  1937  00141E                     l5676:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 491: if(senha[conta][ordem] != buffer_serial[cont++]) {
  1941  00141E  DBA8               	call	PL20	;call to abstracted procedure
  1942  001420  51AB               	movf	main@conta& (0+255),w,b
  1943  001422  0D11               	mullw	17
  1944  001424  0E50               	movlw	low _senha
  1945  001426  6F8C               	movwf	(??_main+3)& (0+255),b
  1946  001428  0E01               	movlw	high _senha
  1947  00142A  6F8D               	movwf	(??_main+4)& (0+255),b
  1948  00142C  50F3               	movf	prodl,w,c
  1949  00142E  278C               	addwf	(??_main+3)& (0+255),f,b
  1950  001430  50F4               	movf	prodh,w,c
  1951  001432  238D               	addwfc	(??_main+4)& (0+255),f,b
  1952  001434  51AC               	movf	main@ordem& (0+255),w,b
  1953  001436  258C               	addwf	(??_main+3)& (0+255),w,b
  1954  001438  6EE1               	movwf	fsr1l,c
  1955  00143A  0E00               	movlw	0
  1956  00143C  218D               	addwfc	(??_main+4)& (0+255),w,b
  1957  00143E  6EE2               	movwf	fsr1h,c
  1958  001440  50DE               	movf	postinc2,w,c
  1959  001442  18E6               	xorwf	postinc1,w,c
  1960  001444  A4D8               	btfss	status,2,c
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;main.c: 492: (FLAGS_1 |= (1<<6));
  1964  001446  8DB1               	bsf	_FLAGS_1& (0+255),6,b
  1965                           
  1966                           ; BSR set to: 0
  1967  001448  2BAC               	incf	main@ordem& (0+255),f,b
  1968  00144A                     l5680:
  1969                           
  1970                           ; BSR set to: 0
  1971  00144A  51AB               	movf	main@conta& (0+255),w,b
  1972  00144C  DB9C               	call	PL24	;call to abstracted procedure
  1973  00144E  51AC               	movf	main@ordem& (0+255),w,b
  1974  001450  2589               	addwf	??_main& (0+255),w,b
  1975  001452  6ED9               	movwf	fsr2l,c
  1976  001454  0E00               	movlw	0
  1977  001456  218A               	addwfc	(??_main+1)& (0+255),w,b
  1978  001458  6EDA               	movwf	fsr2h,c
  1979  00145A  50DF               	movf	indf2,w,c
  1980  00145C  E1E0               	bnz	l5676
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 493: }
  1984                           ;main.c: 495: }
  1985                           ;main.c: 496: cont--;
  1986  00145E  07AE               	decf	main@cont& (0+255),f,b
  1987  001460                     L1:
  1988                           
  1989                           ;main.c: 497: (FLAGS_1 |= (1<<0));
  1990  001460  81B1               	bsf	_FLAGS_1& (0+255),0,b
  1991                           
  1992                           ;main.c: 499: }
  1993  001462  D0D0               	goto	l5814
  1994  001464                     l5684:
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;main.c: 502: else if(etapa == 3){
  1998  001464  0E03               	movlw	3
  1999  001466  19AA               	xorwf	main@etapa& (0+255),w,b
  2000  001468  E001 D0BC          	bnz	l5804
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 503: if(funcao == '0' || funcao == '2'){
  2004  00146C  0E30               	movlw	48
  2005  00146E  19AD               	xorwf	main@funcao& (0+255),w,b
  2006  001470  E003               	bz	l292
  2007                           
  2008                           ; BSR set to: 0
  2009  001472  0E32               	movlw	50
  2010  001474  19AD               	xorwf	main@funcao& (0+255),w,b
  2011  001476  E118               	bnz	l5702
  2012  001478                     l292:
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;main.c: 505: for(ordem=0;ordem<2;ordem++){
  2016  001478  6BAC               	clrf	main@ordem& (0+255),b
  2017  00147A                     l5694:
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 506: if( buffer_serial[cont++] != ('N'+(ordem))) {(FLAGS_1 |= (1<<7));}
  2021  00147A  DB7A               	call	PL20	;call to abstracted procedure
  2022  00147C  50DF               	movf	indf2,w,c
  2023  00147E  6F8B               	movwf	(??_main+2)& (0+255),b
  2024  001480  6B8C               	clrf	(??_main+3)& (0+255),b
  2025  001482  51AC               	movf	main@ordem& (0+255),w,b
  2026  001484  6F8D               	movwf	(??_main+4)& (0+255),b
  2027  001486  6B8E               	clrf	(??_main+5)& (0+255),b
  2028  001488  0E4E               	movlw	78
  2029  00148A  278D               	addwf	(??_main+4)& (0+255),f,b
  2030  00148C  0E00               	movlw	0
  2031  00148E  238E               	addwfc	(??_main+5)& (0+255),f,b
  2032  001490  518B               	movf	(??_main+2)& (0+255),w,b
  2033  001492  198D               	xorwf	(??_main+4)& (0+255),w,b
  2034  001494  E103               	bnz	u6570
  2035  001496  518C               	movf	(??_main+3)& (0+255),w,b
  2036  001498  198E               	xorwf	(??_main+5)& (0+255),w,b
  2037  00149A  A4D8               	btfss	status,2,c
  2038  00149C                     u6570:
  2039                           
  2040                           ; BSR set to: 0
  2041  00149C  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2042                           
  2043                           ; BSR set to: 0
  2044  00149E  2BAC               	incf	main@ordem& (0+255),f,b
  2045                           
  2046                           ; BSR set to: 0
  2047  0014A0  0E01               	movlw	1
  2048  0014A2  65AC               	cpfsgt	main@ordem& (0+255),b
  2049  0014A4  D7EA               	goto	l5694
  2050  0014A6  D762               	goto	l272
  2051  0014A8                     l5702:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;main.c: 512: else if(funcao == '1'){
  2055  0014A8  0E31               	movlw	49
  2056  0014AA  19AD               	xorwf	main@funcao& (0+255),w,b
  2057  0014AC  E105               	bnz	l5708
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 514: endereco_inic_eeprom = (1794 + (buffer_serial[cont] *26));
  2061  0014AE  51AC               	movf	main@ordem& (0+255),w,b
  2062  0014B0  E001 D0A8          	bnz	l5814
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;main.c: 516: ordem++;
  2066  0014B4  2BAC               	incf	main@ordem& (0+255),f,b
  2067  0014B6  D0A6               	goto	l5814
  2068  0014B8                     l5708:
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;main.c: 521: else if(funcao == '4'){
  2072  0014B8  0E34               	movlw	52
  2073  0014BA  19AD               	xorwf	main@funcao& (0+255),w,b
  2074  0014BC  E156               	bnz	l5762
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;main.c: 529: ptr_data= &data_atual.ano;
  2078  0014BE  0E38               	movlw	low _data_atual
  2079  0014C0  6FAF               	movwf	_ptr_data& (0+255),b
  2080  0014C2  6BB0               	clrf	(_ptr_data+1)& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;main.c: 531: for(ordem=0;ordem<6;ordem++){
  2084  0014C4  6BAC               	clrf	main@ordem& (0+255),b
  2085  0014C6                     l5716:
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;main.c: 532: if(buffer_serial[cont] == 'X') {
  2089  0014C6  DB37               	call	PL2	;call to abstracted procedure
  2090  0014C8  0E58               	movlw	88
  2091  0014CA  18DE               	xorwf	postinc2,w,c
  2092  0014CC  E103               	bnz	l5722
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;main.c: 533: ordem++;
  2096  0014CE  2BAC               	incf	main@ordem& (0+255),f,b
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;main.c: 534: cont+=2;}
  2100  0014D0  0E02               	movlw	2
  2101  0014D2  27AE               	addwf	main@cont& (0+255),f,b
  2102  0014D4                     l5722:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 536: *(ptr_data+ordem) = ascii_para_numero('0',buffer_serial[cont],buffer_seria
      +                          l[cont+1]);
  2106  0014D4  51AC               	movf	main@ordem& (0+255),w,b
  2107  0014D6  25AF               	addwf	_ptr_data& (0+255),w,b
  2108  0014D8  6ED9               	movwf	fsr2l,c
  2109  0014DA  0E00               	movlw	0
  2110  0014DC  21B0               	addwfc	(_ptr_data+1)& (0+255),w,b
  2111  0014DE  6EDA               	movwf	fsr2h,c
  2112  0014E0  0E00               	movlw	low _buffer_serial
  2113  0014E2  25AE               	addwf	main@cont& (0+255),w,b
  2114  0014E4  6EE1               	movwf	fsr1l,c
  2115  0014E6  6AE2               	clrf	fsr1h,c
  2116  0014E8  0E01               	movlw	high _buffer_serial
  2117  0014EA  22E2               	addwfc	fsr1h,f,c
  2118  0014EC  50E7               	movf	indf1,w,c
  2119  0014EE  6F60               	movwf	ascii_para_numero@caractere2& (0+255),b
  2120  0014F0  0E01               	movlw	low (_buffer_serial+1)
  2121  0014F2  25AE               	addwf	main@cont& (0+255),w,b
  2122  0014F4  6EE1               	movwf	fsr1l,c
  2123  0014F6  6AE2               	clrf	fsr1h,c
  2124  0014F8  0E01               	movlw	high (_buffer_serial+1)
  2125  0014FA  22E2               	addwfc	fsr1h,f,c
  2126  0014FC  50E7               	movf	indf1,w,c
  2127  0014FE  6F61               	movwf	ascii_para_numero@caractere1& (0+255),b
  2128  001500  0E30               	movlw	48
  2129  001502  ECF3  F016         	call	_ascii_para_numero
  2130  001506  6EDF               	movwf	indf2,c
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;main.c: 541: cont+=2;}
  2134  001508  0E02               	movlw	2
  2135  00150A  27AE               	addwf	main@cont& (0+255),f,b
  2136                           
  2137                           ; BSR set to: 0
  2138  00150C  2BAC               	incf	main@ordem& (0+255),f,b
  2139                           
  2140                           ; BSR set to: 0
  2141  00150E  0E05               	movlw	5
  2142  001510  65AC               	cpfsgt	main@ordem& (0+255),b
  2143  001512  D7D9               	goto	l5716
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;main.c: 543: data_atual.dia_da_semana = dia_da_semana(data_atual.ano,data_atual.mes,dat
      +                          a_atual.dia);
  2147  001514  C038  F06C         	movff	_data_atual,dia_da_semana@ano
  2148  001518  6B6D               	clrf	(dia_da_semana@ano+1)& (0+255),b
  2149  00151A  C039  F06E         	movff	_data_atual+1,dia_da_semana@mes
  2150  00151E  C03A  F06F         	movff	_data_atual+2,dia_da_semana@dia
  2151  001522  ECE8  F011         	call	_dia_da_semana	;wreg free
  2152  001526  6E3E               	movwf	_data_atual+6,c
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;main.c: 547: if(data_atual.mes > 12) data_atual.mes=12;
  2156  001528  0E0C               	movlw	12
  2157  00152A  6439               	cpfsgt	_data_atual+1,c
  2158  00152C  D001               	goto	l5736
  2159                           
  2160                           ; BSR set to: 0
  2161  00152E  D003               	goto	L2
  2162  001530                     l5736:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 549: else if(data_atual.mes<1) data_atual.mes=1;
  2166  001530  5039               	movf	_data_atual+1,w,c
  2167  001532  E102               	bnz	l5740
  2168                           
  2169                           ; BSR set to: 0
  2170  001534  0E01               	movlw	1
  2171  001536                     L2:
  2172  001536  6E39               	movwf	_data_atual+1,c
  2173  001538                     l5740:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;main.c: 552: if(data_atual.dia> qtd_max_dias) data_atual.dia = qtd_max_dias;
  2177  001538  503A               	movf	_data_atual+2,w,c
  2178  00153A  5C3F               	subwf	_qtd_max_dias,w,c
  2179  00153C  E203               	bc	l5744
  2180                           
  2181                           ; BSR set to: 0
  2182  00153E  C03F  F03A         	movff	_qtd_max_dias,_data_atual+2
  2183  001542  D004               	goto	l5748
  2184  001544                     l5744:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;main.c: 554: else if(data_atual.dia<1) data_atual.dia=1;
  2188  001544  503A               	movf	_data_atual+2,w,c
  2189  001546  E102               	bnz	l5748
  2190                           
  2191                           ; BSR set to: 0
  2192  001548  0E01               	movlw	1
  2193  00154A  6E3A               	movwf	_data_atual+2,c
  2194  00154C                     l5748:
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;main.c: 557: if(data_atual.hora >= 24){ data_atual.hora=0;}
  2198  00154C  0E17               	movlw	23
  2199  00154E  643B               	cpfsgt	_data_atual+3,c
  2200  001550  D001               	goto	l5752
  2201                           
  2202                           ; BSR set to: 0
  2203  001552  6A3B               	clrf	_data_atual+3,c
  2204  001554                     l5752:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;main.c: 560: if(data_atual.minuto>=60){data_atual.minuto= 0;}
  2208  001554  0E3B               	movlw	59
  2209  001556  643C               	cpfsgt	_data_atual+4,c
  2210  001558  D001               	goto	l5756
  2211                           
  2212                           ; BSR set to: 0
  2213  00155A  6A3C               	clrf	_data_atual+4,c
  2214  00155C                     l5756:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 562: if(data_atual.segundo>=60){data_atual.segundo = 0;}
  2218  00155C  0E3B               	movlw	59
  2219  00155E  643D               	cpfsgt	_data_atual+5,c
  2220  001560  D001               	goto	l5760
  2221                           
  2222                           ; BSR set to: 0
  2223  001562  6A3D               	clrf	_data_atual+5,c
  2224  001564                     l5760:
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;main.c: 567: (FLAGS_1 |= (1<<0));
  2228  001564  81B1               	bsf	_FLAGS_1& (0+255),0,b
  2229                           
  2230                           ;main.c: 568: cont--;
  2231  001566  07AE               	decf	main@cont& (0+255),f,b
  2232                           
  2233                           ;main.c: 569: }
  2234  001568  D04D               	goto	l5814
  2235  00156A                     l5762:
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;main.c: 571: else if(funcao == '6' || funcao == '7'){
  2239  00156A  0E36               	movlw	54
  2240  00156C  19AD               	xorwf	main@funcao& (0+255),w,b
  2241  00156E  E003               	bz	l5766
  2242                           
  2243                           ; BSR set to: 0
  2244  001570  0E37               	movlw	55
  2245  001572  19AD               	xorwf	main@funcao& (0+255),w,b
  2246  001574  E147               	bnz	l5814
  2247  001576                     l5766:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;main.c: 573: if(funcao == '6') conta_a_ser_alterada = buffer_serial[cont] - '0';
  2251  001576  0E36               	movlw	54
  2252  001578  19AD               	xorwf	main@funcao& (0+255),w,b
  2253  00157A  E105               	bnz	l5770
  2254                           
  2255                           ; BSR set to: 0
  2256  00157C  DADC               	call	PL2	;call to abstracted procedure
  2257  00157E  50DF               	movf	indf2,w,c
  2258  001580  0FD0               	addlw	208
  2259  001582  6FA6               	movwf	main@conta_a_ser_alterada& (0+255),b
  2260  001584  D005               	goto	l318
  2261  001586                     l5770:
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 575: else if(funcao == '7') conta_a_ser_alterada = conta;
  2265  001586  0E37               	movlw	55
  2266  001588  19AD               	xorwf	main@funcao& (0+255),w,b
  2267  00158A  B4D8               	btfsc	status,2,c
  2268                           
  2269                           ; BSR set to: 0
  2270  00158C  C0AB  F0A6         	movff	main@conta,main@conta_a_ser_alterada
  2271  001590                     l318:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;main.c: 579: for(ordem=0;ordem<(16-1);ordem++){
  2275  001590  6BAC               	clrf	main@ordem& (0+255),b
  2276  001592                     l5778:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 582: if(buffer_serial[cont] == '>'){
  2280  001592  DAD1               	call	PL2	;call to abstracted procedure
  2281  001594  0E3E               	movlw	62
  2282  001596  18DE               	xorwf	postinc2,w,c
  2283  001598  E102               	bnz	l5782
  2284  00159A                     l5780:
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;main.c: 583: (FLAGS_1 |= (1<<7));}
  2288  00159A  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2289  00159C  D018               	goto	l5794
  2290  00159E                     l5782:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;main.c: 585: else if(buffer_serial[cont] == '<') {
  2294  00159E  DACB               	call	PL2	;call to abstracted procedure
  2295  0015A0  0E3C               	movlw	60
  2296  0015A2  18DE               	xorwf	postinc2,w,c
  2297  0015A4  E10D               	bnz	l5792
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 586: if(ordem<5) (FLAGS_1 |= (1<<7));
  2301  0015A6  0E05               	movlw	5
  2302  0015A8  61AC               	cpfslt	main@ordem& (0+255),b
  2303  0015AA  D001               	goto	l5788
  2304  0015AC  D7F6               	goto	l5780
  2305  0015AE                     l5788:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 588: else {
  2309                           ;main.c: 589: if(ordem<16-2) nova_senha[ordem]= 0;
  2310  0015AE  0E0E               	movlw	14
  2311  0015B0  61AC               	cpfslt	main@ordem& (0+255),b
  2312  0015B2  D012               	goto	l5800
  2313                           
  2314                           ; BSR set to: 0
  2315  0015B4  51AC               	movf	main@ordem& (0+255),w,b
  2316  0015B6  0FDC               	addlw	low _nova_senha
  2317  0015B8  6ED9               	movwf	fsr2l,c
  2318  0015BA  6ADA               	clrf	fsr2h,c
  2319  0015BC  6ADF               	clrf	indf2,c
  2320  0015BE  D00C               	goto	l5800
  2321  0015C0                     l5792:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 594: else{
  2325                           ;main.c: 595: nova_senha[ordem] = buffer_serial[cont];}
  2326  0015C0  DABA               	call	PL2	;call to abstracted procedure
  2327  0015C2  51AC               	movf	main@ordem& (0+255),w,b
  2328  0015C4  0FDC               	addlw	low _nova_senha
  2329  0015C6  6EE1               	movwf	fsr1l,c
  2330  0015C8  6AE2               	clrf	fsr1h,c
  2331  0015CA  CFDF FFE7          	movff	indf2,indf1
  2332  0015CE                     l5794:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;main.c: 597: cont++;
  2336  0015CE  2BAE               	incf	main@cont& (0+255),f,b
  2337                           
  2338                           ; BSR set to: 0
  2339  0015D0  2BAC               	incf	main@ordem& (0+255),f,b
  2340                           
  2341                           ; BSR set to: 0
  2342  0015D2  0E0E               	movlw	14
  2343  0015D4  65AC               	cpfsgt	main@ordem& (0+255),b
  2344  0015D6  D7DD               	goto	l5778
  2345  0015D8                     l5800:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 599: }
  2349                           ;main.c: 601: enviar_string_serial(nova_senha);
  2350  0015D8  0EDC               	movlw	low _nova_senha
  2351  0015DA  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2352  0015DC  6B61               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2353  0015DE  EC16  F015         	call	_enviar_string_serial	;wreg free
  2354  0015E2  D6C4               	goto	l272
  2355  0015E4                     l5804:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 606: else if(etapa == 4){
  2359  0015E4  0E04               	movlw	4
  2360  0015E6  19AA               	xorwf	main@etapa& (0+255),w,b
  2361  0015E8  E10D               	bnz	l5814
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 607: if(buffer_serial[cont] != 'F') {(FLAGS_1 |= (1<<7));}
  2365  0015EA  DAA5               	call	PL2	;call to abstracted procedure
  2366  0015EC  0E46               	movlw	70
  2367  0015EE  18DE               	xorwf	postinc2,w,c
  2368  0015F0  A4D8               	btfss	status,2,c
  2369                           
  2370                           ; BSR set to: 0
  2371  0015F2  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 608: (FLAGS_2 |= (1<<0));
  2375  0015F4  802D               	bsf	_FLAGS_2,0,c
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 609: qtd_caracteres_recebidos_serial=0;
  2379  0015F6  6A35               	clrf	_qtd_caracteres_recebidos_serial,c
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;main.c: 610: zerar_string(buffer_serial);}
  2383  0015F8  0E00               	movlw	low _buffer_serial
  2384  0015FA  6F60               	movwf	zerar_string@string_a_zerar& (0+255),b
  2385  0015FC  0E01               	movlw	high _buffer_serial
  2386  0015FE  6F61               	movwf	(zerar_string@string_a_zerar+1)& (0+255),b
  2387  001600  ECD1  F016         	call	_zerar_string	;wreg free
  2388  001604                     l5814:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 614: if(FLAGS_1>1) {
  2392  001604  0E01               	movlw	1
  2393  001606  65B1               	cpfsgt	_FLAGS_1& (0+255),b
  2394  001608  D006               	goto	l5824
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 615: numero_para_ascii(etapa);
  2398  00160A  51AA               	movf	main@etapa& (0+255),w,b
  2399  00160C  EC8D  F013         	call	_numero_para_ascii
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 616: (FLAGS_1 &= ~(1<<0));
  2403  001610  91B1               	bcf	_FLAGS_1& (0+255),0,b
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;main.c: 617: etapa = 0;
  2407  001612  6BAA               	clrf	main@etapa& (0+255),b
  2408  001614  D0B5               	goto	L3
  2409  001616                     l5824:
  2410                           
  2411                           ; BSR set to: 0
  2412  001616  2BAE               	incf	main@cont& (0+255),f,b
  2413  001618                     l5826:
  2414                           
  2415                           ; BSR set to: 0
  2416  001618  5035               	movf	_qtd_caracteres_recebidos_serial,w,c
  2417  00161A  5DAE               	subwf	main@cont& (0+255),w,b
  2418  00161C  E301 D0B1          	bc	l5912
  2419  001620  D692               	goto	l266
  2420  001622                     l259:
  2421                           
  2422                           ;main.c: 626: else if((FLAGS_3 & (1<<2))){
  2423  001622  A42E               	btfss	_FLAGS_3,2,c
  2424  001624  D0AE               	goto	l5912
  2425                           
  2426                           ;main.c: 628: if((FLAGS_2 & (1<<4))){
  2427  001626  A82D               	btfss	_FLAGS_2,4,c
  2428  001628  D021               	goto	l5846
  2429                           
  2430                           ;main.c: 629: resetar_timer1(0xC0,0);
  2431  00162A  0100               	movlb	0	; () banked
  2432  00162C  6B60               	clrf	resetar_timer1@valor_l& (0+255),b
  2433  00162E  0EC0               	movlw	192
  2434  001630  EC42  F017         	call	_resetar_timer1
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 632: if(qtd_vezes_mesma_tecla_pressionada>0 && ultimo_caractere_recebido >='0' 
      +                          && ultimo_caractere_recebido<='9'){
  2438  001634  51B3               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2439  001636  E01A               	bz	l5846
  2440                           
  2441                           ; BSR set to: 0
  2442  001638  0E2F               	movlw	47
  2443  00163A  65A8               	cpfsgt	main@ultimo_caractere_recebido& (0+255),b
  2444  00163C  D017               	goto	l5846
  2445                           
  2446                           ; BSR set to: 0
  2447  00163E  0E3A               	movlw	58
  2448  001640  61A8               	cpfslt	main@ultimo_caractere_recebido& (0+255),b
  2449  001642  D014               	goto	l5846
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 635: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]= ('a' -1) + qtd
      +                          _vezes_mesma_tecla_pressionada + (( ultimo_caractere_recebido - '1') * 3) ;
  2453  001644  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2454  001646  0FB4               	addlw	low _buffer_teclado_matricial
  2455  001648  6ED9               	movwf	fsr2l,c
  2456  00164A  6ADA               	clrf	fsr2h,c
  2457  00164C  51A8               	movf	main@ultimo_caractere_recebido& (0+255),w,b
  2458  00164E  0D03               	mullw	3
  2459  001650  50F3               	movf	prodl,w,c
  2460  001652  25B3               	addwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2461  001654  0FCD               	addlw	205
  2462  001656  6EDF               	movwf	indf2,c
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;main.c: 636: qtd_vezes_mesma_tecla_pressionada=0;
  2466  001658  6BB3               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 638: if(ultimo_caractere_recebido != caractere_recebido) {
  2470  00165A  51B2               	movf	_caractere_recebido& (0+255),w,b
  2471  00165C  19A8               	xorwf	main@ultimo_caractere_recebido& (0+255),w,b
  2472  00165E  E004               	bz	l338
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 639: ultimo_caractere_recebido = caractere_recebido;
  2476  001660  C0B2  F0A8         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  2477                           
  2478                           ;main.c: 640: TMR1ON=1;
  2479  001664  80CD               	bsf	4045,0,c	;volatile
  2480                           
  2481                           ;main.c: 643: }
  2482  001666  D008               	goto	l5850
  2483  001668                     l338:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 644: else ultimo_caractere_recebido=0;
  2487  001668  6BA8               	clrf	main@ultimo_caractere_recebido& (0+255),b
  2488  00166A  D006               	goto	l5850
  2489  00166C                     l5846:
  2490                           
  2491                           ;main.c: 648: else{
  2492                           ;main.c: 649: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] = caractere_rec
      +                          ebido;
  2493  00166C  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2494  00166E  0FB4               	addlw	low _buffer_teclado_matricial
  2495  001670  6ED9               	movwf	fsr2l,c
  2496  001672  6ADA               	clrf	fsr2h,c
  2497  001674  C0B2  FFDF         	movff	_caractere_recebido,indf2
  2498  001678                     l5850:
  2499                           
  2500                           ;main.c: 660: }
  2501                           ;main.c: 664: qtd_vezes_mesma_tecla_pressionada=0;
  2502  001678  0100               	movlb	0	; () banked
  2503  00167A  6BB3               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 665: caractere_recebido=0;
  2507  00167C  6BB2               	clrf	_caractere_recebido& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 669: printf("\n\n%s",buffer_teclado_matricial);
  2511  00167E  0EB4               	movlw	low _buffer_teclado_matricial
  2512  001680  6F6C               	movwf	?_printf& (0+255),b
  2513  001682  0EDC               	movlw	STR_5& (0+255)
  2514  001684  ECDC  F00D         	call	_printf
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;main.c: 671: if(buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] != 'F'){
  2518  001688  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2519  00168A  0FB4               	addlw	low _buffer_teclado_matricial
  2520  00168C  6ED9               	movwf	fsr2l,c
  2521  00168E  6ADA               	clrf	fsr2h,c
  2522  001690  0E46               	movlw	70
  2523  001692  18DE               	xorwf	postinc2,w,c
  2524  001694  E017               	bz	l5872
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 673: if(qtd_caracteres_recebidos_teclado){
  2528  001696  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2529  001698  E00B               	bz	l5866
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;main.c: 674: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado);
  2533  00169A  C036  F061         	movff	_qtd_caracteres_recebidos_teclado,lcd_gotoxy@coluna
  2534  00169E  0E02               	movlw	2
  2535  0016A0  EC41  F015         	call	_lcd_gotoxy
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 675: printf("*%c",buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]);
  2539  0016A4  DA7A               	call	PL26	;call to abstracted procedure
  2540  0016A6  0EE5               	movlw	STR_6& (0+255)
  2541  0016A8  ECDC  F00D         	call	_printf
  2542  0016AC                     l5864:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 676: TMR1ON=1;}
  2546  0016AC  80CD               	bsf	4045,0,c	;volatile
  2547  0016AE  D00A               	goto	l5872
  2548  0016B0                     l5866:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 678: else{
  2552                           ;main.c: 679: lcd_gotoxy(2,(qtd_caracteres_recebidos_teclado+1));
  2553  0016B0  2836               	incf	_qtd_caracteres_recebidos_teclado,w,c
  2554  0016B2  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  2555  0016B4  0E02               	movlw	2
  2556  0016B6  EC41  F015         	call	_lcd_gotoxy
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 680: printf("%c",buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]);
  2560  0016BA  DA6F               	call	PL26	;call to abstracted procedure
  2561  0016BC  0EE6               	movlw	(STR_6+1)& (0+255)
  2562  0016BE  ECDC  F00D         	call	_printf
  2563  0016C2  D7F4               	goto	l5864
  2564  0016C4                     l5872:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 682: }
  2568                           ;main.c: 685: if( buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] == 'F' || +
      +                          +qtd_caracteres_recebidos_teclado==(40-1)){
  2569  0016C4  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2570  0016C6  0FB4               	addlw	low _buffer_teclado_matricial
  2571  0016C8  6ED9               	movwf	fsr2l,c
  2572  0016CA  6ADA               	clrf	fsr2h,c
  2573  0016CC  0E46               	movlw	70
  2574  0016CE  18DE               	xorwf	postinc2,w,c
  2575  0016D0  E004               	bz	l5876
  2576                           
  2577                           ; BSR set to: 0
  2578  0016D2  2A36               	incf	_qtd_caracteres_recebidos_teclado,f,c
  2579  0016D4  0E27               	movlw	39
  2580  0016D6  1836               	xorwf	_qtd_caracteres_recebidos_teclado,w,c
  2581  0016D8  E154               	bnz	l5912
  2582  0016DA                     l5876:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 687: resetar_timer1(0xC0,0);
  2586  0016DA  6B60               	clrf	resetar_timer1@valor_l& (0+255),b
  2587  0016DC  0EC0               	movlw	192
  2588  0016DE  EC42  F017         	call	_resetar_timer1
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 688: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] = 0;
  2592  0016E2  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2593  0016E4  0FB4               	addlw	low _buffer_teclado_matricial
  2594  0016E6  6ED9               	movwf	fsr2l,c
  2595  0016E8  6ADA               	clrf	fsr2h,c
  2596  0016EA  6ADF               	clrf	indf2,c
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;main.c: 691: conta = ( ((buffer_teclado_matricial[0]-'0')*10) + (buffer_teclado_matrici
      +                          al[1]-'0') );
  2600  0016EC  51B4               	movf	_buffer_teclado_matricial& (0+255),w,b
  2601  0016EE  0D0A               	mullw	10
  2602  0016F0  50F3               	movf	prodl,w,c
  2603  0016F2  25B5               	addwf	(_buffer_teclado_matricial+1)& (0+255),w,b
  2604  0016F4  0FF0               	addlw	240
  2605  0016F6  6FAB               	movwf	main@conta& (0+255),b
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 692: cont=2;
  2609  0016F8  0E02               	movlw	2
  2610  0016FA  6FAE               	movwf	main@cont& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 694: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  2614  0016FC  0E0F               	movlw	15
  2615  0016FE  65AB               	cpfsgt	main@conta& (0+255),b
  2616  001700  D002               	goto	l5888
  2617  001702                     l5886:
  2618                           
  2619                           ; BSR set to: 0
  2620  001702  85B1               	bsf	_FLAGS_1& (0+255),2,b
  2621  001704  D008               	goto	l5894
  2622  001706                     l5888:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;main.c: 699: else if(funcao != '6' && (!(contas_cadastradas & (1<<conta))) ){
  2626  001706  0E36               	movlw	54
  2627  001708  19AD               	xorwf	main@funcao& (0+255),w,b
  2628  00170A  E005               	bz	l5894
  2629                           
  2630                           ; BSR set to: 0
  2631  00170C  C0AB  F089         	movff	main@conta,??_main
  2632  001710  DA19               	call	PL4	;call to abstracted procedure
  2633  001712  DA4B               	call	PL34	;call to abstracted procedure
  2634  001714  E0F6               	bz	l5886
  2635  001716                     l5894:
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 706: if(qtd_caracteres_recebidos_teclado<(5+2)){(FLAGS_1 |= (1<<7));}
  2639  001716  0E07               	movlw	7
  2640  001718  6036               	cpfslt	_qtd_caracteres_recebidos_teclado,c
  2641  00171A  D001               	goto	l5898
  2642                           
  2643                           ; BSR set to: 0
  2644  00171C  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2645  00171E                     l5898:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 707: limpar_linha(2);
  2649  00171E  0E02               	movlw	2
  2650  001720  ECAD  F016         	call	_limpar_linha
  2651                           
  2652                           ;main.c: 709: while(cont<(16+2) && buffer_teclado_matricial[cont-2] != 0 && FLAGS_1<2){
  2653  001724  D020               	goto	l5904
  2654  001726                     l5900:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 714: if(buffer_teclado_matricial[cont] != senha[conta][cont-2]){
  2658  001726  51AB               	movf	main@conta& (0+255),w,b
  2659  001728  0D11               	mullw	17
  2660  00172A  0EFE               	movlw	254
  2661  00172C  6F89               	movwf	??_main& (0+255),b
  2662  00172E  698A               	setf	(??_main+1)& (0+255),b
  2663  001730  0E50               	movlw	low _senha
  2664  001732  6F8B               	movwf	(??_main+2)& (0+255),b
  2665  001734  0E01               	movlw	high _senha
  2666  001736  6F8C               	movwf	(??_main+3)& (0+255),b
  2667  001738  5189               	movf	??_main& (0+255),w,b
  2668  00173A  278B               	addwf	(??_main+2)& (0+255),f,b
  2669  00173C  518A               	movf	(??_main+1)& (0+255),w,b
  2670  00173E  238C               	addwfc	(??_main+3)& (0+255),f,b
  2671  001740  50F3               	movf	prodl,w,c
  2672  001742  278B               	addwf	(??_main+2)& (0+255),f,b
  2673  001744  50F4               	movf	prodh,w,c
  2674  001746  238C               	addwfc	(??_main+3)& (0+255),f,b
  2675  001748  51AE               	movf	main@cont& (0+255),w,b
  2676  00174A  258B               	addwf	(??_main+2)& (0+255),w,b
  2677  00174C  6ED9               	movwf	fsr2l,c
  2678  00174E  0E00               	movlw	0
  2679  001750  218C               	addwfc	(??_main+3)& (0+255),w,b
  2680  001752  6EDA               	movwf	fsr2h,c
  2681  001754  51AE               	movf	main@cont& (0+255),w,b
  2682  001756  0FB4               	addlw	low _buffer_teclado_matricial
  2683  001758  6EE1               	movwf	fsr1l,c
  2684  00175A  6AE2               	clrf	fsr1h,c
  2685  00175C  50DE               	movf	postinc2,w,c
  2686  00175E  18E6               	xorwf	postinc1,w,c
  2687  001760  A4D8               	btfss	status,2,c
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 715: (FLAGS_1 |= (1<<6));
  2691  001762  8DB1               	bsf	_FLAGS_1& (0+255),6,b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 716: }
  2695                           ;main.c: 718: cont++;
  2696  001764  2BAE               	incf	main@cont& (0+255),f,b
  2697  001766                     l5904:
  2698                           
  2699                           ; BSR set to: 0
  2700  001766  0E12               	movlw	18
  2701  001768  61AE               	cpfslt	main@cont& (0+255),b
  2702  00176A  D009               	goto	l5910
  2703                           
  2704                           ; BSR set to: 0
  2705  00176C  51AE               	movf	main@cont& (0+255),w,b
  2706  00176E  0FB2               	addlw	low (_buffer_teclado_matricial+254)
  2707  001770  6ED9               	movwf	fsr2l,c
  2708  001772  6ADA               	clrf	fsr2h,c
  2709  001774  50DF               	movf	indf2,w,c
  2710  001776  E003               	bz	l5910
  2711                           
  2712                           ; BSR set to: 0
  2713  001778  0E01               	movlw	1
  2714  00177A  65B1               	cpfsgt	_FLAGS_1& (0+255),b
  2715  00177C  D7D4               	goto	l5900
  2716  00177E                     l5910:
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 719: }
  2720                           ;main.c: 721: (FLAGS_2 |= (1<<7));
  2721  00177E  8E2D               	bsf	_FLAGS_2,7,c
  2722  001780                     L3:
  2723                           
  2724                           ;main.c: 722: (FLAGS_2 |= (1<<0));
  2725  001780  802D               	bsf	_FLAGS_2,0,c
  2726  001782                     l5912:
  2727                           
  2728                           ;main.c: 724: }
  2729                           ;main.c: 725: }
  2730                           ;main.c: 727: }
  2731                           ;main.c: 730: if((FLAGS_2 & (1<<0))){
  2732  001782  A02D               	btfss	_FLAGS_2,0,c
  2733  001784  D149               	goto	l6062
  2734                           
  2735                           ;main.c: 733: (FLAGS_2 &= ~(1<<0));
  2736  001786  902D               	bcf	_FLAGS_2,0,c
  2737                           
  2738                           ;main.c: 734: qtd_caracteres_recebidos_serial, qtd_caracteres_recebidos_teclado,cont=0;
  2739  001788  0100               	movlb	0	; () banked
  2740  00178A  6BAE               	clrf	main@cont& (0+255),b
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;main.c: 735: etapa = 0;
  2744  00178C  6BAA               	clrf	main@etapa& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;main.c: 736: zerar_string(buffer_serial);
  2748  00178E  0E00               	movlw	low _buffer_serial
  2749  001790  6F60               	movwf	zerar_string@string_a_zerar& (0+255),b
  2750  001792  0E01               	movlw	high _buffer_serial
  2751  001794  6F61               	movwf	(zerar_string@string_a_zerar+1)& (0+255),b
  2752  001796  ECD1  F016         	call	_zerar_string	;wreg free
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 737: zerar_string(buffer_teclado_matricial);
  2756  00179A  0EB4               	movlw	low _buffer_teclado_matricial
  2757  00179C  6F60               	movwf	zerar_string@string_a_zerar& (0+255),b
  2758  00179E  6B61               	clrf	(zerar_string@string_a_zerar+1)& (0+255),b
  2759  0017A0  ECD1  F016         	call	_zerar_string	;wreg free
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;main.c: 740: if((FLAGS_3 & (1<<2))){
  2763  0017A4  A42E               	btfss	_FLAGS_3,2,c
  2764  0017A6  D05F               	goto	l5974
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;main.c: 742: if(FLAGS_1<2) {
  2768  0017A8  0E02               	movlw	2
  2769  0017AA  61B1               	cpfslt	_FLAGS_1& (0+255),b
  2770  0017AC  D047               	goto	l5964
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;main.c: 745: limpar_linha(3);
  2774  0017AE  0E03               	movlw	3
  2775  0017B0  ECAD  F016         	call	_limpar_linha
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;main.c: 746: printf("\n\nDestravando...");
  2779  0017B4  0E7B               	movlw	STR_8& (0+255)
  2780  0017B6  ECDC  F00D         	call	_printf
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 747: _delay((unsigned long)((49)*(16000000/4000.0)));
  2784  0017BA  6989               	setf	??_main& (0+255),b
  2785  0017BC  0E8A               	movlw	138
  2786  0017BE                     u7597:
  2787  0017BE  2EE8               	decfsz	wreg,f,c
  2788  0017C0  D7FE               	goto	u7597
  2789  0017C2  2F89               	decfsz	??_main& (0+255),f,b
  2790  0017C4  D7FC               	goto	u7597
  2791  0017C6  D000               	nop2	
  2792                           
  2793                           ;main.c: 748: delay_ms(800);
  2794  0017C8  0E03               	movlw	3
  2795  0017CA  0100               	movlb	0	; () banked
  2796  0017CC  6F61               	movwf	(delay_ms@delay_total+1)& (0+255),b
  2797  0017CE  0E20               	movlw	32
  2798  0017D0  6F60               	movwf	delay_ms@delay_total& (0+255),b
  2799  0017D2  EC72  F016         	call	_delay_ms	;wreg free
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 749: char tentativas=0;
  2803  0017D6  6BA1               	clrf	main@tentativas& (0+255),b
  2804                           
  2805                           ;main.c: 751: while(PORTEbits.RE2==0){
  2806  0017D8  D015               	goto	l5950
  2807  0017DA                     l5938:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 752: if(++tentativas == 6){
  2811  0017DA  2BA1               	incf	main@tentativas& (0+255),f,b
  2812  0017DC  0E06               	movlw	6
  2813  0017DE  19A1               	xorwf	main@tentativas& (0+255),w,b
  2814  0017E0  E102               	bnz	l363
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 753: (FLAGS_1 |= (1<<5));
  2818  0017E2  8BB1               	bsf	_FLAGS_1& (0+255),5,b
  2819                           
  2820                           ;main.c: 754: break;}
  2821  0017E4  D011               	goto	l5952
  2822  0017E6                     l363:
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 756: LATCbits.LC4=1;
  2826  0017E6  888B               	bsf	3979,4,c	;volatile
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 757: delay_ms(350);
  2830  0017E8  0E01               	movlw	1
  2831  0017EA  6F61               	movwf	(delay_ms@delay_total+1)& (0+255),b
  2832  0017EC  0E5E               	movlw	94
  2833  0017EE  6F60               	movwf	delay_ms@delay_total& (0+255),b
  2834  0017F0  EC72  F016         	call	_delay_ms	;wreg free
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 758: if(PORTEbits.RE2==0) delay_ms(100);
  2838  0017F4  B484               	btfsc	3972,2,c	;volatile
  2839  0017F6  D005               	goto	l5948
  2840                           
  2841                           ; BSR set to: 0
  2842  0017F8  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  2843  0017FA  0E64               	movlw	100
  2844  0017FC  6F60               	movwf	delay_ms@delay_total& (0+255),b
  2845  0017FE  EC72  F016         	call	_delay_ms	;wreg free
  2846  001802                     l5948:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 759: LATCbits.LC4=0;
  2850  001802  988B               	bcf	3979,4,c	;volatile
  2851  001804                     l5950:
  2852                           
  2853                           ; BSR set to: 0
  2854  001804  A484               	btfss	3972,2,c	;volatile
  2855  001806  D7E9               	goto	l5938
  2856  001808                     l5952:
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;main.c: 760: }
  2860                           ;main.c: 763: lcd_gotoxy(1,20);
  2861  001808  0E14               	movlw	20
  2862  00180A  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  2863  00180C  0E01               	movlw	1
  2864  00180E  EC41  F015         	call	_lcd_gotoxy
  2865  001812  0E01               	movlw	1
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;main.c: 764: printf("%c",PORTEbits.RE2);
  2869  001814  A484               	btfss	3972,2,c	;volatile
  2870  001816  0E00               	movlw	0
  2871  001818  6F6C               	movwf	?_printf& (0+255),b
  2872  00181A  6B6D               	clrf	(?_printf+1)& (0+255),b
  2873  00181C  0EE6               	movlw	(STR_6+1)& (0+255)
  2874  00181E  ECDC  F00D         	call	_printf
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;main.c: 766: limpar_linha(3);
  2878  001822  0E03               	movlw	3
  2879  001824  ECAD  F016         	call	_limpar_linha
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 767: if(PORTEbits.RE2==0){
  2883  001828  B484               	btfsc	3972,2,c	;volatile
  2884  00182A  D004               	goto	l5962
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 768: printf("\n\nErro de abertura");}
  2888  00182C  0E56               	movlw	STR_10& (0+255)
  2889  00182E  ECDC  F00D         	call	_printf
  2890  001832  D0F2               	goto	l6062
  2891  001834                     l5962:
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;main.c: 770: else{
  2895                           ;main.c: 771: printf("\n\nPorta aberta");}
  2896  001834  0E8C               	movlw	STR_11& (0+255)
  2897  001836  ECDC  F00D         	call	_printf
  2898  00183A  D0EE               	goto	l6062
  2899  00183C                     l5964:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 775: else{
  2903                           ;main.c: 776: limpar_linha(3);
  2904  00183C  0E03               	movlw	3
  2905  00183E  ECAD  F016         	call	_limpar_linha
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 777: if((FLAGS_1 & (1<<7))) printf("\n\nErro de protocolo");
  2909  001842  AFB1               	btfss	_FLAGS_1& (0+255),7,b
  2910  001844  D004               	goto	l369
  2911                           
  2912                           ; BSR set to: 0
  2913  001846  0E42               	movlw	STR_12& (0+255)
  2914  001848  ECDC  F00D         	call	_printf
  2915  00184C  D0E5               	goto	l6062
  2916  00184E                     l369:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 779: else if((FLAGS_1 & (1<<2))) printf("\n\nConta nao existente");
  2920  00184E  A5B1               	btfss	_FLAGS_1& (0+255),2,b
  2921  001850  D004               	goto	l371
  2922                           
  2923                           ; BSR set to: 0
  2924  001852  0E2C               	movlw	STR_13& (0+255)
  2925  001854  ECDC  F00D         	call	_printf
  2926  001858  D0DF               	goto	l6062
  2927  00185A                     l371:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;main.c: 781: else if((FLAGS_1 & (1<<6))) printf("\n\nSenha incorreta");}
  2931  00185A  ADB1               	btfss	_FLAGS_1& (0+255),6,b
  2932  00185C  D0DD               	goto	l6062
  2933                           
  2934                           ; BSR set to: 0
  2935  00185E  0E69               	movlw	STR_14& (0+255)
  2936  001860  ECDC  F00D         	call	_printf
  2937  001864  D0D9               	goto	l6062
  2938  001866                     l5974:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;main.c: 784: else{
  2942                           ;main.c: 786: enviar_string_serial("\nI");
  2943  001866  0EEC               	movlw	low STR_15
  2944  001868  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2945  00186A  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  2946  00186C  A4D8               	btfss	status,2,c
  2947  00186E  0E11               	movlw	high __smallconst
  2948  001870  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2949  001872  EC16  F015         	call	_enviar_string_serial	;wreg free
  2950                           
  2951                           ;main.c: 788: if(!FLAGS_1){
  2952  001876  0100               	movlb	0	; () banked
  2953  001878  51B1               	movf	_FLAGS_1& (0+255),w,b
  2954  00187A  E001 D093          	bnz	l6026
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;main.c: 789: etapa = 0;
  2958  00187E  6BAA               	clrf	main@etapa& (0+255),b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;main.c: 790: LATDbits.LD2^=1;
  2962  001880  748C               	btg	3980,2,c	;volatile
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;main.c: 791: enviar_string_serial("OK");
  2966  001882  0EEF               	movlw	low STR_16
  2967  001884  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2968  001886  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  2969  001888  A4D8               	btfss	status,2,c
  2970  00188A  0E11               	movlw	high __smallconst
  2971  00188C  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2972  00188E  EC16  F015         	call	_enviar_string_serial	;wreg free
  2973                           
  2974                           ;main.c: 793: if(funcao == '2'){
  2975  001892  0E32               	movlw	50
  2976  001894  0100               	movlb	0	; () banked
  2977  001896  19AD               	xorwf	main@funcao& (0+255),w,b
  2978  001898  E121               	bnz	l5988
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 794: numero_para_ascii(data_atual.ano);
  2982  00189A  5038               	movf	_data_atual,w,c
  2983  00189C  EC8D  F013         	call	_numero_para_ascii
  2984                           
  2985                           ;main.c: 795: numero_para_ascii(data_atual.mes);
  2986  0018A0  5039               	movf	_data_atual+1,w,c
  2987  0018A2  EC8D  F013         	call	_numero_para_ascii
  2988                           
  2989                           ;main.c: 796: numero_para_ascii(data_atual.dia_da_semana);
  2990  0018A6  503E               	movf	_data_atual+6,w,c
  2991  0018A8  EC8D  F013         	call	_numero_para_ascii
  2992                           
  2993                           ;main.c: 797: numero_para_ascii(data_atual.dia);
  2994  0018AC  503A               	movf	_data_atual+2,w,c
  2995  0018AE  EC8D  F013         	call	_numero_para_ascii
  2996                           
  2997                           ;main.c: 798: numero_para_ascii(data_atual.hora);
  2998  0018B2  503B               	movf	_data_atual+3,w,c
  2999  0018B4  EC8D  F013         	call	_numero_para_ascii
  3000                           
  3001                           ;main.c: 799: numero_para_ascii(data_atual.minuto);
  3002  0018B8  503C               	movf	_data_atual+4,w,c
  3003  0018BA  EC8D  F013         	call	_numero_para_ascii
  3004                           
  3005                           ;main.c: 800: numero_para_ascii(data_atual.segundo);
  3006  0018BE  503D               	movf	_data_atual+5,w,c
  3007  0018C0  EC8D  F013         	call	_numero_para_ascii
  3008                           
  3009                           ;main.c: 801: numero_para_ascii(qtd_total_contas);
  3010  0018C4  51A5               	movf	main@qtd_total_contas& (0+255),w,b
  3011  0018C6  EC8D  F013         	call	_numero_para_ascii
  3012                           
  3013                           ;main.c: 802: numero_para_ascii(16);
  3014  0018CA  0E10               	movlw	16
  3015  0018CC  EC8D  F013         	call	_numero_para_ascii
  3016  0018D0  0E01               	movlw	1
  3017                           
  3018                           ;main.c: 803: numero_para_ascii(PORTEbits.RE2);}
  3019  0018D2  A484               	btfss	3972,2,c	;volatile
  3020  0018D4  0E00               	movlw	0
  3021  0018D6  EC8D  F013         	call	_numero_para_ascii
  3022  0018DA  D098               	goto	l395
  3023  0018DC                     l5988:
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;main.c: 806: else if(funcao == '7' || funcao == '6'){
  3027  0018DC  0E37               	movlw	55
  3028  0018DE  19AD               	xorwf	main@funcao& (0+255),w,b
  3029  0018E0  E003               	bz	l5992
  3030                           
  3031                           ; BSR set to: 0
  3032  0018E2  0E36               	movlw	54
  3033  0018E4  19AD               	xorwf	main@funcao& (0+255),w,b
  3034  0018E6  E141               	bnz	l6008
  3035  0018E8                     l5992:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;main.c: 808: (contas_cadastradas |= (1<<conta_a_ser_alterada));
  3039  0018E8  C0A6  F089         	movff	main@conta_a_ser_alterada,??_main
  3040  0018EC  D92B               	call	PL4	;call to abstracted procedure
  3041  0018EE  518A               	movf	(??_main+1)& (0+255),w,b
  3042  0018F0  13A3               	iorwf	main@contas_cadastradas& (0+255),f,b
  3043  0018F2  518B               	movf	(??_main+2)& (0+255),w,b
  3044  0018F4  13A4               	iorwf	(main@contas_cadastradas+1)& (0+255),f,b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;main.c: 810: char i=0;
  3048  0018F6  6BA9               	clrf	main@i_838& (0+255),b
  3049  0018F8                     l5996:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;main.c: 812: senha[conta_a_ser_alterada][i] = nova_senha[i];
  3053  0018F8  51A9               	movf	main@i_838& (0+255),w,b
  3054  0018FA  0FDC               	addlw	low _nova_senha
  3055  0018FC  6ED9               	movwf	fsr2l,c
  3056  0018FE  6ADA               	clrf	fsr2h,c
  3057  001900  51A6               	movf	main@conta_a_ser_alterada& (0+255),w,b
  3058  001902  D941               	call	PL24	;call to abstracted procedure
  3059  001904  51A9               	movf	main@i_838& (0+255),w,b
  3060  001906  2589               	addwf	??_main& (0+255),w,b
  3061  001908  6EE1               	movwf	fsr1l,c
  3062  00190A  0E00               	movlw	0
  3063  00190C  218A               	addwfc	(??_main+1)& (0+255),w,b
  3064  00190E  6EE2               	movwf	fsr1h,c
  3065  001910  CFDF FFE7          	movff	indf2,indf1
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 813: (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16) + i),nova_senha[i]));
  3069  001914  EC66  F017         	call	_Busy_eep	;wreg free
  3070  001918  0100               	movlb	0	; () banked
  3071  00191A  51A6               	movf	main@conta_a_ser_alterada& (0+255),w,b
  3072  00191C  6F89               	movwf	??_main& (0+255),b
  3073  00191E  6B8A               	clrf	(??_main+1)& (0+255),b
  3074  001920  3B89               	swapf	??_main& (0+255),f,b
  3075  001922  3B8A               	swapf	(??_main+1)& (0+255),f,b
  3076  001924  0EF0               	movlw	240
  3077  001926  178A               	andwf	(??_main+1)& (0+255),f,b
  3078  001928  5189               	movf	??_main& (0+255),w,b
  3079  00192A  0B0F               	andlw	15
  3080  00192C  138A               	iorwf	(??_main+1)& (0+255),f,b
  3081  00192E  0EF0               	movlw	240
  3082  001930  1789               	andwf	??_main& (0+255),f,b
  3083  001932  51A9               	movf	main@i_838& (0+255),w,b
  3084  001934  2589               	addwf	??_main& (0+255),w,b
  3085  001936  6F60               	movwf	Write_b_eep@badd& (0+255),b
  3086  001938  0E00               	movlw	0
  3087  00193A  218A               	addwfc	(??_main+1)& (0+255),w,b
  3088  00193C  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
  3089  00193E  51A9               	movf	main@i_838& (0+255),w,b
  3090  001940  0FDC               	addlw	low _nova_senha
  3091  001942  6ED9               	movwf	fsr2l,c
  3092  001944  6ADA               	clrf	fsr2h,c
  3093  001946  50DF               	movf	indf2,w,c
  3094  001948  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  3095  00194A  EC2D  F016         	call	_Write_b_eep	;wreg free
  3096  00194E                     l382:
  3097  00194E  B2A6               	btfsc	4006,1,c	;volatile
  3098  001950  D7FE               	goto	l382
  3099                           
  3100                           ;main.c: 815: i++;} while(nova_senha[i-1] && i<16);
  3101  001952  0100               	movlb	0	; () banked
  3102  001954  2BA9               	incf	main@i_838& (0+255),f,b
  3103                           
  3104                           ; BSR set to: 0
  3105  001956  51A9               	movf	main@i_838& (0+255),w,b
  3106  001958  0FDB               	addlw	low (_nova_senha+255)
  3107  00195A  6ED9               	movwf	fsr2l,c
  3108  00195C  6ADA               	clrf	fsr2h,c
  3109  00195E  50DF               	movf	indf2,w,c
  3110  001960  E055               	bz	l395
  3111                           
  3112                           ; BSR set to: 0
  3113  001962  0E0F               	movlw	15
  3114  001964  65A9               	cpfsgt	main@i_838& (0+255),b
  3115  001966  D7C8               	goto	l5996
  3116  001968  D051               	goto	l395
  3117  00196A                     l6008:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 818: else if(funcao == '0'){
  3121  00196A  0E30               	movlw	48
  3122  00196C  19AD               	xorwf	main@funcao& (0+255),w,b
  3123  00196E  E14E               	bnz	l395
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 819: char tentativas=0;
  3127  001970  6BA2               	clrf	main@tentativas_839& (0+255),b
  3128                           
  3129                           ;main.c: 820: while(PORTEbits.RE2==0){
  3130  001972  D015               	goto	l6024
  3131  001974                     l6012:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;main.c: 821: if(++tentativas == 6){
  3135  001974  2BA2               	incf	main@tentativas_839& (0+255),f,b
  3136  001976  0E06               	movlw	6
  3137  001978  19A2               	xorwf	main@tentativas_839& (0+255),w,b
  3138  00197A  E102               	bnz	l392
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 822: (FLAGS_1 |= (1<<5));
  3142  00197C  8BB1               	bsf	_FLAGS_1& (0+255),5,b
  3143                           
  3144                           ;main.c: 823: break;}
  3145  00197E  D046               	goto	l395
  3146  001980                     l392:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 824: LATCbits.LC4=1;
  3150  001980  888B               	bsf	3979,4,c	;volatile
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 825: delay_ms(325);
  3154  001982  0E01               	movlw	1
  3155  001984  6F61               	movwf	(delay_ms@delay_total+1)& (0+255),b
  3156  001986  0E45               	movlw	69
  3157  001988  6F60               	movwf	delay_ms@delay_total& (0+255),b
  3158  00198A  EC72  F016         	call	_delay_ms	;wreg free
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;main.c: 826: LATCbits.LC4=0;
  3162  00198E  988B               	bcf	3979,4,c	;volatile
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 827: if(PORTEbits.RE2==0) delay_ms(100);
  3166  001990  B484               	btfsc	3972,2,c	;volatile
  3167  001992  D005               	goto	l6024
  3168                           
  3169                           ; BSR set to: 0
  3170  001994  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  3171  001996  0E64               	movlw	100
  3172  001998  6F60               	movwf	delay_ms@delay_total& (0+255),b
  3173  00199A  EC72  F016         	call	_delay_ms	;wreg free
  3174  00199E                     l6024:
  3175                           
  3176                           ; BSR set to: 0
  3177  00199E  B484               	btfsc	3972,2,c	;volatile
  3178  0019A0  D035               	goto	l395
  3179  0019A2  D7E8               	goto	l6012
  3180  0019A4                     l6026:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;main.c: 833: else{
  3184                           ;main.c: 835: enviar_caractere_serial('E');
  3185  0019A4  0E45               	movlw	69
  3186  0019A6  EC49  F017         	call	_enviar_caractere_serial
  3187                           
  3188                           ;main.c: 836: if((FLAGS_1 & (1<<1))){
  3189  0019AA  0100               	movlb	0	; () banked
  3190  0019AC  A3B1               	btfss	_FLAGS_1& (0+255),1,b
  3191  0019AE  D008               	goto	l6032
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 837: enviar_string_serial("SE");}
  3195  0019B0  0EE9               	movlw	low STR_17
  3196  0019B2  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3197  0019B4  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  3198  0019B6  A4D8               	btfss	status,2,c
  3199  0019B8  0E11               	movlw	high __smallconst
  3200  0019BA  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3201  0019BC  EC16  F015         	call	_enviar_string_serial	;wreg free
  3202  0019C0                     l6032:
  3203                           
  3204                           ;main.c: 839: if((FLAGS_1 & (1<<5))){
  3205  0019C0  0100               	movlb	0	; () banked
  3206  0019C2  ABB1               	btfss	_FLAGS_1& (0+255),5,b
  3207  0019C4  D003               	goto	l6036
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 840: enviar_caractere_serial('A');}
  3211  0019C6  0E41               	movlw	65
  3212  0019C8  EC49  F017         	call	_enviar_caractere_serial
  3213  0019CC                     l6036:
  3214                           
  3215                           ;main.c: 842: if((FLAGS_1 & (1<<3))){
  3216  0019CC  0100               	movlb	0	; () banked
  3217  0019CE  A7B1               	btfss	_FLAGS_1& (0+255),3,b
  3218  0019D0  D003               	goto	l6040
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 843: enviar_caractere_serial('N');}
  3222  0019D2  0E4E               	movlw	78
  3223  0019D4  EC49  F017         	call	_enviar_caractere_serial
  3224  0019D8                     l6040:
  3225                           
  3226                           ;main.c: 845: if((FLAGS_1 & (1<<7))){
  3227  0019D8  0100               	movlb	0	; () banked
  3228  0019DA  AFB1               	btfss	_FLAGS_1& (0+255),7,b
  3229  0019DC  D003               	goto	l6044
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 846: enviar_caractere_serial('P');}
  3233  0019DE  0E50               	movlw	80
  3234  0019E0  EC49  F017         	call	_enviar_caractere_serial
  3235  0019E4                     l6044:
  3236                           
  3237                           ;main.c: 848: if((FLAGS_1 & (1<<4))){
  3238  0019E4  0100               	movlb	0	; () banked
  3239  0019E6  A9B1               	btfss	_FLAGS_1& (0+255),4,b
  3240  0019E8  D003               	goto	l6048
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;main.c: 849: enviar_caractere_serial('C');}
  3244  0019EA  0E43               	movlw	67
  3245  0019EC  EC49  F017         	call	_enviar_caractere_serial
  3246  0019F0                     l6048:
  3247                           
  3248                           ;main.c: 851: if((FLAGS_1 & (1<<6))){
  3249  0019F0  0100               	movlb	0	; () banked
  3250  0019F2  ADB1               	btfss	_FLAGS_1& (0+255),6,b
  3251  0019F4  D003               	goto	l6052
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 852: enviar_caractere_serial('S');}
  3255  0019F6  0E53               	movlw	83
  3256  0019F8  EC49  F017         	call	_enviar_caractere_serial
  3257  0019FC                     l6052:
  3258                           
  3259                           ;main.c: 854: if((FLAGS_1 & (1<<2))){
  3260  0019FC  0100               	movlb	0	; () banked
  3261  0019FE  A5B1               	btfss	_FLAGS_1& (0+255),2,b
  3262  001A00  D003               	goto	l6056
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 855: enviar_caractere_serial('I');}
  3266  001A02  0E49               	movlw	73
  3267  001A04  EC49  F017         	call	_enviar_caractere_serial
  3268  001A08                     l6056:
  3269                           
  3270                           ;main.c: 857: FLAGS_1=0;}
  3271  001A08  0100               	movlb	0	; () banked
  3272  001A0A  6BB1               	clrf	_FLAGS_1& (0+255),b
  3273  001A0C                     l395:
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;main.c: 861: enviar_caractere_serial('F');
  3277  001A0C  0E46               	movlw	70
  3278  001A0E  EC49  F017         	call	_enviar_caractere_serial
  3279                           
  3280                           ;main.c: 862: PORTB_SR = PORTB;
  3281  001A12  CF81 F031          	movff	3969,_PORTB_SR	;volatile
  3282                           
  3283                           ;main.c: 863: RBIE=1;
  3284  001A16  86F2               	bsf	intcon,3,c	;volatile
  3285  001A18                     l6062:
  3286                           
  3287                           ;main.c: 864: }
  3288                           ;main.c: 866: }
  3289                           ;main.c: 868: if((PORTB&0xF0) == 0xF0 && RBIE==0 && (FLAGS_2 & (1<<3)) && (FLAGS_3 & (1<
      +                          <2))){
  3290  001A18  5081               	movf	3969,w,c	;volatile
  3291  001A1A  0BF0               	andlw	240
  3292  001A1C  0AF0               	xorlw	240
  3293  001A1E  B4D8               	btfsc	status,2,c
  3294  001A20  B6F2               	btfsc	intcon,3,c	;volatile
  3295  001A22  D052               	goto	l403
  3296  001A24  B62D               	btfsc	_FLAGS_2,3,c
  3297  001A26  A42E               	btfss	_FLAGS_3,2,c
  3298  001A28  D04F               	goto	l403
  3299                           
  3300                           ;main.c: 870: delay_ms(100);
  3301  001A2A  0100               	movlb	0	; () banked
  3302  001A2C  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  3303  001A2E  0E64               	movlw	100
  3304  001A30  6F60               	movwf	delay_ms@delay_total& (0+255),b
  3305  001A32  EC72  F016         	call	_delay_ms	;wreg free
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;main.c: 871: if(caractere_recebido < '0' || caractere_recebido > '9'){
  3309  001A36  0E2F               	movlw	47
  3310  001A38  65B2               	cpfsgt	_caractere_recebido& (0+255),b
  3311  001A3A  D003               	goto	l6076
  3312                           
  3313                           ; BSR set to: 0
  3314  001A3C  0E39               	movlw	57
  3315  001A3E  65B2               	cpfsgt	_caractere_recebido& (0+255),b
  3316  001A40  D02A               	goto	l404
  3317  001A42                     l6076:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;main.c: 874: resetar_timer1(0xC0,0);
  3321  001A42  6B60               	clrf	resetar_timer1@valor_l& (0+255),b
  3322  001A44  0EC0               	movlw	192
  3323  001A46  EC42  F017         	call	_resetar_timer1
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 875: ultimo_caractere_recebido = caractere_recebido;
  3327  001A4A  C0B2  F0A8         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 878: if(caractere_recebido == 'F'){
  3331  001A4E  0E46               	movlw	70
  3332  001A50  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3333  001A52  E102               	bnz	l6084
  3334  001A54                     l6082:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;main.c: 879: (FLAGS_2 |= (1<<1));}
  3338  001A54  822D               	bsf	_FLAGS_2,1,c
  3339  001A56  D033               	goto	l427
  3340  001A58                     l6084:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 881: else if(caractere_recebido == 'A'){
  3344  001A58  0E41               	movlw	65
  3345  001A5A  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3346  001A5C  E102               	bnz	l6088
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;main.c: 882: (FLAGS_2 ^= (1<<4));}
  3350  001A5E  0E10               	movlw	16
  3351  001A60  D004               	goto	L4
  3352  001A62                     l6088:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 884: else if(caractere_recebido == '*'){
  3356  001A62  0E2A               	movlw	42
  3357  001A64  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3358  001A66  E103               	bnz	l6092
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 885: (FLAGS_2 ^= (1<<5));}
  3362  001A68  0E20               	movlw	32
  3363  001A6A                     L4:
  3364  001A6A  1A2D               	xorwf	_FLAGS_2,f,c
  3365  001A6C  D028               	goto	l427
  3366  001A6E                     l6092:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 887: else if(caractere_recebido == 'D'){
  3370  001A6E  0E44               	movlw	68
  3371  001A70  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3372  001A72  E125               	bnz	l427
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 889: if(qtd_caracteres_recebidos_teclado) qtd_caracteres_recebidos_teclado--;
  3376  001A74  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3377  001A76  A4D8               	btfss	status,2,c
  3378                           
  3379                           ; BSR set to: 0
  3380  001A78  0636               	decf	_qtd_caracteres_recebidos_teclado,f,c
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 890: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]=0;
  3384  001A7A  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3385  001A7C  0FB4               	addlw	low _buffer_teclado_matricial
  3386  001A7E  6ED9               	movwf	fsr2l,c
  3387  001A80  6ADA               	clrf	fsr2h,c
  3388  001A82  6ADF               	clrf	indf2,c
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 892: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado); printf(" ");
  3392  001A84  C036  F061         	movff	_qtd_caracteres_recebidos_teclado,lcd_gotoxy@coluna
  3393  001A88  0E02               	movlw	2
  3394  001A8A  EC41  F015         	call	_lcd_gotoxy
  3395                           
  3396                           ; BSR set to: 0
  3397  001A8E  0EF5               	movlw	STR_18& (0+255)
  3398  001A90  ECDC  F00D         	call	_printf
  3399  001A94  D014               	goto	l427
  3400  001A96                     l404:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;main.c: 899: else{
  3404                           ;main.c: 900: if((FLAGS_2 & (1<<4))){
  3405  001A96  A82D               	btfss	_FLAGS_2,4,c
  3406  001A98  D7DD               	goto	l6082
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;main.c: 901: if(ultimo_caractere_recebido == caractere_recebido){
  3410  001A9A  51B2               	movf	_caractere_recebido& (0+255),w,b
  3411  001A9C  19A8               	xorwf	main@ultimo_caractere_recebido& (0+255),w,b
  3412  001A9E  E10B               	bnz	l6114
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 902: if(++qtd_vezes_mesma_tecla_pressionada == 3 || ((qtd_vezes_mesma_tecla_pre
      +                          ssionada==2) && caractere_recebido == '9'))
  3416  001AA0  2BB3               	incf	_qtd_vezes_mesma_tecla_pressionada& (0+255),f,b
  3417  001AA2  0E03               	movlw	3
  3418  001AA4  19B3               	xorwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3419  001AA6  E0D6               	bz	l6082
  3420                           
  3421                           ; BSR set to: 0
  3422  001AA8  0E02               	movlw	2
  3423  001AAA  19B3               	xorwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3424  001AAC  E108               	bnz	l427
  3425                           
  3426                           ; BSR set to: 0
  3427  001AAE  0E39               	movlw	57
  3428  001AB0  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3429  001AB2  E0D0               	bz	l6082
  3430  001AB4  D004               	goto	l427
  3431  001AB6                     l6114:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;main.c: 907: else {
  3435                           ;main.c: 908: if(qtd_vezes_mesma_tecla_pressionada) (FLAGS_2 |= (1<<1));
  3436  001AB6  51B3               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3437  001AB8  E1CD               	bnz	l6082
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;main.c: 910: else ultimo_caractere_recebido = caractere_recebido;
  3441  001ABA  C0B2  F0A8         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  3442  001ABE                     l427:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 921: if((FLAGS_2 & (1<<4))) {TMR1ON=1;}
  3446  001ABE  B82D               	btfsc	_FLAGS_2,4,c
  3447                           
  3448                           ; BSR set to: 0
  3449  001AC0  80CD               	bsf	4045,0,c	;volatile
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;main.c: 923: PORTB_SR=PORTB;
  3453  001AC2  CF81 F031          	movff	3969,_PORTB_SR	;volatile
  3454                           
  3455                           ;main.c: 924: RBIE=1;
  3456  001AC6  86F2               	bsf	intcon,3,c	;volatile
  3457  001AC8                     l403:
  3458                           
  3459                           ;main.c: 925: }
  3460                           ;main.c: 928: if((FLAGS_2 & (1<<7))){
  3461  001AC8  AE2D               	btfss	_FLAGS_2,7,c
  3462  001ACA  D026               	goto	l6130
  3463                           
  3464                           ;main.c: 929: (FLAGS_2 &= ~(1<<7));
  3465  001ACC  9E2D               	bcf	_FLAGS_2,7,c
  3466                           
  3467                           ;main.c: 931: if((FLAGS_3 & (1<<0))){
  3468  001ACE  A02E               	btfss	_FLAGS_3,0,c
  3469  001AD0  D023               	goto	l6130
  3470                           
  3471                           ;main.c: 932: printf("\n\n\n%02d:%02d:%02d-%02d.%02d.%02d",data_atual.hora,data_atual.mi
      +                          nuto,data_atual.segundo, data_atual.dia,data_atual.mes,((data_atual.ano+15)%100) );
  3472  001AD2  C03B  F06C         	movff	_data_atual+3,?_printf
  3473  001AD6  0100               	movlb	0	; () banked
  3474  001AD8  6B6D               	clrf	(?_printf+1)& (0+255),b
  3475  001ADA  C03C  F06E         	movff	_data_atual+4,?_printf+2
  3476  001ADE  6B6F               	clrf	(?_printf+3)& (0+255),b
  3477  001AE0  C03D  F070         	movff	_data_atual+5,?_printf+4
  3478  001AE4  6B71               	clrf	(?_printf+5)& (0+255),b
  3479  001AE6  C03A  F072         	movff	_data_atual+2,?_printf+6
  3480  001AEA  6B73               	clrf	(?_printf+7)& (0+255),b
  3481  001AEC  C039  F074         	movff	_data_atual+1,?_printf+8
  3482  001AF0  6B75               	clrf	(?_printf+9)& (0+255),b
  3483  001AF2  0E0F               	movlw	15
  3484  001AF4  2438               	addwf	_data_atual,w,c
  3485  001AF6  6F60               	movwf	___awmod@dividend& (0+255),b
  3486  001AF8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3487  001AFA  0E00               	movlw	0
  3488  001AFC  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3489  001AFE  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3490  001B00  0E64               	movlw	100
  3491  001B02  6F62               	movwf	___awmod@divisor& (0+255),b
  3492  001B04  ECAE  F014         	call	___awmod	;wreg free
  3493  001B08  C060  F076         	movff	?___awmod,?_printf+10
  3494  001B0C  C061  F077         	movff	?___awmod+1,?_printf+11
  3495  001B10  0E0B               	movlw	STR_19& (0+255)
  3496  001B12  ECDC  F00D         	call	_printf
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 933: (FLAGS_3 &= ~(1<<0));
  3500  001B16  902E               	bcf	_FLAGS_3,0,c
  3501  001B18                     l6130:
  3502                           
  3503                           ;main.c: 934: }
  3504                           ;main.c: 937: }
  3505                           ;main.c: 939: if( (!(FLAGS_2 & (1<<7)))&& (!(FLAGS_2 & (1<<1))) && (!(FLAGS_2 & (1<<0)))
      +                           && RBIE && RCIE){
  3506  001B18  AE2D               	btfss	_FLAGS_2,7,c
  3507  001B1A  B22D               	btfsc	_FLAGS_2,1,c
  3508  001B1C  EF8E  F009         	goto	l5592
  3509  001B20  A02D               	btfss	_FLAGS_2,0,c
  3510  001B22  A6F2               	btfss	intcon,3,c	;volatile
  3511  001B24  EF8E  F009         	goto	l5592
  3512  001B28  AA9D               	btfss	3997,5,c	;volatile
  3513  001B2A  EF8E  F009         	goto	l5592
  3514  001B2E  0003               	sleep		;# 
  3515                           
  3516                           ;main.c: 941: __nop();}
  3517  001B30  F000               	nop	
  3518  001B32  EF8E  F009         	goto	l5592
  3519  001B36                     __end_of_main:
  3520                           	opt stack 0
  3521  001B36                     PL2:
  3522                           	opt stack 20
  3523  001B36  0E00               	movlw	low _buffer_serial
  3524  001B38  25AE               	addwf	main@cont& (0+255),w,b
  3525  001B3A  6ED9               	movwf	fsr2l,c
  3526  001B3C  6ADA               	clrf	fsr2h,c
  3527  001B3E  0E01               	movlw	high _buffer_serial
  3528  001B40  22DA               	addwfc	fsr2h,f,c
  3529  001B42  0012               	return	
  3530  001B44                     __end_ofPL2:
  3531                           	opt stack 0
  3532  001B44                     PL4:
  3533                           	opt stack 20
  3534  001B44  0E01               	movlw	1
  3535  001B46  6F8A               	movwf	(??_main+1)& (0+255),b
  3536  001B48  6B8B               	clrf	(??_main+2)& (0+255),b
  3537  001B4A  2B89               	incf	??_main& (0+255),f,b
  3538  001B4C  D003               	goto	u6314
  3539  001B4E                     u6315:
  3540  001B4E  90D8               	bcf	status,0,c
  3541  001B50  378A               	rlcf	(??_main+1)& (0+255),f,b
  3542  001B52  378B               	rlcf	(??_main+2)& (0+255),f,b
  3543  001B54                     u6314:
  3544  001B54  2F89               	decfsz	??_main& (0+255),f,b
  3545  001B56  D7FB               	goto	u6315
  3546  001B58  0100               	movlb	0	; () banked
  3547  001B5A  0012               	return	
  3548  001B5C                     __end_ofPL4:
  3549                           	opt stack 0
  3550  001B5C                     PL6:
  3551                           	opt stack 20
  3552  001B5C  51AB               	movf	main@conta& (0+255),w,b
  3553  001B5E  0D11               	mullw	17
  3554  001B60  0E5F               	movlw	low (_senha+15)
  3555  001B62  24F3               	addwf	prodl,w,c
  3556  001B64  6ED9               	movwf	fsr2l,c
  3557  001B66  0E01               	movlw	high (_senha+15)
  3558  001B68  20F4               	addwfc	prodh,w,c
  3559  001B6A  6EDA               	movwf	fsr2h,c
  3560  001B6C  50DF               	movf	indf2,w,c
  3561  001B6E  0012               	return	
  3562  001B70                     __end_ofPL6:
  3563                           	opt stack 0
  3564  001B70                     PL20:
  3565                           	opt stack 20
  3566  001B70  2BAE               	incf	main@cont& (0+255),f,b
  3567  001B72  05AE               	decf	main@cont& (0+255),w,b
  3568  001B74  6F89               	movwf	??_main& (0+255),b
  3569  001B76  6B8A               	clrf	(??_main+1)& (0+255),b
  3570  001B78  0E00               	movlw	low _buffer_serial
  3571  001B7A  2589               	addwf	??_main& (0+255),w,b
  3572  001B7C  6ED9               	movwf	fsr2l,c
  3573  001B7E  0E01               	movlw	high _buffer_serial
  3574  001B80  218A               	addwfc	(??_main+1)& (0+255),w,b
  3575  001B82  6EDA               	movwf	fsr2h,c
  3576  001B84  0012               	return	
  3577  001B86                     __end_ofPL20:
  3578                           	opt stack 0
  3579  001B86                     PL24:
  3580                           	opt stack 20
  3581  001B86  0D11               	mullw	17
  3582  001B88  0E50               	movlw	low _senha
  3583  001B8A  6F89               	movwf	??_main& (0+255),b
  3584  001B8C  0E01               	movlw	high _senha
  3585  001B8E  6F8A               	movwf	(??_main+1)& (0+255),b
  3586  001B90  50F3               	movf	prodl,w,c
  3587  001B92  2789               	addwf	??_main& (0+255),f,b
  3588  001B94  50F4               	movf	prodh,w,c
  3589  001B96  238A               	addwfc	(??_main+1)& (0+255),f,b
  3590  001B98  0012               	return	
  3591  001B9A                     __end_ofPL24:
  3592                           	opt stack 0
  3593  001B9A                     PL26:
  3594                           	opt stack 20
  3595  001B9A  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3596  001B9C  0FB4               	addlw	low _buffer_teclado_matricial
  3597  001B9E  6ED9               	movwf	fsr2l,c
  3598  001BA0  6ADA               	clrf	fsr2h,c
  3599  001BA2  50DF               	movf	indf2,w,c
  3600  001BA4  6F6C               	movwf	?_printf& (0+255),b
  3601  001BA6  6B6D               	clrf	(?_printf+1)& (0+255),b
  3602  001BA8  0012               	return	
  3603  001BAA                     __end_ofPL26:
  3604                           	opt stack 0
  3605  001BAA                     PL34:
  3606                           	opt stack 20
  3607  001BAA  51A3               	movf	main@contas_cadastradas& (0+255),w,b
  3608  001BAC  178A               	andwf	(??_main+1)& (0+255),f,b
  3609  001BAE  51A4               	movf	(main@contas_cadastradas+1)& (0+255),w,b
  3610  001BB0  178B               	andwf	(??_main+2)& (0+255),f,b
  3611  001BB2  518A               	movf	(??_main+1)& (0+255),w,b
  3612  001BB4  118B               	iorwf	(??_main+2)& (0+255),w,b
  3613  001BB6  0012               	return	
  3614  001BB8                     __end_ofPL34:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           intcon	equ	0xFF2
  3623                           intcon2	equ	0xFF1
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           indf1	equ	0xFE7
  3627                           postinc1	equ	0xFE6
  3628                           postdec1	equ	0xFE5
  3629                           plusw1	equ	0xFE3
  3630                           fsr1h	equ	0xFE2
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           plusw2	equ	0xFDB
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _zerar_string *****************
  3641 ;; Defined at:
  3642 ;;		line 106 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  string_a_zer    2    0[BANK0 ] PTR unsigned char 
  3645 ;;		 -> buffer_teclado_matricial(40), buffer_serial(80), 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;		None               void
  3650 ;; Registers used:
  3651 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3652 ;; Tracked objects:
  3653 ;;		On entry : F/0
  3654 ;;		On exit  : F/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3657 ;;      Params:         0       2       0       0       0       0       0       0       0
  3658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3660 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3661 ;;Total ram usage:        2 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    6
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_main
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text1
  3672  002DA2                     __ptext1:
  3673                           	opt stack 0
  3674  002DA2                     _zerar_string:
  3675                           	opt stack 24
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 108: while(*string_a_zerar != (0)){
  3679                           
  3680                           ;incstack = 0
  3681  002DA2  D008               	goto	l5150
  3682  002DA4                     l5146:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main.c: 109: *string_a_zerar=0;
  3686  002DA4  C060  FFD9         	movff	zerar_string@string_a_zerar,fsr2l
  3687  002DA8  C061  FFDA         	movff	zerar_string@string_a_zerar+1,fsr2h
  3688  002DAC  0E00               	movlw	0
  3689  002DAE  6EDF               	movwf	indf2,c
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;main.c: 110: string_a_zerar++;}
  3693  002DB0  4B60               	infsnz	zerar_string@string_a_zerar& (0+255),f,b
  3694  002DB2  2B61               	incf	(zerar_string@string_a_zerar+1)& (0+255),f,b
  3695  002DB4                     l5150:
  3696                           
  3697                           ; BSR set to: 0
  3698  002DB4  C060  FFD9         	movff	zerar_string@string_a_zerar,fsr2l
  3699  002DB8  C061  FFDA         	movff	zerar_string@string_a_zerar+1,fsr2h
  3700  002DBC  50DF               	movf	indf2,w,c
  3701  002DBE  B4D8               	btfsc	status,2,c
  3702                           
  3703                           ; BSR set to: 0
  3704  002DC0  0012               	return		;funcret
  3705  002DC2  D7F0               	goto	l5146
  3706  002DC4                     __end_of_zerar_string:
  3707                           	opt stack 0
  3708                           tblptru	equ	0xFF8
  3709                           tblptrh	equ	0xFF7
  3710                           tblptrl	equ	0xFF6
  3711                           tablat	equ	0xFF5
  3712                           prodh	equ	0xFF4
  3713                           prodl	equ	0xFF3
  3714                           intcon	equ	0xFF2
  3715                           intcon2	equ	0xFF1
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           indf1	equ	0xFE7
  3719                           postinc1	equ	0xFE6
  3720                           postdec1	equ	0xFE5
  3721                           plusw1	equ	0xFE3
  3722                           fsr1h	equ	0xFE2
  3723                           fsr1l	equ	0xFE1
  3724                           indf2	equ	0xFDF
  3725                           postinc2	equ	0xFDE
  3726                           postdec2	equ	0xFDD
  3727                           plusw2	equ	0xFDB
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _verificar_num_contas *****************
  3733 ;; Defined at:
  3734 ;;		line 19 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;		None
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  i               1    3[BANK0 ] unsigned char 
  3739 ;;  qtd_contas      1    2[BANK0 ] unsigned char 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      unsigned char 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : F/0
  3746 ;;		On exit  : F/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3749 ;;      Params:         0       0       0       0       0       0       0       0       0
  3750 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3752 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3753 ;;Total ram usage:        2 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    7
  3756 ;; This function calls:
  3757 ;;		_Read_b_eep
  3758 ;; This function is called by:
  3759 ;;		_main
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           	psect	text2
  3764  002CBA                     __ptext2:
  3765                           	opt stack 0
  3766  002CBA                     _verificar_num_contas:
  3767                           	opt stack 23
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;eeprom_interna.c: 20: char i;
  3771                           ;eeprom_interna.c: 21: unsigned char qtd_contas=0;
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;incstack = 0
  3775  002CBA  6B62               	clrf	verificar_num_contas@qtd_contas& (0+255),b
  3776                           
  3777                           ;eeprom_interna.c: 22: for(i=0;i<16;i++){
  3778  002CBC  6B63               	clrf	verificar_num_contas@i& (0+255),b
  3779  002CBE                     l5346:
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;eeprom_interna.c: 23: if(Read_b_eep(i*16) != 0xFF) {qtd_contas++;}
  3783  002CBE  5163               	movf	verificar_num_contas@i& (0+255),w,b
  3784  002CC0  0D10               	mullw	16
  3785  002CC2  CFF3 F060          	movff	prodl,Read_b_eep@badd
  3786  002CC6  CFF4 F061          	movff	prodh,Read_b_eep@badd+1
  3787  002CCA  EC39  F017         	call	_Read_b_eep	;wreg free
  3788  002CCE  0AFF               	xorlw	255
  3789  002CD0  E002               	bz	l597
  3790  002CD2  0100               	movlb	0	; () banked
  3791  002CD4  2B62               	incf	verificar_num_contas@qtd_contas& (0+255),f,b
  3792  002CD6                     l597:
  3793  002CD6  0100               	movlb	0	; () banked
  3794  002CD8  2B63               	incf	verificar_num_contas@i& (0+255),f,b
  3795                           
  3796                           ; BSR set to: 0
  3797  002CDA  0E0F               	movlw	15
  3798  002CDC  6563               	cpfsgt	verificar_num_contas@i& (0+255),b
  3799  002CDE  D7EF               	goto	l5346
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;eeprom_interna.c: 24: }
  3803                           ;eeprom_interna.c: 25: return (qtd_contas);
  3804  002CE0  5162               	movf	verificar_num_contas@qtd_contas& (0+255),w,b
  3805                           
  3806                           ; BSR set to: 0
  3807  002CE2  0012               	return		;funcret
  3808  002CE4                     __end_of_verificar_num_contas:
  3809                           	opt stack 0
  3810                           tblptru	equ	0xFF8
  3811                           tblptrh	equ	0xFF7
  3812                           tblptrl	equ	0xFF6
  3813                           tablat	equ	0xFF5
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon2	equ	0xFF1
  3818                           postinc0	equ	0xFEE
  3819                           wreg	equ	0xFE8
  3820                           indf1	equ	0xFE7
  3821                           postinc1	equ	0xFE6
  3822                           postdec1	equ	0xFE5
  3823                           plusw1	equ	0xFE3
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           plusw2	equ	0xFDB
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _resetar_timer1 *****************
  3835 ;; Defined at:
  3836 ;;		line 30 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  valor_h         1    wreg     unsigned char 
  3839 ;;  valor_l         1    0[BANK0 ] unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  valor_h         1    1[BANK0 ] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg
  3846 ;; Tracked objects:
  3847 ;;		On entry : F/0
  3848 ;;		On exit  : F/0
  3849 ;;		Unchanged: F/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3851 ;;      Params:         0       1       0       0       0       0       0       0       0
  3852 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3854 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3855 ;;Total ram usage:        2 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    6
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_main
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text3
  3866  002E84                     __ptext3:
  3867                           	opt stack 0
  3868  002E84                     _resetar_timer1:
  3869                           	opt stack 24
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;incstack = 0
  3873                           ;resetar_timer1@valor_h stored from wreg
  3874  002E84  6F61               	movwf	resetar_timer1@valor_h& (0+255),b
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;time.c: 31: TMR1ON=0;
  3878  002E86  90CD               	bcf	4045,0,c	;volatile
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;time.c: 32: TMR1H=valor_h;
  3882  002E88  C061  FFCF         	movff	resetar_timer1@valor_h,4047	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;time.c: 33: TMR1L=valor_l;
  3886  002E8C  C060  FFCE         	movff	resetar_timer1@valor_l,4046	;volatile
  3887                           
  3888                           ; BSR set to: 0
  3889  002E90  0012               	return		;funcret
  3890  002E92                     __end_of_resetar_timer1:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodh	equ	0xFF4
  3897                           prodl	equ	0xFF3
  3898                           intcon	equ	0xFF2
  3899                           intcon2	equ	0xFF1
  3900                           postinc0	equ	0xFEE
  3901                           wreg	equ	0xFE8
  3902                           indf1	equ	0xFE7
  3903                           postinc1	equ	0xFE6
  3904                           postdec1	equ	0xFE5
  3905                           plusw1	equ	0xFE3
  3906                           fsr1h	equ	0xFE2
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           plusw2	equ	0xFDB
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function _printf *****************
  3917 ;; Defined at:
  3918 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  f               1    wreg     PTR const unsigned char 
  3921 ;;		 -> STR_19(33), STR_18(2), STR_14(18), STR_13(22), 
  3922 ;;		 -> STR_12(20), STR_11(15), STR_10(19), STR_9(3), 
  3923 ;;		 -> STR_8(17), STR_7(3), STR_6(4), STR_5(5), 
  3924 ;;		 -> STR_2(3), STR_1(2), 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  f               1   37[BANK0 ] PTR const unsigned char 
  3927 ;;		 -> STR_19(33), STR_18(2), STR_14(18), STR_13(22), 
  3928 ;;		 -> STR_12(20), STR_11(15), STR_10(19), STR_9(3), 
  3929 ;;		 -> STR_8(17), STR_7(3), STR_6(4), STR_5(5), 
  3930 ;;		 -> STR_2(3), STR_1(2), 
  3931 ;;  tmpval          4    0        struct .
  3932 ;;  width           2   38[BANK0 ] int 
  3933 ;;  len             2   34[BANK0 ] unsigned int 
  3934 ;;  val             2   32[BANK0 ] unsigned int 
  3935 ;;  cp              2   29[BANK0 ] PTR const unsigned char 
  3936 ;;		 -> STR_32(7), printf@c(1), buffer_teclado_matricial(40), 
  3937 ;;  c               1   40[BANK0 ] char 
  3938 ;;  flag            1   36[BANK0 ] unsigned char 
  3939 ;;  ap              1   31[BANK0 ] PTR void [1]
  3940 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3941 ;;  prec            1   28[BANK0 ] char 
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  2   12[BANK0 ] int 
  3944 ;; Registers used:
  3945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : F/0
  3948 ;;		On exit  : F/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3951 ;;      Params:         0      12       0       0       0       0       0       0       0
  3952 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3953 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3954 ;;      Totals:         0      29       0       0       0       0       0       0       0
  3955 ;;Total ram usage:       29 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:   10
  3958 ;; This function calls:
  3959 ;;		___lwdiv
  3960 ;;		___lwmod
  3961 ;;		___wmul
  3962 ;;		_isdigit
  3963 ;;		_putch
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text4
  3970  001BB8                     __ptext4:
  3971                           	opt stack 0
  3972  001BB8                     _printf:
  3973                           	opt stack 20
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;incstack = 0
  3977                           ;printf@f stored from wreg
  3978  001BB8  6F85               	movwf	printf@f& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 466: va_list ap;
  3982                           ;doprnt.c: 499: signed char c;
  3983                           ;doprnt.c: 501: int width;
  3984                           ;doprnt.c: 506: signed char prec;
  3985                           ;doprnt.c: 508: unsigned char flag;
  3986                           ;doprnt.c: 523: union {
  3987                           ;doprnt.c: 524: unsigned long vd;
  3988                           ;doprnt.c: 525: double integ;
  3989                           ;doprnt.c: 526: } tmpval;
  3990                           ;doprnt.c: 528: unsigned int val;
  3991                           ;doprnt.c: 529: unsigned len;
  3992                           ;doprnt.c: 530: const char * cp;
  3993                           ;doprnt.c: 533: *ap = __va_start();
  3994  001BBA  0E6C               	movlw	low ?_printf
  3995  001BBC  6F7F               	movwf	printf@ap& (0+255),b
  3996                           
  3997                           ;doprnt.c: 536: while(c = *f++) {
  3998  001BBE  D159               	goto	l5278
  3999  001BC0                     l5154:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;doprnt.c: 538: if(c != '%')
  4003  001BC0  0E25               	movlw	37
  4004  001BC2  1988               	xorwf	printf@c& (0+255),w,b
  4005  001BC4  E004               	bz	l791
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;doprnt.c: 540: {
  4009                           ;doprnt.c: 541: (putch(c) );
  4010  001BC6  5188               	movf	printf@c& (0+255),w,b
  4011  001BC8  EC5D  F017         	call	_putch
  4012                           
  4013                           ;doprnt.c: 542: continue;
  4014  001BCC  D152               	goto	l5278
  4015  001BCE                     l791:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;doprnt.c: 543: }
  4019                           ;doprnt.c: 546: width = 0;
  4020  001BCE  6B86               	clrf	printf@width& (0+255),b
  4021  001BD0  6B87               	clrf	(printf@width+1)& (0+255),b
  4022                           
  4023                           ;doprnt.c: 548: flag = 0;
  4024  001BD2  6B84               	clrf	printf@flag& (0+255),b
  4025  001BD4  D002               	goto	l5162
  4026  001BD6                     l5158:
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 580: flag |= 0x04;
  4030  001BD6  8584               	bsf	printf@flag& (0+255),2,b
  4031                           
  4032                           ;doprnt.c: 581: f++;
  4033  001BD8  2B85               	incf	printf@f& (0+255),f,b
  4034  001BDA                     l5162:
  4035                           
  4036                           ; BSR set to: 0
  4037  001BDA  C085  FFF6         	movff	printf@f,tblptrl
  4038  001BDE  ECA5  F010         	call	PL12	;call to abstracted procedure
  4039                           
  4040                           ; Switch size 1, requested type "space"
  4041                           ; Number of cases is 1, Range of values is 48 to 48
  4042                           ; switch strategies available:
  4043                           ; Name         Instructions Cycles
  4044                           ; simple_byte            4     3 (average)
  4045                           ;	Chosen strategy is simple_byte
  4046  001BE2  0A30               	xorlw	48	; case 48
  4047  001BE4  E0F8               	bz	l5158
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4051  001BE6  C085  FFF6         	movff	printf@f,tblptrl
  4052  001BEA  ECA5  F010         	call	PL12	;call to abstracted procedure
  4053  001BEE  EC03  F017         	call	_isdigit
  4054  001BF2  E201 D09F          	bnc	l5214
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;doprnt.c: 598: width = 0;
  4058  001BF6  6B86               	clrf	printf@width& (0+255),b
  4059  001BF8  6B87               	clrf	(printf@width+1)& (0+255),b
  4060  001BFA                     l5168:
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;doprnt.c: 600: width *= 10;
  4064  001BFA  C086  F060         	movff	printf@width,___wmul@multiplier
  4065  001BFE  C087  F061         	movff	printf@width+1,___wmul@multiplier+1
  4066  001C02  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  4067  001C04  0E0A               	movlw	10
  4068  001C06  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4069  001C08  EC87  F016         	call	___wmul	;wreg free
  4070  001C0C  C060  F086         	movff	?___wmul,printf@width
  4071  001C10  C061  F087         	movff	?___wmul+1,printf@width+1
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;doprnt.c: 601: width += *f++ - '0';
  4075  001C14  0ED0               	movlw	208
  4076  001C16  6F78               	movwf	??_printf& (0+255),b
  4077  001C18  6979               	setf	(??_printf+1)& (0+255),b
  4078  001C1A  C085  FFF6         	movff	printf@f,tblptrl
  4079  001C1E  ECA5  F010         	call	PL12	;call to abstracted procedure
  4080  001C22  6F7A               	movwf	(??_printf+2)& (0+255),b
  4081  001C24  6B7B               	clrf	(??_printf+3)& (0+255),b
  4082  001C26  5178               	movf	??_printf& (0+255),w,b
  4083  001C28  277A               	addwf	(??_printf+2)& (0+255),f,b
  4084  001C2A  5179               	movf	(??_printf+1)& (0+255),w,b
  4085  001C2C  237B               	addwfc	(??_printf+3)& (0+255),f,b
  4086  001C2E  517A               	movf	(??_printf+2)& (0+255),w,b
  4087  001C30  2786               	addwf	printf@width& (0+255),f,b
  4088  001C32  517B               	movf	(??_printf+3)& (0+255),w,b
  4089  001C34  2387               	addwfc	(printf@width+1)& (0+255),f,b
  4090                           
  4091                           ; BSR set to: 0
  4092  001C36  2B85               	incf	printf@f& (0+255),f,b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4096  001C38  C085  FFF6         	movff	printf@f,tblptrl
  4097  001C3C  ECA5  F010         	call	PL12	;call to abstracted procedure
  4098  001C40  EC03  F017         	call	_isdigit
  4099  001C44  E377               	bnc	l5214
  4100  001C46  D7D9               	goto	l5168
  4101  001C48                     l5176:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4105  001C48  517F               	movf	printf@ap& (0+255),w,b
  4106  001C4A  6ED9               	movwf	fsr2l,c
  4107  001C4C  6ADA               	clrf	fsr2h,c
  4108  001C4E  50DF               	movf	indf2,w,c
  4109  001C50  6F78               	movwf	??_printf& (0+255),b
  4110  001C52  C078  F07D         	movff	??_printf,printf@cp
  4111  001C56  6B7E               	clrf	(printf@cp+1)& (0+255),b
  4112                           
  4113                           ; BSR set to: 0
  4114  001C58  2B7F               	incf	printf@ap& (0+255),f,b
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;doprnt.c: 740: if(!cp)
  4118  001C5A  517D               	movf	printf@cp& (0+255),w,b
  4119  001C5C  117E               	iorwf	(printf@cp+1)& (0+255),w,b
  4120  001C5E  E106               	bnz	l5184
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;doprnt.c: 741: cp = "(null)";
  4124  001C60  0E9B               	movlw	low STR_32
  4125  001C62  6F7D               	movwf	printf@cp& (0+255),b
  4126  001C64  517D               	movf	printf@cp& (0+255),w,b
  4127  001C66  A4D8               	btfss	status,2,c
  4128  001C68  0E11               	movlw	high __smallconst
  4129  001C6A  6F7E               	movwf	(printf@cp+1)& (0+255),b
  4130  001C6C                     l5184:
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;doprnt.c: 745: len = 0;
  4134  001C6C  6B82               	clrf	printf@len& (0+255),b
  4135  001C6E  6B83               	clrf	(printf@len+1)& (0+255),b
  4136                           
  4137                           ;doprnt.c: 746: while(cp[len])
  4138  001C70  D003               	goto	l5188
  4139  001C72                     l5186:
  4140                           
  4141                           ;doprnt.c: 747: len++;
  4142  001C72  0100               	movlb	0	; () banked
  4143  001C74  4B82               	infsnz	printf@len& (0+255),f,b
  4144  001C76  2B83               	incf	(printf@len+1)& (0+255),f,b
  4145  001C78                     l5188:
  4146                           
  4147                           ; BSR set to: 0
  4148  001C78  5182               	movf	printf@len& (0+255),w,b
  4149  001C7A  257D               	addwf	printf@cp& (0+255),w,b
  4150  001C7C  6F78               	movwf	??_printf& (0+255),b
  4151  001C7E  5183               	movf	(printf@len+1)& (0+255),w,b
  4152  001C80  217E               	addwfc	(printf@cp+1)& (0+255),w,b
  4153  001C82  6F79               	movwf	(??_printf+1)& (0+255),b
  4154  001C84  C078  FFF6         	movff	??_printf,tblptrl
  4155  001C88  C079  FFF7         	movff	??_printf+1,tblptrh
  4156  001C8C  6AF8               	clrf	tblptru,c
  4157  001C8E  0E07               	movlw	(high __ramtop+-1)
  4158  001C90  64F7               	cpfsgt	tblptrh,c
  4159  001C92  D003               	bra	u5827
  4160  001C94  0008               	tblrd		*
  4161  001C96  50F5               	movf	tablat,w,c
  4162  001C98  D005               	bra	u5820
  4163  001C9A                     u5827:
  4164  001C9A  CFF6 FFE1          	movff	tblptrl,fsr1l
  4165  001C9E  CFF7 FFE2          	movff	tblptrh,fsr1h
  4166  001CA2  50E7               	movf	indf1,w,c
  4167  001CA4                     u5820:
  4168  001CA4  0900               	iorlw	0
  4169  001CA6  E1E5               	bnz	l5186
  4170  001CA8                     l5190:
  4171                           
  4172                           ;doprnt.c: 757: if(width > len)
  4173  001CA8  0100               	movlb	0	; () banked
  4174  001CAA  5186               	movf	printf@width& (0+255),w,b
  4175  001CAC  5D82               	subwf	printf@len& (0+255),w,b
  4176  001CAE  5187               	movf	(printf@width+1)& (0+255),w,b
  4177  001CB0  5983               	subwfb	(printf@len+1)& (0+255),w,b
  4178  001CB2  E205               	bc	l813
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;doprnt.c: 758: width -= len;
  4182  001CB4  5182               	movf	printf@len& (0+255),w,b
  4183  001CB6  5F86               	subwf	printf@width& (0+255),f,b
  4184  001CB8  5183               	movf	(printf@len+1)& (0+255),w,b
  4185  001CBA  5B87               	subwfb	(printf@width+1)& (0+255),f,b
  4186  001CBC  D006               	goto	l5196
  4187  001CBE                     l813:
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 759: else
  4191                           ;doprnt.c: 760: width = 0;
  4192  001CBE  6B86               	clrf	printf@width& (0+255),b
  4193  001CC0  6B87               	clrf	(printf@width+1)& (0+255),b
  4194  001CC2  D003               	goto	l5196
  4195  001CC4                     l5194:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;doprnt.c: 765: (putch(' ') );
  4199  001CC4  0E20               	movlw	32
  4200  001CC6  EC5D  F017         	call	_putch
  4201  001CCA                     l5196:
  4202  001CCA  0100               	movlb	0	; () banked
  4203  001CCC  0786               	decf	printf@width& (0+255),f,b
  4204  001CCE  A0D8               	btfss	status,0,c
  4205  001CD0  0787               	decf	(printf@width+1)& (0+255),f,b
  4206  001CD2  2986               	incf	printf@width& (0+255),w,b
  4207  001CD4  E1F7               	bnz	l5194
  4208  001CD6  2987               	incf	(printf@width+1)& (0+255),w,b
  4209  001CD8  E016               	bz	l5202
  4210  001CDA  D7F4               	goto	l5194
  4211  001CDC                     l5198:
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;doprnt.c: 768: (putch(*cp++) );
  4215  001CDC  C07D  FFF6         	movff	printf@cp,tblptrl
  4216  001CE0  C07E  FFF7         	movff	printf@cp+1,tblptrh
  4217  001CE4  6AF8               	clrf	tblptru,c
  4218  001CE6  0E07               	movlw	(high __ramtop+-1)
  4219  001CE8  64F7               	cpfsgt	tblptrh,c
  4220  001CEA  D003               	bra	u5867
  4221  001CEC  0008               	tblrd		*
  4222  001CEE  50F5               	movf	tablat,w,c
  4223  001CF0  D005               	bra	u5860
  4224  001CF2                     u5867:
  4225  001CF2  CFF6 FFE1          	movff	tblptrl,fsr1l
  4226  001CF6  CFF7 FFE2          	movff	tblptrh,fsr1h
  4227  001CFA  50E7               	movf	indf1,w,c
  4228  001CFC                     u5860:
  4229  001CFC  EC5D  F017         	call	_putch
  4230  001D00  0100               	movlb	0	; () banked
  4231  001D02  4B7D               	infsnz	printf@cp& (0+255),f,b
  4232  001D04  2B7E               	incf	(printf@cp+1)& (0+255),f,b
  4233  001D06                     l5202:
  4234                           
  4235                           ; BSR set to: 0
  4236  001D06  0782               	decf	printf@len& (0+255),f,b
  4237  001D08  A0D8               	btfss	status,0,c
  4238  001D0A  0783               	decf	(printf@len+1)& (0+255),f,b
  4239  001D0C  2982               	incf	printf@len& (0+255),w,b
  4240  001D0E  E1E6               	bnz	l5198
  4241  001D10  2983               	incf	(printf@len+1)& (0+255),w,b
  4242  001D12  E101 D0AE          	bz	l5278
  4243  001D16  D7E2               	goto	l5198
  4244  001D18                     l5204:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4248  001D18  517F               	movf	printf@ap& (0+255),w,b
  4249  001D1A  6ED9               	movwf	fsr2l,c
  4250  001D1C  6ADA               	clrf	fsr2h,c
  4251  001D1E  50DF               	movf	indf2,w,c
  4252  001D20  6F88               	movwf	printf@c& (0+255),b
  4253                           
  4254                           ; BSR set to: 0
  4255  001D22  0E02               	movlw	2
  4256  001D24  277F               	addwf	printf@ap& (0+255),f,b
  4257  001D26                     l5208:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;doprnt.c: 805: cp = (char *)&c;
  4261  001D26  0E88               	movlw	low printf@c
  4262  001D28  6F7D               	movwf	printf@cp& (0+255),b
  4263  001D2A  6B7E               	clrf	(printf@cp+1)& (0+255),b
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;doprnt.c: 806: len = 1;
  4267  001D2C  6B83               	clrf	(printf@len+1)& (0+255),b
  4268  001D2E  0E01               	movlw	1
  4269  001D30  6F82               	movwf	printf@len& (0+255),b
  4270                           
  4271                           ;doprnt.c: 807: goto dostring;
  4272  001D32  D7BA               	goto	l5190
  4273  001D34                     l5214:
  4274                           
  4275                           ; BSR set to: 0
  4276  001D34  D8A3               	call	PL16	;call to abstracted procedure
  4277                           
  4278                           ; Switch size 1, requested type "space"
  4279                           ; Number of cases is 5, Range of values is 0 to 115
  4280                           ; switch strategies available:
  4281                           ; Name         Instructions Cycles
  4282                           ; simple_byte           16     9 (average)
  4283                           ;	Chosen strategy is simple_byte
  4284  001D36  E101 D0A0          	bz	l844
  4285  001D3A  0A63               	xorlw	99	; case 99
  4286  001D3C  E0ED               	bz	l5204
  4287  001D3E  0A07               	xorlw	7	; case 100
  4288  001D40  E006               	bz	l5216
  4289  001D42  0A0D               	xorlw	13	; case 105
  4290  001D44  E004               	bz	l5216
  4291  001D46  0A1A               	xorlw	26	; case 115
  4292  001D48  E101 D77E          	bz	l5176
  4293  001D4C  D7EC               	goto	l5208
  4294  001D4E                     l5216:
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;doprnt.c: 1253: {
  4298                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4299  001D4E  517F               	movf	printf@ap& (0+255),w,b
  4300  001D50  6ED9               	movwf	fsr2l,c
  4301  001D52  6ADA               	clrf	fsr2h,c
  4302  001D54  CFDE F080          	movff	postinc2,printf@val
  4303  001D58  CFDD F081          	movff	postdec2,printf@val+1
  4304                           
  4305                           ; BSR set to: 0
  4306  001D5C  0E02               	movlw	2
  4307  001D5E  277F               	addwf	printf@ap& (0+255),f,b
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;doprnt.c: 1261: if((int)val < 0) {
  4311  001D60  AF81               	btfss	(printf@val+1)& (0+255),7,b
  4312  001D62  D006               	goto	l5226
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;doprnt.c: 1262: flag |= 0x03;
  4316  001D64  0E03               	movlw	3
  4317  001D66  1384               	iorwf	printf@flag& (0+255),f,b
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;doprnt.c: 1263: val = -val;
  4321  001D68  6D80               	negf	printf@val& (0+255),b
  4322  001D6A  1F81               	comf	(printf@val+1)& (0+255),f,b
  4323  001D6C  B0D8               	btfsc	status,0,c
  4324  001D6E  2B81               	incf	(printf@val+1)& (0+255),f,b
  4325  001D70                     l5226:
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;doprnt.c: 1264: }
  4329                           ;doprnt.c: 1266: }
  4330                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4331  001D70  0E01               	movlw	1
  4332  001D72  6F88               	movwf	printf@c& (0+255),b
  4333  001D74                     l5228:
  4334                           
  4335                           ; BSR set to: 0
  4336  001D74  0E05               	movlw	5
  4337  001D76  1988               	xorwf	printf@c& (0+255),w,b
  4338  001D78  E00D               	bz	l5240
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;doprnt.c: 1306: if(val < dpowers[c])
  4342  001D7A  5188               	movf	printf@c& (0+255),w,b
  4343  001D7C  0D02               	mullw	2
  4344  001D7E  50F3               	movf	prodl,w,c
  4345  001D80  0F01               	addlw	low _dpowers
  4346  001D82  D888               	call	PL18	;call to abstracted procedure
  4347  001D84  50F5               	movf	tablat,w,c
  4348  001D86  5D80               	subwf	printf@val& (0+255),w,b
  4349  001D88  0009               	tblrd		*+
  4350  001D8A  50F5               	movf	tablat,w,c
  4351  001D8C  5981               	subwfb	(printf@val+1)& (0+255),w,b
  4352  001D8E  E302               	bnc	l5240
  4353                           
  4354                           ; BSR set to: 0
  4355  001D90  2B88               	incf	printf@c& (0+255),f,b
  4356  001D92  D7F0               	goto	l5228
  4357  001D94                     l5240:
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4361  001D94  5186               	movf	printf@width& (0+255),w,b
  4362  001D96  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4363  001D98  E008               	bz	l5246
  4364                           
  4365                           ; BSR set to: 0
  4366  001D9A  C084  F078         	movff	printf@flag,??_printf
  4367  001D9E  0E03               	movlw	3
  4368  001DA0  1778               	andwf	??_printf& (0+255),f,b
  4369  001DA2  E003               	bz	l5246
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;doprnt.c: 1346: width--;
  4373  001DA4  0786               	decf	printf@width& (0+255),f,b
  4374  001DA6  A0D8               	btfss	status,0,c
  4375  001DA8  0787               	decf	(printf@width+1)& (0+255),f,b
  4376  001DAA                     l5246:
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;doprnt.c: 1381: if(width > c)
  4380  001DAA  0E80               	movlw	128
  4381  001DAC  BF88               	btfsc	printf@c& (0+255),7,b
  4382  001DAE  0E7F               	movlw	127
  4383  001DB0  6F78               	movwf	??_printf& (0+255),b
  4384  001DB2  5186               	movf	printf@width& (0+255),w,b
  4385  001DB4  5D88               	subwf	printf@c& (0+255),w,b
  4386  001DB6  5187               	movf	(printf@width+1)& (0+255),w,b
  4387  001DB8  0A80               	xorlw	128
  4388  001DBA  5978               	subwfb	??_printf& (0+255),w,b
  4389  001DBC  E207               	bc	l828
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;doprnt.c: 1382: width -= c;
  4393  001DBE  5188               	movf	printf@c& (0+255),w,b
  4394  001DC0  5F86               	subwf	printf@width& (0+255),f,b
  4395  001DC2  0E00               	movlw	0
  4396  001DC4  BF88               	btfsc	printf@c& (0+255),7,b
  4397  001DC6  0EFF               	movlw	255
  4398  001DC8  5B87               	subwfb	(printf@width+1)& (0+255),f,b
  4399  001DCA  D002               	goto	l829
  4400  001DCC                     l828:
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;doprnt.c: 1383: else
  4404                           ;doprnt.c: 1384: width = 0;
  4405  001DCC  6B86               	clrf	printf@width& (0+255),b
  4406  001DCE  6B87               	clrf	(printf@width+1)& (0+255),b
  4407  001DD0                     l829:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;doprnt.c: 1387: if(flag & 0x04) {
  4411  001DD0  A584               	btfss	printf@flag& (0+255),2,b
  4412  001DD2  D014               	goto	l5260
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;doprnt.c: 1392: if(flag & 0x03)
  4416  001DD4  C084  F078         	movff	printf@flag,??_printf
  4417  001DD8  0E03               	movlw	3
  4418  001DDA  1778               	andwf	??_printf& (0+255),f,b
  4419  001DDC  E003               	bz	l5254
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;doprnt.c: 1393: (putch('-') );
  4423  001DDE  0E2D               	movlw	45
  4424  001DE0  EC5D  F017         	call	_putch
  4425  001DE4                     l5254:
  4426                           
  4427                           ;doprnt.c: 1415: if(width)
  4428  001DE4  0100               	movlb	0	; () banked
  4429  001DE6  5186               	movf	printf@width& (0+255),w,b
  4430  001DE8  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4431  001DEA  E01D               	bz	l5270
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;doprnt.c: 1417: (putch('0') );
  4435  001DEC  0E30               	movlw	48
  4436  001DEE  EC5D  F017         	call	_putch
  4437                           
  4438                           ;doprnt.c: 1418: while(--width);
  4439  001DF2  0100               	movlb	0	; () banked
  4440  001DF4  0786               	decf	printf@width& (0+255),f,b
  4441  001DF6  A0D8               	btfss	status,0,c
  4442  001DF8  0787               	decf	(printf@width+1)& (0+255),f,b
  4443  001DFA  D7F5               	goto	L5
  4444  001DFC                     l5260:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;doprnt.c: 1422: {
  4448                           ;doprnt.c: 1424: if(width
  4449                           ;doprnt.c: 1428: )
  4450  001DFC  5186               	movf	printf@width& (0+255),w,b
  4451  001DFE  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4452  001E00  E00A               	bz	l5266
  4453  001E02                     l5262:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;doprnt.c: 1430: (putch(' ') );
  4457  001E02  0E20               	movlw	32
  4458  001E04  EC5D  F017         	call	_putch
  4459                           
  4460                           ;doprnt.c: 1431: while(--width);
  4461  001E08  0100               	movlb	0	; () banked
  4462  001E0A  0786               	decf	printf@width& (0+255),f,b
  4463  001E0C  A0D8               	btfss	status,0,c
  4464  001E0E  0787               	decf	(printf@width+1)& (0+255),f,b
  4465  001E10  5186               	movf	printf@width& (0+255),w,b
  4466  001E12  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4467  001E14  E1F6               	bnz	l5262
  4468  001E16                     l5266:
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;doprnt.c: 1438: if(flag & 0x03)
  4472  001E16  C084  F078         	movff	printf@flag,??_printf
  4473  001E1A  0E03               	movlw	3
  4474  001E1C  1778               	andwf	??_printf& (0+255),f,b
  4475  001E1E  E003               	bz	l5270
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 1439: (putch('-') );
  4479  001E20  0E2D               	movlw	45
  4480  001E22  EC5D  F017         	call	_putch
  4481  001E26                     l5270:
  4482                           
  4483                           ;doprnt.c: 1469: }
  4484                           ;doprnt.c: 1472: prec = c;
  4485  001E26  C088  F07C         	movff	printf@c,printf@prec
  4486                           
  4487                           ;doprnt.c: 1474: while(prec--) {
  4488  001E2A  D01F               	goto	l5276
  4489  001E2C                     l5272:
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;doprnt.c: 1478: {
  4493                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4494  001E2C  517C               	movf	printf@prec& (0+255),w,b
  4495  001E2E  0D02               	mullw	2
  4496  001E30  50F3               	movf	prodl,w,c
  4497  001E32  0F01               	addlw	low _dpowers
  4498  001E34  D82F               	call	PL18	;call to abstracted procedure
  4499  001E36  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4500  001E3A  000A               	tblrd		*-
  4501  001E3C  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4502  001E40  C080  F060         	movff	printf@val,___lwdiv@dividend
  4503  001E44  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
  4504  001E48  EC66  F015         	call	___lwdiv	;wreg free
  4505  001E4C  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4506  001E50  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4507  001E54  6B6A               	clrf	(___lwmod@divisor+1)& (0+255),b
  4508  001E56  0E0A               	movlw	10
  4509  001E58  6F69               	movwf	___lwmod@divisor& (0+255),b
  4510  001E5A  ECD5  F015         	call	___lwmod	;wreg free
  4511  001E5E  5167               	movf	?___lwmod& (0+255),w,b
  4512  001E60  0F30               	addlw	48
  4513  001E62  6F88               	movwf	printf@c& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 1523: }
  4517                           ;doprnt.c: 1524: (putch(c) );
  4518  001E64  5188               	movf	printf@c& (0+255),w,b
  4519  001E66  EC5D  F017         	call	_putch
  4520  001E6A                     l5276:
  4521  001E6A  0100               	movlb	0	; () banked
  4522  001E6C  077C               	decf	printf@prec& (0+255),f,b
  4523  001E6E  297C               	incf	printf@prec& (0+255),w,b
  4524  001E70  E1DD               	bnz	l5272
  4525  001E72                     l5278:
  4526  001E72  0100               	movlb	0	; () banked
  4527  001E74  D803               	call	PL16	;call to abstracted procedure
  4528  001E76  E001 D6A3          	bnz	l5154
  4529  001E7A                     l844:
  4530                           
  4531                           ; BSR set to: 0
  4532  001E7A  0012               	return		;funcret
  4533  001E7C                     __end_of_printf:
  4534                           	opt stack 0
  4535  001E7C                     PL16:
  4536                           	opt stack 20
  4537  001E7C  2B85               	incf	printf@f& (0+255),f,b
  4538  001E7E  0585               	decf	printf@f& (0+255),w,b
  4539  001E80  6F78               	movwf	??_printf& (0+255),b
  4540  001E82  C078  FFF6         	movff	??_printf,tblptrl
  4541  001E86                     	if	1	;There is more than 1 active tblptr byte
  4542  001E86  0E11               	movlw	high __smallconst
  4543  001E88  6EF7               	movwf	tblptrh,c
  4544  001E8A                     	endif
  4545  001E8A                     	if	0	;tblptru may be non-zero
  4546  001E8A                     	endif
  4547  001E8A                     	if	0	;tblptru may be non-zero
  4548  001E8A                     	endif
  4549  001E8A  0008               	tblrd		*
  4550  001E8C  CFF5 F088          	movff	tablat,printf@c
  4551  001E90  5188               	movf	printf@c& (0+255),w,b
  4552  001E92  0012               	return	
  4553  001E94                     __end_ofPL16:
  4554                           	opt stack 0
  4555  001E94                     PL18:
  4556                           	opt stack 20
  4557  001E94  6F78               	movwf	??_printf& (0+255),b
  4558  001E96  C078  FFF6         	movff	??_printf,tblptrl
  4559  001E9A                     	if	1	;There is more than 1 active tblptr byte
  4560  001E9A  0E11               	movlw	high __smallconst
  4561  001E9C  6EF7               	movwf	tblptrh,c
  4562  001E9E                     	endif
  4563  001E9E                     	if	0	;tblptru may be non-zero
  4564  001E9E                     	endif
  4565  001E9E                     	if	0	;tblptru may be non-zero
  4566  001E9E                     	endif
  4567  001E9E  0009               	tblrd		*+
  4568  001EA0  0012               	return	
  4569  001EA2                     __end_ofPL18:
  4570                           	opt stack 0
  4571                           tblptru	equ	0xFF8
  4572                           tblptrh	equ	0xFF7
  4573                           tblptrl	equ	0xFF6
  4574                           tablat	equ	0xFF5
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           intcon2	equ	0xFF1
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           indf1	equ	0xFE7
  4582                           postinc1	equ	0xFE6
  4583                           postdec1	equ	0xFE5
  4584                           plusw1	equ	0xFE3
  4585                           fsr1h	equ	0xFE2
  4586                           fsr1l	equ	0xFE1
  4587                           indf2	equ	0xFDF
  4588                           postinc2	equ	0xFDE
  4589                           postdec2	equ	0xFDD
  4590                           plusw2	equ	0xFDB
  4591                           fsr2h	equ	0xFDA
  4592                           fsr2l	equ	0xFD9
  4593                           status	equ	0xFD8
  4594                           
  4595 ;; *************** function _putch *****************
  4596 ;; Defined at:
  4597 ;;		line 244 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  c               1    wreg     unsigned char 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  c               1    5[BANK0 ] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;		None               void
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4611 ;;      Params:         0       0       0       0       0       0       0       0       0
  4612 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4614 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4615 ;;Total ram usage:        1 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    9
  4618 ;; This function calls:
  4619 ;;		_lcd_putc
  4620 ;; This function is called by:
  4621 ;;		_printf
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text5
  4626  002EBA                     __ptext5:
  4627                           	opt stack 0
  4628  002EBA                     _putch:
  4629                           	opt stack 20
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;incstack = 0
  4633                           ;putch@c stored from wreg
  4634  002EBA  0100               	movlb	0	; () banked
  4635  002EBC  6F65               	movwf	putch@c& (0+255),b
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;LCD_ModSauer.c: 246: lcd_putc(c);
  4639  002EBE  5165               	movf	putch@c& (0+255),w,b
  4640  002EC0  EF7A  F014         	goto	_lcd_putc
  4641  002EC4                     __end_of_putch:
  4642                           	opt stack 0
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           indf1	equ	0xFE7
  4654                           postinc1	equ	0xFE6
  4655                           postdec1	equ	0xFE5
  4656                           plusw1	equ	0xFE3
  4657                           fsr1h	equ	0xFE2
  4658                           fsr1l	equ	0xFE1
  4659                           indf2	equ	0xFDF
  4660                           postinc2	equ	0xFDE
  4661                           postdec2	equ	0xFDD
  4662                           plusw2	equ	0xFDB
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function _lcd_putc *****************
  4668 ;; Defined at:
  4669 ;;		line 151 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  c               1    wreg     unsigned char 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  c               1    4[BANK0 ] unsigned char 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;		None               void
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : F/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4683 ;;      Params:         0       0       0       0       0       0       0       0       0
  4684 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4686 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4687 ;;Total ram usage:        1 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    8
  4690 ;; This function calls:
  4691 ;;		_lcd_clear
  4692 ;;		_lcd_gotoxy
  4693 ;;		_lcd_write
  4694 ;; This function is called by:
  4695 ;;		_putch
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text6
  4700  0028F4                     __ptext6:
  4701                           	opt stack 0
  4702  0028F4                     _lcd_putc:
  4703                           	opt stack 20
  4704                           
  4705                           ;incstack = 0
  4706                           ;lcd_putc@c stored from wreg
  4707  0028F4  6F64               	movwf	lcd_putc@c& (0+255),b
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;LCD_ModSauer.c: 153: switch (c) {
  4711  0028F6  D029               	goto	l4986
  4712  0028F8                     l4958:
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;LCD_ModSauer.c: 157: lcd_clear();
  4716  0028F8  EC1F  F017         	call	_lcd_clear	;wreg free
  4717                           
  4718                           ;LCD_ModSauer.c: 158: break;
  4719  0028FC  D02E               	goto	l755
  4720  0028FE                     l4960:
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;LCD_ModSauer.c: 164: case 1:
  4724                           ;LCD_ModSauer.c: 165: if(++linha_lcd>4) linha_lcd=1;
  4725  0028FE  2A33               	incf	_linha_lcd,f,c
  4726  002900  0E04               	movlw	4
  4727  002902  6433               	cpfsgt	_linha_lcd,c
  4728  002904  D00E               	goto	l4972
  4729                           
  4730                           ; BSR set to: 0
  4731  002906  0E01               	movlw	1
  4732  002908  6E33               	movwf	_linha_lcd,c
  4733  00290A  D00B               	goto	l4972
  4734  00290C                     l4964:
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;LCD_ModSauer.c: 169: case 0:
  4738                           ;LCD_ModSauer.c: 170: if(++linha_lcd>2) linha_lcd=1;
  4739  00290C  2A33               	incf	_linha_lcd,f,c
  4740  00290E  0E02               	movlw	2
  4741  002910  D7F8               	goto	L6
  4742  002912                     l4970:
  4743                           
  4744                           ; BSR set to: 0
  4745  002912  5032               	movf	_lcd_type,w,c
  4746                           
  4747                           ; Switch size 1, requested type "space"
  4748                           ; Number of cases is 4, Range of values is 0 to 3
  4749                           ; switch strategies available:
  4750                           ; Name         Instructions Cycles
  4751                           ; simple_byte           13     7 (average)
  4752                           ;	Chosen strategy is simple_byte
  4753  002914  E0FB               	bz	l4964
  4754  002916  0A01               	xorlw	1	; case 1
  4755  002918  E0F2               	bz	l4960
  4756  00291A  0A03               	xorlw	3	; case 2
  4757  00291C  E0F7               	bz	l4964
  4758  00291E  0A01               	xorlw	1	; case 3
  4759  002920  E0EE               	bz	l4960
  4760  002922                     l4972:
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;LCD_ModSauer.c: 174: lcd_gotoxy(linha_lcd,1);
  4764  002922  0E01               	movlw	1
  4765  002924  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  4766  002926  5033               	movf	_linha_lcd,w,c
  4767  002928  EC41  F015         	call	_lcd_gotoxy
  4768                           
  4769                           ;LCD_ModSauer.c: 175: break;
  4770  00292C  D016               	goto	l755
  4771  00292E                     l4974:
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;LCD_ModSauer.c: 177: linha_lcd=1;
  4775  00292E  0E01               	movlw	1
  4776  002930  6E33               	movwf	_linha_lcd,c
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;LCD_ModSauer.c: 178: LATEbits.LE0 = 0;
  4780  002932  908D               	bcf	3981,0,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;LCD_ModSauer.c: 179: lcd_write(0x80);
  4784  002934  0E80               	movlw	128
  4785  002936  ECBF  F016         	call	_lcd_write
  4786                           
  4787                           ;LCD_ModSauer.c: 180: break;
  4788  00293A  D00F               	goto	l755
  4789  00293C                     l754:
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;LCD_ModSauer.c: 183: coluna_lcd++;
  4793  00293C  808D               	bsf	3981,0,c	;volatile
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;LCD_ModSauer.c: 184: linha_lcd=1;
  4797  00293E  0E01               	movlw	1
  4798  002940  6E33               	movwf	_linha_lcd,c
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;LCD_ModSauer.c: 185: lcd_write( c );
  4802  002942  5164               	movf	lcd_putc@c& (0+255),w,b
  4803  002944  ECBF  F016         	call	_lcd_write
  4804                           
  4805                           ;LCD_ModSauer.c: 188: break;
  4806  002948  D008               	goto	l755
  4807  00294A                     l4986:
  4808                           
  4809                           ; BSR set to: 0
  4810  00294A  5164               	movf	lcd_putc@c& (0+255),w,b
  4811                           
  4812                           ; Switch size 1, requested type "space"
  4813                           ; Number of cases is 3, Range of values is 10 to 13
  4814                           ; switch strategies available:
  4815                           ; Name         Instructions Cycles
  4816                           ; simple_byte           10     6 (average)
  4817                           ;	Chosen strategy is simple_byte
  4818  00294C  0A0A               	xorlw	10	; case 10
  4819  00294E  E0E1               	bz	l4970
  4820  002950  0A06               	xorlw	6	; case 12
  4821  002952  E0D2               	bz	l4958
  4822  002954  0A01               	xorlw	1	; case 13
  4823  002956  E0EB               	bz	l4974
  4824  002958  D7F1               	goto	l754
  4825  00295A                     l755:
  4826  00295A  0012               	return		;funcret
  4827  00295C                     __end_of_lcd_putc:
  4828                           	opt stack 0
  4829                           tblptru	equ	0xFF8
  4830                           tblptrh	equ	0xFF7
  4831                           tblptrl	equ	0xFF6
  4832                           tablat	equ	0xFF5
  4833                           prodh	equ	0xFF4
  4834                           prodl	equ	0xFF3
  4835                           intcon	equ	0xFF2
  4836                           intcon2	equ	0xFF1
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           indf1	equ	0xFE7
  4840                           postinc1	equ	0xFE6
  4841                           postdec1	equ	0xFE5
  4842                           plusw1	equ	0xFE3
  4843                           fsr1h	equ	0xFE2
  4844                           fsr1l	equ	0xFE1
  4845                           indf2	equ	0xFDF
  4846                           postinc2	equ	0xFDE
  4847                           postdec2	equ	0xFDD
  4848                           plusw2	equ	0xFDB
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _isdigit *****************
  4854 ;; Defined at:
  4855 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  c               1    wreg     unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  c               1    2[BANK0 ] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;		None               void
  4862 ;; Registers used:
  4863 ;;		wreg, status,2, status,0
  4864 ;; Tracked objects:
  4865 ;;		On entry : F/0
  4866 ;;		On exit  : F/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0
  4870 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4871 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4872 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4873 ;;Total ram usage:        3 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    6
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_printf
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text7
  4884  002E06                     __ptext7:
  4885                           	opt stack 0
  4886  002E06                     _isdigit:
  4887                           	opt stack 23
  4888                           
  4889                           ;incstack = 0
  4890                           ;isdigit@c stored from wreg
  4891  002E06  6F62               	movwf	isdigit@c& (0+255),b
  4892                           
  4893                           ; BSR set to: 0
  4894  002E08  6B61               	clrf	_isdigit$1538& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897  002E0A  0E3A               	movlw	58
  4898  002E0C  6162               	cpfslt	isdigit@c& (0+255),b
  4899  002E0E  D005               	goto	l5026
  4900                           
  4901                           ; BSR set to: 0
  4902  002E10  0E2F               	movlw	47
  4903  002E12  6562               	cpfsgt	isdigit@c& (0+255),b
  4904  002E14  D002               	goto	l5026
  4905                           
  4906                           ; BSR set to: 0
  4907  002E16  0E01               	movlw	1
  4908  002E18  6F61               	movwf	_isdigit$1538& (0+255),b
  4909  002E1A                     l5026:
  4910                           
  4911                           ; BSR set to: 0
  4912  002E1A  C061  F060         	movff	_isdigit$1538,??_isdigit
  4913  002E1E  3160               	rrcf	??_isdigit& (0+255),w,b
  4914                           
  4915                           ; BSR set to: 0
  4916  002E20  0012               	return		;funcret
  4917  002E22                     __end_of_isdigit:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           prodh	equ	0xFF4
  4924                           prodl	equ	0xFF3
  4925                           intcon	equ	0xFF2
  4926                           intcon2	equ	0xFF1
  4927                           postinc0	equ	0xFEE
  4928                           wreg	equ	0xFE8
  4929                           indf1	equ	0xFE7
  4930                           postinc1	equ	0xFE6
  4931                           postdec1	equ	0xFE5
  4932                           plusw1	equ	0xFE3
  4933                           fsr1h	equ	0xFE2
  4934                           fsr1l	equ	0xFE1
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           postdec2	equ	0xFDD
  4938                           plusw2	equ	0xFDB
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _numero_para_ascii *****************
  4944 ;; Defined at:
  4945 ;;		line 79 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  numero          1    wreg     unsigned char 
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  numero          1   17[BANK0 ] unsigned char 
  4950 ;;  temp1           2   18[BANK0 ] int 
  4951 ;;  temp2           2   15[BANK0 ] int 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;		None               void
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : F/0
  4958 ;;		On exit  : F/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4961 ;;      Params:         0       0       0       0       0       0       0       0       0
  4962 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4963 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4964 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4965 ;;Total ram usage:        6 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    7
  4968 ;; This function calls:
  4969 ;;		___awdiv
  4970 ;;		___lbdiv
  4971 ;;		___wmul
  4972 ;; This function is called by:
  4973 ;;		_main
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text8
  4978  00271A                     __ptext8:
  4979                           	opt stack 0
  4980  00271A                     _numero_para_ascii:
  4981                           	opt stack 23
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;incstack = 0
  4985                           ;numero_para_ascii@numero stored from wreg
  4986  00271A  6F71               	movwf	numero_para_ascii@numero& (0+255),b
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;ascii.c: 80: int temp1;
  4990                           ;ascii.c: 81: int temp2;
  4991                           ;ascii.c: 83: TXREG = '+';
  4992  00271C  0E2B               	movlw	43
  4993  00271E  6EAD               	movwf	4013,c	;volatile
  4994  002720                     l462:
  4995                           
  4996                           ; BSR set to: 0
  4997  002720  A2AC               	btfss	4012,1,c	;volatile
  4998  002722  D7FE               	goto	l462
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;ascii.c: 86: temp1 = numero/100;
  5002  002724  0E64               	movlw	100
  5003  002726  6F60               	movwf	___lbdiv@divisor& (0+255),b
  5004  002728  5171               	movf	numero_para_ascii@numero& (0+255),w,b
  5005  00272A  EC13  F016         	call	___lbdiv
  5006  00272E  6F72               	movwf	numero_para_ascii@temp1& (0+255),b
  5007  002730  6B73               	clrf	(numero_para_ascii@temp1+1)& (0+255),b
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;ascii.c: 87: TXREG = '0'+ temp1;
  5011  002732  5172               	movf	numero_para_ascii@temp1& (0+255),w,b
  5012  002734  0F30               	addlw	48
  5013  002736  6EAD               	movwf	4013,c	;volatile
  5014  002738                     l465:
  5015                           
  5016                           ; BSR set to: 0
  5017  002738  A2AC               	btfss	4012,1,c	;volatile
  5018  00273A  D7FE               	goto	l465
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;ascii.c: 90: temp2 = ((numero - temp1*100)/10);
  5022  00273C  C072  F060         	movff	numero_para_ascii@temp1,___wmul@multiplier
  5023  002740  C073  F061         	movff	numero_para_ascii@temp1+1,___wmul@multiplier+1
  5024  002744  6963               	setf	(___wmul@multiplicand+1)& (0+255),b
  5025  002746  0E9C               	movlw	156
  5026  002748  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5027  00274A  EC87  F016         	call	___wmul	;wreg free
  5028  00274E  5171               	movf	numero_para_ascii@numero& (0+255),w,b
  5029  002750  2560               	addwf	?___wmul& (0+255),w,b
  5030  002752  6F66               	movwf	___awdiv@dividend& (0+255),b
  5031  002754  0E00               	movlw	0
  5032  002756  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5033  002758  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
  5034  00275A  6B69               	clrf	(___awdiv@divisor+1)& (0+255),b
  5035  00275C  0E0A               	movlw	10
  5036  00275E  6F68               	movwf	___awdiv@divisor& (0+255),b
  5037  002760  ECCD  F013         	call	___awdiv	;wreg free
  5038  002764  C066  F06F         	movff	?___awdiv,numero_para_ascii@temp2
  5039  002768  C067  F070         	movff	?___awdiv+1,numero_para_ascii@temp2+1
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;ascii.c: 91: TXREG = '0'+ temp2;
  5043  00276C  516F               	movf	numero_para_ascii@temp2& (0+255),w,b
  5044  00276E  0F30               	addlw	48
  5045  002770  6EAD               	movwf	4013,c	;volatile
  5046  002772                     l468:
  5047                           
  5048                           ; BSR set to: 0
  5049  002772  A2AC               	btfss	4012,1,c	;volatile
  5050  002774  D7FE               	goto	l468
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;ascii.c: 94: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  5054  002776  5172               	movf	numero_para_ascii@temp1& (0+255),w,b
  5055  002778  0D9C               	mullw	156
  5056  00277A  CFF3 F06E          	movff	prodl,??_numero_para_ascii
  5057  00277E  516F               	movf	numero_para_ascii@temp2& (0+255),w,b
  5058  002780  0DF6               	mullw	246
  5059  002782  50F3               	movf	prodl,w,c
  5060  002784  256E               	addwf	??_numero_para_ascii& (0+255),w,b
  5061  002786  2571               	addwf	numero_para_ascii@numero& (0+255),w,b
  5062  002788  0F30               	addlw	48
  5063  00278A  6EAD               	movwf	4013,c	;volatile
  5064  00278C                     l471:
  5065                           
  5066                           ; BSR set to: 0
  5067  00278C  A2AC               	btfss	4012,1,c	;volatile
  5068  00278E  D7FE               	goto	l471
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;ascii.c: 97: TXREG = '+';
  5072  002790  0E2B               	movlw	43
  5073  002792  6EAD               	movwf	4013,c	;volatile
  5074  002794                     l474:
  5075                           
  5076                           ; BSR set to: 0
  5077  002794  B2AC               	btfsc	4012,1,c	;volatile
  5078                           
  5079                           ; BSR set to: 0
  5080  002796  0012               	return		;funcret
  5081  002798  D7FD               	goto	l474
  5082  00279A                     __end_of_numero_para_ascii:
  5083                           	opt stack 0
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           intcon	equ	0xFF2
  5091                           intcon2	equ	0xFF1
  5092                           postinc0	equ	0xFEE
  5093                           wreg	equ	0xFE8
  5094                           indf1	equ	0xFE7
  5095                           postinc1	equ	0xFE6
  5096                           postdec1	equ	0xFE5
  5097                           plusw1	equ	0xFE3
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           plusw2	equ	0xFDB
  5104                           fsr2h	equ	0xFDA
  5105                           fsr2l	equ	0xFD9
  5106                           status	equ	0xFD8
  5107                           
  5108 ;; *************** function ___lbdiv *****************
  5109 ;; Defined at:
  5110 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;  dividend        1    wreg     unsigned char 
  5113 ;;  divisor         1    0[BANK0 ] unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  dividend        1    1[BANK0 ] unsigned char 
  5116 ;;  quotient        1    3[BANK0 ] unsigned char 
  5117 ;;  counter         1    2[BANK0 ] unsigned char 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      unsigned char 
  5120 ;; Registers used:
  5121 ;;		wreg, status,2, status,0
  5122 ;; Tracked objects:
  5123 ;;		On entry : F/0
  5124 ;;		On exit  : F/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5127 ;;      Params:         0       1       0       0       0       0       0       0       0
  5128 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5130 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5131 ;;Total ram usage:        4 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    6
  5134 ;; This function calls:
  5135 ;;		Nothing
  5136 ;; This function is called by:
  5137 ;;		_numero_para_ascii
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text9
  5142  002C26                     __ptext9:
  5143                           	opt stack 0
  5144  002C26                     ___lbdiv:
  5145                           	opt stack 23
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;incstack = 0
  5149                           ;___lbdiv@dividend stored from wreg
  5150  002C26  6F61               	movwf	___lbdiv@dividend& (0+255),b
  5151                           
  5152                           ; BSR set to: 0
  5153  002C28  6B63               	clrf	___lbdiv@quotient& (0+255),b
  5154                           
  5155                           ; BSR set to: 0
  5156  002C2A  5160               	movf	___lbdiv@divisor& (0+255),w,b
  5157  002C2C  E014               	bz	l5102
  5158                           
  5159                           ; BSR set to: 0
  5160  002C2E  0E01               	movlw	1
  5161  002C30  6F62               	movwf	___lbdiv@counter& (0+255),b
  5162  002C32  D003               	goto	l5090
  5163  002C34                     l5086:
  5164                           
  5165                           ; BSR set to: 0
  5166  002C34  90D8               	bcf	status,0,c
  5167  002C36  3760               	rlcf	___lbdiv@divisor& (0+255),f,b
  5168                           
  5169                           ; BSR set to: 0
  5170  002C38  2B62               	incf	___lbdiv@counter& (0+255),f,b
  5171  002C3A                     l5090:
  5172                           
  5173                           ; BSR set to: 0
  5174  002C3A  AF60               	btfss	___lbdiv@divisor& (0+255),7,b
  5175  002C3C  D7FB               	goto	l5086
  5176  002C3E                     l5092:
  5177                           
  5178                           ; BSR set to: 0
  5179  002C3E  90D8               	bcf	status,0,c
  5180  002C40  3763               	rlcf	___lbdiv@quotient& (0+255),f,b
  5181  002C42  5160               	movf	___lbdiv@divisor& (0+255),w,b
  5182  002C44  5D61               	subwf	___lbdiv@dividend& (0+255),w,b
  5183  002C46  E303               	bnc	l5098
  5184                           
  5185                           ; BSR set to: 0
  5186  002C48  5160               	movf	___lbdiv@divisor& (0+255),w,b
  5187  002C4A  5F61               	subwf	___lbdiv@dividend& (0+255),f,b
  5188                           
  5189                           ; BSR set to: 0
  5190  002C4C  8163               	bsf	___lbdiv@quotient& (0+255),0,b
  5191  002C4E                     l5098:
  5192                           
  5193                           ; BSR set to: 0
  5194  002C4E  90D8               	bcf	status,0,c
  5195  002C50  3360               	rrcf	___lbdiv@divisor& (0+255),f,b
  5196                           
  5197                           ; BSR set to: 0
  5198  002C52  2F62               	decfsz	___lbdiv@counter& (0+255),f,b
  5199  002C54  D7F4               	goto	l5092
  5200  002C56                     l5102:
  5201                           
  5202                           ; BSR set to: 0
  5203  002C56  5163               	movf	___lbdiv@quotient& (0+255),w,b
  5204                           
  5205                           ; BSR set to: 0
  5206  002C58  0012               	return		;funcret
  5207  002C5A                     __end_of___lbdiv:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           postinc0	equ	0xFEE
  5218                           wreg	equ	0xFE8
  5219                           indf1	equ	0xFE7
  5220                           postinc1	equ	0xFE6
  5221                           postdec1	equ	0xFE5
  5222                           plusw1	equ	0xFE3
  5223                           fsr1h	equ	0xFE2
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           postdec2	equ	0xFDD
  5228                           plusw2	equ	0xFDB
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function ___awdiv *****************
  5234 ;; Defined at:
  5235 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;  dividend        2    6[BANK0 ] int 
  5238 ;;  divisor         2    8[BANK0 ] int 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  quotient        2   12[BANK0 ] int 
  5241 ;;  sign            1   11[BANK0 ] unsigned char 
  5242 ;;  counter         1   10[BANK0 ] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  2    6[BANK0 ] int 
  5245 ;; Registers used:
  5246 ;;		wreg, status,2, status,0
  5247 ;; Tracked objects:
  5248 ;;		On entry : F/0
  5249 ;;		On exit  : F/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5252 ;;      Params:         0       4       0       0       0       0       0       0       0
  5253 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5254 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5255 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5256 ;;Total ram usage:        8 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    6
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_numero_para_ascii
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	text10
  5267  00279A                     __ptext10:
  5268                           	opt stack 0
  5269  00279A                     ___awdiv:
  5270                           	opt stack 23
  5271                           
  5272                           ; BSR set to: 0
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;incstack = 0
  5276  00279A  6B6B               	clrf	___awdiv@sign& (0+255),b
  5277                           
  5278                           ; BSR set to: 0
  5279  00279C  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5280  00279E  D006               	goto	l5044
  5281                           
  5282                           ; BSR set to: 0
  5283  0027A0  6D68               	negf	___awdiv@divisor& (0+255),b
  5284  0027A2  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5285  0027A4  B0D8               	btfsc	status,0,c
  5286  0027A6  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5287                           
  5288                           ; BSR set to: 0
  5289  0027A8  0E01               	movlw	1
  5290  0027AA  6F6B               	movwf	___awdiv@sign& (0+255),b
  5291  0027AC                     l5044:
  5292                           
  5293                           ; BSR set to: 0
  5294  0027AC  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5295  0027AE  D006               	goto	l5050
  5296                           
  5297                           ; BSR set to: 0
  5298  0027B0  6D66               	negf	___awdiv@dividend& (0+255),b
  5299  0027B2  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5300  0027B4  B0D8               	btfsc	status,0,c
  5301  0027B6  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5302                           
  5303                           ; BSR set to: 0
  5304  0027B8  0E01               	movlw	1
  5305  0027BA  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5306  0027BC                     l5050:
  5307                           
  5308                           ; BSR set to: 0
  5309  0027BC  6B6C               	clrf	___awdiv@quotient& (0+255),b
  5310  0027BE  6B6D               	clrf	(___awdiv@quotient+1)& (0+255),b
  5311                           
  5312                           ; BSR set to: 0
  5313  0027C0  5168               	movf	___awdiv@divisor& (0+255),w,b
  5314  0027C2  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5315  0027C4  E01B               	bz	l5072
  5316                           
  5317                           ; BSR set to: 0
  5318  0027C6  0E01               	movlw	1
  5319  0027C8  6F6A               	movwf	___awdiv@counter& (0+255),b
  5320  0027CA  D004               	goto	l5058
  5321  0027CC                     l5056:
  5322                           
  5323                           ; BSR set to: 0
  5324  0027CC  90D8               	bcf	status,0,c
  5325  0027CE  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5326  0027D0  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5327  0027D2  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5328  0027D4                     l5058:
  5329                           
  5330                           ; BSR set to: 0
  5331  0027D4  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5332  0027D6  D7FA               	goto	l5056
  5333  0027D8                     l5060:
  5334                           
  5335                           ; BSR set to: 0
  5336  0027D8  90D8               	bcf	status,0,c
  5337  0027DA  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5338  0027DC  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5339                           
  5340                           ; BSR set to: 0
  5341  0027DE  5168               	movf	___awdiv@divisor& (0+255),w,b
  5342  0027E0  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5343  0027E2  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5344  0027E4  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5345  0027E6  E305               	bnc	l5068
  5346                           
  5347                           ; BSR set to: 0
  5348  0027E8  5168               	movf	___awdiv@divisor& (0+255),w,b
  5349  0027EA  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5350  0027EC  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5351  0027EE  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5352                           
  5353                           ; BSR set to: 0
  5354  0027F0  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5355  0027F2                     l5068:
  5356                           
  5357                           ; BSR set to: 0
  5358  0027F2  90D8               	bcf	status,0,c
  5359  0027F4  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5360  0027F6  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5361                           
  5362                           ; BSR set to: 0
  5363  0027F8  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5364  0027FA  D7EE               	goto	l5060
  5365  0027FC                     l5072:
  5366                           
  5367                           ; BSR set to: 0
  5368  0027FC  516B               	movf	___awdiv@sign& (0+255),w,b
  5369  0027FE  E004               	bz	l5076
  5370                           
  5371                           ; BSR set to: 0
  5372  002800  6D6C               	negf	___awdiv@quotient& (0+255),b
  5373  002802  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5374  002804  B0D8               	btfsc	status,0,c
  5375  002806  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5376  002808                     l5076:
  5377                           
  5378                           ; BSR set to: 0
  5379  002808  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5380  00280C  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5381                           
  5382                           ; BSR set to: 0
  5383  002810  0012               	return		;funcret
  5384  002812                     __end_of___awdiv:
  5385                           	opt stack 0
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           intcon	equ	0xFF2
  5393                           intcon2	equ	0xFF1
  5394                           postinc0	equ	0xFEE
  5395                           wreg	equ	0xFE8
  5396                           indf1	equ	0xFE7
  5397                           postinc1	equ	0xFE6
  5398                           postdec1	equ	0xFE5
  5399                           plusw1	equ	0xFE3
  5400                           fsr1h	equ	0xFE2
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           plusw2	equ	0xFDB
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _limpar_linha *****************
  5411 ;; Defined at:
  5412 ;;		line 22 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  linha           1    wreg     unsigned char 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  linha           1    4[BANK0 ] unsigned char 
  5417 ;;  coluna_atual    1    5[BANK0 ] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : F/0
  5424 ;;		On exit  : F/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0
  5428 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5430 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5431 ;;Total ram usage:        2 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    8
  5434 ;; This function calls:
  5435 ;;		_lcd_gotoxy
  5436 ;;		_lcd_write
  5437 ;; This function is called by:
  5438 ;;		_main
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text11
  5443  002D5A                     __ptext11:
  5444                           	opt stack 0
  5445  002D5A                     _limpar_linha:
  5446                           	opt stack 22
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;incstack = 0
  5450                           ;limpar_linha@linha stored from wreg
  5451  002D5A  6F64               	movwf	limpar_linha@linha& (0+255),b
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;LCD_ModSauer.c: 23: unsigned char coluna_atual=1;
  5455  002D5C  0E01               	movlw	1
  5456  002D5E  6F65               	movwf	limpar_linha@coluna_atual& (0+255),b
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;LCD_ModSauer.c: 24: lcd_gotoxy(linha,coluna_atual);
  5460  002D60  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  5461  002D62  5164               	movf	limpar_linha@linha& (0+255),w,b
  5462  002D64  EC41  F015         	call	_lcd_gotoxy
  5463                           
  5464                           ;LCD_ModSauer.c: 26: while(coluna_atual<qtd_max_colunas_lcd){
  5465  002D68  D005               	goto	l5484
  5466  002D6A                     l715:
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;LCD_ModSauer.c: 27: LATEbits.LE0=1;
  5470  002D6A  808D               	bsf	3981,0,c	;volatile
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;LCD_ModSauer.c: 28: lcd_write(0x10);
  5474  002D6C  0E10               	movlw	16
  5475  002D6E  ECBF  F016         	call	_lcd_write
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;LCD_ModSauer.c: 29: coluna_atual++;}
  5479  002D72  2B65               	incf	limpar_linha@coluna_atual& (0+255),f,b
  5480  002D74                     l5484:
  5481                           
  5482                           ; BSR set to: 0
  5483  002D74  5037               	movf	_qtd_max_colunas_lcd,w,c
  5484  002D76  5D65               	subwf	limpar_linha@coluna_atual& (0+255),w,b
  5485  002D78  B0D8               	btfsc	status,0,c
  5486                           
  5487                           ; BSR set to: 0
  5488  002D7A  0012               	return		;funcret
  5489  002D7C  D7F6               	goto	l715
  5490  002D7E                     __end_of_limpar_linha:
  5491                           	opt stack 0
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           intcon	equ	0xFF2
  5499                           intcon2	equ	0xFF1
  5500                           postinc0	equ	0xFEE
  5501                           wreg	equ	0xFE8
  5502                           indf1	equ	0xFE7
  5503                           postinc1	equ	0xFE6
  5504                           postdec1	equ	0xFE5
  5505                           plusw1	equ	0xFE3
  5506                           fsr1h	equ	0xFE2
  5507                           fsr1l	equ	0xFE1
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           plusw2	equ	0xFDB
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _lcd_gotoxy *****************
  5517 ;; Defined at:
  5518 ;;		line 218 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  linha           1    wreg     unsigned char 
  5521 ;;  coluna          1    1[BANK0 ] unsigned char 
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;  linha           1    3[BANK0 ] unsigned char 
  5524 ;; Return value:  Size  Location     Type
  5525 ;;		None               void
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0, cstack
  5528 ;; Tracked objects:
  5529 ;;		On entry : F/0
  5530 ;;		On exit  : F/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5533 ;;      Params:         0       1       0       0       0       0       0       0       0
  5534 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5535 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5536 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5537 ;;Total ram usage:        3 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    7
  5540 ;; This function calls:
  5541 ;;		_lcd_write
  5542 ;; This function is called by:
  5543 ;;		_main
  5544 ;;		_limpar_linha
  5545 ;;		_lcd_putc
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           	psect	text12
  5550  002A82                     __ptext12:
  5551                           	opt stack 0
  5552  002A82                     _lcd_gotoxy:
  5553                           	opt stack 20
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;incstack = 0
  5557                           ;lcd_gotoxy@linha stored from wreg
  5558  002A82  6F63               	movwf	lcd_gotoxy@linha& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;LCD_ModSauer.c: 222: linha_lcd_aux_posicao = linha;
  5562  002A84  908D               	bcf	3981,0,c	;volatile
  5563                           
  5564                           ;LCD_ModSauer.c: 223: switch(linha){
  5565  002A86  D018               	goto	l4948
  5566  002A88                     l4938:
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;LCD_ModSauer.c: 225: lcd_write(0x80+(coluna-1));
  5570  002A88  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5571  002A8A  0F7F               	addlw	127
  5572  002A8C  ECBF  F016         	call	_lcd_write
  5573                           
  5574                           ;LCD_ModSauer.c: 226: break;
  5575  002A90  D01C               	goto	l773
  5576  002A92                     l4940:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;LCD_ModSauer.c: 229: lcd_write(0xC0+(coluna-1));
  5580  002A92  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5581  002A94  0FBF               	addlw	191
  5582  002A96  ECBF  F016         	call	_lcd_write
  5583                           
  5584                           ;LCD_ModSauer.c: 230: break;
  5585  002A9A  D017               	goto	l773
  5586  002A9C                     l4942:
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;LCD_ModSauer.c: 233: lcd_write(Linha_3+(coluna-1));
  5590  002A9C  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5591  002A9E  242F               	addwf	_Linha_3,w,c
  5592  002AA0  6F62               	movwf	??_lcd_gotoxy& (0+255),b
  5593  002AA2  0562               	decf	??_lcd_gotoxy& (0+255),w,b
  5594  002AA4  ECBF  F016         	call	_lcd_write
  5595                           
  5596                           ;LCD_ModSauer.c: 234: break;
  5597  002AA8  D010               	goto	l773
  5598  002AAA                     l4944:
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;LCD_ModSauer.c: 237: lcd_write(Linha_4+(coluna-1));
  5602  002AAA  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5603  002AAC  2430               	addwf	_Linha_4,w,c
  5604  002AAE  6F62               	movwf	??_lcd_gotoxy& (0+255),b
  5605  002AB0  0562               	decf	??_lcd_gotoxy& (0+255),w,b
  5606  002AB2  ECBF  F016         	call	_lcd_write
  5607                           
  5608                           ;LCD_ModSauer.c: 238: break;
  5609  002AB6  D009               	goto	l773
  5610  002AB8                     l4948:
  5611                           
  5612                           ; BSR set to: 0
  5613  002AB8  5163               	movf	lcd_gotoxy@linha& (0+255),w,b
  5614                           
  5615                           ; Switch size 1, requested type "space"
  5616                           ; Number of cases is 4, Range of values is 1 to 4
  5617                           ; switch strategies available:
  5618                           ; Name         Instructions Cycles
  5619                           ; simple_byte           13     7 (average)
  5620                           ;	Chosen strategy is simple_byte
  5621  002ABA  0A01               	xorlw	1	; case 1
  5622  002ABC  E0E5               	bz	l4938
  5623  002ABE  0A03               	xorlw	3	; case 2
  5624  002AC0  E0E8               	bz	l4940
  5625  002AC2  0A01               	xorlw	1	; case 3
  5626  002AC4  E0EB               	bz	l4942
  5627  002AC6  0A07               	xorlw	7	; case 4
  5628  002AC8  E0F0               	bz	l4944
  5629  002ACA                     l773:
  5630                           
  5631                           ; BSR set to: 0
  5632  002ACA  0012               	return		;funcret
  5633  002ACC                     __end_of_lcd_gotoxy:
  5634                           	opt stack 0
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon2	equ	0xFF1
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           indf1	equ	0xFE7
  5646                           postinc1	equ	0xFE6
  5647                           postdec1	equ	0xFE5
  5648                           plusw1	equ	0xFE3
  5649                           fsr1h	equ	0xFE2
  5650                           fsr1l	equ	0xFE1
  5651                           indf2	equ	0xFDF
  5652                           postinc2	equ	0xFDE
  5653                           postdec2	equ	0xFDD
  5654                           plusw2	equ	0xFDB
  5655                           fsr2h	equ	0xFDA
  5656                           fsr2l	equ	0xFD9
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _lcd_init *****************
  5660 ;; Defined at:
  5661 ;;		line 35 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  definir_tipo    1    wreg     unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  definir_tipo    1    3[BANK0 ] unsigned char 
  5666 ;;  init_value      1    0        unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;		None               void
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : F/0
  5673 ;;		On exit  : F/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5676 ;;      Params:         0       0       0       0       0       0       0       0       0
  5677 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5678 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5679 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5680 ;;Total ram usage:        3 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    8
  5683 ;; This function calls:
  5684 ;;		_escrever_simbolo_fechadura
  5685 ;;		_lcd_clear
  5686 ;;		_lcd_write
  5687 ;; This function is called by:
  5688 ;;		_main
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text13
  5693  0024BE                     __ptext13:
  5694                           	opt stack 0
  5695  0024BE                     _lcd_init:
  5696                           	opt stack 22
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;incstack = 0
  5700                           ;lcd_init@definir_tipo_lcd stored from wreg
  5701  0024BE  6F63               	movwf	lcd_init@definir_tipo_lcd& (0+255),b
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;LCD_ModSauer.c: 37: char init_value;
  5705                           ;LCD_ModSauer.c: 38: linha_lcd=1;
  5706  0024C0  0E01               	movlw	1
  5707  0024C2  6E33               	movwf	_linha_lcd,c
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;LCD_ModSauer.c: 40: lcd_type = definir_tipo_lcd;
  5711  0024C4  C063  F032         	movff	lcd_init@definir_tipo_lcd,_lcd_type
  5712                           
  5713                           ;LCD_ModSauer.c: 42: switch(lcd_type){
  5714  0024C8  D012               	goto	l5426
  5715  0024CA                     l5416:
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;LCD_ModSauer.c: 44: qtd_max_colunas_lcd=20;
  5719  0024CA  0E14               	movlw	20
  5720  0024CC  D001               	goto	L7
  5721  0024CE                     l5418:
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;LCD_ModSauer.c: 48: qtd_max_colunas_lcd=16;
  5725  0024CE  0E10               	movlw	16
  5726  0024D0                     L7:
  5727  0024D0  6E37               	movwf	_qtd_max_colunas_lcd,c
  5728                           
  5729                           ;LCD_ModSauer.c: 49: break;
  5730  0024D2  D015               	goto	l722
  5731  0024D4                     l5420:
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;LCD_ModSauer.c: 52: qtd_max_colunas_lcd=20;
  5735  0024D4  0E14               	movlw	20
  5736  0024D6  6E37               	movwf	_qtd_max_colunas_lcd,c
  5737                           
  5738                           ;LCD_ModSauer.c: 53: Linha_3 = 0x94;
  5739  0024D8  0E94               	movlw	148
  5740  0024DA  6E2F               	movwf	_Linha_3,c
  5741                           
  5742                           ;LCD_ModSauer.c: 54: Linha_4 = 0xD4;
  5743  0024DC  0ED4               	movlw	212
  5744  0024DE  D005               	goto	L8
  5745  0024E0                     l5422:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;LCD_ModSauer.c: 58: qtd_max_colunas_lcd=16;
  5749  0024E0  0E10               	movlw	16
  5750  0024E2  6E37               	movwf	_qtd_max_colunas_lcd,c
  5751                           
  5752                           ;LCD_ModSauer.c: 59: Linha_3 = 0x90;
  5753  0024E4  0E90               	movlw	144
  5754  0024E6  6E2F               	movwf	_Linha_3,c
  5755                           
  5756                           ;LCD_ModSauer.c: 60: Linha_4 = 0xD0;
  5757  0024E8  0ED0               	movlw	208
  5758  0024EA                     L8:
  5759  0024EA  6E30               	movwf	_Linha_4,c
  5760                           
  5761                           ;LCD_ModSauer.c: 61: break;
  5762  0024EC  D008               	goto	l722
  5763  0024EE                     l5426:
  5764                           
  5765                           ; BSR set to: 0
  5766  0024EE  5032               	movf	_lcd_type,w,c
  5767                           
  5768                           ; Switch size 1, requested type "space"
  5769                           ; Number of cases is 4, Range of values is 0 to 3
  5770                           ; switch strategies available:
  5771                           ; Name         Instructions Cycles
  5772                           ; simple_byte           13     7 (average)
  5773                           ;	Chosen strategy is simple_byte
  5774  0024F0  E0EE               	bz	l5418
  5775  0024F2  0A01               	xorlw	1	; case 1
  5776  0024F4  E0F5               	bz	l5422
  5777  0024F6  0A03               	xorlw	3	; case 2
  5778  0024F8  E0E8               	bz	l5416
  5779  0024FA  0A01               	xorlw	1	; case 3
  5780  0024FC  E0EB               	bz	l5420
  5781  0024FE                     l722:
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;LCD_ModSauer.c: 63: LATEbits.LE0 = 0;
  5785  0024FE  908D               	bcf	3981,0,c	;volatile
  5786                           
  5787                           ;LCD_ModSauer.c: 64: LATEbits.LE1 = 0;
  5788  002500  928D               	bcf	3981,1,c	;volatile
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;LCD_ModSauer.c: 67: _delay((unsigned long)((15)*(16000000/4000.0)));
  5792  002502  0E4E               	movlw	78
  5793  002504  6F62               	movwf	??_lcd_init& (0+255),b
  5794  002506  0EEB               	movlw	235
  5795  002508                     u7607:
  5796  002508  2EE8               	decfsz	wreg,f,c
  5797  00250A  D7FE               	goto	u7607
  5798  00250C  2F62               	decfsz	??_lcd_init& (0+255),f,b
  5799  00250E  D7FC               	goto	u7607
  5800  002510  F000               	nop	
  5801                           
  5802                           ;LCD_ModSauer.c: 68: LATA = init_value;
  5803  002512  0E03               	movlw	3
  5804  002514  6E89               	movwf	3977,c	;volatile
  5805                           
  5806                           ;LCD_ModSauer.c: 69: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5807  002516  828D               	bsf	3981,1,c	;volatile
  5808  002518  928D               	bcf	3981,1,c	;volatile
  5809                           
  5810                           ;LCD_ModSauer.c: 70: _delay((unsigned long)((5)*(16000000/4000.0)));
  5811  00251A  0E1A               	movlw	26
  5812  00251C  0100               	movlb	0	; () banked
  5813  00251E  6F62               	movwf	??_lcd_init& (0+255),b
  5814  002520  0EF8               	movlw	248
  5815  002522                     u7617:
  5816  002522  2EE8               	decfsz	wreg,f,c
  5817  002524  D7FE               	goto	u7617
  5818  002526  2F62               	decfsz	??_lcd_init& (0+255),f,b
  5819  002528  D7FC               	goto	u7617
  5820  00252A  D000               	nop2	
  5821                           
  5822                           ;LCD_ModSauer.c: 71: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5823  00252C  828D               	bsf	3981,1,c	;volatile
  5824  00252E  928D               	bcf	3981,1,c	;volatile
  5825                           
  5826                           ;LCD_ModSauer.c: 72: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5827  002530  0EC8               	movlw	200
  5828  002532                     u7627:
  5829  002532  F000               	nop	
  5830  002534  2EE8               	decfsz	wreg,f,c
  5831  002536  D7FD               	goto	u7627
  5832                           
  5833                           ;LCD_ModSauer.c: 73: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5834  002538  828D               	bsf	3981,1,c	;volatile
  5835  00253A  928D               	bcf	3981,1,c	;volatile
  5836                           
  5837                           ;LCD_ModSauer.c: 74: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5838  00253C  0EC8               	movlw	200
  5839  00253E                     u7637:
  5840  00253E  F000               	nop	
  5841  002540  2EE8               	decfsz	wreg,f,c
  5842  002542  D7FD               	goto	u7637
  5843                           
  5844                           ;LCD_ModSauer.c: 75: LATA = 2;
  5845  002544  0E02               	movlw	2
  5846  002546  6E89               	movwf	3977,c	;volatile
  5847                           
  5848                           ;LCD_ModSauer.c: 76: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5849  002548  828D               	bsf	3981,1,c	;volatile
  5850  00254A  928D               	bcf	3981,1,c	;volatile
  5851                           
  5852                           ;LCD_ModSauer.c: 78: lcd_write(0x28);
  5853  00254C  0E28               	movlw	40
  5854  00254E  ECBF  F016         	call	_lcd_write
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;LCD_ModSauer.c: 79: lcd_write(0x0C);
  5858  002552  0E0C               	movlw	12
  5859  002554  ECBF  F016         	call	_lcd_write
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;LCD_ModSauer.c: 80: lcd_clear();
  5863  002558  EC1F  F017         	call	_lcd_clear	;wreg free
  5864                           
  5865                           ;LCD_ModSauer.c: 81: lcd_write(0x6);
  5866  00255C  0E06               	movlw	6
  5867  00255E  ECBF  F016         	call	_lcd_write
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;LCD_ModSauer.c: 83: escrever_simbolo_fechadura();
  5871  002562  EF43  F014         	goto	_escrever_simbolo_fechadura	;wreg free
  5872  002566                     __end_of_lcd_init:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           intcon2	equ	0xFF1
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           indf1	equ	0xFE7
  5885                           postinc1	equ	0xFE6
  5886                           postdec1	equ	0xFE5
  5887                           plusw1	equ	0xFE3
  5888                           fsr1h	equ	0xFE2
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           plusw2	equ	0xFDB
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _lcd_clear *****************
  5899 ;; Defined at:
  5900 ;;		line 140 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;		None               void
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : F/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5916 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5917 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5918 ;;Total ram usage:        1 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    7
  5921 ;; This function calls:
  5922 ;;		_lcd_write
  5923 ;; This function is called by:
  5924 ;;		_lcd_init
  5925 ;;		_lcd_putc
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text14
  5930  002E3E                     __ptext14:
  5931                           	opt stack 0
  5932  002E3E                     _lcd_clear:
  5933                           	opt stack 20
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;LCD_ModSauer.c: 142: LATEbits.LE0 = 0;
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;incstack = 0
  5940  002E3E  908D               	bcf	3981,0,c	;volatile
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;LCD_ModSauer.c: 143: lcd_write(0x1);
  5944  002E40  0E01               	movlw	1
  5945  002E42  ECBF  F016         	call	_lcd_write
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;LCD_ModSauer.c: 144: _delay((unsigned long)((2)*(16000000/4000.0)));
  5949  002E46  0E0B               	movlw	11
  5950  002E48  6F61               	movwf	??_lcd_clear& (0+255),b
  5951  002E4A  0E62               	movlw	98
  5952  002E4C                     u7647:
  5953  002E4C  2EE8               	decfsz	wreg,f,c
  5954  002E4E  D7FE               	goto	u7647
  5955  002E50  2F61               	decfsz	??_lcd_clear& (0+255),f,b
  5956  002E52  D7FC               	goto	u7647
  5957  002E54  D000               	nop2	
  5958  002E56  0012               	return		;funcret
  5959  002E58                     __end_of_lcd_clear:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           intcon	equ	0xFF2
  5968                           intcon2	equ	0xFF1
  5969                           postinc0	equ	0xFEE
  5970                           wreg	equ	0xFE8
  5971                           indf1	equ	0xFE7
  5972                           postinc1	equ	0xFE6
  5973                           postdec1	equ	0xFE5
  5974                           plusw1	equ	0xFE3
  5975                           fsr1h	equ	0xFE2
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           plusw2	equ	0xFDB
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function _escrever_simbolo_fechadura *****************
  5986 ;; Defined at:
  5987 ;;		line 87 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;		None
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;		None
  5992 ;; Return value:  Size  Location     Type
  5993 ;;		None               void
  5994 ;; Registers used:
  5995 ;;		wreg, status,2, status,0, cstack
  5996 ;; Tracked objects:
  5997 ;;		On entry : F/0
  5998 ;;		On exit  : F/0
  5999 ;;		Unchanged: 0/0
  6000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6001 ;;      Params:         0       0       0       0       0       0       0       0       0
  6002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6004 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6005 ;;Total ram usage:        0 bytes
  6006 ;; Hardware stack levels used:    1
  6007 ;; Hardware stack levels required when called:    7
  6008 ;; This function calls:
  6009 ;;		_lcd_write
  6010 ;; This function is called by:
  6011 ;;		_lcd_init
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           	psect	text15
  6016  002886                     __ptext15:
  6017                           	opt stack 0
  6018  002886                     _escrever_simbolo_fechadura:
  6019                           	opt stack 22
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;LCD_ModSauer.c: 88: LATEbits.LE0=0;
  6023                           
  6024                           ;incstack = 0
  6025  002886  908D               	bcf	3981,0,c	;volatile
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;LCD_ModSauer.c: 89: lcd_write(0x40);
  6029  002888  0E40               	movlw	64
  6030  00288A  ECBF  F016         	call	_lcd_write
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;LCD_ModSauer.c: 90: LATEbits.LE0=1;
  6034  00288E  808D               	bsf	3981,0,c	;volatile
  6035                           
  6036                           ;LCD_ModSauer.c: 92: lcd_write(0x0E);
  6037  002890  0E0E               	movlw	14
  6038  002892  ECBF  F016         	call	_lcd_write
  6039                           
  6040                           ;LCD_ModSauer.c: 93: lcd_write(0x0A);
  6041  002896  0E0A               	movlw	10
  6042  002898  ECBF  F016         	call	_lcd_write
  6043                           
  6044                           ;LCD_ModSauer.c: 94: lcd_write(0x0A);
  6045  00289C  0E0A               	movlw	10
  6046  00289E  ECBF  F016         	call	_lcd_write
  6047                           
  6048                           ;LCD_ModSauer.c: 95: lcd_write(0x0A);
  6049  0028A2  0E0A               	movlw	10
  6050  0028A4  ECBF  F016         	call	_lcd_write
  6051                           
  6052                           ;LCD_ModSauer.c: 96: lcd_write(0x1F);
  6053  0028A8  0E1F               	movlw	31
  6054  0028AA  ECBF  F016         	call	_lcd_write
  6055                           
  6056                           ;LCD_ModSauer.c: 97: lcd_write(0x1B);
  6057  0028AE  0E1B               	movlw	27
  6058  0028B0  ECBF  F016         	call	_lcd_write
  6059                           
  6060                           ;LCD_ModSauer.c: 98: lcd_write(0x1B);
  6061  0028B4  0E1B               	movlw	27
  6062  0028B6  ECBF  F016         	call	_lcd_write
  6063                           
  6064                           ;LCD_ModSauer.c: 99: lcd_write(0x1F);
  6065  0028BA  0E1F               	movlw	31
  6066  0028BC  ECBF  F016         	call	_lcd_write
  6067                           
  6068                           ;LCD_ModSauer.c: 102: lcd_write(0x03);
  6069  0028C0  0E03               	movlw	3
  6070  0028C2  ECBF  F016         	call	_lcd_write
  6071                           
  6072                           ;LCD_ModSauer.c: 103: lcd_write(0x02);
  6073  0028C6  0E02               	movlw	2
  6074  0028C8  ECBF  F016         	call	_lcd_write
  6075                           
  6076                           ;LCD_ModSauer.c: 104: lcd_write(0x02);
  6077  0028CC  0E02               	movlw	2
  6078  0028CE  ECBF  F016         	call	_lcd_write
  6079                           
  6080                           ;LCD_ModSauer.c: 105: lcd_write(0x02);
  6081  0028D2  0E02               	movlw	2
  6082  0028D4  ECBF  F016         	call	_lcd_write
  6083                           
  6084                           ;LCD_ModSauer.c: 106: lcd_write(0x1F);
  6085  0028D8  0E1F               	movlw	31
  6086  0028DA  ECBF  F016         	call	_lcd_write
  6087                           
  6088                           ;LCD_ModSauer.c: 107: lcd_write(0x1B);
  6089  0028DE  0E1B               	movlw	27
  6090  0028E0  ECBF  F016         	call	_lcd_write
  6091                           
  6092                           ;LCD_ModSauer.c: 108: lcd_write(0x1B);
  6093  0028E4  0E1B               	movlw	27
  6094  0028E6  ECBF  F016         	call	_lcd_write
  6095                           
  6096                           ;LCD_ModSauer.c: 109: lcd_write(0x1F);
  6097  0028EA  0E1F               	movlw	31
  6098  0028EC  ECBF  F016         	call	_lcd_write
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;LCD_ModSauer.c: 111: LATEbits.LE0=0;
  6102  0028F0  908D               	bcf	3981,0,c	;volatile
  6103                           
  6104                           ; BSR set to: 0
  6105  0028F2  0012               	return		;funcret
  6106  0028F4                     __end_of_escrever_simbolo_fechadura:
  6107                           	opt stack 0
  6108                           tblptru	equ	0xFF8
  6109                           tblptrh	equ	0xFF7
  6110                           tblptrl	equ	0xFF6
  6111                           tablat	equ	0xFF5
  6112                           prodh	equ	0xFF4
  6113                           prodl	equ	0xFF3
  6114                           intcon	equ	0xFF2
  6115                           intcon2	equ	0xFF1
  6116                           postinc0	equ	0xFEE
  6117                           wreg	equ	0xFE8
  6118                           indf1	equ	0xFE7
  6119                           postinc1	equ	0xFE6
  6120                           postdec1	equ	0xFE5
  6121                           plusw1	equ	0xFE3
  6122                           fsr1h	equ	0xFE2
  6123                           fsr1l	equ	0xFE1
  6124                           indf2	equ	0xFDF
  6125                           postinc2	equ	0xFDE
  6126                           postdec2	equ	0xFDD
  6127                           plusw2	equ	0xFDB
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _lcd_write *****************
  6133 ;; Defined at:
  6134 ;;		line 124 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;  c               1    wreg     unsigned char 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;  c               1    0[BANK0 ] unsigned char 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;		None               void
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : F/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0
  6149 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6151 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6152 ;;Total ram usage:        1 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    6
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_limpar_linha
  6159 ;;		_lcd_init
  6160 ;;		_escrever_simbolo_fechadura
  6161 ;;		_lcd_clear
  6162 ;;		_lcd_putc
  6163 ;;		_lcd_gotoxy
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text16
  6168  002D7E                     __ptext16:
  6169                           	opt stack 0
  6170  002D7E                     _lcd_write:
  6171                           	opt stack 21
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;incstack = 0
  6175                           ;lcd_write@c stored from wreg
  6176  002D7E  0100               	movlb	0	; () banked
  6177  002D80  6F60               	movwf	lcd_write@c& (0+255),b
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;LCD_ModSauer.c: 126: _delay((unsigned long)((40)*(16000000/4000000.0)));
  6181  002D82  0E35               	movlw	53
  6182  002D84                     u7657:
  6183  002D84  2EE8               	decfsz	wreg,f,c
  6184  002D86  D7FE               	goto	u7657
  6185  002D88  F000               	nop	
  6186                           
  6187                           ;LCD_ModSauer.c: 127: LATA &= 0xF0;
  6188  002D8A  0EF0               	movlw	240
  6189  002D8C  1689               	andwf	3977,f,c	;volatile
  6190                           
  6191                           ;LCD_ModSauer.c: 128: LATA |= ( ( c >> 4 ) & 0x0F );
  6192  002D8E  0100               	movlb	0	; () banked
  6193  002D90  3960               	swapf	lcd_write@c& (0+255),w,b
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;LCD_ModSauer.c: 129: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;LCD_ModSauer.c: 130: LATA &=0xF0;
  6202  002D92  EC56  F016         	call	PL32	;call to abstracted procedure
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;LCD_ModSauer.c: 131: LATA |= ( c & 0x0F );
  6206  002D96  5160               	movf	lcd_write@c& (0+255),w,b
  6207  002D98  0B0F               	andlw	15
  6208  002D9A  1289               	iorwf	3977,f,c	;volatile
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;LCD_ModSauer.c: 132: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6212  002D9C  828D               	bsf	3981,1,c	;volatile
  6213                           
  6214                           ; BSR set to: 0
  6215  002D9E  928D               	bcf	3981,1,c	;volatile
  6216                           
  6217                           ; BSR set to: 0
  6218  002DA0  0012               	return		;funcret
  6219  002DA2                     __end_of_lcd_write:
  6220                           	opt stack 0
  6221                           tblptru	equ	0xFF8
  6222                           tblptrh	equ	0xFF7
  6223                           tblptrl	equ	0xFF6
  6224                           tablat	equ	0xFF5
  6225                           prodh	equ	0xFF4
  6226                           prodl	equ	0xFF3
  6227                           intcon	equ	0xFF2
  6228                           intcon2	equ	0xFF1
  6229                           postinc0	equ	0xFEE
  6230                           wreg	equ	0xFE8
  6231                           indf1	equ	0xFE7
  6232                           postinc1	equ	0xFE6
  6233                           postdec1	equ	0xFE5
  6234                           plusw1	equ	0xFE3
  6235                           fsr1h	equ	0xFE2
  6236                           fsr1l	equ	0xFE1
  6237                           indf2	equ	0xFDF
  6238                           postinc2	equ	0xFDE
  6239                           postdec2	equ	0xFDD
  6240                           plusw2	equ	0xFDB
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _enviar_string_serial *****************
  6246 ;; Defined at:
  6247 ;;		line 27 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  string_a_env    2    0[BANK0 ] PTR const unsigned char 
  6250 ;;		 -> STR_31(4), STR_30(6), STR_29(6), STR_28(6), 
  6251 ;;		 -> STR_27(6), STR_26(6), STR_25(6), STR_24(5), 
  6252 ;;		 -> STR_23(5), STR_22(5), STR_21(4), STR_20(3), 
  6253 ;;		 -> STR_17(3), STR_16(3), STR_15(3), nova_senha(16), 
  6254 ;;		 -> STR_4(7), STR_3(3), main@endereco_modulo_repasse(18), senha(272), 
  6255 ;;		 -> buffer_serial(80), 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;		None               void
  6260 ;; Registers used:
  6261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  6262 ;; Tracked objects:
  6263 ;;		On entry : F/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6267 ;;      Params:         0       2       0       0       0       0       0       0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6270 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6271 ;;Total ram usage:        2 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    6
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text17
  6282  002A2C                     __ptext17:
  6283                           	opt stack 0
  6284  002A2C                     _enviar_string_serial:
  6285                           	opt stack 24
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;serial.c: 28: while(*string_a_enviar != (0)){
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;incstack = 0
  6292  002A2C  D016               	goto	l5388
  6293  002A2E                     l5384:
  6294                           
  6295                           ;serial.c: 29: TXREG = *string_a_enviar;
  6296  002A2E  C060  FFF6         	movff	enviar_string_serial@string_a_enviar,tblptrl
  6297  002A32  C061  FFF7         	movff	enviar_string_serial@string_a_enviar+1,tblptrh
  6298  002A36  6AF8               	clrf	tblptru,c
  6299  002A38  0E07               	movlw	(high __ramtop+-1)
  6300  002A3A  64F7               	cpfsgt	tblptrh,c
  6301  002A3C  D003               	bra	u6137
  6302  002A3E  0008               	tblrd		*
  6303  002A40  50F5               	movf	tablat,w,c
  6304  002A42  D005               	bra	u6130
  6305  002A44                     u6137:
  6306  002A44  CFF6 FFE1          	movff	tblptrl,fsr1l
  6307  002A48  CFF7 FFE2          	movff	tblptrh,fsr1h
  6308  002A4C  50E7               	movf	indf1,w,c
  6309  002A4E                     u6130:
  6310  002A4E  6EAD               	movwf	4013,c	;volatile
  6311  002A50                     l645:
  6312  002A50  A2AC               	btfss	4012,1,c	;volatile
  6313  002A52  D7FE               	goto	l645
  6314                           
  6315                           ;serial.c: 31: string_a_enviar++;}
  6316  002A54  0100               	movlb	0	; () banked
  6317  002A56  4B60               	infsnz	enviar_string_serial@string_a_enviar& (0+255),f,b
  6318  002A58  2B61               	incf	(enviar_string_serial@string_a_enviar+1)& (0+255),f,b
  6319  002A5A                     l5388:
  6320                           
  6321                           ; BSR set to: 0
  6322  002A5A  C060  FFF6         	movff	enviar_string_serial@string_a_enviar,tblptrl
  6323  002A5E  C061  FFF7         	movff	enviar_string_serial@string_a_enviar+1,tblptrh
  6324  002A62  6AF8               	clrf	tblptru,c
  6325  002A64  0E07               	movlw	(high __ramtop+-1)
  6326  002A66  64F7               	cpfsgt	tblptrh,c
  6327  002A68  D003               	bra	u6157
  6328  002A6A  0008               	tblrd		*
  6329  002A6C  50F5               	movf	tablat,w,c
  6330  002A6E  D005               	bra	u6150
  6331  002A70                     u6157:
  6332  002A70  CFF6 FFE1          	movff	tblptrl,fsr1l
  6333  002A74  CFF7 FFE2          	movff	tblptrh,fsr1h
  6334  002A78  50E7               	movf	indf1,w,c
  6335  002A7A                     u6150:
  6336  002A7A  0900               	iorlw	0
  6337  002A7C  B4D8               	btfsc	status,2,c
  6338  002A7E  0012               	return		;funcret
  6339  002A80  D7D6               	goto	l5384
  6340  002A82                     __end_of_enviar_string_serial:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           intcon	equ	0xFF2
  6349                           intcon2	equ	0xFF1
  6350                           postinc0	equ	0xFEE
  6351                           wreg	equ	0xFE8
  6352                           indf1	equ	0xFE7
  6353                           postinc1	equ	0xFE6
  6354                           postdec1	equ	0xFE5
  6355                           plusw1	equ	0xFE3
  6356                           fsr1h	equ	0xFE2
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           plusw2	equ	0xFDB
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _enviar_caractere_serial *****************
  6367 ;; Defined at:
  6368 ;;		line 22 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;  carater_a_en    1    wreg     unsigned char 
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;  carater_a_en    1    0[BANK0 ] unsigned char 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;		None               void
  6375 ;; Registers used:
  6376 ;;		wreg
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6382 ;;      Params:         0       0       0       0       0       0       0       0       0
  6383 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6385 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6386 ;;Total ram usage:        1 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    6
  6389 ;; This function calls:
  6390 ;;		Nothing
  6391 ;; This function is called by:
  6392 ;;		_main
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           	psect	text18
  6397  002E92                     __ptext18:
  6398                           	opt stack 0
  6399  002E92                     _enviar_caractere_serial:
  6400                           	opt stack 24
  6401                           
  6402                           ;incstack = 0
  6403                           ;enviar_caractere_serial@carater_a_enviar stored from wreg
  6404  002E92  0100               	movlb	0	; () banked
  6405  002E94  6F60               	movwf	enviar_caractere_serial@carater_a_enviar& (0+255),b
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;serial.c: 23: TXREG = carater_a_enviar;
  6409  002E96  C060  FFAD         	movff	enviar_caractere_serial@carater_a_enviar,4013	;volatile
  6410  002E9A                     l637:
  6411  002E9A  B2AC               	btfsc	4012,1,c	;volatile
  6412  002E9C  0012               	return		;funcret
  6413  002E9E  D7FD               	goto	l637
  6414  002EA0                     __end_of_enviar_caractere_serial:
  6415                           	opt stack 0
  6416                           tblptru	equ	0xFF8
  6417                           tblptrh	equ	0xFF7
  6418                           tblptrl	equ	0xFF6
  6419                           tablat	equ	0xFF5
  6420                           prodh	equ	0xFF4
  6421                           prodl	equ	0xFF3
  6422                           intcon	equ	0xFF2
  6423                           intcon2	equ	0xFF1
  6424                           postinc0	equ	0xFEE
  6425                           wreg	equ	0xFE8
  6426                           indf1	equ	0xFE7
  6427                           postinc1	equ	0xFE6
  6428                           postdec1	equ	0xFE5
  6429                           plusw1	equ	0xFE3
  6430                           fsr1h	equ	0xFE2
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           plusw2	equ	0xFDB
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function _eeprom_config_inicial *****************
  6441 ;; Defined at:
  6442 ;;		line 29 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  i               1    4[BANK0 ] unsigned char 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;		None               void
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6456 ;;      Params:         0       0       0       0       0       0       0       0       0
  6457 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6459 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6460 ;;Total ram usage:        1 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    7
  6463 ;; This function calls:
  6464 ;;		_Busy_eep
  6465 ;;		_Write_b_eep
  6466 ;; This function is called by:
  6467 ;;		_main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text19
  6472  002692                     __ptext19:
  6473                           	opt stack 0
  6474  002692                     _eeprom_config_inicial:
  6475                           	opt stack 23
  6476                           
  6477                           ;eeprom_interna.c: 30: unsigned char i;
  6478                           ;eeprom_interna.c: 32: for(i=0;i<10;i++){
  6479                           
  6480                           ;incstack = 0
  6481  002692  0100               	movlb	0	; () banked
  6482  002694  6B64               	clrf	eeprom_config_inicial@i& (0+255),b
  6483  002696                     l5292:
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;eeprom_interna.c: 33: (Busy_eep(), Write_b_eep(i,('0'+i)));
  6487  002696  EC66  F017         	call	_Busy_eep	;wreg free
  6488  00269A  C064  F060         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  6489  00269E  0100               	movlb	0	; () banked
  6490  0026A0  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6491  0026A2  5164               	movf	eeprom_config_inicial@i& (0+255),w,b
  6492  0026A4  0F30               	addlw	48
  6493  0026A6  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  6494  0026A8  EC2D  F016         	call	_Write_b_eep	;wreg free
  6495                           
  6496                           ;eeprom_interna.c: 34: (Busy_eep(), Write_b_eep(16+i,('a'+i)));
  6497  0026AC  EC66  F017         	call	_Busy_eep	;wreg free
  6498  0026B0  D82C               	call	PL30	;call to abstracted procedure
  6499  0026B2  5164               	movf	eeprom_config_inicial@i& (0+255),w,b
  6500  0026B4  0F61               	addlw	97
  6501  0026B6  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  6502  0026B8  EC2D  F016         	call	_Write_b_eep	;wreg free
  6503  0026BC  0100               	movlb	0	; () banked
  6504  0026BE  2B64               	incf	eeprom_config_inicial@i& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507  0026C0  0E09               	movlw	9
  6508  0026C2  6564               	cpfsgt	eeprom_config_inicial@i& (0+255),b
  6509  0026C4  D7E8               	goto	l5292
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;eeprom_interna.c: 36: }
  6513                           ;eeprom_interna.c: 37: (Busy_eep(), Write_b_eep(i,0));
  6514  0026C6  EC66  F017         	call	_Busy_eep	;wreg free
  6515  0026CA  C064  F060         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  6516  0026CE  0100               	movlb	0	; () banked
  6517  0026D0  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6518  0026D2  6B62               	clrf	Write_b_eep@bdat& (0+255),b
  6519  0026D4  EC2D  F016         	call	_Write_b_eep	;wreg free
  6520                           
  6521                           ;eeprom_interna.c: 38: (Busy_eep(), Write_b_eep(16+i,0));
  6522  0026D8  EC66  F017         	call	_Busy_eep	;wreg free
  6523  0026DC  D816               	call	PL30	;call to abstracted procedure
  6524  0026DE  6B62               	clrf	Write_b_eep@bdat& (0+255),b
  6525  0026E0  EC2D  F016         	call	_Write_b_eep	;wreg free
  6526                           
  6527                           ;eeprom_interna.c: 40: (Busy_eep(), Write_b_eep(16-1,255));
  6528  0026E4  EC66  F017         	call	_Busy_eep	;wreg free
  6529  0026E8  0100               	movlb	0	; () banked
  6530  0026EA  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6531  0026EC  0E0F               	movlw	15
  6532  0026EE  6F60               	movwf	Write_b_eep@badd& (0+255),b
  6533  0026F0  6962               	setf	Write_b_eep@bdat& (0+255),b
  6534  0026F2  EC2D  F016         	call	_Write_b_eep	;wreg free
  6535                           
  6536                           ;eeprom_interna.c: 41: (Busy_eep(), Write_b_eep(((16*2)-1),0b11111100));
  6537  0026F6  EC66  F017         	call	_Busy_eep	;wreg free
  6538  0026FA  0100               	movlb	0	; () banked
  6539  0026FC  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6540  0026FE  0E1F               	movlw	31
  6541  002700  6F60               	movwf	Write_b_eep@badd& (0+255),b
  6542  002702  0EFC               	movlw	252
  6543  002704  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  6544  002706  EF2D  F016         	goto	_Write_b_eep	;wreg free
  6545  00270A                     __end_of_eeprom_config_inicial:
  6546                           	opt stack 0
  6547  00270A                     PL30:
  6548                           	opt stack 23
  6549  00270A  0E10               	movlw	16
  6550  00270C  0100               	movlb	0	; () banked
  6551  00270E  2564               	addwf	eeprom_config_inicial@i& (0+255),w,b
  6552  002710  6F60               	movwf	Write_b_eep@badd& (0+255),b
  6553  002712  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6554  002714  0E00               	movlw	0
  6555  002716  2361               	addwfc	(Write_b_eep@badd+1)& (0+255),f,b
  6556  002718  0C00               	retlw	0
  6557  00271A                     __end_ofPL30:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           intcon2	equ	0xFF1
  6567                           postinc0	equ	0xFEE
  6568                           wreg	equ	0xFE8
  6569                           indf1	equ	0xFE7
  6570                           postinc1	equ	0xFE6
  6571                           postdec1	equ	0xFE5
  6572                           plusw1	equ	0xFE3
  6573                           fsr1h	equ	0xFE2
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           plusw2	equ	0xFDB
  6579                           fsr2h	equ	0xFDA
  6580                           fsr2l	equ	0xFD9
  6581                           status	equ	0xFD8
  6582                           
  6583 ;; *************** function _Write_b_eep *****************
  6584 ;; Defined at:
  6585 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\write_B.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;  badd            2    0[BANK0 ] unsigned int 
  6588 ;;  bdat            1    2[BANK0 ] unsigned char 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		wreg, status,2
  6595 ;; Tracked objects:
  6596 ;;		On entry : F/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6600 ;;      Params:         0       3       0       0       0       0       0       0       0
  6601 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6603 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6604 ;;Total ram usage:        4 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    6
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_main
  6611 ;;		_eeprom_config_inicial
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text20
  6616  002C5A                     __ptext20:
  6617                           	opt stack 0
  6618  002C5A                     _Write_b_eep:
  6619                           	opt stack 23
  6620                           
  6621                           ; BSR set to: 0
  6622                           
  6623                           ;incstack = 0
  6624  002C5A  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6625  002C5E  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6626  002C62  9EA6               	bcf	4006,7,c	;volatile
  6627  002C64  9CA6               	bcf	4006,6,c	;volatile
  6628  002C66  84A6               	bsf	4006,2,c	;volatile
  6629                           
  6630                           ; BSR set to: 0
  6631  002C68  0E00               	movlw	0
  6632  002C6A  BEF2               	btfsc	intcon,7,c	;volatile
  6633  002C6C  0E01               	movlw	1
  6634  002C6E  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
  6635                           
  6636                           ; BSR set to: 0
  6637  002C70  9EF2               	bcf	intcon,7,c	;volatile
  6638                           
  6639                           ; BSR set to: 0
  6640  002C72  0E55               	movlw	85
  6641  002C74  6EA7               	movwf	4007,c	;volatile
  6642                           
  6643                           ; BSR set to: 0
  6644  002C76  0EAA               	movlw	170
  6645  002C78  6EA7               	movwf	4007,c	;volatile
  6646                           
  6647                           ; BSR set to: 0
  6648  002C7A  82A6               	bsf	4006,1,c	;volatile
  6649  002C7C                     l876:
  6650                           
  6651                           ; BSR set to: 0
  6652  002C7C  B2A6               	btfsc	4006,1,c	;volatile
  6653  002C7E  D7FE               	goto	l876
  6654                           
  6655                           ; BSR set to: 0
  6656  002C80  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
  6657  002C82  D002               	bra	u5595
  6658  002C84  9EF2               	bcf	intcon,7,c	;volatile
  6659  002C86  D001               	bra	u5596
  6660  002C88                     u5595:
  6661  002C88  8EF2               	bsf	intcon,7,c	;volatile
  6662  002C8A                     u5596:
  6663  002C8A  94A6               	bcf	4006,2,c	;volatile
  6664  002C8C  0012               	return		;funcret
  6665  002C8E                     __end_of_Write_b_eep:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           intcon2	equ	0xFF1
  6675                           postinc0	equ	0xFEE
  6676                           wreg	equ	0xFE8
  6677                           indf1	equ	0xFE7
  6678                           postinc1	equ	0xFE6
  6679                           postdec1	equ	0xFE5
  6680                           plusw1	equ	0xFE3
  6681                           fsr1h	equ	0xFE2
  6682                           fsr1l	equ	0xFE1
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           plusw2	equ	0xFDB
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function _Busy_eep *****************
  6692 ;; Defined at:
  6693 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\busy_eep.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;		None
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;		None
  6698 ;; Return value:  Size  Location     Type
  6699 ;;		None               void
  6700 ;; Registers used:
  6701 ;;		None
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6707 ;;      Params:         0       0       0       0       0       0       0       0       0
  6708 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6710 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6711 ;;Total ram usage:        0 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    6
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;;		_eeprom_config_inicial
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           	psect	text21
  6723  002ECC                     __ptext21:
  6724                           	opt stack 0
  6725  002ECC                     _Busy_eep:
  6726                           	opt stack 23
  6727  002ECC                     l849:
  6728  002ECC  A2A6               	btfss	4006,1,c	;volatile
  6729  002ECE  0012               	return		;funcret
  6730  002ED0  D7FD               	goto	l849
  6731  002ED2                     __end_of_Busy_eep:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           intcon2	equ	0xFF1
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           indf1	equ	0xFE7
  6744                           postinc1	equ	0xFE6
  6745                           postdec1	equ	0xFE5
  6746                           plusw1	equ	0xFE3
  6747                           fsr1h	equ	0xFE2
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           plusw2	equ	0xFDB
  6753                           fsr2h	equ	0xFDA
  6754                           fsr2l	equ	0xFD9
  6755                           status	equ	0xFD8
  6756                           
  6757 ;; *************** function _dia_da_semana *****************
  6758 ;; Defined at:
  6759 ;;		line 12 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;  ano             2   12[BANK0 ] unsigned int 
  6762 ;;  mes             1   14[BANK0 ] unsigned char 
  6763 ;;  dia             1   15[BANK0 ] unsigned char 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  tabela_mes     12   21[BANK0 ] unsigned char [12]
  6766 ;;  seculo          1   33[BANK0 ] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      unsigned char 
  6769 ;; Registers used:
  6770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : F/0
  6773 ;;		On exit  : F/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6776 ;;      Params:         0       4       0       0       0       0       0       0       0
  6777 ;;      Locals:         0      13       0       0       0       0       0       0       0
  6778 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6779 ;;      Totals:         0      22       0       0       0       0       0       0       0
  6780 ;;Total ram usage:       22 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    7
  6783 ;; This function calls:
  6784 ;;		___lwdiv
  6785 ;;		___lwmod
  6786 ;;		___wmul
  6787 ;; This function is called by:
  6788 ;;		_main
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           	psect	text22
  6793  0023D0                     __ptext22:
  6794                           	opt stack 0
  6795  0023D0                     _dia_da_semana:
  6796                           	opt stack 23
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;time.c: 14: char tabela_mes[]= {0,3,3,6,1,4,6,2,5,0,3,5};
  6800                           
  6801                           ;incstack = 0
  6802  0023D0  EE20  F0EC         	lfsr	2,dia_da_semana@F5265
  6803  0023D4  EE10  F075         	lfsr	1,dia_da_semana@tabela_mes
  6804  0023D8  0E0B               	movlw	11
  6805  0023DA                     u6171:
  6806  0023DA  CFDB FFE3          	movff	plusw2,plusw1
  6807  0023DE  06E8               	decf	wreg,f,c
  6808  0023E0  E2FC               	bc	u6171
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;time.c: 15: unsigned char seculo;
  6812                           ;time.c: 17: ano+=15;
  6813  0023E2  0E0F               	movlw	15
  6814  0023E4  276C               	addwf	dia_da_semana@ano& (0+255),f,b
  6815  0023E6  0E00               	movlw	0
  6816  0023E8  236D               	addwfc	(dia_da_semana@ano+1)& (0+255),f,b
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;time.c: 18: seculo = ano/100;
  6820  0023EA  C06C  F060         	movff	dia_da_semana@ano,___lwdiv@dividend
  6821  0023EE  C06D  F061         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  6822  0023F2  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
  6823  0023F4  0E64               	movlw	100
  6824  0023F6  6F62               	movwf	___lwdiv@divisor& (0+255),b
  6825  0023F8  EC66  F015         	call	___lwdiv	;wreg free
  6826  0023FC  5160               	movf	?___lwdiv& (0+255),w,b
  6827  0023FE  6F81               	movwf	dia_da_semana@seculo& (0+255),b
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;time.c: 19: ano-= (ano/100);
  6831  002400  C06C  F060         	movff	dia_da_semana@ano,___lwdiv@dividend
  6832  002404  C06D  F061         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  6833  002408  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
  6834  00240A  0E64               	movlw	100
  6835  00240C  6F62               	movwf	___lwdiv@divisor& (0+255),b
  6836  00240E  EC66  F015         	call	___lwdiv	;wreg free
  6837  002412  5160               	movf	?___lwdiv& (0+255),w,b
  6838  002414  5F6C               	subwf	dia_da_semana@ano& (0+255),f,b
  6839  002416  5161               	movf	(?___lwdiv+1)& (0+255),w,b
  6840  002418  5B6D               	subwfb	(dia_da_semana@ano+1)& (0+255),f,b
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;time.c: 21: if(! ((ano+3)%4) ){
  6844  00241A  C06C  F070         	movff	dia_da_semana@ano,??_dia_da_semana
  6845  00241E  0E03               	movlw	3
  6846  002420  2770               	addwf	??_dia_da_semana& (0+255),f,b
  6847  002422  1770               	andwf	??_dia_da_semana& (0+255),f,b
  6848  002424  E10B               	bnz	l5408
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;time.c: 22: if (mes==1) tabela_mes[mes-1]=6;
  6852  002426  056E               	decf	dia_da_semana@mes& (0+255),w,b
  6853  002428  E103               	bnz	l5404
  6854                           
  6855                           ; BSR set to: 0
  6856  00242A  D841               	call	PL28	;call to abstracted procedure
  6857  00242C  0E06               	movlw	6
  6858  00242E  D005               	goto	L9
  6859  002430                     l5404:
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;time.c: 23: else if(mes==2) tabela_mes[mes-1]=2;}
  6863  002430  0E02               	movlw	2
  6864  002432  196E               	xorwf	dia_da_semana@mes& (0+255),w,b
  6865  002434  E103               	bnz	l5408
  6866                           
  6867                           ; BSR set to: 0
  6868  002436  D83B               	call	PL28	;call to abstracted procedure
  6869  002438  0E02               	movlw	2
  6870  00243A                     L9:
  6871  00243A  6EDF               	movwf	indf2,c
  6872  00243C                     l5408:
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;time.c: 25: return (( (6 - seculo*2) + dia + tabela_mes[mes-1] + ano + (ano/4))%7);
  6876  00243C  C081  F060         	movff	dia_da_semana@seculo,___wmul@multiplier
  6877  002440  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  6878  002442  6963               	setf	(___wmul@multiplicand+1)& (0+255),b
  6879  002444  0EFE               	movlw	254
  6880  002446  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6881  002448  EC87  F016         	call	___wmul	;wreg free
  6882  00244C  C06C  F070         	movff	dia_da_semana@ano,??_dia_da_semana
  6883  002450  C06D  F071         	movff	dia_da_semana@ano+1,??_dia_da_semana+1
  6884  002454  90D8               	bcf	status,0,c
  6885  002456  3371               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  6886  002458  3370               	rrcf	??_dia_da_semana& (0+255),f,b
  6887  00245A  90D8               	bcf	status,0,c
  6888  00245C  3371               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  6889  00245E  3370               	rrcf	??_dia_da_semana& (0+255),f,b
  6890  002460  C06E  F072         	movff	dia_da_semana@mes,??_dia_da_semana+2
  6891  002464  0772               	decf	(??_dia_da_semana+2)& (0+255),f,b
  6892  002466  5172               	movf	(??_dia_da_semana+2)& (0+255),w,b
  6893  002468  0F75               	addlw	low dia_da_semana@tabela_mes
  6894  00246A  6ED9               	movwf	fsr2l,c
  6895  00246C  6ADA               	clrf	fsr2h,c
  6896  00246E  50DF               	movf	indf2,w,c
  6897  002470  C06F  F073         	movff	dia_da_semana@dia,??_dia_da_semana+3
  6898  002474  6B74               	clrf	(??_dia_da_semana+4)& (0+255),b
  6899  002476  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6900  002478  0E00               	movlw	0
  6901  00247A  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6902  00247C  5170               	movf	??_dia_da_semana& (0+255),w,b
  6903  00247E  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6904  002480  5171               	movf	(??_dia_da_semana+1)& (0+255),w,b
  6905  002482  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6906  002484  5160               	movf	?___wmul& (0+255),w,b
  6907  002486  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6908  002488  5161               	movf	(?___wmul+1)& (0+255),w,b
  6909  00248A  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6910  00248C  516C               	movf	dia_da_semana@ano& (0+255),w,b
  6911  00248E  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6912  002490  516D               	movf	(dia_da_semana@ano+1)& (0+255),w,b
  6913  002492  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6914  002494  0E06               	movlw	6
  6915  002496  2573               	addwf	(??_dia_da_semana+3)& (0+255),w,b
  6916  002498  6F67               	movwf	___lwmod@dividend& (0+255),b
  6917  00249A  0E00               	movlw	0
  6918  00249C  2174               	addwfc	(??_dia_da_semana+4)& (0+255),w,b
  6919  00249E  6F68               	movwf	(___lwmod@dividend+1)& (0+255),b
  6920  0024A0  6B6A               	clrf	(___lwmod@divisor+1)& (0+255),b
  6921  0024A2  0E07               	movlw	7
  6922  0024A4  6F69               	movwf	___lwmod@divisor& (0+255),b
  6923  0024A6  ECD5  F015         	call	___lwmod	;wreg free
  6924  0024AA  5167               	movf	?___lwmod& (0+255),w,b
  6925                           
  6926                           ; BSR set to: 0
  6927  0024AC  0012               	return		;funcret
  6928  0024AE                     __end_of_dia_da_semana:
  6929                           	opt stack 0
  6930  0024AE                     PL28:
  6931                           	opt stack 23
  6932  0024AE  C06E  F070         	movff	dia_da_semana@mes,??_dia_da_semana
  6933  0024B2  0770               	decf	??_dia_da_semana& (0+255),f,b
  6934  0024B4  5170               	movf	??_dia_da_semana& (0+255),w,b
  6935  0024B6  0F75               	addlw	low dia_da_semana@tabela_mes
  6936  0024B8  6ED9               	movwf	fsr2l,c
  6937  0024BA  6ADA               	clrf	fsr2h,c
  6938  0024BC  0012               	return	
  6939  0024BE                     __end_ofPL28:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           intcon2	equ	0xFF1
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           indf1	equ	0xFE7
  6952                           postinc1	equ	0xFE6
  6953                           postdec1	equ	0xFE5
  6954                           plusw1	equ	0xFE3
  6955                           fsr1h	equ	0xFE2
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           plusw2	equ	0xFDB
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function ___wmul *****************
  6966 ;; Defined at:
  6967 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6970 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  product         2    4[BANK0 ] unsigned int 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  2    0[BANK0 ] unsigned int 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0, prodl, prodh
  6977 ;; Tracked objects:
  6978 ;;		On entry : F/0
  6979 ;;		On exit  : F/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6982 ;;      Params:         0       4       0       0       0       0       0       0       0
  6983 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6985 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6986 ;;Total ram usage:        6 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    6
  6989 ;; This function calls:
  6990 ;;		Nothing
  6991 ;; This function is called by:
  6992 ;;		_numero_para_ascii
  6993 ;;		_dia_da_semana
  6994 ;;		_printf
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           	psect	text23
  6999  002D0E                     __ptext23:
  7000                           	opt stack 0
  7001  002D0E                     ___wmul:
  7002                           	opt stack 23
  7003                           
  7004                           ; BSR set to: 0
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;incstack = 0
  7008  002D0E  5160               	movf	___wmul@multiplier& (0+255),w,b
  7009  002D10  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7010  002D12  CFF3 F064          	movff	prodl,___wmul@product
  7011  002D16  CFF4 F065          	movff	prodh,___wmul@product+1
  7012  002D1A  5160               	movf	___wmul@multiplier& (0+255),w,b
  7013  002D1C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7014  002D1E  50F3               	movf	prodl,w,c
  7015  002D20  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7016  002D22  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7017  002D24  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7018  002D26  50F3               	movf	prodl,w,c
  7019  002D28  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7020                           
  7021                           ; BSR set to: 0
  7022  002D2A  C064  F060         	movff	___wmul@product,?___wmul
  7023  002D2E  C065  F061         	movff	___wmul@product+1,?___wmul+1
  7024                           
  7025                           ; BSR set to: 0
  7026  002D32  0012               	return		;funcret
  7027  002D34                     __end_of___wmul:
  7028                           	opt stack 0
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           intcon	equ	0xFF2
  7036                           intcon2	equ	0xFF1
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           indf1	equ	0xFE7
  7040                           postinc1	equ	0xFE6
  7041                           postdec1	equ	0xFE5
  7042                           plusw1	equ	0xFE3
  7043                           fsr1h	equ	0xFE2
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           plusw2	equ	0xFDB
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function ___lwmod *****************
  7054 ;; Defined at:
  7055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  dividend        2    7[BANK0 ] unsigned int 
  7058 ;;  divisor         2    9[BANK0 ] unsigned int 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  counter         1   11[BANK0 ] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  2    7[BANK0 ] unsigned int 
  7063 ;; Registers used:
  7064 ;;		wreg, status,2, status,0
  7065 ;; Tracked objects:
  7066 ;;		On entry : F/0
  7067 ;;		On exit  : F/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7070 ;;      Params:         0       4       0       0       0       0       0       0       0
  7071 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7073 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7074 ;;Total ram usage:        5 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    6
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_dia_da_semana
  7081 ;;		_printf
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text24
  7086  002BAA                     __ptext24:
  7087                           	opt stack 0
  7088  002BAA                     ___lwmod:
  7089                           	opt stack 23
  7090                           
  7091                           ; BSR set to: 0
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;incstack = 0
  7095  002BAA  5169               	movf	___lwmod@divisor& (0+255),w,b
  7096  002BAC  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7097  002BAE  E017               	bz	l1415
  7098                           
  7099                           ; BSR set to: 0
  7100  002BB0  0E01               	movlw	1
  7101  002BB2  6F6B               	movwf	___lwmod@counter& (0+255),b
  7102  002BB4  D004               	goto	l5134
  7103  002BB6                     l5132:
  7104                           
  7105                           ; BSR set to: 0
  7106  002BB6  90D8               	bcf	status,0,c
  7107  002BB8  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  7108  002BBA  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7109  002BBC  2B6B               	incf	___lwmod@counter& (0+255),f,b
  7110  002BBE                     l5134:
  7111                           
  7112                           ; BSR set to: 0
  7113  002BBE  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7114  002BC0  D7FA               	goto	l5132
  7115  002BC2                     l5136:
  7116                           
  7117                           ; BSR set to: 0
  7118  002BC2  5169               	movf	___lwmod@divisor& (0+255),w,b
  7119  002BC4  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  7120  002BC6  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7121  002BC8  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7122  002BCA  E304               	bnc	l5140
  7123                           
  7124                           ; BSR set to: 0
  7125  002BCC  5169               	movf	___lwmod@divisor& (0+255),w,b
  7126  002BCE  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  7127  002BD0  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7128  002BD2  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7129  002BD4                     l5140:
  7130                           
  7131                           ; BSR set to: 0
  7132  002BD4  90D8               	bcf	status,0,c
  7133  002BD6  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7134  002BD8  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  7135                           
  7136                           ; BSR set to: 0
  7137  002BDA  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  7138  002BDC  D7F2               	goto	l5136
  7139  002BDE                     l1415:
  7140                           
  7141                           ; BSR set to: 0
  7142  002BDE  C067  F067         	movff	___lwmod@dividend,?___lwmod
  7143  002BE2  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  7144                           
  7145                           ; BSR set to: 0
  7146  002BE6  0012               	return		;funcret
  7147  002BE8                     __end_of___lwmod:
  7148                           	opt stack 0
  7149                           tblptru	equ	0xFF8
  7150                           tblptrh	equ	0xFF7
  7151                           tblptrl	equ	0xFF6
  7152                           tablat	equ	0xFF5
  7153                           prodh	equ	0xFF4
  7154                           prodl	equ	0xFF3
  7155                           intcon	equ	0xFF2
  7156                           intcon2	equ	0xFF1
  7157                           postinc0	equ	0xFEE
  7158                           wreg	equ	0xFE8
  7159                           indf1	equ	0xFE7
  7160                           postinc1	equ	0xFE6
  7161                           postdec1	equ	0xFE5
  7162                           plusw1	equ	0xFE3
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           plusw2	equ	0xFDB
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function ___lwdiv *****************
  7174 ;; Defined at:
  7175 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  dividend        2    0[BANK0 ] unsigned int 
  7178 ;;  divisor         2    2[BANK0 ] unsigned int 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  quotient        2    5[BANK0 ] unsigned int 
  7181 ;;  counter         1    4[BANK0 ] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  2    0[BANK0 ] unsigned int 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2, status,0
  7186 ;; Tracked objects:
  7187 ;;		On entry : F/0
  7188 ;;		On exit  : F/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7191 ;;      Params:         0       4       0       0       0       0       0       0       0
  7192 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7194 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7195 ;;Total ram usage:        7 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    6
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_dia_da_semana
  7202 ;;		_printf
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           	psect	text25
  7207  002ACC                     __ptext25:
  7208                           	opt stack 0
  7209  002ACC                     ___lwdiv:
  7210                           	opt stack 23
  7211                           
  7212                           ; BSR set to: 0
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;incstack = 0
  7216  002ACC  6B65               	clrf	___lwdiv@quotient& (0+255),b
  7217  002ACE  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
  7218                           
  7219                           ; BSR set to: 0
  7220  002AD0  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7221  002AD2  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7222  002AD4  E01B               	bz	l1405
  7223                           
  7224                           ; BSR set to: 0
  7225  002AD6  0E01               	movlw	1
  7226  002AD8  6F64               	movwf	___lwdiv@counter& (0+255),b
  7227  002ADA  D004               	goto	l5114
  7228  002ADC                     l5112:
  7229                           
  7230                           ; BSR set to: 0
  7231  002ADC  90D8               	bcf	status,0,c
  7232  002ADE  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  7233  002AE0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7234  002AE2  2B64               	incf	___lwdiv@counter& (0+255),f,b
  7235  002AE4                     l5114:
  7236                           
  7237                           ; BSR set to: 0
  7238  002AE4  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7239  002AE6  D7FA               	goto	l5112
  7240  002AE8                     l5116:
  7241                           
  7242                           ; BSR set to: 0
  7243  002AE8  90D8               	bcf	status,0,c
  7244  002AEA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  7245  002AEC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7246                           
  7247                           ; BSR set to: 0
  7248  002AEE  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7249  002AF0  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  7250  002AF2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7251  002AF4  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7252  002AF6  E305               	bnc	l5124
  7253                           
  7254                           ; BSR set to: 0
  7255  002AF8  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7256  002AFA  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  7257  002AFC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7258  002AFE  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7259                           
  7260                           ; BSR set to: 0
  7261  002B00  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  7262  002B02                     l5124:
  7263                           
  7264                           ; BSR set to: 0
  7265  002B02  90D8               	bcf	status,0,c
  7266  002B04  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7267  002B06  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  7268                           
  7269                           ; BSR set to: 0
  7270  002B08  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  7271  002B0A  D7EE               	goto	l5116
  7272  002B0C                     l1405:
  7273                           
  7274                           ; BSR set to: 0
  7275  002B0C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  7276  002B10  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7277                           
  7278                           ; BSR set to: 0
  7279  002B14  0012               	return		;funcret
  7280  002B16                     __end_of___lwdiv:
  7281                           	opt stack 0
  7282                           tblptru	equ	0xFF8
  7283                           tblptrh	equ	0xFF7
  7284                           tblptrl	equ	0xFF6
  7285                           tablat	equ	0xFF5
  7286                           prodh	equ	0xFF4
  7287                           prodl	equ	0xFF3
  7288                           intcon	equ	0xFF2
  7289                           intcon2	equ	0xFF1
  7290                           postinc0	equ	0xFEE
  7291                           wreg	equ	0xFE8
  7292                           indf1	equ	0xFE7
  7293                           postinc1	equ	0xFE6
  7294                           postdec1	equ	0xFE5
  7295                           plusw1	equ	0xFE3
  7296                           fsr1h	equ	0xFE2
  7297                           fsr1l	equ	0xFE1
  7298                           indf2	equ	0xFDF
  7299                           postinc2	equ	0xFDE
  7300                           postdec2	equ	0xFDD
  7301                           plusw2	equ	0xFDB
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function _delay_ms *****************
  7307 ;; Defined at:
  7308 ;;		line 5 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  delay_total     2    0[BANK0 ] unsigned int 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  temp            2    3[BANK0 ] unsigned int 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;		None               void
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0
  7317 ;; Tracked objects:
  7318 ;;		On entry : F/0
  7319 ;;		On exit  : F/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7322 ;;      Params:         0       2       0       0       0       0       0       0       0
  7323 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7324 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7325 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7326 ;;Total ram usage:        5 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    6
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_main
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text26
  7337  002CE4                     __ptext26:
  7338                           	opt stack 0
  7339  002CE4                     _delay_ms:
  7340                           	opt stack 24
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;time.c: 6: unsigned int temp = 0;
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;incstack = 0
  7347  002CE4  6B63               	clrf	delay_ms@temp& (0+255),b
  7348  002CE6  6B64               	clrf	(delay_ms@temp+1)& (0+255),b
  7349                           
  7350                           ;time.c: 7: while(temp < delay_total){
  7351  002CE8  D00B               	goto	l564
  7352  002CEA                     l5464:
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;time.c: 8: _delay((unsigned long)((1)*(16000000/4000.0)));
  7356  002CEA  0E06               	movlw	6
  7357  002CEC  6F62               	movwf	??_delay_ms& (0+255),b
  7358  002CEE  0E30               	movlw	48
  7359  002CF0                     u7667:
  7360  002CF0  2EE8               	decfsz	wreg,f,c
  7361  002CF2  D7FE               	goto	u7667
  7362  002CF4  2F62               	decfsz	??_delay_ms& (0+255),f,b
  7363  002CF6  D7FC               	goto	u7667
  7364  002CF8  D000               	nop2	
  7365                           
  7366                           ;time.c: 9: temp++;}
  7367  002CFA  0100               	movlb	0	; () banked
  7368  002CFC  4B63               	infsnz	delay_ms@temp& (0+255),f,b
  7369  002CFE  2B64               	incf	(delay_ms@temp+1)& (0+255),f,b
  7370  002D00                     l564:
  7371                           
  7372                           ; BSR set to: 0
  7373  002D00  5160               	movf	delay_ms@delay_total& (0+255),w,b
  7374  002D02  5D63               	subwf	delay_ms@temp& (0+255),w,b
  7375  002D04  5161               	movf	(delay_ms@delay_total+1)& (0+255),w,b
  7376  002D06  5964               	subwfb	(delay_ms@temp+1)& (0+255),w,b
  7377  002D08  B0D8               	btfsc	status,0,c
  7378                           
  7379                           ; BSR set to: 0
  7380  002D0A  0012               	return		;funcret
  7381  002D0C  D7EE               	goto	l5464
  7382  002D0E                     __end_of_delay_ms:
  7383                           	opt stack 0
  7384                           tblptru	equ	0xFF8
  7385                           tblptrh	equ	0xFF7
  7386                           tblptrl	equ	0xFF6
  7387                           tablat	equ	0xFF5
  7388                           prodh	equ	0xFF4
  7389                           prodl	equ	0xFF3
  7390                           intcon	equ	0xFF2
  7391                           intcon2	equ	0xFF1
  7392                           postinc0	equ	0xFEE
  7393                           wreg	equ	0xFE8
  7394                           indf1	equ	0xFE7
  7395                           postinc1	equ	0xFE6
  7396                           postdec1	equ	0xFE5
  7397                           plusw1	equ	0xFE3
  7398                           fsr1h	equ	0xFE2
  7399                           fsr1l	equ	0xFE1
  7400                           indf2	equ	0xFDF
  7401                           postinc2	equ	0xFDE
  7402                           postdec2	equ	0xFDD
  7403                           plusw2	equ	0xFDB
  7404                           fsr2h	equ	0xFDA
  7405                           fsr2l	equ	0xFD9
  7406                           status	equ	0xFD8
  7407                           
  7408 ;; *************** function _config_serial *****************
  7409 ;; Defined at:
  7410 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;  baud            1    wreg     unsigned char 
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  baud            1    0[BANK0 ] unsigned char 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;		None               void
  7417 ;; Registers used:
  7418 ;;		wreg
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : F/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7424 ;;      Params:         0       0       0       0       0       0       0       0       0
  7425 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7427 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7428 ;;Total ram usage:        1 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    6
  7431 ;; This function calls:
  7432 ;;		Nothing
  7433 ;; This function is called by:
  7434 ;;		_main
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           	psect	text27
  7439  002DC4                     __ptext27:
  7440                           	opt stack 0
  7441  002DC4                     _config_serial:
  7442                           	opt stack 24
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;incstack = 0
  7446                           ;config_serial@baud stored from wreg
  7447  002DC4  0100               	movlb	0	; () banked
  7448  002DC6  6F60               	movwf	config_serial@baud& (0+255),b
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;serial.c: 7: SYNC=0;
  7452  002DC8  98AC               	bcf	4012,4,c	;volatile
  7453                           
  7454                           ;serial.c: 8: BRGH=1;
  7455  002DCA  84AC               	bsf	4012,2,c	;volatile
  7456                           
  7457                           ;serial.c: 9: BRG16=1;
  7458  002DCC  86B8               	bsf	4024,3,c	;volatile
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;serial.c: 10: SPBRG=baud;
  7462  002DCE  C060  FFAF         	movff	config_serial@baud,4015	;volatile
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;serial.c: 11: TX9=0;
  7466  002DD2  9CAC               	bcf	4012,6,c	;volatile
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;serial.c: 12: RX9=0;
  7470  002DD4  9CAB               	bcf	4011,6,c	;volatile
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;serial.c: 13: TXEN=1;
  7474  002DD6  8AAC               	bsf	4012,5,c	;volatile
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;serial.c: 14: RCIE=0;
  7478  002DD8  9A9D               	bcf	3997,5,c	;volatile
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;serial.c: 15: CREN=1;
  7482  002DDA  88AB               	bsf	4011,4,c	;volatile
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;serial.c: 16: SPEN=1;
  7486  002DDC  8EAB               	bsf	4011,7,c	;volatile
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;serial.c: 17: TXCKP = 0;
  7490  002DDE  98B8               	bcf	4024,4,c	;volatile
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;serial.c: 18: TXIE = 0;
  7494  002DE0  989D               	bcf	3997,4,c	;volatile
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;serial.c: 19: TX9 = 0;
  7498  002DE2  9CAC               	bcf	4012,6,c	;volatile
  7499                           
  7500                           ; BSR set to: 0
  7501  002DE4  0012               	return		;funcret
  7502  002DE6                     __end_of_config_serial:
  7503                           	opt stack 0
  7504                           tblptru	equ	0xFF8
  7505                           tblptrh	equ	0xFF7
  7506                           tblptrl	equ	0xFF6
  7507                           tablat	equ	0xFF5
  7508                           prodh	equ	0xFF4
  7509                           prodl	equ	0xFF3
  7510                           intcon	equ	0xFF2
  7511                           intcon2	equ	0xFF1
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           indf1	equ	0xFE7
  7515                           postinc1	equ	0xFE6
  7516                           postdec1	equ	0xFE5
  7517                           plusw1	equ	0xFE3
  7518                           fsr1h	equ	0xFE2
  7519                           fsr1l	equ	0xFE1
  7520                           indf2	equ	0xFDF
  7521                           postinc2	equ	0xFDE
  7522                           postdec2	equ	0xFDD
  7523                           plusw2	equ	0xFDB
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528 ;; *************** function _carregar_senha *****************
  7529 ;; Defined at:
  7530 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;  conta           1    wreg     unsigned char 
  7533 ;;  senha_a_carr    2    2[BANK0 ] PTR unsigned char [17]
  7534 ;;		 -> senha(272), 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  conta           1    9[BANK0 ] unsigned char 
  7537 ;;  i               1    8[BANK0 ] unsigned char 
  7538 ;; Return value:  Size  Location     Type
  7539 ;;		None               void
  7540 ;; Registers used:
  7541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : F/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7547 ;;      Params:         0       2       0       0       0       0       0       0       0
  7548 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7549 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7550 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7551 ;;Total ram usage:        8 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    7
  7554 ;; This function calls:
  7555 ;;		_Read_b_eep
  7556 ;; This function is called by:
  7557 ;;		_main
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text28
  7562  0025FE                     __ptext28:
  7563                           	opt stack 0
  7564  0025FE                     _carregar_senha:
  7565                           	opt stack 23
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;incstack = 0
  7569                           ;carregar_senha@conta stored from wreg
  7570  0025FE  6F69               	movwf	carregar_senha@conta& (0+255),b
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;eeprom_interna.c: 8: char i = 0;
  7574  002600  6B68               	clrf	carregar_senha@i& (0+255),b
  7575  002602                     l5372:
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;eeprom_interna.c: 11: senha_a_carregar[conta][i] = Read_b_eep((conta*16) + i);
  7579  002602  D82A               	call	PL8	;call to abstracted procedure
  7580  002604  5168               	movf	carregar_senha@i& (0+255),w,b
  7581  002606  D833               	call	PL10	;call to abstracted procedure
  7582  002608  5168               	movf	carregar_senha@i& (0+255),w,b
  7583  00260A  2566               	addwf	(??_carregar_senha+2)& (0+255),w,b
  7584  00260C  6F60               	movwf	Read_b_eep@badd& (0+255),b
  7585  00260E  0E00               	movlw	0
  7586  002610  2167               	addwfc	(??_carregar_senha+3)& (0+255),w,b
  7587  002612  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  7588  002614  EC39  F017         	call	_Read_b_eep	;wreg free
  7589  002618  6EDF               	movwf	indf2,c
  7590                           
  7591                           ;eeprom_interna.c: 12: i++;} while( senha_a_carregar[conta][i-1] && i<(16-1));
  7592  00261A  0100               	movlb	0	; () banked
  7593  00261C  2B68               	incf	carregar_senha@i& (0+255),f,b
  7594                           
  7595                           ; BSR set to: 0
  7596  00261E  D81C               	call	PL8	;call to abstracted procedure
  7597  002620  5168               	movf	carregar_senha@i& (0+255),w,b
  7598  002622  2764               	addwf	??_carregar_senha& (0+255),f,b
  7599  002624  0E00               	movlw	0
  7600  002626  2365               	addwfc	(??_carregar_senha+1)& (0+255),f,b
  7601  002628  0EFF               	movlw	255
  7602  00262A  2564               	addwf	??_carregar_senha& (0+255),w,b
  7603  00262C  6ED9               	movwf	fsr2l,c
  7604  00262E  0EFF               	movlw	255
  7605  002630  2165               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  7606  002632  6EDA               	movwf	fsr2h,c
  7607  002634  50DF               	movf	indf2,w,c
  7608  002636  E003               	bz	l5380
  7609                           
  7610                           ; BSR set to: 0
  7611  002638  0E0E               	movlw	14
  7612  00263A  6568               	cpfsgt	carregar_senha@i& (0+255),b
  7613  00263C  D7E2               	goto	l5372
  7614  00263E                     l5380:
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;eeprom_interna.c: 16: senha_a_carregar[conta][16-1] = Read_b_eep((16*(conta+1))-1);
  7618  00263E  D80C               	call	PL8	;call to abstracted procedure
  7619  002640  0E0F               	movlw	15
  7620  002642  D815               	call	PL10	;call to abstracted procedure
  7621  002644  0E0F               	movlw	15
  7622  002646  2566               	addwf	(??_carregar_senha+2)& (0+255),w,b
  7623  002648  6F60               	movwf	Read_b_eep@badd& (0+255),b
  7624  00264A  0E00               	movlw	0
  7625  00264C  2167               	addwfc	(??_carregar_senha+3)& (0+255),w,b
  7626  00264E  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  7627  002650  EC39  F017         	call	_Read_b_eep	;wreg free
  7628  002654  6EDF               	movwf	indf2,c
  7629  002656  0012               	return		;funcret
  7630  002658                     __end_of_carregar_senha:
  7631                           	opt stack 0
  7632  002658                     PL8:
  7633                           	opt stack 23
  7634  002658  5169               	movf	carregar_senha@conta& (0+255),w,b
  7635  00265A  0D11               	mullw	17
  7636  00265C  C062  F064         	movff	carregar_senha@senha_a_carregar,??_carregar_senha
  7637  002660  C063  F065         	movff	carregar_senha@senha_a_carregar+1,??_carregar_senha+1
  7638  002664  50F3               	movf	prodl,w,c
  7639  002666  2764               	addwf	??_carregar_senha& (0+255),f,b
  7640  002668  50F4               	movf	prodh,w,c
  7641  00266A  2365               	addwfc	(??_carregar_senha+1)& (0+255),f,b
  7642  00266C  0012               	return	
  7643  00266E                     __end_ofPL8:
  7644                           	opt stack 0
  7645  00266E                     PL10:
  7646                           	opt stack 23
  7647  00266E  2564               	addwf	??_carregar_senha& (0+255),w,b
  7648  002670  6ED9               	movwf	fsr2l,c
  7649  002672  0E00               	movlw	0
  7650  002674  2165               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  7651  002676  6EDA               	movwf	fsr2h,c
  7652  002678  5169               	movf	carregar_senha@conta& (0+255),w,b
  7653  00267A  6F66               	movwf	(??_carregar_senha+2)& (0+255),b
  7654  00267C  6B67               	clrf	(??_carregar_senha+3)& (0+255),b
  7655  00267E  3B66               	swapf	(??_carregar_senha+2)& (0+255),f,b
  7656  002680  3B67               	swapf	(??_carregar_senha+3)& (0+255),f,b
  7657  002682  0EF0               	movlw	240
  7658  002684  1767               	andwf	(??_carregar_senha+3)& (0+255),f,b
  7659  002686  5166               	movf	(??_carregar_senha+2)& (0+255),w,b
  7660  002688  0B0F               	andlw	15
  7661  00268A  1367               	iorwf	(??_carregar_senha+3)& (0+255),f,b
  7662  00268C  0EF0               	movlw	240
  7663  00268E  1766               	andwf	(??_carregar_senha+2)& (0+255),f,b
  7664  002690  0CF0               	retlw	240
  7665  002692                     __end_ofPL10:
  7666                           	opt stack 0
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon2	equ	0xFF1
  7675                           postinc0	equ	0xFEE
  7676                           wreg	equ	0xFE8
  7677                           indf1	equ	0xFE7
  7678                           postinc1	equ	0xFE6
  7679                           postdec1	equ	0xFE5
  7680                           plusw1	equ	0xFE3
  7681                           fsr1h	equ	0xFE2
  7682                           fsr1l	equ	0xFE1
  7683                           indf2	equ	0xFDF
  7684                           postinc2	equ	0xFDE
  7685                           postdec2	equ	0xFDD
  7686                           plusw2	equ	0xFDB
  7687                           fsr2h	equ	0xFDA
  7688                           fsr2l	equ	0xFD9
  7689                           status	equ	0xFD8
  7690                           
  7691 ;; *************** function _Read_b_eep *****************
  7692 ;; Defined at:
  7693 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\read_B.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  badd            2    0[BANK0 ] unsigned int 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;		None
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      unsigned char 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2
  7702 ;; Tracked objects:
  7703 ;;		On entry : F/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7707 ;;      Params:         0       2       0       0       0       0       0       0       0
  7708 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7710 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7711 ;;Total ram usage:        2 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    6
  7714 ;; This function calls:
  7715 ;;		Nothing
  7716 ;; This function is called by:
  7717 ;;		_main
  7718 ;;		_carregar_senha
  7719 ;;		_verificar_num_contas
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text29
  7724  002E72                     __ptext29:
  7725                           	opt stack 0
  7726  002E72                     _Read_b_eep:
  7727                           	opt stack 23
  7728                           
  7729                           ; BSR set to: 0
  7730                           
  7731                           ;incstack = 0
  7732  002E72  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  7733  002E76  9CA6               	bcf	4006,6,c	;volatile
  7734  002E78  9EA6               	bcf	4006,7,c	;volatile
  7735  002E7A  80A6               	bsf	4006,0,c	;volatile
  7736  002E7C  F000               	nop	
  7737  002E7E  F000               	nop	
  7738  002E80  50A8               	movf	4008,w,c	;volatile
  7739  002E82  0012               	return		;funcret
  7740  002E84                     __end_of_Read_b_eep:
  7741                           	opt stack 0
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           intcon2	equ	0xFF1
  7750                           postinc0	equ	0xFEE
  7751                           wreg	equ	0xFE8
  7752                           indf1	equ	0xFE7
  7753                           postinc1	equ	0xFE6
  7754                           postdec1	equ	0xFE5
  7755                           plusw1	equ	0xFE3
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           plusw2	equ	0xFDB
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _ascii_para_numero *****************
  7767 ;; Defined at:
  7768 ;;		line 101 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;  caractere3      1    wreg     unsigned char 
  7771 ;;  caractere2      1    0[BANK0 ] unsigned char 
  7772 ;;  caractere1      1    1[BANK0 ] unsigned char 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  caractere3      1    2[BANK0 ] unsigned char 
  7775 ;;  numero          1    3[BANK0 ] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      unsigned char 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0, prodl, prodh
  7780 ;; Tracked objects:
  7781 ;;		On entry : F/0
  7782 ;;		On exit  : F/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7785 ;;      Params:         0       2       0       0       0       0       0       0       0
  7786 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7788 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7789 ;;Total ram usage:        4 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    6
  7792 ;; This function calls:
  7793 ;;		Nothing
  7794 ;; This function is called by:
  7795 ;;		_main
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           	psect	text30
  7800  002DE6                     __ptext30:
  7801                           	opt stack 0
  7802  002DE6                     _ascii_para_numero:
  7803                           	opt stack 24
  7804                           
  7805                           ;incstack = 0
  7806                           ;ascii_para_numero@caractere3 stored from wreg
  7807  002DE6  6F62               	movwf	ascii_para_numero@caractere3& (0+255),b
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;ascii.c: 102: char numero;
  7811                           ;ascii.c: 103: numero=((caractere3 - '0')*100);
  7812  002DE8  5162               	movf	ascii_para_numero@caractere3& (0+255),w,b
  7813  002DEA  0FD0               	addlw	208
  7814  002DEC  0D64               	mullw	100
  7815  002DEE  CFF3 F063          	movff	prodl,ascii_para_numero@numero
  7816                           
  7817                           ;ascii.c: 104: numero+=((caractere2 - '0')*10);
  7818  002DF2  5160               	movf	ascii_para_numero@caractere2& (0+255),w,b
  7819  002DF4  0FD0               	addlw	208
  7820  002DF6  0D0A               	mullw	10
  7821  002DF8  50F3               	movf	prodl,w,c
  7822  002DFA  2763               	addwf	ascii_para_numero@numero& (0+255),f,b
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;ascii.c: 105: numero+=(caractere1 - '0');
  7826  002DFC  5161               	movf	ascii_para_numero@caractere1& (0+255),w,b
  7827  002DFE  0FD0               	addlw	208
  7828  002E00  2763               	addwf	ascii_para_numero@numero& (0+255),f,b
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;ascii.c: 106: return numero;}
  7832  002E02  5163               	movf	ascii_para_numero@numero& (0+255),w,b
  7833                           
  7834                           ; BSR set to: 0
  7835  002E04  0012               	return		;funcret
  7836  002E06                     __end_of_ascii_para_numero:
  7837                           	opt stack 0
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           intcon	equ	0xFF2
  7845                           intcon2	equ	0xFF1
  7846                           postinc0	equ	0xFEE
  7847                           wreg	equ	0xFE8
  7848                           indf1	equ	0xFE7
  7849                           postinc1	equ	0xFE6
  7850                           postdec1	equ	0xFE5
  7851                           plusw1	equ	0xFE3
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           postdec2	equ	0xFDD
  7857                           plusw2	equ	0xFDB
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function ___awmod *****************
  7863 ;; Defined at:
  7864 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;  dividend        2    0[BANK0 ] int 
  7867 ;;  divisor         2    2[BANK0 ] int 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  sign            1    5[BANK0 ] unsigned char 
  7870 ;;  counter         1    4[BANK0 ] unsigned char 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  2    0[BANK0 ] int 
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, status,0
  7875 ;; Tracked objects:
  7876 ;;		On entry : F/0
  7877 ;;		On exit  : F/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7880 ;;      Params:         0       4       0       0       0       0       0       0       0
  7881 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7882 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7883 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7884 ;;Total ram usage:        6 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    6
  7887 ;; This function calls:
  7888 ;;		Nothing
  7889 ;; This function is called by:
  7890 ;;		_main
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text31
  7895  00295C                     __ptext31:
  7896                           	opt stack 0
  7897  00295C                     ___awmod:
  7898                           	opt stack 24
  7899                           
  7900                           ; BSR set to: 0
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;incstack = 0
  7904  00295C  6B65               	clrf	___awmod@sign& (0+255),b
  7905                           
  7906                           ; BSR set to: 0
  7907  00295E  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7908  002960  D006               	goto	l5494
  7909                           
  7910                           ; BSR set to: 0
  7911  002962  6D60               	negf	___awmod@dividend& (0+255),b
  7912  002964  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7913  002966  B0D8               	btfsc	status,0,c
  7914  002968  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7915                           
  7916                           ; BSR set to: 0
  7917  00296A  0E01               	movlw	1
  7918  00296C  6F65               	movwf	___awmod@sign& (0+255),b
  7919  00296E                     l5494:
  7920                           
  7921                           ; BSR set to: 0
  7922  00296E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7923  002970  D004               	goto	l5498
  7924                           
  7925                           ; BSR set to: 0
  7926  002972  6D62               	negf	___awmod@divisor& (0+255),b
  7927  002974  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  7928  002976  B0D8               	btfsc	status,0,c
  7929  002978  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  7930  00297A                     l5498:
  7931                           
  7932                           ; BSR set to: 0
  7933  00297A  5162               	movf	___awmod@divisor& (0+255),w,b
  7934  00297C  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7935  00297E  E017               	bz	l5514
  7936                           
  7937                           ; BSR set to: 0
  7938  002980  0E01               	movlw	1
  7939  002982  6F64               	movwf	___awmod@counter& (0+255),b
  7940  002984  D004               	goto	l5504
  7941  002986                     l5502:
  7942                           
  7943                           ; BSR set to: 0
  7944  002986  90D8               	bcf	status,0,c
  7945  002988  3762               	rlcf	___awmod@divisor& (0+255),f,b
  7946  00298A  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7947  00298C  2B64               	incf	___awmod@counter& (0+255),f,b
  7948  00298E                     l5504:
  7949                           
  7950                           ; BSR set to: 0
  7951  00298E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7952  002990  D7FA               	goto	l5502
  7953  002992                     l5506:
  7954                           
  7955                           ; BSR set to: 0
  7956  002992  5162               	movf	___awmod@divisor& (0+255),w,b
  7957  002994  5D60               	subwf	___awmod@dividend& (0+255),w,b
  7958  002996  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7959  002998  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7960  00299A  E304               	bnc	l5510
  7961                           
  7962                           ; BSR set to: 0
  7963  00299C  5162               	movf	___awmod@divisor& (0+255),w,b
  7964  00299E  5F60               	subwf	___awmod@dividend& (0+255),f,b
  7965  0029A0  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7966  0029A2  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7967  0029A4                     l5510:
  7968                           
  7969                           ; BSR set to: 0
  7970  0029A4  90D8               	bcf	status,0,c
  7971  0029A6  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7972  0029A8  3362               	rrcf	___awmod@divisor& (0+255),f,b
  7973                           
  7974                           ; BSR set to: 0
  7975  0029AA  2F64               	decfsz	___awmod@counter& (0+255),f,b
  7976  0029AC  D7F2               	goto	l5506
  7977  0029AE                     l5514:
  7978                           
  7979                           ; BSR set to: 0
  7980  0029AE  5165               	movf	___awmod@sign& (0+255),w,b
  7981  0029B0  E004               	bz	l5518
  7982                           
  7983                           ; BSR set to: 0
  7984  0029B2  6D60               	negf	___awmod@dividend& (0+255),b
  7985  0029B4  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7986  0029B6  B0D8               	btfsc	status,0,c
  7987  0029B8  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7988  0029BA                     l5518:
  7989                           
  7990                           ; BSR set to: 0
  7991  0029BA  C060  F060         	movff	___awmod@dividend,?___awmod
  7992  0029BE  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  7993                           
  7994                           ; BSR set to: 0
  7995  0029C2  0012               	return		;funcret
  7996  0029C4                     __end_of___awmod:
  7997                           	opt stack 0
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           intcon2	equ	0xFF1
  8006                           postinc0	equ	0xFEE
  8007                           wreg	equ	0xFE8
  8008                           indf1	equ	0xFE7
  8009                           postinc1	equ	0xFE6
  8010                           postdec1	equ	0xFE5
  8011                           plusw1	equ	0xFE3
  8012                           fsr1h	equ	0xFE2
  8013                           fsr1l	equ	0xFE1
  8014                           indf2	equ	0xFDF
  8015                           postinc2	equ	0xFDE
  8016                           postdec2	equ	0xFDD
  8017                           plusw2	equ	0xFDB
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function _aux *****************
  8023 ;; Defined at:
  8024 ;;		line 114 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;		None
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  temp            1    0        unsigned char 
  8029 ;;  temp            1    0        unsigned char 
  8030 ;;  linha           1   43[COMRAM] unsigned char 
  8031 ;;  coluna          1   42[COMRAM] unsigned char 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;		None               void
  8034 ;; Registers used:
  8035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0
  8042 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8043 ;;      Temps:         11       0       0       0       0       0       0       0       0
  8044 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8045 ;;Total ram usage:       15 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    5
  8048 ;; This function calls:
  8049 ;;		_teclado_matricial
  8050 ;;		i2_lcd_gotoxy
  8051 ;;		i2_printf
  8052 ;;		i2_resetar_timer1
  8053 ;; This function is called by:
  8054 ;;		Interrupt level 2
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	intcode
  8059  001008                     __pintcode:
  8060                           	opt stack 0
  8061  001008                     _aux:
  8062                           	opt stack 20
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;incstack = 0
  8066  001008  CFE1 F01F          	movff	fsr1l,??_aux+1
  8067  00100C  CFE2 F020          	movff	fsr1h,??_aux+2
  8068  001010  CFD9 F021          	movff	fsr2l,??_aux+3
  8069  001014  EDBD  F010         	call	int_func,f	;refresh shadow registers
  8070                           tblptru	equ	0xFF8
  8071                           tblptrh	equ	0xFF7
  8072                           tblptrl	equ	0xFF6
  8073                           tablat	equ	0xFF5
  8074                           prodh	equ	0xFF4
  8075                           prodl	equ	0xFF3
  8076                           intcon	equ	0xFF2
  8077                           intcon2	equ	0xFF1
  8078                           postinc0	equ	0xFEE
  8079                           wreg	equ	0xFE8
  8080                           indf1	equ	0xFE7
  8081                           postinc1	equ	0xFE6
  8082                           postdec1	equ	0xFE5
  8083                           plusw1	equ	0xFE3
  8084                           fsr1h	equ	0xFE2
  8085                           fsr1l	equ	0xFE1
  8086                           indf2	equ	0xFDF
  8087                           postinc2	equ	0xFDE
  8088                           postdec2	equ	0xFDD
  8089                           plusw2	equ	0xFDB
  8090                           fsr2h	equ	0xFDA
  8091                           fsr2l	equ	0xFD9
  8092                           status	equ	0xFD8
  8093                           
  8094                           	psect	intcode_body
  8095  00217A                     __pintcode_body:
  8096                           	opt stack 20
  8097  00217A                     int_func:
  8098                           	opt stack 20
  8099  00217A  0006               	pop		; remove dummy address from shadow register refresh
  8100  00217C  CFDA F022          	movff	fsr2h,??_aux+4
  8101  002180  CFF3 F023          	movff	prodl,??_aux+5
  8102  002184  CFF4 F024          	movff	prodh,??_aux+6
  8103  002188  CFF6 F025          	movff	tblptrl,??_aux+7
  8104  00218C  CFF7 F026          	movff	tblptrh,??_aux+8
  8105  002190  CFF8 F027          	movff	tblptru,??_aux+9
  8106  002194  CFF5 F028          	movff	tablat,??_aux+10
  8107                           
  8108                           ;main.c: 116: if(TMR1IE && TMR1IF){
  8109  002198  B09D               	btfsc	3997,0,c	;volatile
  8110  00219A  A09E               	btfss	3998,0,c	;volatile
  8111  00219C  D01D               	goto	i2l4138
  8112                           
  8113                           ;main.c: 117: TMR1IF=0;
  8114  00219E  909E               	bcf	3998,0,c	;volatile
  8115                           
  8116                           ;main.c: 118: TMR1H=0xC0;
  8117  0021A0  0EC0               	movlw	192
  8118  0021A2  6ECF               	movwf	4047,c	;volatile
  8119                           
  8120                           ;main.c: 120: if((!((FLAGS_3 & (1<<3))))){
  8121  0021A4  B62E               	btfsc	_FLAGS_3,3,c
  8122  0021A6  D006               	goto	i2l178
  8123                           
  8124                           ;main.c: 121: qtd_caracteres_recebidos_serial=0;
  8125  0021A8  6A35               	clrf	_qtd_caracteres_recebidos_serial,c
  8126                           
  8127                           ;main.c: 122: (FLAGS_1 |= (1<<1));
  8128  0021AA  0100               	movlb	0	; () banked
  8129  0021AC  83B1               	bsf	_FLAGS_1& (0+255),1,b
  8130                           
  8131                           ;main.c: 123: (FLAGS_2 |= (1<<0));
  8132  0021AE  802D               	bsf	_FLAGS_2,0,c
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;main.c: 124: TMR1ON=0;
  8136  0021B0  90CD               	bcf	4045,0,c	;volatile
  8137                           
  8138                           ;main.c: 125: }
  8139  0021B2  D012               	goto	i2l4138
  8140  0021B4                     i2l178:
  8141                           
  8142                           ;main.c: 129: else if((FLAGS_3 & (1<<2)) && ++num_interrupt_timer1==5){
  8143  0021B4  A42E               	btfss	_FLAGS_3,2,c
  8144  0021B6  D010               	goto	i2l4138
  8145  0021B8  2A34               	incf	_num_interrupt_timer1,f,c
  8146  0021BA  0E05               	movlw	5
  8147  0021BC  1834               	xorwf	_num_interrupt_timer1,w,c
  8148  0021BE  E10C               	bnz	i2l4138
  8149                           
  8150                           ;main.c: 130: if((FLAGS_2 & (1<<4))){(FLAGS_2 |= (1<<1));}
  8151  0021C0  B82D               	btfsc	_FLAGS_2,4,c
  8152  0021C2  822D               	bsf	_FLAGS_2,1,c
  8153                           
  8154                           ;main.c: 131: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado);
  8155  0021C4  C036  F002         	movff	_qtd_caracteres_recebidos_teclado,i2lcd_gotoxy@coluna
  8156  0021C8  0E02               	movlw	2
  8157  0021CA  EC8B  F015         	call	i2_lcd_gotoxy
  8158                           
  8159                           ;main.c: 132: printf("*");
  8160  0021CE  0EF7               	movlw	STR_1& (0+255)
  8161  0021D0  EC51  F00F         	call	i2_printf
  8162                           
  8163                           ;main.c: 133: TMR1ON=0;
  8164  0021D4  90CD               	bcf	4045,0,c	;volatile
  8165                           
  8166                           ;main.c: 134: num_interrupt_timer1=0;}
  8167  0021D6  6A34               	clrf	_num_interrupt_timer1,c
  8168  0021D8                     i2l4138:
  8169                           
  8170                           ;main.c: 136: }
  8171                           ;main.c: 138: if(TMR0IE && TMR0IF){
  8172  0021D8  BAF2               	btfsc	intcon,5,c	;volatile
  8173  0021DA  A4F2               	btfss	intcon,2,c	;volatile
  8174  0021DC  D051               	goto	i2l182
  8175                           
  8176                           ;main.c: 139: TMR0H = 0xC2;
  8177  0021DE  0EC2               	movlw	194
  8178  0021E0  6ED7               	movwf	4055,c	;volatile
  8179                           
  8180                           ;main.c: 140: TMR0L+=0xF7;
  8181  0021E2  0EF7               	movlw	247
  8182  0021E4  26D6               	addwf	4054,f,c	;volatile
  8183                           
  8184                           ;main.c: 141: TMR0IF=0;
  8185  0021E6  94F2               	bcf	intcon,2,c	;volatile
  8186                           
  8187                           ;main.c: 142: LATDbits.LD1^=1;
  8188  0021E8  728C               	btg	3980,1,c	;volatile
  8189                           
  8190                           ;main.c: 143: (FLAGS_2 |= (1<<7));
  8191  0021EA  8E2D               	bsf	_FLAGS_2,7,c
  8192                           
  8193                           ;main.c: 144: (FLAGS_3 |= (1<<0));
  8194  0021EC  802E               	bsf	_FLAGS_3,0,c
  8195                           
  8196                           ;main.c: 145: if(++data_atual.segundo>59){
  8197  0021EE  2A3D               	incf	_data_atual+5,f,c
  8198  0021F0  0E3B               	movlw	59
  8199  0021F2  643D               	cpfsgt	_data_atual+5,c
  8200  0021F4  D045               	goto	i2l182
  8201                           
  8202                           ;main.c: 146: data_atual.segundo=0;
  8203  0021F6  6A3D               	clrf	_data_atual+5,c
  8204                           
  8205                           ;main.c: 148: if(++data_atual.minuto>59){
  8206  0021F8  2A3C               	incf	_data_atual+4,f,c
  8207  0021FA  0E3B               	movlw	59
  8208  0021FC  643C               	cpfsgt	_data_atual+4,c
  8209  0021FE  D040               	goto	i2l182
  8210                           
  8211                           ;main.c: 151: data_atual.minuto=0;
  8212  002200  6A3C               	clrf	_data_atual+4,c
  8213                           
  8214                           ;main.c: 153: if(++data_atual.hora>23){
  8215  002202  2A3B               	incf	_data_atual+3,f,c
  8216  002204  0E17               	movlw	23
  8217  002206  643B               	cpfsgt	_data_atual+3,c
  8218  002208  D03B               	goto	i2l182
  8219                           
  8220                           ;main.c: 155: data_atual.hora=0;
  8221  00220A  6A3B               	clrf	_data_atual+3,c
  8222                           
  8223                           ;main.c: 156: if(++data_atual.dia_da_semana > 6) data_atual.dia_da_semana = 1;
  8224  00220C  2A3E               	incf	_data_atual+6,f,c
  8225  00220E  0E06               	movlw	6
  8226  002210  643E               	cpfsgt	_data_atual+6,c
  8227  002212  D002               	goto	i2l4170
  8228  002214  0E01               	movlw	1
  8229  002216  6E3E               	movwf	_data_atual+6,c
  8230  002218                     i2l4170:
  8231                           
  8232                           ;main.c: 158: if(++data_atual.dia >= qtd_max_dias) {
  8233  002218  2A3A               	incf	_data_atual+2,f,c
  8234  00221A  503F               	movf	_qtd_max_dias,w,c
  8235  00221C  5C3A               	subwf	_data_atual+2,w,c
  8236  00221E  E330               	bnc	i2l182
  8237                           
  8238                           ;main.c: 159: data_atual.dia=1;
  8239  002220  0E01               	movlw	1
  8240  002222  6E3A               	movwf	_data_atual+2,c
  8241                           
  8242                           ;main.c: 161: switch(++data_atual.mes){
  8243  002224  D012               	goto	i2l4190
  8244  002226                     i2l4174:
  8245                           
  8246                           ;main.c: 163: case 3:
  8247                           ;main.c: 164: case 5:
  8248                           ;main.c: 165: case 7:
  8249                           ;main.c: 166: case 8:
  8250                           ;main.c: 167: case 10:
  8251                           ;main.c: 168: case 12:
  8252                           ;main.c: 169: qtd_max_dias=31;
  8253  002226  0E1F               	movlw	31
  8254  002228  D00B               	goto	L12
  8255  00222A                     i2l4176:
  8256                           
  8257                           ;main.c: 173: if(!((data_atual.ano+3)%4)) qtd_max_dias=29;
  8258  00222A  C038  F01E         	movff	_data_atual,??_aux
  8259  00222E  0E03               	movlw	3
  8260  002230  261E               	addwf	??_aux,f,c
  8261  002232  161E               	andwf	??_aux,f,c
  8262  002234  E102               	bnz	i2l4180
  8263  002236  0E1D               	movlw	29
  8264  002238  D003               	goto	L12
  8265  00223A                     i2l4180:
  8266                           
  8267                           ;main.c: 174: else qtd_max_dias=28;
  8268  00223A  0E1C               	movlw	28
  8269  00223C  D001               	goto	L12
  8270  00223E                     i2l4182:
  8271                           
  8272                           ;main.c: 178: case 6:
  8273                           ;main.c: 179: case 9:
  8274                           ;main.c: 180: case 11:
  8275                           ;main.c: 181: qtd_max_dias=30;
  8276  00223E  0E1E               	movlw	30
  8277  002240                     L12:
  8278  002240  6E3F               	movwf	_qtd_max_dias,c
  8279                           
  8280                           ;main.c: 182: break;
  8281  002242  D01E               	goto	i2l182
  8282  002244                     i2l4184:
  8283                           
  8284                           ;main.c: 185: data_atual.ano++;
  8285  002244  2A38               	incf	_data_atual,f,c
  8286                           
  8287                           ;main.c: 186: data_atual.mes=0;
  8288  002246  6A39               	clrf	_data_atual+1,c
  8289                           
  8290                           ;main.c: 187: break;}
  8291  002248  D01B               	goto	i2l182
  8292  00224A                     i2l4190:
  8293  00224A  2A39               	incf	_data_atual+1,f,c
  8294  00224C  5039               	movf	_data_atual+1,w,c
  8295                           
  8296                           ; Switch size 1, requested type "space"
  8297                           ; Number of cases is 12, Range of values is 1 to 12
  8298                           ; switch strategies available:
  8299                           ; Name         Instructions Cycles
  8300                           ; simple_byte           37    19 (average)
  8301                           ;	Chosen strategy is simple_byte
  8302  00224E  0A01               	xorlw	1	; case 1
  8303  002250  E0EA               	bz	i2l4174
  8304  002252  0A03               	xorlw	3	; case 2
  8305  002254  E0EA               	bz	i2l4176
  8306  002256  0A01               	xorlw	1	; case 3
  8307  002258  E0E6               	bz	i2l4174
  8308  00225A  0A07               	xorlw	7	; case 4
  8309  00225C  E0F0               	bz	i2l4182
  8310  00225E  0A01               	xorlw	1	; case 5
  8311  002260  E0E2               	bz	i2l4174
  8312  002262  0A03               	xorlw	3	; case 6
  8313  002264  E0EC               	bz	i2l4182
  8314  002266  0A01               	xorlw	1	; case 7
  8315  002268  E0DE               	bz	i2l4174
  8316  00226A  0A0F               	xorlw	15	; case 8
  8317  00226C  E0DC               	bz	i2l4174
  8318  00226E  0A01               	xorlw	1	; case 9
  8319  002270  E0E6               	bz	i2l4182
  8320  002272  0A03               	xorlw	3	; case 10
  8321  002274  E0D8               	bz	i2l4174
  8322  002276  0A01               	xorlw	1	; case 11
  8323  002278  E0E2               	bz	i2l4182
  8324  00227A  0A07               	xorlw	7	; case 12
  8325  00227C  E0D4               	bz	i2l4174
  8326  00227E  D7E2               	goto	i2l4184
  8327  002280                     i2l182:
  8328                           
  8329                           ;main.c: 188: }
  8330                           ;main.c: 190: }
  8331                           ;main.c: 191: }
  8332                           ;main.c: 192: }
  8333                           ;main.c: 195: }
  8334                           ;main.c: 199: if(RBIE && RBIF){
  8335  002280  B6F2               	btfsc	intcon,3,c	;volatile
  8336  002282  A0F2               	btfss	intcon,0,c	;volatile
  8337  002284  D056               	goto	i2l4250
  8338                           
  8339                           ;main.c: 201: PORTB_SR=(PORTB&0xF0);
  8340  002286  5081               	movf	3969,w,c	;volatile
  8341  002288  0BF0               	andlw	240
  8342  00228A  6E31               	movwf	_PORTB_SR,c
  8343                           
  8344                           ;main.c: 202: RBIF=0;
  8345  00228C  90F2               	bcf	intcon,0,c	;volatile
  8346                           
  8347                           ;main.c: 203: if(PORTB_SR != 0xF0) {
  8348  00228E  0EF0               	movlw	240
  8349  002290  1831               	xorwf	_PORTB_SR,w,c
  8350  002292  E04C               	bz	i2l4248
  8351                           
  8352                           ;main.c: 204: RBIE=0;
  8353  002294  96F2               	bcf	intcon,3,c	;volatile
  8354                           
  8355                           ;main.c: 205: (FLAGS_2 |= (1<<3));
  8356  002296  862D               	bsf	_FLAGS_2,3,c
  8357                           
  8358                           ;main.c: 206: (FLAGS_3 |= (1<<3));
  8359  002298  862E               	bsf	_FLAGS_3,3,c
  8360                           
  8361                           ;main.c: 207: LATDbits.LD0^=1;
  8362  00229A  708C               	btg	3980,0,c	;volatile
  8363                           
  8364                           ;main.c: 210: if(PORTBbits.RB7==0){coluna=1;}
  8365  00229C  BE81               	btfsc	3969,7,c	;volatile
  8366  00229E  D002               	goto	i2l207
  8367  0022A0  0E01               	movlw	1
  8368  0022A2  D00B               	goto	L15
  8369  0022A4                     i2l207:
  8370                           
  8371                           ;main.c: 212: else if(PORTBbits.RB6==0){coluna=2;}
  8372  0022A4  BC81               	btfsc	3969,6,c	;volatile
  8373  0022A6  D002               	goto	i2l209
  8374  0022A8  0E02               	movlw	2
  8375  0022AA  D007               	goto	L15
  8376  0022AC                     i2l209:
  8377                           
  8378                           ;main.c: 214: else if(PORTBbits.RB5==0){coluna=3;}
  8379  0022AC  BA81               	btfsc	3969,5,c	;volatile
  8380  0022AE  D002               	goto	i2l211
  8381  0022B0  0E03               	movlw	3
  8382  0022B2  D003               	goto	L15
  8383  0022B4                     i2l211:
  8384                           
  8385                           ;main.c: 216: else if(PORTBbits.RB4==0){coluna=4;}
  8386  0022B4  B881               	btfsc	3969,4,c	;volatile
  8387  0022B6  D003               	goto	i2l213
  8388  0022B8  0E04               	movlw	4
  8389  0022BA                     L15:
  8390  0022BA  6E2B               	movwf	aux@coluna,c
  8391  0022BC  D001               	goto	i2l4216
  8392  0022BE                     i2l213:
  8393                           
  8394                           ;main.c: 218: else{coluna=0;}
  8395  0022BE  6A2B               	clrf	aux@coluna,c
  8396  0022C0                     i2l4216:
  8397                           
  8398                           ;main.c: 221: TRISB&=0x0F;
  8399  0022C0  0E0F               	movlw	15
  8400  0022C2  1693               	andwf	3987,f,c	;volatile
  8401                           
  8402                           ;main.c: 222: LATB|=0xF0;
  8403  0022C4  0EF0               	movlw	240
  8404  0022C6  128A               	iorwf	3978,f,c	;volatile
  8405  0022C8                     i2l4218:
  8406  0022C8  CF83 F01E          	movff	3971,??_aux	;volatile
  8407  0022CC  0EF0               	movlw	240
  8408  0022CE  161E               	andwf	??_aux,f,c
  8409  0022D0  E1FB               	bnz	i2l4218
  8410                           
  8411                           ;main.c: 228: TRISD|=0xF0;
  8412  0022D2  1295               	iorwf	3989,f,c	;volatile
  8413                           
  8414                           ;main.c: 232: if(PORTDbits.RD4==1){linha=1;}
  8415  0022D4  A883               	btfss	3971,4,c	;volatile
  8416  0022D6  D002               	goto	i2l221
  8417  0022D8  0E01               	movlw	1
  8418  0022DA  D00B               	goto	L18
  8419  0022DC                     i2l221:
  8420                           
  8421                           ;main.c: 234: else if(PORTDbits.RD5==1){linha=2;}
  8422  0022DC  AA83               	btfss	3971,5,c	;volatile
  8423  0022DE  D002               	goto	i2l223
  8424  0022E0  0E02               	movlw	2
  8425  0022E2  D007               	goto	L18
  8426  0022E4                     i2l223:
  8427                           
  8428                           ;main.c: 236: else if(PORTDbits.RD6==1){linha=3;}
  8429  0022E4  AC83               	btfss	3971,6,c	;volatile
  8430  0022E6  D002               	goto	i2l225
  8431  0022E8  0E03               	movlw	3
  8432  0022EA  D003               	goto	L18
  8433  0022EC                     i2l225:
  8434                           
  8435                           ;main.c: 238: else if(PORTDbits.RD7==1){linha=4;}
  8436  0022EC  AE83               	btfss	3971,7,c	;volatile
  8437  0022EE  D003               	goto	i2l227
  8438  0022F0  0E04               	movlw	4
  8439  0022F2                     L18:
  8440  0022F2  6E2C               	movwf	aux@linha,c
  8441  0022F4  D001               	goto	i2l4232
  8442  0022F6                     i2l227:
  8443                           
  8444                           ;main.c: 240: else{linha=0;}
  8445  0022F6  6A2C               	clrf	aux@linha,c
  8446  0022F8                     i2l4232:
  8447                           
  8448                           ;main.c: 242: if(linha && coluna){
  8449  0022F8  502C               	movf	aux@linha,w,c
  8450  0022FA  E009               	bz	i2l4238
  8451  0022FC  502B               	movf	aux@coluna,w,c
  8452  0022FE  E007               	bz	i2l4238
  8453                           
  8454                           ;main.c: 244: caractere_recebido = teclado_matricial(coluna,linha);
  8455  002300  C02C  F001         	movff	aux@linha,teclado_matricial@linha
  8456  002304  502B               	movf	aux@coluna,w,c
  8457  002306  ECB3  F012         	call	_teclado_matricial
  8458  00230A  0100               	movlb	0	; () banked
  8459  00230C  6FB2               	movwf	_caractere_recebido& (0+255),b
  8460  00230E                     i2l4238:
  8461                           
  8462                           ;main.c: 246: }
  8463                           ;main.c: 250: TRISB|=0xF0;
  8464  00230E  0EF0               	movlw	240
  8465  002310  1293               	iorwf	3987,f,c	;volatile
  8466                           
  8467                           ;main.c: 251: LATD&=0x0F;
  8468  002312  0E0F               	movlw	15
  8469  002314  168C               	andwf	3980,f,c	;volatile
  8470                           
  8471                           ;main.c: 252: TRISD&=0X0F;
  8472  002316  0E0F               	movlw	15
  8473  002318  1695               	andwf	3989,f,c	;volatile
  8474  00231A                     i2l4244:
  8475  00231A  CF83 F01E          	movff	3971,??_aux	;volatile
  8476  00231E  0EF0               	movlw	240
  8477  002320  161E               	andwf	??_aux,f,c
  8478  002322  E1FB               	bnz	i2l4244
  8479  002324                     i2l4246:
  8480  002324  5081               	movf	3969,w,c	;volatile
  8481  002326  0BF0               	andlw	240
  8482  002328  0AF0               	xorlw	240
  8483  00232A  E1FC               	bnz	i2l4246
  8484  00232C                     i2l4248:
  8485                           
  8486                           ;main.c: 257: }
  8487                           ;main.c: 259: PORTB_SR=(PORTB&0xF0);}
  8488  00232C  5081               	movf	3969,w,c	;volatile
  8489  00232E  0BF0               	andlw	240
  8490  002330  6E31               	movwf	_PORTB_SR,c
  8491  002332                     i2l4250:
  8492                           
  8493                           ;main.c: 261: if(RCIE && RCIF){
  8494  002332  BA9D               	btfsc	3997,5,c	;volatile
  8495  002334  AA9E               	btfss	3998,5,c	;volatile
  8496  002336  D037               	goto	i2l250
  8497                           
  8498                           ;main.c: 262: (FLAGS_3 &= ~(1<<2));
  8499  002338  942E               	bcf	_FLAGS_3,2,c
  8500                           
  8501                           ;main.c: 264: if(OERR==1){
  8502  00233A  A2AB               	btfss	4011,1,c	;volatile
  8503  00233C  D00A               	goto	i2l237
  8504                           
  8505                           ;main.c: 265: (FLAGS_1 |= (1<<4));
  8506  00233E  0100               	movlb	0	; () banked
  8507  002340  89B1               	bsf	_FLAGS_1& (0+255),4,b
  8508  002342                     i2l4260:
  8509  002342  50AE               	movf	4014,w,c	;volatile
  8510                           
  8511                           ;main.c: 269: CREN = 0;
  8512  002344  98AB               	bcf	4011,4,c	;volatile
  8513                           
  8514                           ;main.c: 270: CREN = 1;
  8515  002346  88AB               	bsf	4011,4,c	;volatile
  8516                           
  8517                           ;main.c: 273: }while(OERR);
  8518  002348  B2AB               	btfsc	4011,1,c	;volatile
  8519  00234A  D7FB               	goto	i2l4260
  8520  00234C                     i2l4268:
  8521                           
  8522                           ;main.c: 275: (FLAGS_2 |= (1<<0));
  8523  00234C  802D               	bsf	_FLAGS_2,0,c
  8524                           
  8525                           ;main.c: 276: (FLAGS_2 &= ~(1<<1));
  8526  00234E  922D               	bcf	_FLAGS_2,1,c
  8527                           
  8528                           ;main.c: 278: }
  8529  002350  D029               	goto	i2l4296
  8530  002352                     i2l237:
  8531                           
  8532                           ;main.c: 280: else if(FERR==1){
  8533  002352  A4AB               	btfss	4011,2,c	;volatile
  8534  002354  D008               	goto	i2l4282
  8535                           
  8536                           ;main.c: 281: (FLAGS_1 |= (1<<4));
  8537  002356  0100               	movlb	0	; () banked
  8538  002358  89B1               	bsf	_FLAGS_1& (0+255),4,b
  8539  00235A                     i2l4272:
  8540  00235A  50AE               	movf	4014,w,c	;volatile
  8541                           
  8542                           ;main.c: 285: SPEN=0;
  8543  00235C  9EAB               	bcf	4011,7,c	;volatile
  8544                           
  8545                           ;main.c: 286: SPEN=1;
  8546  00235E  8EAB               	bsf	4011,7,c	;volatile
  8547                           
  8548                           ;main.c: 288: }while(FERR);
  8549  002360  A4AB               	btfss	4011,2,c	;volatile
  8550  002362  D7F4               	goto	i2l4268
  8551  002364  D7FA               	goto	i2l4272
  8552  002366                     i2l4282:
  8553                           
  8554                           ;main.c: 293: else{
  8555                           ;main.c: 294: resetar_timer1(0xC0,0);
  8556  002366  6A01               	clrf	i2resetar_timer1@valor_l,c
  8557  002368  0EC0               	movlw	192
  8558  00236A  EC50  F017         	call	i2_resetar_timer1
  8559                           
  8560                           ;main.c: 295: buffer_serial[qtd_caracteres_recebidos_serial] = RCREG;
  8561  00236E  0E00               	movlw	low _buffer_serial
  8562  002370  2435               	addwf	_qtd_caracteres_recebidos_serial,w,c
  8563  002372  6ED9               	movwf	fsr2l,c
  8564  002374  6ADA               	clrf	fsr2h,c
  8565  002376  0E01               	movlw	high _buffer_serial
  8566  002378  22DA               	addwfc	fsr2h,f,c
  8567  00237A  CFAE FFDF          	movff	4014,indf2	;volatile
  8568                           
  8569                           ;main.c: 297: TMR1ON=1;
  8570  00237E  80CD               	bsf	4045,0,c	;volatile
  8571                           
  8572                           ;main.c: 299: if(++qtd_caracteres_recebidos_serial == 80 || buffer_serial[qtd_caracteres
      +                          _recebidos_serial-1] == 'F'){
  8573  002380  2A35               	incf	_qtd_caracteres_recebidos_serial,f,c
  8574  002382  0E50               	movlw	80
  8575  002384  1835               	xorwf	_qtd_caracteres_recebidos_serial,w,c
  8576  002386  E009               	bz	i2l4292
  8577  002388  0EFF               	movlw	low (_buffer_serial+65535)
  8578  00238A  2435               	addwf	_qtd_caracteres_recebidos_serial,w,c
  8579  00238C  6ED9               	movwf	fsr2l,c
  8580  00238E  6ADA               	clrf	fsr2h,c
  8581  002390  0E00               	movlw	high (_buffer_serial+65535)
  8582  002392  22DA               	addwfc	fsr2h,f,c
  8583  002394  0E46               	movlw	70
  8584  002396  18DE               	xorwf	postinc2,w,c
  8585  002398  E105               	bnz	i2l4296
  8586  00239A                     i2l4292:
  8587                           
  8588                           ;main.c: 300: (FLAGS_2 |= (1<<1));
  8589  00239A  822D               	bsf	_FLAGS_2,1,c
  8590                           
  8591                           ;main.c: 301: resetar_timer1(0xC0,0);}
  8592  00239C  6A01               	clrf	i2resetar_timer1@valor_l,c
  8593  00239E  0EC0               	movlw	192
  8594  0023A0  EC50  F017         	call	i2_resetar_timer1
  8595  0023A4                     i2l4296:
  8596                           
  8597                           ;main.c: 302: }
  8598                           ;main.c: 304: RCIF=0;}
  8599  0023A4  9A9E               	bcf	3998,5,c	;volatile
  8600  0023A6                     i2l250:
  8601  0023A6  C028  FFF5         	movff	??_aux+10,tablat
  8602  0023AA  C027  FFF8         	movff	??_aux+9,tblptru
  8603  0023AE  C026  FFF7         	movff	??_aux+8,tblptrh
  8604  0023B2  C025  FFF6         	movff	??_aux+7,tblptrl
  8605  0023B6  C024  FFF4         	movff	??_aux+6,prodh
  8606  0023BA  C023  FFF3         	movff	??_aux+5,prodl
  8607  0023BE  C022  FFDA         	movff	??_aux+4,fsr2h
  8608  0023C2  C021  FFD9         	movff	??_aux+3,fsr2l
  8609  0023C6  C020  FFE2         	movff	??_aux+2,fsr1h
  8610  0023CA  C01F  FFE1         	movff	??_aux+1,fsr1l
  8611  0023CE  0011               	retfie		f
  8612  0023D0                     __end_of_aux:
  8613                           	opt stack 0
  8614                           tblptru	equ	0xFF8
  8615                           tblptrh	equ	0xFF7
  8616                           tblptrl	equ	0xFF6
  8617                           tablat	equ	0xFF5
  8618                           prodh	equ	0xFF4
  8619                           prodl	equ	0xFF3
  8620                           intcon	equ	0xFF2
  8621                           intcon2	equ	0xFF1
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           indf1	equ	0xFE7
  8625                           postinc1	equ	0xFE6
  8626                           postdec1	equ	0xFE5
  8627                           plusw1	equ	0xFE3
  8628                           fsr1h	equ	0xFE2
  8629                           fsr1l	equ	0xFE1
  8630                           indf2	equ	0xFDF
  8631                           postinc2	equ	0xFDE
  8632                           postdec2	equ	0xFDD
  8633                           plusw2	equ	0xFDB
  8634                           fsr2h	equ	0xFDA
  8635                           fsr2l	equ	0xFD9
  8636                           status	equ	0xFD8
  8637                           
  8638 ;; *************** function i2_resetar_timer1 *****************
  8639 ;; Defined at:
  8640 ;;		line 30 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;  valor_h         1    wreg     unsigned char 
  8643 ;;  valor_l         1    0[COMRAM] unsigned char 
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;  valor_h         1    1[COMRAM] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;		None               void
  8648 ;; Registers used:
  8649 ;;		wreg
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8655 ;;      Params:         1       0       0       0       0       0       0       0       0
  8656 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8658 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8659 ;;Total ram usage:        2 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_aux
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text33
  8669  002EA0                     __ptext33:
  8670                           	opt stack 0
  8671  002EA0                     i2_resetar_timer1:
  8672                           	opt stack 24
  8673                           
  8674                           ;incstack = 0
  8675                           ;i2resetar_timer1@valor_h stored from wreg
  8676  002EA0  6E02               	movwf	i2resetar_timer1@valor_h,c
  8677                           
  8678                           ;time.c: 31: TMR1ON=0;
  8679  002EA2  90CD               	bcf	4045,0,c	;volatile
  8680                           
  8681                           ;time.c: 32: TMR1H=valor_h;
  8682  002EA4  C002  FFCF         	movff	i2resetar_timer1@valor_h,4047	;volatile
  8683                           
  8684                           ;time.c: 33: TMR1L=valor_l;
  8685  002EA8  C001  FFCE         	movff	i2resetar_timer1@valor_l,4046	;volatile
  8686  002EAC  0012               	return		;funcret
  8687  002EAE                     __end_ofi2_resetar_timer1:
  8688                           	opt stack 0
  8689                           tblptru	equ	0xFF8
  8690                           tblptrh	equ	0xFF7
  8691                           tblptrl	equ	0xFF6
  8692                           tablat	equ	0xFF5
  8693                           prodh	equ	0xFF4
  8694                           prodl	equ	0xFF3
  8695                           intcon	equ	0xFF2
  8696                           intcon2	equ	0xFF1
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           indf1	equ	0xFE7
  8700                           postinc1	equ	0xFE6
  8701                           postdec1	equ	0xFE5
  8702                           plusw1	equ	0xFE3
  8703                           fsr1h	equ	0xFE2
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           postdec2	equ	0xFDD
  8708                           plusw2	equ	0xFDB
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function i2_printf *****************
  8714 ;; Defined at:
  8715 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  f               1    wreg     PTR const unsigned char 
  8718 ;;		 -> STR_19(33), STR_18(2), STR_14(18), STR_13(22), 
  8719 ;;		 -> STR_12(20), STR_11(15), STR_10(19), STR_9(3), 
  8720 ;;		 -> STR_8(17), STR_7(3), STR_6(4), STR_5(5), 
  8721 ;;		 -> STR_2(3), STR_1(2), 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;  f               1   16[COMRAM] PTR const unsigned char 
  8724 ;;		 -> STR_19(33), STR_18(2), STR_14(18), STR_13(22), 
  8725 ;;		 -> STR_12(20), STR_11(15), STR_10(19), STR_9(3), 
  8726 ;;		 -> STR_8(17), STR_7(3), STR_6(4), STR_5(5), 
  8727 ;;		 -> STR_2(3), STR_1(2), 
  8728 ;;  printf          4    0        struct .
  8729 ;;  printf          2   26[COMRAM] int 
  8730 ;;  printf          2   23[COMRAM] unsigned int 
  8731 ;;  printf          2   21[COMRAM] unsigned int 
  8732 ;;  printf          2   18[COMRAM] PTR const unsigned char 
  8733 ;;		 -> STR_32(7), printf@c(1), buffer_teclado_matricial(40), 
  8734 ;;  printf          1   28[COMRAM] char 
  8735 ;;  printf          1   25[COMRAM] unsigned char 
  8736 ;;  printf          1   20[COMRAM] PTR void [1]
  8737 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8738 ;;  printf          1   17[COMRAM] char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  2    0[None  ] int 
  8741 ;; Registers used:
  8742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8748 ;;      Params:         0       0       0       0       0       0       0       0       0
  8749 ;;      Locals:        13       0       0       0       0       0       0       0       0
  8750 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8751 ;;      Totals:        17       0       0       0       0       0       0       0       0
  8752 ;;Total ram usage:       17 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    4
  8755 ;; This function calls:
  8756 ;;		i2___lwdiv
  8757 ;;		i2___lwmod
  8758 ;;		i2___wmul
  8759 ;;		i2_isdigit
  8760 ;;		i2_putch
  8761 ;; This function is called by:
  8762 ;;		_aux
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           	psect	text34
  8767  001EA2                     __ptext34:
  8768                           	opt stack 0
  8769  001EA2                     i2_printf:
  8770                           	opt stack 20
  8771                           
  8772                           ;incstack = 0
  8773                           ;i2printf@f stored from wreg
  8774  001EA2  6E11               	movwf	i2printf@f,c
  8775                           
  8776                           ;doprnt.c: 466: va_list ap;
  8777                           ;doprnt.c: 499: signed char c;
  8778                           ;doprnt.c: 501: int width;
  8779                           ;doprnt.c: 506: signed char prec;
  8780                           ;doprnt.c: 508: unsigned char flag;
  8781                           ;doprnt.c: 523: union {
  8782                           ;doprnt.c: 524: unsigned long vd;
  8783                           ;doprnt.c: 525: double integ;
  8784                           ;doprnt.c: 526: } tmpval;
  8785                           ;doprnt.c: 528: unsigned int val;
  8786                           ;doprnt.c: 529: unsigned len;
  8787                           ;doprnt.c: 530: const char * cp;
  8788                           ;doprnt.c: 533: *ap = __va_start();
  8789  001EA4  0E01               	movlw	low ?i2_printf
  8790  001EA6  6E15               	movwf	i2printf@ap,c
  8791                           
  8792                           ;doprnt.c: 536: while(c = *f++) {
  8793  001EA8  D14C               	goto	i2l4106
  8794  001EAA                     i2l3982:
  8795                           
  8796                           ;doprnt.c: 538: if(c != '%')
  8797  001EAA  0E25               	movlw	37
  8798  001EAC  181D               	xorwf	i2printf@c,w,c
  8799  001EAE  E004               	bz	i2l791
  8800                           
  8801                           ;doprnt.c: 540: {
  8802                           ;doprnt.c: 541: (putch(c) );
  8803  001EB0  501D               	movf	i2printf@c,w,c
  8804  001EB2  EC62  F017         	call	i2_putch
  8805                           
  8806                           ;doprnt.c: 542: continue;
  8807  001EB6  D145               	goto	i2l4106
  8808  001EB8                     i2l791:
  8809                           
  8810                           ;doprnt.c: 543: }
  8811                           ;doprnt.c: 546: width = 0;
  8812  001EB8  6A1B               	clrf	i2printf@width,c
  8813  001EBA  6A1C               	clrf	i2printf@width+1,c
  8814                           
  8815                           ;doprnt.c: 548: flag = 0;
  8816  001EBC  6A1A               	clrf	i2printf@flag,c
  8817  001EBE  D002               	goto	i2l3990
  8818  001EC0                     i2l3986:
  8819                           
  8820                           ;doprnt.c: 580: flag |= 0x04;
  8821  001EC0  841A               	bsf	i2printf@flag,2,c
  8822                           
  8823                           ;doprnt.c: 581: f++;
  8824  001EC2  2A11               	incf	i2printf@f,f,c
  8825  001EC4                     i2l3990:
  8826  001EC4  C011  FFF6         	movff	i2printf@f,tblptrl
  8827  001EC8  D940               	call	PL12	;call to abstracted procedure
  8828                           
  8829                           ; Switch size 1, requested type "space"
  8830                           ; Number of cases is 1, Range of values is 48 to 48
  8831                           ; switch strategies available:
  8832                           ; Name         Instructions Cycles
  8833                           ; simple_byte            4     3 (average)
  8834                           ;	Chosen strategy is simple_byte
  8835  001ECA  0A30               	xorlw	48	; case 48
  8836  001ECC  E0F9               	bz	i2l3986
  8837                           
  8838                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8839  001ECE  C011  FFF6         	movff	i2printf@f,tblptrl
  8840  001ED2  D93B               	call	PL12	;call to abstracted procedure
  8841  001ED4  EC11  F017         	call	i2_isdigit
  8842  001ED8  E201 D099          	bnc	i2l4042
  8843                           
  8844                           ;doprnt.c: 598: width = 0;
  8845  001EDC  6A1B               	clrf	i2printf@width,c
  8846  001EDE  6A1C               	clrf	i2printf@width+1,c
  8847  001EE0                     i2l3996:
  8848                           
  8849                           ;doprnt.c: 600: width *= 10;
  8850  001EE0  C01B  F001         	movff	i2printf@width,i2___wmul@multiplier
  8851  001EE4  C01C  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8852  001EE8  6A04               	clrf	i2___wmul@multiplicand+1,c
  8853  001EEA  0E0A               	movlw	10
  8854  001EEC  6E03               	movwf	i2___wmul@multiplicand,c
  8855  001EEE  EC9A  F016         	call	i2___wmul	;wreg free
  8856  001EF2  C001  F01B         	movff	?i2___wmul,i2printf@width
  8857  001EF6  C002  F01C         	movff	?i2___wmul+1,i2printf@width+1
  8858                           
  8859                           ;doprnt.c: 601: width += *f++ - '0';
  8860  001EFA  0ED0               	movlw	208
  8861  001EFC  6E0D               	movwf	??i2_printf& (0+255),c
  8862  001EFE  680E               	setf	(??i2_printf+1)& (0+255),c
  8863  001F00  C011  FFF6         	movff	i2printf@f,tblptrl
  8864  001F04  D922               	call	PL12	;call to abstracted procedure
  8865  001F06  6E0F               	movwf	(??i2_printf+2)& (0+255),c
  8866  001F08  6A10               	clrf	(??i2_printf+3)& (0+255),c
  8867  001F0A  500D               	movf	??i2_printf,w,c
  8868  001F0C  260F               	addwf	??i2_printf+2,f,c
  8869  001F0E  500E               	movf	??i2_printf+1,w,c
  8870  001F10  2210               	addwfc	??i2_printf+3,f,c
  8871  001F12  500F               	movf	??i2_printf+2,w,c
  8872  001F14  261B               	addwf	i2printf@width,f,c
  8873  001F16  5010               	movf	??i2_printf+3,w,c
  8874  001F18  221C               	addwfc	i2printf@width+1,f,c
  8875  001F1A  2A11               	incf	i2printf@f,f,c
  8876                           
  8877                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8878  001F1C  C011  FFF6         	movff	i2printf@f,tblptrl
  8879  001F20  D914               	call	PL12	;call to abstracted procedure
  8880  001F22  EC11  F017         	call	i2_isdigit
  8881  001F26  E373               	bnc	i2l4042
  8882  001F28  D7DB               	goto	i2l3996
  8883  001F2A                     i2l4004:
  8884                           
  8885                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8886  001F2A  5015               	movf	i2printf@ap,w,c
  8887  001F2C  6ED9               	movwf	fsr2l,c
  8888  001F2E  6ADA               	clrf	fsr2h,c
  8889  001F30  50DF               	movf	indf2,w,c
  8890  001F32  6E0D               	movwf	??i2_printf& (0+255),c
  8891  001F34  C00D  F013         	movff	??i2_printf,i2printf@cp
  8892  001F38  6A14               	clrf	i2printf@cp+1,c
  8893  001F3A  2A15               	incf	i2printf@ap,f,c
  8894                           
  8895                           ;doprnt.c: 740: if(!cp)
  8896  001F3C  5013               	movf	i2printf@cp,w,c
  8897  001F3E  1014               	iorwf	i2printf@cp+1,w,c
  8898  001F40  E106               	bnz	i2l4012
  8899                           
  8900                           ;doprnt.c: 741: cp = "(null)";
  8901  001F42  0E9B               	movlw	low STR_32
  8902  001F44  6E13               	movwf	i2printf@cp,c
  8903  001F46  5013               	movf	i2printf@cp,w,c
  8904  001F48  A4D8               	btfss	status,2,c
  8905  001F4A  0E11               	movlw	high __smallconst
  8906  001F4C  6E14               	movwf	i2printf@cp+1,c
  8907  001F4E                     i2l4012:
  8908                           
  8909                           ;doprnt.c: 745: len = 0;
  8910  001F4E  6A18               	clrf	i2printf@len,c
  8911  001F50  6A19               	clrf	i2printf@len+1,c
  8912                           
  8913                           ;doprnt.c: 746: while(cp[len])
  8914  001F52  D002               	goto	i2l4016
  8915  001F54                     i2l4014:
  8916                           
  8917                           ;doprnt.c: 747: len++;
  8918  001F54  4A18               	infsnz	i2printf@len,f,c
  8919  001F56  2A19               	incf	i2printf@len+1,f,c
  8920  001F58                     i2l4016:
  8921  001F58  5018               	movf	i2printf@len,w,c
  8922  001F5A  2413               	addwf	i2printf@cp,w,c
  8923  001F5C  6E0D               	movwf	??i2_printf& (0+255),c
  8924  001F5E  5019               	movf	i2printf@len+1,w,c
  8925  001F60  2014               	addwfc	i2printf@cp+1,w,c
  8926  001F62  6E0E               	movwf	(??i2_printf+1)& (0+255),c
  8927  001F64  C00D  FFF6         	movff	??i2_printf,tblptrl
  8928  001F68  C00E  FFF7         	movff	??i2_printf+1,tblptrh
  8929  001F6C  6AF8               	clrf	tblptru,c
  8930  001F6E  0E07               	movlw	(high __ramtop+-1)
  8931  001F70  64F7               	cpfsgt	tblptrh,c
  8932  001F72  D003               	bra	i2u367_47
  8933  001F74  0008               	tblrd		*
  8934  001F76  50F5               	movf	tablat,w,c
  8935  001F78  D005               	bra	i2u367_40
  8936  001F7A                     i2u367_47:
  8937  001F7A  CFF6 FFE1          	movff	tblptrl,fsr1l
  8938  001F7E  CFF7 FFE2          	movff	tblptrh,fsr1h
  8939  001F82  50E7               	movf	indf1,w,c
  8940  001F84                     i2u367_40:
  8941  001F84  0900               	iorlw	0
  8942  001F86  E1E6               	bnz	i2l4014
  8943  001F88                     i2l4018:
  8944                           
  8945                           ;doprnt.c: 757: if(width > len)
  8946  001F88  501B               	movf	i2printf@width,w,c
  8947  001F8A  5C18               	subwf	i2printf@len,w,c
  8948  001F8C  501C               	movf	i2printf@width+1,w,c
  8949  001F8E  5819               	subwfb	i2printf@len+1,w,c
  8950  001F90  E205               	bc	i2l813
  8951                           
  8952                           ;doprnt.c: 758: width -= len;
  8953  001F92  5018               	movf	i2printf@len,w,c
  8954  001F94  5E1B               	subwf	i2printf@width,f,c
  8955  001F96  5019               	movf	i2printf@len+1,w,c
  8956  001F98  5A1C               	subwfb	i2printf@width+1,f,c
  8957  001F9A  D006               	goto	i2l4024
  8958  001F9C                     i2l813:
  8959                           
  8960                           ;doprnt.c: 759: else
  8961                           ;doprnt.c: 760: width = 0;
  8962  001F9C  6A1B               	clrf	i2printf@width,c
  8963  001F9E  6A1C               	clrf	i2printf@width+1,c
  8964  001FA0  D003               	goto	i2l4024
  8965  001FA2                     i2l4022:
  8966                           
  8967                           ;doprnt.c: 765: (putch(' ') );
  8968  001FA2  0E20               	movlw	32
  8969  001FA4  EC62  F017         	call	i2_putch
  8970  001FA8                     i2l4024:
  8971  001FA8  061B               	decf	i2printf@width,f,c
  8972  001FAA  A0D8               	btfss	status,0,c
  8973  001FAC  061C               	decf	i2printf@width+1,f,c
  8974  001FAE  281B               	incf	i2printf@width,w,c
  8975  001FB0  E1F8               	bnz	i2l4022
  8976  001FB2  281C               	incf	i2printf@width+1,w,c
  8977  001FB4  E015               	bz	i2l4030
  8978  001FB6  D7F5               	goto	i2l4022
  8979  001FB8                     i2l4026:
  8980                           
  8981                           ;doprnt.c: 768: (putch(*cp++) );
  8982  001FB8  C013  FFF6         	movff	i2printf@cp,tblptrl
  8983  001FBC  C014  FFF7         	movff	i2printf@cp+1,tblptrh
  8984  001FC0  6AF8               	clrf	tblptru,c
  8985  001FC2  0E07               	movlw	(high __ramtop+-1)
  8986  001FC4  64F7               	cpfsgt	tblptrh,c
  8987  001FC6  D003               	bra	i2u371_47
  8988  001FC8  0008               	tblrd		*
  8989  001FCA  50F5               	movf	tablat,w,c
  8990  001FCC  D005               	bra	i2u371_40
  8991  001FCE                     i2u371_47:
  8992  001FCE  CFF6 FFE1          	movff	tblptrl,fsr1l
  8993  001FD2  CFF7 FFE2          	movff	tblptrh,fsr1h
  8994  001FD6  50E7               	movf	indf1,w,c
  8995  001FD8                     i2u371_40:
  8996  001FD8  EC62  F017         	call	i2_putch
  8997  001FDC  4A13               	infsnz	i2printf@cp,f,c
  8998  001FDE  2A14               	incf	i2printf@cp+1,f,c
  8999  001FE0                     i2l4030:
  9000  001FE0  0618               	decf	i2printf@len,f,c
  9001  001FE2  A0D8               	btfss	status,0,c
  9002  001FE4  0619               	decf	i2printf@len+1,f,c
  9003  001FE6  2818               	incf	i2printf@len,w,c
  9004  001FE8  E1E7               	bnz	i2l4026
  9005  001FEA  2819               	incf	i2printf@len+1,w,c
  9006  001FEC  E101 D0A9          	bz	i2l4106
  9007  001FF0  D7E3               	goto	i2l4026
  9008  001FF2                     i2l4032:
  9009                           
  9010                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  9011  001FF2  5015               	movf	i2printf@ap,w,c
  9012  001FF4  6ED9               	movwf	fsr2l,c
  9013  001FF6  6ADA               	clrf	fsr2h,c
  9014  001FF8  50DF               	movf	indf2,w,c
  9015  001FFA  6E1D               	movwf	i2printf@c,c
  9016  001FFC  0E02               	movlw	2
  9017  001FFE  2615               	addwf	i2printf@ap,f,c
  9018  002000                     i2l4036:
  9019                           
  9020                           ;doprnt.c: 805: cp = (char *)&c;
  9021  002000  0E1D               	movlw	low i2printf@c
  9022  002002  6E13               	movwf	i2printf@cp,c
  9023  002004  6A14               	clrf	i2printf@cp+1,c
  9024                           
  9025                           ;doprnt.c: 806: len = 1;
  9026  002006  6A19               	clrf	i2printf@len+1,c
  9027  002008  0E01               	movlw	1
  9028  00200A  6E18               	movwf	i2printf@len,c
  9029                           
  9030                           ;doprnt.c: 807: goto dostring;
  9031  00200C  D7BD               	goto	i2l4018
  9032  00200E                     i2l4042:
  9033  00200E  D8A2               	call	PL14	;call to abstracted procedure
  9034                           
  9035                           ; Switch size 1, requested type "space"
  9036                           ; Number of cases is 5, Range of values is 0 to 115
  9037                           ; switch strategies available:
  9038                           ; Name         Instructions Cycles
  9039                           ; simple_byte           16     9 (average)
  9040                           ;	Chosen strategy is simple_byte
  9041  002010  E101 D09A          	bz	i2l844
  9042  002014  0A63               	xorlw	99	; case 99
  9043  002016  E0ED               	bz	i2l4032
  9044  002018  0A07               	xorlw	7	; case 100
  9045  00201A  E005               	bz	i2l4044
  9046  00201C  0A0D               	xorlw	13	; case 105
  9047  00201E  E003               	bz	i2l4044
  9048  002020  0A1A               	xorlw	26	; case 115
  9049  002022  E083               	bz	i2l4004
  9050  002024  D7ED               	goto	i2l4036
  9051  002026                     i2l4044:
  9052                           
  9053                           ;doprnt.c: 1253: {
  9054                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9055  002026  5015               	movf	i2printf@ap,w,c
  9056  002028  6ED9               	movwf	fsr2l,c
  9057  00202A  6ADA               	clrf	fsr2h,c
  9058  00202C  CFDE F016          	movff	postinc2,i2printf@val
  9059  002030  CFDD F017          	movff	postdec2,i2printf@val+1
  9060  002034  0E02               	movlw	2
  9061  002036  2615               	addwf	i2printf@ap,f,c
  9062                           
  9063                           ;doprnt.c: 1261: if((int)val < 0) {
  9064  002038  AE17               	btfss	i2printf@val+1,7,c
  9065  00203A  D006               	goto	i2l4054
  9066                           
  9067                           ;doprnt.c: 1262: flag |= 0x03;
  9068  00203C  0E03               	movlw	3
  9069  00203E  121A               	iorwf	i2printf@flag,f,c
  9070                           
  9071                           ;doprnt.c: 1263: val = -val;
  9072  002040  6C16               	negf	i2printf@val,c
  9073  002042  1E17               	comf	i2printf@val+1,f,c
  9074  002044  B0D8               	btfsc	status,0,c
  9075  002046  2A17               	incf	i2printf@val+1,f,c
  9076  002048                     i2l4054:
  9077                           
  9078                           ;doprnt.c: 1264: }
  9079                           ;doprnt.c: 1266: }
  9080                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9081  002048  0E01               	movlw	1
  9082  00204A  6E1D               	movwf	i2printf@c,c
  9083  00204C                     i2l4056:
  9084  00204C  0E05               	movlw	5
  9085  00204E  181D               	xorwf	i2printf@c,w,c
  9086  002050  E00D               	bz	i2l4068
  9087                           
  9088                           ;doprnt.c: 1306: if(val < dpowers[c])
  9089  002052  501D               	movf	i2printf@c,w,c
  9090  002054  0D02               	mullw	2
  9091  002056  50F3               	movf	prodl,w,c
  9092  002058  0F01               	addlw	low _dpowers
  9093  00205A  D888               	call	PL22	;call to abstracted procedure
  9094  00205C  50F5               	movf	tablat,w,c
  9095  00205E  5C16               	subwf	i2printf@val,w,c
  9096  002060  0009               	tblrd		*+
  9097  002062  50F5               	movf	tablat,w,c
  9098  002064  5817               	subwfb	i2printf@val+1,w,c
  9099  002066  E302               	bnc	i2l4068
  9100  002068  2A1D               	incf	i2printf@c,f,c
  9101  00206A  D7F0               	goto	i2l4056
  9102  00206C                     i2l4068:
  9103                           
  9104                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9105  00206C  501B               	movf	i2printf@width,w,c
  9106  00206E  101C               	iorwf	i2printf@width+1,w,c
  9107  002070  E008               	bz	i2l4074
  9108  002072  C01A  F00D         	movff	i2printf@flag,??i2_printf
  9109  002076  0E03               	movlw	3
  9110  002078  160D               	andwf	??i2_printf,f,c
  9111  00207A  E003               	bz	i2l4074
  9112                           
  9113                           ;doprnt.c: 1346: width--;
  9114  00207C  061B               	decf	i2printf@width,f,c
  9115  00207E  A0D8               	btfss	status,0,c
  9116  002080  061C               	decf	i2printf@width+1,f,c
  9117  002082                     i2l4074:
  9118                           
  9119                           ;doprnt.c: 1381: if(width > c)
  9120  002082  0E80               	movlw	128
  9121  002084  BE1D               	btfsc	i2printf@c,7,c
  9122  002086  0E7F               	movlw	127
  9123  002088  6E0D               	movwf	??i2_printf& (0+255),c
  9124  00208A  501B               	movf	i2printf@width,w,c
  9125  00208C  5C1D               	subwf	i2printf@c,w,c
  9126  00208E  501C               	movf	i2printf@width+1,w,c
  9127  002090  0A80               	xorlw	128
  9128  002092  580D               	subwfb	??i2_printf& (0+255),w,c
  9129  002094  E207               	bc	i2l828
  9130                           
  9131                           ;doprnt.c: 1382: width -= c;
  9132  002096  501D               	movf	i2printf@c,w,c
  9133  002098  5E1B               	subwf	i2printf@width,f,c
  9134  00209A  0E00               	movlw	0
  9135  00209C  BE1D               	btfsc	i2printf@c,7,c
  9136  00209E  0EFF               	movlw	255
  9137  0020A0  5A1C               	subwfb	i2printf@width+1,f,c
  9138  0020A2  D002               	goto	i2l829
  9139  0020A4                     i2l828:
  9140                           
  9141                           ;doprnt.c: 1383: else
  9142                           ;doprnt.c: 1384: width = 0;
  9143  0020A4  6A1B               	clrf	i2printf@width,c
  9144  0020A6  6A1C               	clrf	i2printf@width+1,c
  9145  0020A8                     i2l829:
  9146                           
  9147                           ;doprnt.c: 1387: if(flag & 0x04) {
  9148  0020A8  A41A               	btfss	i2printf@flag,2,c
  9149  0020AA  D012               	goto	i2l4088
  9150                           
  9151                           ;doprnt.c: 1392: if(flag & 0x03)
  9152  0020AC  C01A  F00D         	movff	i2printf@flag,??i2_printf
  9153  0020B0  0E03               	movlw	3
  9154  0020B2  160D               	andwf	??i2_printf,f,c
  9155  0020B4  E003               	bz	i2l4082
  9156                           
  9157                           ;doprnt.c: 1393: (putch('-') );
  9158  0020B6  0E2D               	movlw	45
  9159  0020B8  EC62  F017         	call	i2_putch
  9160  0020BC                     i2l4082:
  9161                           
  9162                           ;doprnt.c: 1415: if(width)
  9163  0020BC  501B               	movf	i2printf@width,w,c
  9164  0020BE  101C               	iorwf	i2printf@width+1,w,c
  9165  0020C0  E01B               	bz	i2l4098
  9166                           
  9167                           ;doprnt.c: 1417: (putch('0') );
  9168  0020C2  0E30               	movlw	48
  9169  0020C4  EC62  F017         	call	i2_putch
  9170                           
  9171                           ;doprnt.c: 1418: while(--width);
  9172  0020C8  061B               	decf	i2printf@width,f,c
  9173  0020CA  A0D8               	btfss	status,0,c
  9174  0020CC  061C               	decf	i2printf@width+1,f,c
  9175  0020CE  D7F6               	goto	i2l4082
  9176  0020D0                     i2l4088:
  9177                           
  9178                           ;doprnt.c: 1422: {
  9179                           ;doprnt.c: 1424: if(width
  9180                           ;doprnt.c: 1428: )
  9181  0020D0  501B               	movf	i2printf@width,w,c
  9182  0020D2  101C               	iorwf	i2printf@width+1,w,c
  9183  0020D4  E009               	bz	i2l4094
  9184  0020D6                     i2l4090:
  9185                           
  9186                           ;doprnt.c: 1430: (putch(' ') );
  9187  0020D6  0E20               	movlw	32
  9188  0020D8  EC62  F017         	call	i2_putch
  9189                           
  9190                           ;doprnt.c: 1431: while(--width);
  9191  0020DC  061B               	decf	i2printf@width,f,c
  9192  0020DE  A0D8               	btfss	status,0,c
  9193  0020E0  061C               	decf	i2printf@width+1,f,c
  9194  0020E2  501B               	movf	i2printf@width,w,c
  9195  0020E4  101C               	iorwf	i2printf@width+1,w,c
  9196  0020E6  E1F7               	bnz	i2l4090
  9197  0020E8                     i2l4094:
  9198                           
  9199                           ;doprnt.c: 1438: if(flag & 0x03)
  9200  0020E8  C01A  F00D         	movff	i2printf@flag,??i2_printf
  9201  0020EC  0E03               	movlw	3
  9202  0020EE  160D               	andwf	??i2_printf,f,c
  9203  0020F0  E003               	bz	i2l4098
  9204                           
  9205                           ;doprnt.c: 1439: (putch('-') );
  9206  0020F2  0E2D               	movlw	45
  9207  0020F4  EC62  F017         	call	i2_putch
  9208  0020F8                     i2l4098:
  9209                           
  9210                           ;doprnt.c: 1469: }
  9211                           ;doprnt.c: 1472: prec = c;
  9212  0020F8  C01D  F012         	movff	i2printf@c,i2printf@prec
  9213                           
  9214                           ;doprnt.c: 1474: while(prec--) {
  9215  0020FC  D01F               	goto	i2l4104
  9216  0020FE                     i2l4100:
  9217                           
  9218                           ;doprnt.c: 1478: {
  9219                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9220  0020FE  5012               	movf	i2printf@prec,w,c
  9221  002100  0D02               	mullw	2
  9222  002102  50F3               	movf	prodl,w,c
  9223  002104  0F01               	addlw	low _dpowers
  9224  002106  D832               	call	PL22	;call to abstracted procedure
  9225  002108  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9226  00210C  000A               	tblrd		*-
  9227  00210E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9228  002112  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9229  002116  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9230  00211A  ECB0  F015         	call	i2___lwdiv	;wreg free
  9231  00211E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9232  002122  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9233  002126  6A0B               	clrf	i2___lwmod@divisor+1,c
  9234  002128  0E0A               	movlw	10
  9235  00212A  6E0A               	movwf	i2___lwmod@divisor,c
  9236  00212C  ECF4  F015         	call	i2___lwmod	;wreg free
  9237  002130  5008               	movf	?i2___lwmod,w,c
  9238  002132  0F30               	addlw	48
  9239  002134  6E1D               	movwf	i2printf@c,c
  9240                           
  9241                           ;doprnt.c: 1523: }
  9242                           ;doprnt.c: 1524: (putch(c) );
  9243  002136  501D               	movf	i2printf@c,w,c
  9244  002138  EC62  F017         	call	i2_putch
  9245  00213C                     i2l4104:
  9246  00213C  0612               	decf	i2printf@prec,f,c
  9247  00213E  2812               	incf	i2printf@prec,w,c
  9248  002140  E1DE               	bnz	i2l4100
  9249  002142                     i2l4106:
  9250  002142  D808               	call	PL14	;call to abstracted procedure
  9251  002144  E001 D6B1          	bnz	i2l3982
  9252  002148                     i2l844:
  9253  002148  0012               	return		;funcret
  9254  00214A                     __end_ofi2_printf:
  9255                           	opt stack 0
  9256  00214A                     PL12:
  9257                           	opt stack 20
  9258  00214A                     	if	1	;There is more than 1 active tblptr byte
  9259  00214A  0E11               	movlw	high __smallconst
  9260  00214C  6EF7               	movwf	tblptrh,c
  9261  00214E                     	endif
  9262  00214E                     	if	0	;tblptru may be non-zero
  9263  00214E                     	endif
  9264  00214E                     	if	0	;tblptru may be non-zero
  9265  00214E                     	endif
  9266  00214E  0008               	tblrd		*
  9267  002150  50F5               	movf	tablat,w,c
  9268  002152  0012               	return	
  9269  002154                     __end_ofPL12:
  9270                           	opt stack 0
  9271  002154                     PL14:
  9272                           	opt stack 20
  9273  002154  2A11               	incf	i2printf@f,f,c
  9274  002156  0411               	decf	i2printf@f,w,c
  9275  002158  6E0D               	movwf	??i2_printf& (0+255),c
  9276  00215A  C00D  FFF6         	movff	??i2_printf,tblptrl
  9277  00215E                     	if	1	;There is more than 1 active tblptr byte
  9278  00215E  0E11               	movlw	high __smallconst
  9279  002160  6EF7               	movwf	tblptrh,c
  9280  002162                     	endif
  9281  002162                     	if	0	;tblptru may be non-zero
  9282  002162                     	endif
  9283  002162                     	if	0	;tblptru may be non-zero
  9284  002162                     	endif
  9285  002162  0008               	tblrd		*
  9286  002164  CFF5 F01D          	movff	tablat,i2printf@c
  9287  002168  501D               	movf	i2printf@c,w,c
  9288  00216A  0012               	return	
  9289  00216C                     __end_ofPL14:
  9290                           	opt stack 0
  9291  00216C                     PL22:
  9292                           	opt stack 20
  9293  00216C  6E0D               	movwf	??i2_printf& (0+255),c
  9294  00216E  C00D  FFF6         	movff	??i2_printf,tblptrl
  9295  002172                     	if	1	;There is more than 1 active tblptr byte
  9296  002172  0E11               	movlw	high __smallconst
  9297  002174  6EF7               	movwf	tblptrh,c
  9298  002176                     	endif
  9299  002176                     	if	0	;tblptru may be non-zero
  9300  002176                     	endif
  9301  002176                     	if	0	;tblptru may be non-zero
  9302  002176                     	endif
  9303  002176  0009               	tblrd		*+
  9304  002178  0012               	return	
  9305  00217A                     __end_ofPL22:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon2	equ	0xFF1
  9315                           postinc0	equ	0xFEE
  9316                           wreg	equ	0xFE8
  9317                           indf1	equ	0xFE7
  9318                           postinc1	equ	0xFE6
  9319                           postdec1	equ	0xFE5
  9320                           plusw1	equ	0xFE3
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           plusw2	equ	0xFDB
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function i2_putch *****************
  9332 ;; Defined at:
  9333 ;;		line 244 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  c               1    wreg     unsigned char 
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;  c               1    5[COMRAM] unsigned char 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;		None               void
  9340 ;; Registers used:
  9341 ;;		wreg, status,2, status,0, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0
  9348 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9350 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9351 ;;Total ram usage:        1 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    3
  9354 ;; This function calls:
  9355 ;;		i2_lcd_putc
  9356 ;; This function is called by:
  9357 ;;		i2_printf
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text35
  9362  002EC4                     __ptext35:
  9363                           	opt stack 0
  9364  002EC4                     i2_putch:
  9365                           	opt stack 20
  9366                           
  9367                           ;incstack = 0
  9368                           ;i2putch@c stored from wreg
  9369  002EC4  6E06               	movwf	i2putch@c,c
  9370                           
  9371                           ;LCD_ModSauer.c: 246: lcd_putc(c);
  9372  002EC6  5006               	movf	i2putch@c,w,c
  9373  002EC8  EFE2  F014         	goto	i2_lcd_putc
  9374  002ECC                     __end_ofi2_putch:
  9375                           	opt stack 0
  9376                           tblptru	equ	0xFF8
  9377                           tblptrh	equ	0xFF7
  9378                           tblptrl	equ	0xFF6
  9379                           tablat	equ	0xFF5
  9380                           prodh	equ	0xFF4
  9381                           prodl	equ	0xFF3
  9382                           intcon	equ	0xFF2
  9383                           intcon2	equ	0xFF1
  9384                           postinc0	equ	0xFEE
  9385                           wreg	equ	0xFE8
  9386                           indf1	equ	0xFE7
  9387                           postinc1	equ	0xFE6
  9388                           postdec1	equ	0xFE5
  9389                           plusw1	equ	0xFE3
  9390                           fsr1h	equ	0xFE2
  9391                           fsr1l	equ	0xFE1
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           plusw2	equ	0xFDB
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function i2_lcd_putc *****************
  9401 ;; Defined at:
  9402 ;;		line 151 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;  c               1    wreg     unsigned char 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  c               1    4[COMRAM] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;		None               void
  9409 ;; Registers used:
  9410 ;;		wreg, status,2, status,0, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0
  9417 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9419 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9420 ;;Total ram usage:        1 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    2
  9423 ;; This function calls:
  9424 ;;		i2_lcd_clear
  9425 ;;		i2_lcd_gotoxy
  9426 ;;		i2_lcd_write
  9427 ;; This function is called by:
  9428 ;;		i2_putch
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           	psect	text36
  9433  0029C4                     __ptext36:
  9434                           	opt stack 0
  9435  0029C4                     i2_lcd_putc:
  9436                           	opt stack 20
  9437                           
  9438                           ;incstack = 0
  9439                           ;i2lcd_putc@c stored from wreg
  9440  0029C4  6E05               	movwf	i2lcd_putc@c,c
  9441                           
  9442                           ;LCD_ModSauer.c: 153: switch (c) {
  9443  0029C6  D029               	goto	i2l3338
  9444  0029C8                     i2l3310:
  9445                           
  9446                           ;LCD_ModSauer.c: 157: lcd_clear();
  9447  0029C8  EC2C  F017         	call	i2_lcd_clear	;wreg free
  9448                           
  9449                           ;LCD_ModSauer.c: 158: break;
  9450  0029CC  D02E               	goto	i2l755
  9451  0029CE                     i2l3312:
  9452                           
  9453                           ;LCD_ModSauer.c: 164: case 1:
  9454                           ;LCD_ModSauer.c: 165: if(++linha_lcd>4) linha_lcd=1;
  9455  0029CE  2A33               	incf	_linha_lcd,f,c
  9456  0029D0  0E04               	movlw	4
  9457  0029D2  6433               	cpfsgt	_linha_lcd,c
  9458  0029D4  D00E               	goto	i2l3324
  9459  0029D6  0E01               	movlw	1
  9460  0029D8  6E33               	movwf	_linha_lcd,c
  9461  0029DA  D00B               	goto	i2l3324
  9462  0029DC                     i2l3316:
  9463                           
  9464                           ;LCD_ModSauer.c: 169: case 0:
  9465                           ;LCD_ModSauer.c: 170: if(++linha_lcd>2) linha_lcd=1;
  9466  0029DC  2A33               	incf	_linha_lcd,f,c
  9467  0029DE  0E02               	movlw	2
  9468  0029E0  D7F8               	goto	L19
  9469  0029E2                     i2l3322:
  9470  0029E2  5032               	movf	_lcd_type,w,c
  9471                           
  9472                           ; Switch size 1, requested type "space"
  9473                           ; Number of cases is 4, Range of values is 0 to 3
  9474                           ; switch strategies available:
  9475                           ; Name         Instructions Cycles
  9476                           ; simple_byte           13     7 (average)
  9477                           ;	Chosen strategy is simple_byte
  9478  0029E4  E0FB               	bz	i2l3316
  9479  0029E6  0A01               	xorlw	1	; case 1
  9480  0029E8  E0F2               	bz	i2l3312
  9481  0029EA  0A03               	xorlw	3	; case 2
  9482  0029EC  E0F7               	bz	i2l3316
  9483  0029EE  0A01               	xorlw	1	; case 3
  9484  0029F0  E0EE               	bz	i2l3312
  9485  0029F2                     i2l3324:
  9486                           
  9487                           ;LCD_ModSauer.c: 174: lcd_gotoxy(linha_lcd,1);
  9488  0029F2  0E01               	movlw	1
  9489  0029F4  6E02               	movwf	i2lcd_gotoxy@coluna,c
  9490  0029F6  5033               	movf	_linha_lcd,w,c
  9491  0029F8  EC8B  F015         	call	i2_lcd_gotoxy
  9492                           
  9493                           ;LCD_ModSauer.c: 175: break;
  9494  0029FC  D016               	goto	i2l755
  9495  0029FE                     i2l3326:
  9496                           
  9497                           ;LCD_ModSauer.c: 177: linha_lcd=1;
  9498  0029FE  0E01               	movlw	1
  9499  002A00  6E33               	movwf	_linha_lcd,c
  9500                           
  9501                           ;LCD_ModSauer.c: 178: LATEbits.LE0 = 0;
  9502  002A02  908D               	bcf	3981,0,c	;volatile
  9503                           
  9504                           ;LCD_ModSauer.c: 179: lcd_write(0x80);
  9505  002A04  0E80               	movlw	128
  9506  002A06  EC47  F016         	call	i2_lcd_write
  9507                           
  9508                           ;LCD_ModSauer.c: 180: break;
  9509  002A0A  D00F               	goto	i2l755
  9510  002A0C                     i2l754:
  9511                           
  9512                           ;LCD_ModSauer.c: 183: coluna_lcd++;
  9513  002A0C  808D               	bsf	3981,0,c	;volatile
  9514                           
  9515                           ;LCD_ModSauer.c: 184: linha_lcd=1;
  9516  002A0E  0E01               	movlw	1
  9517  002A10  6E33               	movwf	_linha_lcd,c
  9518                           
  9519                           ;LCD_ModSauer.c: 185: lcd_write( c );
  9520  002A12  5005               	movf	i2lcd_putc@c,w,c
  9521  002A14  EC47  F016         	call	i2_lcd_write
  9522                           
  9523                           ;LCD_ModSauer.c: 188: break;
  9524  002A18  D008               	goto	i2l755
  9525  002A1A                     i2l3338:
  9526  002A1A  5005               	movf	i2lcd_putc@c,w,c
  9527                           
  9528                           ; Switch size 1, requested type "space"
  9529                           ; Number of cases is 3, Range of values is 10 to 13
  9530                           ; switch strategies available:
  9531                           ; Name         Instructions Cycles
  9532                           ; simple_byte           10     6 (average)
  9533                           ;	Chosen strategy is simple_byte
  9534  002A1C  0A0A               	xorlw	10	; case 10
  9535  002A1E  E0E1               	bz	i2l3322
  9536  002A20  0A06               	xorlw	6	; case 12
  9537  002A22  E0D2               	bz	i2l3310
  9538  002A24  0A01               	xorlw	1	; case 13
  9539  002A26  E0EB               	bz	i2l3326
  9540  002A28  D7F1               	goto	i2l754
  9541  002A2A                     i2l755:
  9542  002A2A  0012               	return		;funcret
  9543  002A2C                     __end_ofi2_lcd_putc:
  9544                           	opt stack 0
  9545                           tblptru	equ	0xFF8
  9546                           tblptrh	equ	0xFF7
  9547                           tblptrl	equ	0xFF6
  9548                           tablat	equ	0xFF5
  9549                           prodh	equ	0xFF4
  9550                           prodl	equ	0xFF3
  9551                           intcon	equ	0xFF2
  9552                           intcon2	equ	0xFF1
  9553                           postinc0	equ	0xFEE
  9554                           wreg	equ	0xFE8
  9555                           indf1	equ	0xFE7
  9556                           postinc1	equ	0xFE6
  9557                           postdec1	equ	0xFE5
  9558                           plusw1	equ	0xFE3
  9559                           fsr1h	equ	0xFE2
  9560                           fsr1l	equ	0xFE1
  9561                           indf2	equ	0xFDF
  9562                           postinc2	equ	0xFDE
  9563                           postdec2	equ	0xFDD
  9564                           plusw2	equ	0xFDB
  9565                           fsr2h	equ	0xFDA
  9566                           fsr2l	equ	0xFD9
  9567                           status	equ	0xFD8
  9568                           
  9569 ;; *************** function i2_lcd_gotoxy *****************
  9570 ;; Defined at:
  9571 ;;		line 218 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  linha           1    wreg     unsigned char 
  9574 ;;  coluna          1    1[COMRAM] unsigned char 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  linha           1    3[COMRAM] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9586 ;;      Params:         1       0       0       0       0       0       0       0       0
  9587 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9588 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9589 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9590 ;;Total ram usage:        3 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    1
  9593 ;; This function calls:
  9594 ;;		i2_lcd_write
  9595 ;; This function is called by:
  9596 ;;		_aux
  9597 ;;		i2_lcd_putc
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text37
  9602  002B16                     __ptext37:
  9603                           	opt stack 0
  9604  002B16                     i2_lcd_gotoxy:
  9605                           	opt stack 20
  9606                           
  9607                           ;incstack = 0
  9608                           ;i2lcd_gotoxy@linha stored from wreg
  9609  002B16  6E04               	movwf	i2lcd_gotoxy@linha,c
  9610                           
  9611                           ;LCD_ModSauer.c: 222: linha_lcd_aux_posicao = linha;
  9612  002B18  908D               	bcf	3981,0,c	;volatile
  9613                           
  9614                           ;LCD_ModSauer.c: 223: switch(linha){
  9615  002B1A  D018               	goto	i2l3274
  9616  002B1C                     i2l3264:
  9617                           
  9618                           ;LCD_ModSauer.c: 225: lcd_write(0x80+(coluna-1));
  9619  002B1C  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9620  002B1E  0F7F               	addlw	127
  9621  002B20  EC47  F016         	call	i2_lcd_write
  9622                           
  9623                           ;LCD_ModSauer.c: 226: break;
  9624  002B24  D01C               	goto	i2l773
  9625  002B26                     i2l3266:
  9626                           
  9627                           ;LCD_ModSauer.c: 229: lcd_write(0xC0+(coluna-1));
  9628  002B26  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9629  002B28  0FBF               	addlw	191
  9630  002B2A  EC47  F016         	call	i2_lcd_write
  9631                           
  9632                           ;LCD_ModSauer.c: 230: break;
  9633  002B2E  D017               	goto	i2l773
  9634  002B30                     i2l3268:
  9635                           
  9636                           ;LCD_ModSauer.c: 233: lcd_write(Linha_3+(coluna-1));
  9637  002B30  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9638  002B32  242F               	addwf	_Linha_3,w,c
  9639  002B34  6E03               	movwf	??i2_lcd_gotoxy& (0+255),c
  9640  002B36  0403               	decf	??i2_lcd_gotoxy,w,c
  9641  002B38  EC47  F016         	call	i2_lcd_write
  9642                           
  9643                           ;LCD_ModSauer.c: 234: break;
  9644  002B3C  D010               	goto	i2l773
  9645  002B3E                     i2l3270:
  9646                           
  9647                           ;LCD_ModSauer.c: 237: lcd_write(Linha_4+(coluna-1));
  9648  002B3E  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9649  002B40  2430               	addwf	_Linha_4,w,c
  9650  002B42  6E03               	movwf	??i2_lcd_gotoxy& (0+255),c
  9651  002B44  0403               	decf	??i2_lcd_gotoxy,w,c
  9652  002B46  EC47  F016         	call	i2_lcd_write
  9653                           
  9654                           ;LCD_ModSauer.c: 238: break;
  9655  002B4A  D009               	goto	i2l773
  9656  002B4C                     i2l3274:
  9657  002B4C  5004               	movf	i2lcd_gotoxy@linha,w,c
  9658                           
  9659                           ; Switch size 1, requested type "space"
  9660                           ; Number of cases is 4, Range of values is 1 to 4
  9661                           ; switch strategies available:
  9662                           ; Name         Instructions Cycles
  9663                           ; simple_byte           13     7 (average)
  9664                           ;	Chosen strategy is simple_byte
  9665  002B4E  0A01               	xorlw	1	; case 1
  9666  002B50  E0E5               	bz	i2l3264
  9667  002B52  0A03               	xorlw	3	; case 2
  9668  002B54  E0E8               	bz	i2l3266
  9669  002B56  0A01               	xorlw	1	; case 3
  9670  002B58  E0EB               	bz	i2l3268
  9671  002B5A  0A07               	xorlw	7	; case 4
  9672  002B5C  E0F0               	bz	i2l3270
  9673  002B5E                     i2l773:
  9674  002B5E  0012               	return		;funcret
  9675  002B60                     __end_ofi2_lcd_gotoxy:
  9676                           	opt stack 0
  9677                           tblptru	equ	0xFF8
  9678                           tblptrh	equ	0xFF7
  9679                           tblptrl	equ	0xFF6
  9680                           tablat	equ	0xFF5
  9681                           prodh	equ	0xFF4
  9682                           prodl	equ	0xFF3
  9683                           intcon	equ	0xFF2
  9684                           intcon2	equ	0xFF1
  9685                           postinc0	equ	0xFEE
  9686                           wreg	equ	0xFE8
  9687                           indf1	equ	0xFE7
  9688                           postinc1	equ	0xFE6
  9689                           postdec1	equ	0xFE5
  9690                           plusw1	equ	0xFE3
  9691                           fsr1h	equ	0xFE2
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           plusw2	equ	0xFDB
  9697                           fsr2h	equ	0xFDA
  9698                           fsr2l	equ	0xFD9
  9699                           status	equ	0xFD8
  9700                           
  9701 ;; *************** function i2_lcd_clear *****************
  9702 ;; Defined at:
  9703 ;;		line 140 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;		None
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;		None               void
  9710 ;; Registers used:
  9711 ;;		wreg, status,2, status,0, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9717 ;;      Params:         0       0       0       0       0       0       0       0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9719 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9720 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9721 ;;Total ram usage:        1 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    1
  9724 ;; This function calls:
  9725 ;;		i2_lcd_write
  9726 ;; This function is called by:
  9727 ;;		i2_lcd_putc
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           	psect	text38
  9732  002E58                     __ptext38:
  9733                           	opt stack 0
  9734  002E58                     i2_lcd_clear:
  9735                           	opt stack 20
  9736                           
  9737                           ;LCD_ModSauer.c: 142: LATEbits.LE0 = 0;
  9738                           
  9739                           ;incstack = 0
  9740  002E58  908D               	bcf	3981,0,c	;volatile
  9741                           
  9742                           ;LCD_ModSauer.c: 143: lcd_write(0x1);
  9743  002E5A  0E01               	movlw	1
  9744  002E5C  EC47  F016         	call	i2_lcd_write
  9745                           
  9746                           ;LCD_ModSauer.c: 144: _delay((unsigned long)((2)*(16000000/4000.0)));
  9747  002E60  0E0B               	movlw	11
  9748  002E62  6E02               	movwf	??i2_lcd_clear& (0+255),c
  9749  002E64  0E62               	movlw	98
  9750  002E66                     i2u767_47:
  9751  002E66  2EE8               	decfsz	wreg,f,c
  9752  002E68  D7FE               	goto	i2u767_47
  9753  002E6A  2E02               	decfsz	??i2_lcd_clear& (0+255),f,c
  9754  002E6C  D7FC               	goto	i2u767_47
  9755  002E6E  D000               	nop2	
  9756  002E70  0012               	return		;funcret
  9757  002E72                     __end_ofi2_lcd_clear:
  9758                           	opt stack 0
  9759                           tblptru	equ	0xFF8
  9760                           tblptrh	equ	0xFF7
  9761                           tblptrl	equ	0xFF6
  9762                           tablat	equ	0xFF5
  9763                           prodh	equ	0xFF4
  9764                           prodl	equ	0xFF3
  9765                           intcon	equ	0xFF2
  9766                           intcon2	equ	0xFF1
  9767                           postinc0	equ	0xFEE
  9768                           wreg	equ	0xFE8
  9769                           indf1	equ	0xFE7
  9770                           postinc1	equ	0xFE6
  9771                           postdec1	equ	0xFE5
  9772                           plusw1	equ	0xFE3
  9773                           fsr1h	equ	0xFE2
  9774                           fsr1l	equ	0xFE1
  9775                           indf2	equ	0xFDF
  9776                           postinc2	equ	0xFDE
  9777                           postdec2	equ	0xFDD
  9778                           plusw2	equ	0xFDB
  9779                           fsr2h	equ	0xFDA
  9780                           fsr2l	equ	0xFD9
  9781                           status	equ	0xFD8
  9782                           
  9783 ;; *************** function i2_lcd_write *****************
  9784 ;; Defined at:
  9785 ;;		line 124 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;  c               1    wreg     unsigned char 
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;  c               1    0[COMRAM] unsigned char 
  9790 ;; Return value:  Size  Location     Type
  9791 ;;		None               void
  9792 ;; Registers used:
  9793 ;;		wreg, status,2, status,0, cstack
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9799 ;;      Params:         0       0       0       0       0       0       0       0       0
  9800 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9802 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9803 ;;Total ram usage:        1 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; This function calls:
  9806 ;;		Nothing
  9807 ;; This function is called by:
  9808 ;;		i2_lcd_clear
  9809 ;;		i2_lcd_putc
  9810 ;;		i2_lcd_gotoxy
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           	psect	text39
  9815  002C8E                     __ptext39:
  9816                           	opt stack 0
  9817  002C8E                     i2_lcd_write:
  9818                           	opt stack 21
  9819                           
  9820                           ;incstack = 0
  9821                           ;i2lcd_write@c stored from wreg
  9822  002C8E  6E01               	movwf	i2lcd_write@c,c
  9823                           
  9824                           ;LCD_ModSauer.c: 126: _delay((unsigned long)((40)*(16000000/4000000.0)));
  9825  002C90  0E35               	movlw	53
  9826  002C92                     i2u768_47:
  9827  002C92  2EE8               	decfsz	wreg,f,c
  9828  002C94  D7FE               	goto	i2u768_47
  9829  002C96  F000               	nop	
  9830                           
  9831                           ;LCD_ModSauer.c: 127: LATA &= 0xF0;
  9832  002C98  0EF0               	movlw	240
  9833  002C9A  1689               	andwf	3977,f,c	;volatile
  9834                           
  9835                           ;LCD_ModSauer.c: 128: LATA |= ( ( c >> 4 ) & 0x0F );
  9836  002C9C  3801               	swapf	i2lcd_write@c,w,c
  9837                           
  9838                           ;LCD_ModSauer.c: 129: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  9839                           
  9840                           ;LCD_ModSauer.c: 130: LATA &=0xF0;
  9841  002C9E  D806               	call	PL32	;call to abstracted procedure
  9842                           
  9843                           ;LCD_ModSauer.c: 131: LATA |= ( c & 0x0F );
  9844  002CA0  5001               	movf	i2lcd_write@c,w,c
  9845  002CA2  0B0F               	andlw	15
  9846  002CA4  1289               	iorwf	3977,f,c	;volatile
  9847                           
  9848                           ;LCD_ModSauer.c: 132: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  9849  002CA6  828D               	bsf	3981,1,c	;volatile
  9850  002CA8  928D               	bcf	3981,1,c	;volatile
  9851  002CAA  0012               	return		;funcret
  9852  002CAC                     __end_ofi2_lcd_write:
  9853                           	opt stack 0
  9854  002CAC                     PL32:
  9855                           	opt stack 21
  9856  002CAC  0B0F               	andlw	15
  9857  002CAE  1289               	iorwf	3977,f,c	;volatile
  9858  002CB0  828D               	bsf	3981,1,c	;volatile
  9859  002CB2  928D               	bcf	3981,1,c	;volatile
  9860  002CB4  0EF0               	movlw	240
  9861  002CB6  1689               	andwf	3977,f,c	;volatile
  9862  002CB8  0CF0               	retlw	240
  9863  002CBA                     __end_ofPL32:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           intcon2	equ	0xFF1
  9873                           postinc0	equ	0xFEE
  9874                           wreg	equ	0xFE8
  9875                           indf1	equ	0xFE7
  9876                           postinc1	equ	0xFE6
  9877                           postdec1	equ	0xFE5
  9878                           plusw1	equ	0xFE3
  9879                           fsr1h	equ	0xFE2
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           postdec2	equ	0xFDD
  9884                           plusw2	equ	0xFDB
  9885                           fsr2h	equ	0xFDA
  9886                           fsr2l	equ	0xFD9
  9887                           status	equ	0xFD8
  9888                           
  9889 ;; *************** function i2_isdigit *****************
  9890 ;; Defined at:
  9891 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  c               1    wreg     unsigned char 
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;  c               1    2[COMRAM] unsigned char 
  9896 ;; Return value:  Size  Location     Type
  9897 ;;		None               void
  9898 ;; Registers used:
  9899 ;;		wreg, status,2, status,0
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9905 ;;      Params:         0       0       0       0       0       0       0       0       0
  9906 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9907 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9908 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9909 ;;Total ram usage:        3 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; This function calls:
  9912 ;;		Nothing
  9913 ;; This function is called by:
  9914 ;;		i2_printf
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           	psect	text40
  9919  002E22                     __ptext40:
  9920                           	opt stack 0
  9921  002E22                     i2_isdigit:
  9922                           	opt stack 23
  9923                           
  9924                           ;incstack = 0
  9925                           ;i2isdigit@c stored from wreg
  9926  002E22  6E03               	movwf	i2isdigit@c,c
  9927  002E24  6A02               	clrf	i2_isdigit$1538,c
  9928  002E26  0E3A               	movlw	58
  9929  002E28  6003               	cpfslt	i2isdigit@c,c
  9930  002E2A  D005               	goto	i2l3512
  9931  002E2C  0E2F               	movlw	47
  9932  002E2E  6403               	cpfsgt	i2isdigit@c,c
  9933  002E30  D002               	goto	i2l3512
  9934  002E32  0E01               	movlw	1
  9935  002E34  6E02               	movwf	i2_isdigit$1538,c
  9936  002E36                     i2l3512:
  9937  002E36  C002  F001         	movff	i2_isdigit$1538,??i2_isdigit
  9938  002E3A  3001               	rrcf	??i2_isdigit,w,c
  9939  002E3C  0012               	return		;funcret
  9940  002E3E                     __end_ofi2_isdigit:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           indf1	equ	0xFE7
  9953                           postinc1	equ	0xFE6
  9954                           postdec1	equ	0xFE5
  9955                           plusw1	equ	0xFE3
  9956                           fsr1h	equ	0xFE2
  9957                           fsr1l	equ	0xFE1
  9958                           indf2	equ	0xFDF
  9959                           postinc2	equ	0xFDE
  9960                           postdec2	equ	0xFDD
  9961                           plusw2	equ	0xFDB
  9962                           fsr2h	equ	0xFDA
  9963                           fsr2l	equ	0xFD9
  9964                           status	equ	0xFD8
  9965                           
  9966 ;; *************** function i2___wmul *****************
  9967 ;; Defined at:
  9968 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;  multiplier      2    0[COMRAM] unsigned int 
  9971 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  __wmul          2    4[COMRAM] unsigned int 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  2    0[COMRAM] unsigned int 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0, prodl, prodh
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9983 ;;      Params:         4       0       0       0       0       0       0       0       0
  9984 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9986 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9987 ;;Total ram usage:        6 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		i2_printf
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	text41
  9997  002D34                     __ptext41:
  9998                           	opt stack 0
  9999  002D34                     i2___wmul:
 10000                           	opt stack 23
 10001                           
 10002                           ;incstack = 0
 10003  002D34  5001               	movf	i2___wmul@multiplier,w,c
 10004  002D36  0203               	mulwf	i2___wmul@multiplicand,c
 10005  002D38  CFF3 F005          	movff	prodl,i2___wmul@product
 10006  002D3C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10007  002D40  5001               	movf	i2___wmul@multiplier,w,c
 10008  002D42  0204               	mulwf	i2___wmul@multiplicand+1,c
 10009  002D44  50F3               	movf	prodl,w,c
 10010  002D46  2606               	addwf	i2___wmul@product+1,f,c
 10011  002D48  5002               	movf	i2___wmul@multiplier+1,w,c
 10012  002D4A  0203               	mulwf	i2___wmul@multiplicand,c
 10013  002D4C  50F3               	movf	prodl,w,c
 10014  002D4E  2606               	addwf	i2___wmul@product+1,f,c
 10015  002D50  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10016  002D54  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10017  002D58  0012               	return		;funcret
 10018  002D5A                     __end_ofi2___wmul:
 10019                           	opt stack 0
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           intcon2	equ	0xFF1
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           indf1	equ	0xFE7
 10031                           postinc1	equ	0xFE6
 10032                           postdec1	equ	0xFE5
 10033                           plusw1	equ	0xFE3
 10034                           fsr1h	equ	0xFE2
 10035                           fsr1l	equ	0xFE1
 10036                           indf2	equ	0xFDF
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           plusw2	equ	0xFDB
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function i2___lwmod *****************
 10045 ;; Defined at:
 10046 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  dividend        2    7[COMRAM] unsigned int 
 10049 ;;  divisor         2    9[COMRAM] unsigned int 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  2    7[COMRAM] unsigned int 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10061 ;;      Params:         4       0       0       0       0       0       0       0       0
 10062 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10064 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10065 ;;Total ram usage:        5 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		i2_printf
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           	psect	text42
 10075  002BE8                     __ptext42:
 10076                           	opt stack 0
 10077  002BE8                     i2___lwmod:
 10078                           	opt stack 23
 10079                           
 10080                           ;incstack = 0
 10081  002BE8  500A               	movf	i2___lwmod@divisor,w,c
 10082  002BEA  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10083  002BEC  E017               	bz	i2l1415
 10084  002BEE  0E01               	movlw	1
 10085  002BF0  6E0C               	movwf	i2___lwmod@counter,c
 10086  002BF2  D004               	goto	i2l3544
 10087  002BF4                     i2l3542:
 10088  002BF4  90D8               	bcf	status,0,c
 10089  002BF6  360A               	rlcf	i2___lwmod@divisor,f,c
 10090  002BF8  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10091  002BFA  2A0C               	incf	i2___lwmod@counter,f,c
 10092  002BFC                     i2l3544:
 10093  002BFC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10094  002BFE  D7FA               	goto	i2l3542
 10095  002C00                     i2l3546:
 10096  002C00  500A               	movf	i2___lwmod@divisor,w,c
 10097  002C02  5C08               	subwf	i2___lwmod@dividend,w,c
 10098  002C04  500B               	movf	i2___lwmod@divisor+1,w,c
 10099  002C06  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10100  002C08  E304               	bnc	i2l3550
 10101  002C0A  500A               	movf	i2___lwmod@divisor,w,c
 10102  002C0C  5E08               	subwf	i2___lwmod@dividend,f,c
 10103  002C0E  500B               	movf	i2___lwmod@divisor+1,w,c
 10104  002C10  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10105  002C12                     i2l3550:
 10106  002C12  90D8               	bcf	status,0,c
 10107  002C14  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10108  002C16  320A               	rrcf	i2___lwmod@divisor,f,c
 10109  002C18  2E0C               	decfsz	i2___lwmod@counter,f,c
 10110  002C1A  D7F2               	goto	i2l3546
 10111  002C1C                     i2l1415:
 10112  002C1C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10113  002C20  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10114  002C24  0012               	return		;funcret
 10115  002C26                     __end_ofi2___lwmod:
 10116                           	opt stack 0
 10117                           tblptru	equ	0xFF8
 10118                           tblptrh	equ	0xFF7
 10119                           tblptrl	equ	0xFF6
 10120                           tablat	equ	0xFF5
 10121                           prodh	equ	0xFF4
 10122                           prodl	equ	0xFF3
 10123                           intcon	equ	0xFF2
 10124                           intcon2	equ	0xFF1
 10125                           postinc0	equ	0xFEE
 10126                           wreg	equ	0xFE8
 10127                           indf1	equ	0xFE7
 10128                           postinc1	equ	0xFE6
 10129                           postdec1	equ	0xFE5
 10130                           plusw1	equ	0xFE3
 10131                           fsr1h	equ	0xFE2
 10132                           fsr1l	equ	0xFE1
 10133                           indf2	equ	0xFDF
 10134                           postinc2	equ	0xFDE
 10135                           postdec2	equ	0xFDD
 10136                           plusw2	equ	0xFDB
 10137                           fsr2h	equ	0xFDA
 10138                           fsr2l	equ	0xFD9
 10139                           status	equ	0xFD8
 10140                           
 10141 ;; *************** function i2___lwdiv *****************
 10142 ;; Defined at:
 10143 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;  dividend        2    0[COMRAM] unsigned int 
 10146 ;;  divisor         2    2[COMRAM] unsigned int 
 10147 ;; Auto vars:     Size  Location     Type
 10148 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10149 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  2    0[COMRAM] unsigned int 
 10152 ;; Registers used:
 10153 ;;		wreg, status,2, status,0
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10159 ;;      Params:         4       0       0       0       0       0       0       0       0
 10160 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10161 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10162 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10163 ;;Total ram usage:        7 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; This function calls:
 10166 ;;		Nothing
 10167 ;; This function is called by:
 10168 ;;		i2_printf
 10169 ;; This function uses a non-reentrant model
 10170 ;;
 10171                           
 10172                           	psect	text43
 10173  002B60                     __ptext43:
 10174                           	opt stack 0
 10175  002B60                     i2___lwdiv:
 10176                           	opt stack 23
 10177                           
 10178                           ;incstack = 0
 10179  002B60  6A05               	clrf	i2___lwdiv@quotient,c
 10180  002B62  6A06               	clrf	i2___lwdiv@quotient+1,c
 10181  002B64  5003               	movf	i2___lwdiv@divisor,w,c
 10182  002B66  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10183  002B68  E01B               	bz	i2l1405
 10184  002B6A  0E01               	movlw	1
 10185  002B6C  6E07               	movwf	i2___lwdiv@counter,c
 10186  002B6E  D004               	goto	i2l3524
 10187  002B70                     i2l3522:
 10188  002B70  90D8               	bcf	status,0,c
 10189  002B72  3603               	rlcf	i2___lwdiv@divisor,f,c
 10190  002B74  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10191  002B76  2A07               	incf	i2___lwdiv@counter,f,c
 10192  002B78                     i2l3524:
 10193  002B78  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10194  002B7A  D7FA               	goto	i2l3522
 10195  002B7C                     i2l3526:
 10196  002B7C  90D8               	bcf	status,0,c
 10197  002B7E  3605               	rlcf	i2___lwdiv@quotient,f,c
 10198  002B80  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10199  002B82  5003               	movf	i2___lwdiv@divisor,w,c
 10200  002B84  5C01               	subwf	i2___lwdiv@dividend,w,c
 10201  002B86  5004               	movf	i2___lwdiv@divisor+1,w,c
 10202  002B88  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10203  002B8A  E305               	bnc	i2l3534
 10204  002B8C  5003               	movf	i2___lwdiv@divisor,w,c
 10205  002B8E  5E01               	subwf	i2___lwdiv@dividend,f,c
 10206  002B90  5004               	movf	i2___lwdiv@divisor+1,w,c
 10207  002B92  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10208  002B94  8005               	bsf	i2___lwdiv@quotient,0,c
 10209  002B96                     i2l3534:
 10210  002B96  90D8               	bcf	status,0,c
 10211  002B98  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10212  002B9A  3203               	rrcf	i2___lwdiv@divisor,f,c
 10213  002B9C  2E07               	decfsz	i2___lwdiv@counter,f,c
 10214  002B9E  D7EE               	goto	i2l3526
 10215  002BA0                     i2l1405:
 10216  002BA0  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10217  002BA4  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10218  002BA8  0012               	return		;funcret
 10219  002BAA                     __end_ofi2___lwdiv:
 10220                           	opt stack 0
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           intcon2	equ	0xFF1
 10229                           postinc0	equ	0xFEE
 10230                           wreg	equ	0xFE8
 10231                           indf1	equ	0xFE7
 10232                           postinc1	equ	0xFE6
 10233                           postdec1	equ	0xFE5
 10234                           plusw1	equ	0xFE3
 10235                           fsr1h	equ	0xFE2
 10236                           fsr1l	equ	0xFE1
 10237                           indf2	equ	0xFDF
 10238                           postinc2	equ	0xFDE
 10239                           postdec2	equ	0xFDD
 10240                           plusw2	equ	0xFDB
 10241                           fsr2h	equ	0xFDA
 10242                           fsr2l	equ	0xFD9
 10243                           status	equ	0xFD8
 10244                           
 10245 ;; *************** function _teclado_matricial *****************
 10246 ;; Defined at:
 10247 ;;		line 5 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
 10248 ;; Parameters:    Size  Location     Type
 10249 ;;  coluna          1    wreg     unsigned char 
 10250 ;;  linha           1    0[COMRAM] unsigned char 
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;  coluna          1    1[COMRAM] unsigned char 
 10253 ;;  caractere       1    3[COMRAM] unsigned char 
 10254 ;;  temp            1    2[COMRAM] unsigned char 
 10255 ;; Return value:  Size  Location     Type
 10256 ;;                  1    wreg      unsigned char 
 10257 ;; Registers used:
 10258 ;;		wreg, status,2, status,0, prodl, prodh
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10264 ;;      Params:         1       0       0       0       0       0       0       0       0
 10265 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10266 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10267 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10268 ;;Total ram usage:        4 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; This function calls:
 10271 ;;		Nothing
 10272 ;; This function is called by:
 10273 ;;		_aux
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           	psect	text44
 10278  002566                     __ptext44:
 10279                           	opt stack 0
 10280  002566                     _teclado_matricial:
 10281                           	opt stack 24
 10282                           
 10283                           ;incstack = 0
 10284                           ;teclado_matricial@coluna stored from wreg
 10285  002566  6E02               	movwf	teclado_matricial@coluna,c
 10286                           
 10287                           ;ascii.c: 7: char temp = ((linha-1)*4) + coluna;
 10288  002568  5001               	movf	teclado_matricial@linha,w,c
 10289  00256A  0D04               	mullw	4
 10290  00256C  50F3               	movf	prodl,w,c
 10291  00256E  2402               	addwf	teclado_matricial@coluna,w,c
 10292  002570  0FFC               	addlw	252
 10293  002572  6E03               	movwf	teclado_matricial@temp,c
 10294                           
 10295                           ;ascii.c: 8: char caractere;
 10296                           ;ascii.c: 10: switch(temp){
 10297  002574  D021               	goto	i2l3726
 10298  002576                     i2l3692:
 10299                           
 10300                           ;ascii.c: 12: caractere = '*';
 10301  002576  0E2A               	movlw	42
 10302  002578  D01D               	goto	L34
 10303  00257A                     i2l3694:
 10304                           
 10305                           ;ascii.c: 16: caractere = '0';
 10306  00257A  0E30               	movlw	48
 10307  00257C  D01B               	goto	L34
 10308  00257E                     i2l3696:
 10309                           
 10310                           ;ascii.c: 20: caractere = 'F';
 10311  00257E  0E46               	movlw	70
 10312  002580  D019               	goto	L34
 10313  002582                     i2l3698:
 10314                           
 10315                           ;ascii.c: 24: caractere = 'D';
 10316  002582  0E44               	movlw	68
 10317  002584  D017               	goto	L34
 10318  002586                     i2l3700:
 10319                           
 10320                           ;ascii.c: 28: caractere = '7';
 10321  002586  0E37               	movlw	55
 10322  002588  D015               	goto	L34
 10323  00258A                     i2l3702:
 10324                           
 10325                           ;ascii.c: 32: caractere = '8';
 10326  00258A  0E38               	movlw	56
 10327  00258C  D013               	goto	L34
 10328  00258E                     i2l3704:
 10329                           
 10330                           ;ascii.c: 36: caractere = '9';
 10331  00258E  0E39               	movlw	57
 10332  002590  D011               	goto	L34
 10333  002592                     i2l3706:
 10334                           
 10335                           ;ascii.c: 40: caractere = 'C';
 10336  002592  0E43               	movlw	67
 10337  002594  D00F               	goto	L34
 10338  002596                     i2l3708:
 10339                           
 10340                           ;ascii.c: 44: caractere = '4';
 10341  002596  0E34               	movlw	52
 10342  002598  D00D               	goto	L34
 10343  00259A                     i2l3710:
 10344                           
 10345                           ;ascii.c: 48: caractere = '5';
 10346  00259A  0E35               	movlw	53
 10347  00259C  D00B               	goto	L34
 10348  00259E                     i2l3712:
 10349                           
 10350                           ;ascii.c: 52: caractere = '6';
 10351  00259E  0E36               	movlw	54
 10352  0025A0  D009               	goto	L34
 10353  0025A2                     i2l3714:
 10354                           
 10355                           ;ascii.c: 56: caractere = 'B';
 10356  0025A2  0E42               	movlw	66
 10357  0025A4  D007               	goto	L34
 10358  0025A6                     i2l3716:
 10359                           
 10360                           ;ascii.c: 60: caractere = '1';
 10361  0025A6  0E31               	movlw	49
 10362  0025A8  D005               	goto	L34
 10363  0025AA                     i2l3718:
 10364                           
 10365                           ;ascii.c: 64: caractere = '2';
 10366  0025AA  0E32               	movlw	50
 10367  0025AC  D003               	goto	L34
 10368  0025AE                     i2l3720:
 10369                           
 10370                           ;ascii.c: 68: caractere = '3';
 10371  0025AE  0E33               	movlw	51
 10372  0025B0  D001               	goto	L34
 10373  0025B2                     i2l3722:
 10374                           
 10375                           ;ascii.c: 72: caractere = 'A';
 10376  0025B2  0E41               	movlw	65
 10377  0025B4                     L34:
 10378  0025B4  6E04               	movwf	teclado_matricial@caractere,c
 10379                           
 10380                           ;ascii.c: 73: break;}
 10381  0025B6  D021               	goto	i2l3728
 10382  0025B8                     i2l3726:
 10383  0025B8  5003               	movf	teclado_matricial@temp,w,c
 10384                           
 10385                           ; Switch size 1, requested type "space"
 10386                           ; Number of cases is 16, Range of values is 1 to 16
 10387                           ; switch strategies available:
 10388                           ; Name         Instructions Cycles
 10389                           ; simple_byte           49    25 (average)
 10390                           ;	Chosen strategy is simple_byte
 10391  0025BA  0A01               	xorlw	1	; case 1
 10392  0025BC  E0DC               	bz	i2l3692
 10393  0025BE  0A03               	xorlw	3	; case 2
 10394  0025C0  E0DC               	bz	i2l3694
 10395  0025C2  0A01               	xorlw	1	; case 3
 10396  0025C4  E0DC               	bz	i2l3696
 10397  0025C6  0A07               	xorlw	7	; case 4
 10398  0025C8  E0DC               	bz	i2l3698
 10399  0025CA  0A01               	xorlw	1	; case 5
 10400  0025CC  E0DC               	bz	i2l3700
 10401  0025CE  0A03               	xorlw	3	; case 6
 10402  0025D0  E0DC               	bz	i2l3702
 10403  0025D2  0A01               	xorlw	1	; case 7
 10404  0025D4  E0DC               	bz	i2l3704
 10405  0025D6  0A0F               	xorlw	15	; case 8
 10406  0025D8  E0DC               	bz	i2l3706
 10407  0025DA  0A01               	xorlw	1	; case 9
 10408  0025DC  E0DC               	bz	i2l3708
 10409  0025DE  0A03               	xorlw	3	; case 10
 10410  0025E0  E0DC               	bz	i2l3710
 10411  0025E2  0A01               	xorlw	1	; case 11
 10412  0025E4  E0DC               	bz	i2l3712
 10413  0025E6  0A07               	xorlw	7	; case 12
 10414  0025E8  E0DC               	bz	i2l3714
 10415  0025EA  0A01               	xorlw	1	; case 13
 10416  0025EC  E0DC               	bz	i2l3716
 10417  0025EE  0A03               	xorlw	3	; case 14
 10418  0025F0  E0DC               	bz	i2l3718
 10419  0025F2  0A01               	xorlw	1	; case 15
 10420  0025F4  E0DC               	bz	i2l3720
 10421  0025F6  0A1F               	xorlw	31	; case 16
 10422  0025F8  E0DC               	bz	i2l3722
 10423  0025FA                     i2l3728:
 10424                           
 10425                           ;ascii.c: 75: return caractere;
 10426  0025FA  5004               	movf	teclado_matricial@caractere,w,c
 10427  0025FC  0012               	return		;funcret
 10428  0025FE                     __end_of_teclado_matricial:
 10429                           	opt stack 0
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           intcon2	equ	0xFF1
 10438                           postinc0	equ	0xFEE
 10439                           wreg	equ	0xFE8
 10440                           indf1	equ	0xFE7
 10441                           postinc1	equ	0xFE6
 10442                           postdec1	equ	0xFE5
 10443                           plusw1	equ	0xFE3
 10444                           fsr1h	equ	0xFE2
 10445                           fsr1l	equ	0xFE1
 10446                           indf2	equ	0xFDF
 10447                           postinc2	equ	0xFDE
 10448                           postdec2	equ	0xFDD
 10449                           plusw2	equ	0xFDB
 10450                           fsr2h	equ	0xFDA
 10451                           fsr2l	equ	0xFD9
 10452                           status	equ	0xFD8
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           intcon2	equ	0xFF1
 10461                           postinc0	equ	0xFEE
 10462                           wreg	equ	0xFE8
 10463                           indf1	equ	0xFE7
 10464                           postinc1	equ	0xFE6
 10465                           postdec1	equ	0xFE5
 10466                           plusw1	equ	0xFE3
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           plusw2	equ	0xFDB
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477                           	psect	rparam
 10478  0000                     tblptru	equ	0xFF8
 10479                           tblptrh	equ	0xFF7
 10480                           tblptrl	equ	0xFF6
 10481                           tablat	equ	0xFF5
 10482                           prodh	equ	0xFF4
 10483                           prodl	equ	0xFF3
 10484                           intcon	equ	0xFF2
 10485                           intcon2	equ	0xFF1
 10486                           postinc0	equ	0xFEE
 10487                           wreg	equ	0xFE8
 10488                           indf1	equ	0xFE7
 10489                           postinc1	equ	0xFE6
 10490                           postdec1	equ	0xFE5
 10491                           plusw1	equ	0xFE3
 10492                           fsr1h	equ	0xFE2
 10493                           fsr1l	equ	0xFE1
 10494                           indf2	equ	0xFDF
 10495                           postinc2	equ	0xFDE
 10496                           postdec2	equ	0xFDD
 10497                           plusw2	equ	0xFDB
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           tblptru	equ	0xFF8
 10502                           tblptrh	equ	0xFF7
 10503                           tblptrl	equ	0xFF6
 10504                           tablat	equ	0xFF5
 10505                           prodh	equ	0xFF4
 10506                           prodl	equ	0xFF3
 10507                           intcon	equ	0xFF2
 10508                           intcon2	equ	0xFF1
 10509                           postinc0	equ	0xFEE
 10510                           wreg	equ	0xFE8
 10511                           indf1	equ	0xFE7
 10512                           postinc1	equ	0xFE6
 10513                           postdec1	equ	0xFE5
 10514                           plusw1	equ	0xFE3
 10515                           fsr1h	equ	0xFE2
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           plusw2	equ	0xFDB
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8


Data Sizes:
    Strings     238
    Constant    10
    Data        13
    BSS         431
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      63
    BANK0           160     79     152
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_32(CODE[7]), printf@c(BANK0[1]), buffer_teclado_matricial(BANK0[40]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_19(CODE[33]), STR_18(CODE[2]), STR_14(CODE[18]), STR_13(CODE[22]), 
		 -> STR_12(CODE[20]), STR_11(CODE[15]), STR_10(CODE[19]), STR_9(CODE[3]), 
		 -> STR_8(CODE[17]), STR_7(CODE[3]), STR_6(CODE[4]), STR_5(CODE[5]), 
		 -> STR_2(CODE[3]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    enviar_string_serial@string_a_enviar	PTR const unsigned char  size(2) Largest target is 272
		 -> STR_31(CODE[4]), STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[6]), 
		 -> STR_27(CODE[6]), STR_26(CODE[6]), STR_25(CODE[6]), STR_24(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[4]), STR_20(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), nova_senha(BANK0[16]), 
		 -> STR_4(CODE[7]), STR_3(CODE[3]), main@endereco_modulo_repasse(BANK0[18]), senha(BIGRAM[272]), 
		 -> buffer_serial(BANK1[80]), 

    carregar_senha@senha_a_carregar	PTR unsigned char [17] size(2) Largest target is 272
		 -> senha(BIGRAM[272]), 

    ptr_data	PTR unsigned char  size(2) Largest target is 7
		 -> NULL(NULL[0]), data_atual.ano(COMRAM[1]), data_atual(COMRAM[7]), 

    zerar_string@string_a_zerar	PTR unsigned char  size(2) Largest target is 80
		 -> buffer_teclado_matricial(BANK0[40]), buffer_serial(BANK1[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _aux in COMRAM

    _aux->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcd_putc
    i2_lcd_putc->i2_lcd_gotoxy
    i2_lcd_gotoxy->i2_lcd_write
    i2_lcd_clear->i2_lcd_write
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _verificar_num_contas->_Read_b_eep
    _printf->___lwmod
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _numero_para_ascii->___awdiv
    ___awdiv->___wmul
    _limpar_linha->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write
    _lcd_init->_lcd_clear
    _lcd_clear->_lcd_write
    _escrever_simbolo_fechadura->_lcd_write
    _eeprom_config_inicial->_Write_b_eep
    _dia_da_semana->___lwmod
    ___lwmod->___lwdiv
    _carregar_senha->_Read_b_eep

Critical Paths under _aux in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aux in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aux in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aux in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aux in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aux in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _aux in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _aux in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   24941
                                             41 BANK0     38    38      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                            ___awmod
                  _ascii_para_numero
                     _carregar_senha
                      _config_serial
                           _delay_ms
                      _dia_da_semana
              _eeprom_config_inicial
            _enviar_caractere_serial
               _enviar_string_serial
                         _lcd_gotoxy
                           _lcd_init
                       _limpar_linha
                  _numero_para_ascii
                             _printf
                     _resetar_timer1
               _verificar_num_contas
                       _zerar_string
 ---------------------------------------------------------------------------------
 (1) _zerar_string                                         2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _verificar_num_contas                                 2     2      0     475
                                              2 BANK0      2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _resetar_timer1                                       2     1      1     377
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _printf                                              33    21     12    5473
                                             12 BANK0     29    17     12
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1118
                                              5 BANK0      1     1      0
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1087
                                              4 BANK0      1     1      0
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _numero_para_ascii                                    6     6      0    2213
                                             14 BANK0      6     6      0
                            ___awdiv
                            ___lbdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     318
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _limpar_linha                                         2     2      0    1062
                                              4 BANK0      2     2      0
                         _lcd_gotoxy
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1     901
                                              1 BANK0      3     2      1
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     251
                                              2 BANK0      3     3      0
         _escrever_simbolo_fechadura
                          _lcd_clear
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_clear                                            1     1      0      62
                                              1 BANK0      1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _escrever_simbolo_fechadura                           0     0      0      62
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enviar_string_serial                                 2     0      2    1747
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _enviar_caractere_serial                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_config_inicial                                1     1      0    1431
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    1177
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dia_da_semana                                       22    18      4    3239
                                             12 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1042
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     540
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     703
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     684
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _config_serial                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _carregar_senha                                       8     6      2     794
                                              2 BANK0      8     6      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2     339
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ascii_para_numero                                    4     2      2     595
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     587
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _aux                                                 15    15      0    2746
                                             29 COMRAM    15    15      0
                  _teclado_matricial
                       i2_lcd_gotoxy
                           i2_printf
                   i2_resetar_timer1
 ---------------------------------------------------------------------------------
 (7) i2_resetar_timer1                                     2     1      1      96
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            21    21      0    2108
                                             12 COMRAM    17    17      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     382
                                              5 COMRAM     1     1      0
                         i2_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i2_lcd_putc                                           1     1      0     360
                                              4 COMRAM     1     1      0
                        i2_lcd_clear
                       i2_lcd_gotoxy
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_gotoxy                                        3     2      1     228
                                              1 COMRAM     3     2      1
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_clear                                         1     1      0      44
                                              1 COMRAM     1     1      0
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_write                                         1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _teclado_matricial                                    4     3      1     169
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Busy_eep
   _Read_b_eep
   _Write_b_eep
   ___awmod
   _ascii_para_numero
   _carregar_senha
     _Read_b_eep
   _config_serial
   _delay_ms
   _dia_da_semana
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
   _eeprom_config_inicial
     _Busy_eep
     _Write_b_eep
   _enviar_caractere_serial
   _enviar_string_serial
   _lcd_gotoxy
     _lcd_write
   _lcd_init
     _escrever_simbolo_fechadura
       _lcd_write
     _lcd_clear
       _lcd_write
     _lcd_write
   _limpar_linha
     _lcd_gotoxy
       _lcd_write
     _lcd_write
   _numero_para_ascii
     ___awdiv
       ___wmul (ARG)
     ___lbdiv
     ___wmul
   _printf
     ___awmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcd_putc
         _lcd_clear
           _lcd_write
         _lcd_gotoxy
           _lcd_write
         _lcd_write
   _resetar_timer1
   _verificar_num_contas
     _Read_b_eep
   _zerar_string

 _aux (ROOT)
   _teclado_matricial
   i2_lcd_gotoxy
     i2_lcd_write
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcd_putc
         i2_lcd_clear
           i2_lcd_write
         i2_lcd_gotoxy
           i2_lcd_write
         i2_lcd_write
   i2_resetar_timer1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     110      21       13.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      3F       1       66.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     127      20        0.0%
DATA                 0      0     237       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 08 14:19:33 2015

                   main@qtd_total_contas 00A5                                       PL2 1B36  
                  __end_of_dia_da_semana 24AE                                       PL4 1B44  
                                     PL6 1B5C                                       PL8 2658  
                  _eeprom_config_inicial 2692                                       _WR 007D31  
                           ___awdiv@sign 006B                      ___wmul@multiplicand 0062  
                     i2___lwdiv@dividend 0001                       __CFG_FOSC$XTPLL_XT 000000  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    PL10 266E                                      PL20 1B70  
                                    PL12 214A                                      PL30 270A  
                                    PL22 216C                                      PL14 2154  
                                    PL32 2CAC                                      PL24 1B86  
                                    PL16 1E7C                                      PL34 1BAA  
                                    PL26 1B9A                                      PL18 1E94  
                                    PL28 24AE                  __size_of_carregar_senha 005A  
                                    l403 1AC8                                      l404 1A96  
                                    l318 1590                                      l272 136C  
                                    l338 1668                                      l266 1346  
                                    l427 1ABE                                      l371 185A  
                                    l363 17E6                                      l259 1622  
                                    l292 1478                                      l462 2720  
                                    l382 194E                                      l471 278C  
                                    l392 1980                                      l465 2738  
                                    l369 184E                                      l722 24FE  
                                    l474 2794                                      l715 2D6A  
                                    l395 1A0C                                      l564 2D00  
                                    l468 2772                                      l637 2E9A  
                                    l645 2A50                                      l813 1CBE  
                                    l754 293C                                      l755 295A  
                                    l828 1DCC                                      l844 1E7A  
                                    l773 2ACA                                      l829 1DD0  
                                    l597 2CD6                                      l791 1BCE  
                                    l849 2ECC                                      l876 2C7C  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                                    _RX9 007D5E                                      _TX9 007D66  
                           __CFG_BOR$OFF 000000                                      _aux 1008  
                   __size_of_Write_b_eep 0034                             ___awmod@sign 0065  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1405 2B0C                                     l1415 2BDE  
                                   l5102 2C56                                     l5112 2ADC  
                                   l5114 2AE4                                     l5050 27BC  
                                   l5026 2E1A                                     l5202 1D06  
                                   l5124 2B02                                     l5116 2AE8  
                                   l5140 2BD4                                     l5132 2BB6  
                                   l5060 27D8                                     l5044 27AC  
                                   l5204 1D18                                     l6012 1974  
                                   l5134 2BBE                                     l5214 1D34  
                                   l5150 2DB4                                     l5136 2BC2  
                                   l5056 27CC                                     l5072 27FC  
                                   l5240 1D94                                     l5216 1D4E  
                                   l5208 1D26                                     l6040 19D8  
                                   l6032 19C0                                     l6024 199E  
                                   l6008 196A                                     l5058 27D4  
                                   l5090 2C3A                                     l5226 1D70  
                                   l5162 1BDA                                     l5154 1BC0  
                                   l5146 2DA4                                     l6130 1B18  
                                   l6114 1AB6                                     l6026 19A4  
                                   l5404 2430                                     l5420 24D4  
                                   l5076 2808                                     l5068 27F2  
                                   l5092 2C3E                                     l5260 1DFC  
                                   l5228 1D74                                     l6052 19FC  
                                   l6044 19E4                                     l6036 19CC  
                                   l5510 29A4                                     l5502 2986  
                                   l5422 24E0                                     l5086 2C34  
                                   l5262 1E02                                     l5270 1E26  
                                   l5254 1DE4                                     l5246 1DAA  
                                   l5190 1CA8                                     l5158 1BD6  
                                   l6062 1A18                                     ?_aux 0001  
                 ??_verificar_num_contas 0062                                     l5504 298E  
                                   l5408 243C                                     l5416 24CA  
                                   l5272 1E2C                                     l5184 1C6C  
                                   l5176 1C48                                     l5168 1BFA  
                                   l6056 1A08                                     l6048 19F0  
                                   l5506 2992                                     l5514 29AE  
                                   l5418 24CE                                     l5426 24EE  
                                   l5098 2C4E                                     l5266 1E16  
                                   l5194 1CC4                                     l5186 1C72  
                                   l5346 2CBE                                     l6082 1A54  
                                   l5380 263E                                     l5372 2602  
                                   l5292 2696                                     l5276 1E6A  
                                   l5196 1CCA                                     l5188 1C78  
                                   l6092 1A6E                                     l6084 1A58  
                                   l6076 1A42                                     l5518 29BA  
                                   l5198 1CDC                                     l5278 1E72  
                                   l5702 14A8                                     l5630 1356  
                                   l5464 2CEA                                     l5384 2A2E  
                                   l6088 1A62                                     l5800 15D8  
                                   l5640 1370                                     l5552 1276  
                                   l5722 14D4                                     l5650 1388  
                                   l5634 135E                                     l5562 12B6  
                                   l5388 2A5A                                     l4940 2A92  
                                   l5484 2D74                                     l5900 1726  
                                   l5740 1538                                     l5716 14C6  
                                   l5708 14B8                                     l5804 15E4  
                                   l5652 138A                                     l5494 296E  
                                   l4942 2A9C                                     l5910 177E  
                                   l5814 1604                                     l4944 2AAA  
                                   l4960 28FE                                     l5904 1766  
                                   l5824 1616                                     l5760 1564  
                                   l5752 1554                                     l5744 1544  
                                   l5736 1530                                     l5680 144A  
                                   l5664 13BA                                     l5656 13A6  
                                   l5672 1414                                     l5912 1782  
                                   l5592 131C                                     l5498 297A  
                                   l4938 2A88                                     l4970 2912  
                                   l5850 1678                                     l5770 1586  
                                   l5762 156A                                     l5658 13AA  
                                   l5826 1618                                     l4948 2AB8  
                                   l4964 290C                                     l4972 2922  
                                   l5780 159A                                     l5756 155C  
                                   l5748 154C                                     l5676 141E  
                                   l5684 1464                                     l4974 292E  
                                   l4958 28F8                                     l5950 1804  
                                   l5846 166C                                     l5782 159E  
                                   l5766 1576                                     l5694 147A  
                                   l5952 1808                                     l5864 16AC  
                                   l5872 16C4                                     l5792 15C0  
                             i2_lcd_putc 29C4                                     l4986 294A  
                                   l5962 1834                                     l5938 17DA  
                                   l5866 16B0                                     l5794 15CE  
                                   l5778 1592                                     l5948 1802  
                                   l5964 183C                                     l5876 16DA  
                                   l5788 15AE                                     l5974 1866  
                                   l5894 1716                                     l5886 1702  
                                   l5992 18E8                                     l5888 1706  
                                   l5898 171E                                     l5996 18F8  
                                   l5988 18DC                                     STR_1 11F7  
                                   STR_2 11E6                                     STR_3 11F2  
                                   STR_4 11A2                                     STR_5 11DC  
                                   STR_6 11E5                                     STR_7 11E6  
                                   STR_8 117B                                     STR_9 11E6  
                                   _BRGH 007D62                                     _CREN 007D5C  
                                   _FERR 007D5A                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATD 000F8C  
                                   _PIE1 000F9D                                     u6130 2A4E  
                                   u6150 2A7A                                     _RBIE 007F93  
                                   _RBIF 007F90                                     u6137 2A44  
                                   u6314 1B54                                     u6171 23DA  
                                   u6315 1B4E                                     _RCIE 007CED  
                                   _RCIF 007CF5                                     u6157 2A70  
                                   u6504 13FE                                     u6505 13FA  
                                   u5820 1CA4                                     u6570 149C  
                                   _OERR 007D59                                     u5595 2C88  
                                   u5827 1C9A                                     u5596 2C8A  
                                   u5860 1CFC                                     u6484 13D8  
                                   u6485 13D4                                     u7607 2508  
                                   u7617 2522                                     u7627 2532  
                                   u5867 1CF2                                     u7637 253E  
                                   u7647 2E4C                                     u7657 2D84  
                                   u7667 2CF0                                     u7597 17BE  
                                   _SPEN 007D5F                                     _TRMT 007D61  
                                   _TXIE 007CEC                                     _TXEN 007D65  
                                   _SYNC 007D64                             __CFG_PWRT$ON 000000  
                                   _main 11FA                                     fsr1h 000FE2  
                     i2___lwdiv@quotient 0005                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 1018                    __size_of_zerar_string 0022  
                          __CFG_IESO$OFF 000000                          __end_ofi2_putch 2ECC  
                          __CFG_MCLRE$ON 000000                             ___param_bank 000010  
                i2resetar_timer1@valor_h 0002                  i2resetar_timer1@valor_l 0001  
                                  ??_aux 001E                            __CFG_PLLDIV$1 000000  
                            i2_lcd_clear 2E58                                    ?_main 0001  
                        __end_of___awdiv 2812                          __end_of___lbdiv 2C5A  
                                  _EEADR 000FA9                                    STR_10 1156  
                                  STR_11 118C                                    STR_12 1142  
                                  STR_21 11E1                                    STR_13 112C  
                                  STR_22 11D7                                    STR_30 11BB  
                                  STR_14 1169                                    STR_15 11EC  
                                  STR_23 11CD                                    STR_16 11EF  
                                  STR_24 11D2                                    STR_32 119B  
                                  _BRG16 007DC3                                    STR_17 11E9  
                                  STR_25 11B5                                    STR_18 11F5  
                                  STR_26 11A9                                    STR_27 11C1  
                                  STR_19 110B                                    STR_28 11C7  
                        __end_of___awmod 29C4                                    STR_29 11AF  
                                  _CMCON 000FB4                              i2_lcd_write 2C8E  
                                  _T0CON 000FD5                          ___awdiv@divisor 0068  
                                  _T1CON 000FCD                        config_serial@baud 0060  
                        __end_of___lwdiv 2B16                   ??_enviar_string_serial 0062  
                        __end_of___lwmod 2BE8                                    i2l211 22B4  
                                  i2l221 22DC                                    i2l213 22BE  
                                  i2l223 22E4                                    i2l207 22A4  
                                  i2l225 22EC                                    i2l209 22AC  
                                  i2l250 23A6                                    i2l227 22F6  
                                  i2l237 2352                                    i2l182 2280  
                                  i2l178 21B4                                    i2l813 1F9C  
                                  i2l754 2A0C                                    i2l755 2A2A  
                                  i2l828 20A4                                    i2l844 2148  
                                  i2l773 2B5E                                    i2l829 20A8  
                                  i2l791 1EB8                          ___awdiv@counter 006A  
                                  _RCREG 000FAE                                    _TMR0H 000FD7  
                                  _TMR1H 000FCF                                    _TMR0L 000FD6  
                                  _TMR1L 000FCE                                    _SPBRG 000FAF  
                                  _PORTB 000F81                                    _PORTD 000F83  
                          __CFG_USBDIV$1 000000                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _TXCKP 007DC4                                    _TXREG 000FAD  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
              __size_ofi2_resetar_timer1 000E                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           Read_b_eep@badd 0060  
                         __CFG_EBTRB$OFF 000000                               i2isdigit@c 0003  
                        __end_of_dpowers 110B                   Write_b_eep@GIE_BIT_VAL 0063  
                        __end_of_isdigit 2E22                                    _senha 0150  
                                  _putch 2EBA                             _zerar_string 2DA2  
                                  tablat 000FF5                         __end_ofi2___wmul 2D5A  
                   _num_interrupt_timer1 0034                                    plusw1 000FE3  
                                  plusw2 000FDB                                    status 000FD8  
                        ??_config_serial 0060                    __size_ofi2_lcd_gotoxy 004A  
                        ___lbdiv@divisor 0060                          ___lbdiv@counter 0062  
                          i2printf@width 001B                         __end_ofi2_printf 214A  
                     __size_ofi2___lwdiv 004A                       __size_ofi2___lwmod 003E  
               _buffer_teclado_matricial 00B4                 lcd_init@definir_tipo_lcd 0063  
                        __initialization 2812                             __end_of_main 1B36  
                 ?_eeprom_config_inicial 0001                               i2printf@ap 0015  
                             i2printf@cp 0013                               _Read_b_eep 2E72  
                       __end_of_Busy_eep 2ED2                  ascii_para_numero@numero 0063  
                     __size_ofi2_isdigit 001C                                   ??_main 0089  
                          __activetblptr 000002                         lcd_gotoxy@coluna 0061  
                            i2lcd_putc@c 0005                          __CFG_CCP2MX$OFF 000000  
                           i2_lcd_gotoxy 2B16                                   _ADCON1 000FC1  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                       ___awdiv@dividend 0066                                   ?_putch 0001  
                            ?i2_lcd_putc 0001                                   i2l1405 2BA0  
                                 i2l1415 2C1C                                   i2l4100 20FE  
                                 i2l4012 1F4E                                   i2l4004 1F2A  
                                 i2l3310 29C8                                   i2l4030 1FE0  
                                 i2l4022 1FA2                                   i2l4014 1F54  
                                 i2l3312 29CE                                   i2l4104 213C  
                                 i2l4032 1FF2                                   i2l4024 1FA8  
                                 i2l4016 1F58                                   i2l3322 29E2  
                                 i2l4026 1FB8                                   i2l4018 1F88  
                                 i2l4042 200E                                   i2l4106 2142  
                                 i2l3316 29DC                                   i2l3324 29F2  
                                 i2l4044 2026                                   i2l4036 2000  
                                 i2l3270 2B3E                                   i2l3326 29FE  
                                 i2l4054 2048                                   i2l3512 2E36  
                                 i2l3264 2B1C                                   i2l4056 204C  
                                 i2l4232 22F8                                   i2l4216 22C0  
                                 i2l3522 2B70                                   i2l3266 2B26  
                                 i2l3274 2B4C                                   i2l3338 2A1A  
                                 i2l4090 20D6                                   i2l4082 20BC  
                                 i2l4074 2082                                   i2l4218 22C8  
                                 i2l4250 2332                                   i2l4170 2218  
                                 i2l4138 21D8                                   i2l3700 2586  
                                 i2l3524 2B78                                   i2l3268 2B30  
                                 i2l4068 206C                                   i2l4260 2342  
                                 i2l4244 231A                                   i2l4180 223A  
                                 i2l3710 259A                                   i2l3702 258A  
                                 i2l3534 2B96                                   i2l3526 2B7C  
                                 i2l3550 2C12                                   i2l3542 2BF4  
                                 i2l4094 20E8                                   i2l4246 2324  
                                 i2l4238 230E                                   i2l4182 223E  
                                 i2l4174 2226                                   i2l4190 224A  
                                 i2l3720 25AE                                   i2l3712 259E  
                                 i2l3704 258E                                   i2l3544 2BFC  
                                 i2l4088 20D0                                   i2l4272 235A  
                                 i2l4248 232C                                   i2l4184 2244  
                                 i2l4176 222A                                   i2l3722 25B2  
                                 i2l3714 25A2                                   i2l3706 2592  
                                 i2l3546 2C00                                   i2l4098 20F8  
                                 i2l4282 2366                                   i2l3716 25A6  
                                 i2l3708 2596                                   i2l4292 239A  
                                 i2l4268 234C                                   i2l3718 25AA  
                                 i2l3726 25B8                                   i2l3728 25FA  
                                 i2l4296 23A4                                   i2l3692 2576  
                                 i2l3694 257A                                   i2l3696 257E  
                                 _INTCON 000FF2                                   i2l3698 2582  
                                 i2l3990 1EC4                                   i2l3982 1EAA  
                                 i2l3986 1EC0                                   i2l3996 1EE0  
                                 _OSCCON 000FD3                                   _TMR0IE 007F95  
                                 _TMR0IF 007F92                                ??i2_putch 0006  
                                 _TMR1IE 007CE8                                   _TMR1IF 007CF0  
                                 _TMR1ON 007E68                       main@tentativas_839 00A2  
                         __CFG_VREGEN$ON 000000                         __end_of_delay_ms 2D0E  
                         __CFG_XINST$OFF 000000                        _teclado_matricial 2566  
                      _ascii_para_numero 2DE6                         __end_of_lcd_init 2566  
                       __end_of_lcd_putc 295C                                   ___wmul 2D0E  
                              ??___awdiv 006A                       ?_teclado_matricial 0001  
                              ??___lbdiv 0061                           __CFG_STVREN$ON 000000  
                              ??___awmod 0064             ??_escrever_simbolo_fechadura 0061  
                     ?_ascii_para_numero 0060                                ??___lwdiv 0064  
                              ??___lwmod 006B                                   clear_0 281A  
                                 clear_1 282C                                   clear_2 2838  
                                 clear_3 2844                         ___awdiv@quotient 006C  
                        ___awmod@divisor 0062                          ___awmod@counter 0064  
                                 _printf 1BB8                           _carregar_senha 25FE  
                    ??_teclado_matricial 0002                      ??_ascii_para_numero 0062  
               ?_enviar_caractere_serial 0001                             __pdataCOMRAM 003F  
                          ?_limpar_linha 0001                                ??_isdigit 0060  
                dia_da_semana@tabela_mes 0075                        __end_ofi2___lwdiv 2BAA  
                           __mediumconst 0000                        __end_ofi2___lwmod 2C26  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                                   putch@c 0065  
                    carregar_senha@conta 0069                         ___lbdiv@dividend 0061  
                      __end_ofi2_isdigit 2E3E                               __accesstop 0060  
                __end_of__initialization 287C                          __CFG_PBADEN$OFF 000000  
                      i2lcd_gotoxy@linha 0004      __size_of_escrever_simbolo_fechadura 006E  
              __end_of_teclado_matricial 25FE                            ___rparam_used 000001  
              __end_of_ascii_para_numero 2E06                  __size_of_resetar_timer1 000E  
                     i2___lwmod@dividend 0008                           __pcstackCOMRAM 0001  
                           __pidataBANK0 2EAE                              ?_Read_b_eep 0060  
                 __end_of_carregar_senha 2658                            __end_of_putch 2EC4  
                            i2printf@len 0018                      __size_ofi2_lcd_putc 0068  
                            i2printf@val 0016                               __end_ofPL2 1B44  
                             __end_ofPL4 1B5C                               __end_ofPL6 1B70  
                             __end_ofPL8 266E                         ___lbdiv@quotient 0063  
                              ?i2___wmul 0001                           ??_limpar_linha 0064  
                       i2_resetar_timer1 2EA0                       __size_of_lcd_clear 001A  
                              ?i2_printf 0001                       __size_of_lcd_write 0024  
                                ??_putch 0065                               __pbssBANK0 00AF  
                             __pbssBANK1 0100                                ?_Busy_eep 0001  
                             _data_atual 0038                   eeprom_config_inicial@i 0064  
                           i2lcd_write@c 0001                                  ?___wmul 0060  
                 main@contas_cadastradas 00A3                          ?_carregar_senha 0062  
                           ?i2_lcd_clear 0001                            ??_Write_b_eep 0063  
                                ?_printf 006C                                  _FLAGS_1 00B1  
                                _FLAGS_2 002D                                  _FLAGS_3 002E  
                           ?i2_lcd_write 0001                               ??i2___wmul 0005  
                                _INTCON2 000FF1                                ?_delay_ms 0060  
                             _lcd_gotoxy 2A82                               ??i2_printf 000D  
                              ?_lcd_init 0001                                ?_lcd_putc 0001  
                    __size_of_Read_b_eep 0012                   __size_of_dia_da_semana 00DE  
                             ??_Busy_eep 0060            __size_of_verificar_num_contas 002A  
                                i2_putch 2EC4                       dia_da_semana@F5265 00EC  
             __size_of_teclado_matricial 0098               __size_of_ascii_para_numero 0020  
                                _Linha_3 002F                                  _Linha_4 0030  
                ??_eeprom_config_inicial 0064                                  __Hparam 0000  
                                __Lparam 0000                        __end_of_lcd_clear 2E58  
     __end_of_escrever_simbolo_fechadura 28F4               _escrever_simbolo_fechadura 2886  
enviar_caractere_serial@carater_a_enviar 0060                                  ___awdiv 279A  
                                ___lbdiv 2C26            main@ultimo_caractere_recebido 00A8  
                                ___awmod 295C                        __end_of_lcd_write 2DA2  
                        __size_of___wmul 0026                                  ___lwdiv 2ACC  
                                ___lwmod 2BAA                             __psmallconst 1100  
                                __pcinit 2812                                  __ramtop 0800  
                                __ptext0 11FA                                  __ptext1 2DA2  
                                __ptext2 2CBA                                  __ptext3 2E84  
                                __ptext4 1BB8                                  __ptext5 2EBA  
                                __ptext6 28F4                                  __ptext7 2E06  
                                __ptext8 271A                                  __ptext9 2C26  
                        __size_of_printf 02C4                                  _dpowers 1101  
                           __size_of_aux 13C8                                  _isdigit 2E06  
                       ___awmod@dividend 0060      enviar_string_serial@string_a_enviar 0060  
             zerar_string@string_a_zerar 0060            __size_of_enviar_string_serial 0056  
            main@endereco_modulo_repasse 008F                               ??_delay_ms 0062  
                    __end_of_Write_b_eep 2C8E                               ??_lcd_init 0062  
                           ??i2_lcd_putc 0005                           __pintcode_body 217A  
                             ??_lcd_putc 0064                     end_of_initialization 287C  
                         main@tentativas 00A1                            __Lmediumconst 0000  
                                int_func 217A                      i2___wmul@multiplier 0001  
                  __end_of_config_serial 2DE6                     __end_of_limpar_linha 2D7E  
                         _resetar_timer1 2E84                               _nova_senha 00DC  
                                printf@c 0088                                  printf@f 0085  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                        _numero_para_ascii 271A  
                          _dia_da_semana 23D0                       __end_ofi2_lcd_putc 2A2C  
                     ?_numero_para_ascii 0001                                _PORTBbits 000F81  
                              _PORTDbits 000F83                                _PORTEbits 000F84  
      _qtd_vezes_mesma_tecla_pressionada 00B3                    teclado_matricial@temp 0003  
                            ?_lcd_gotoxy 0061                      ??_numero_para_ascii 006E  
                     i2lcd_gotoxy@coluna 0002                        i2___lwdiv@divisor 0003  
                              i2___lwdiv 2B60                                i2___lwmod 2BE8  
                      i2___lwdiv@counter 0007                   __end_of_resetar_timer1 2E92  
       __size_of_enviar_caractere_serial 000E                              printf@width 0086  
                             main@funcao 00AD               teclado_matricial@caractere 0004  
                              i2_isdigit 2E22                               lcd_write@c 0060  
               __end_ofi2_resetar_timer1 2EAE                __end_of_numero_para_ascii 279A  
                           ??_Read_b_eep 0062                           ?_dia_da_semana 006C  
                  verificar_num_contas@i 0063                           __end_of___wmul 2D34  
                          __pidataCOMRAM 1004                              _Write_b_eep 2C5A  
                   __size_ofi2_lcd_clear 001A                         i2___wmul@product 0005  
                         __end_of_printf 1E7C                             i2printf@flag 001A  
                            __end_ofPL10 2692                              __end_ofPL20 1B86  
                            __end_ofPL12 2154                              __end_ofPL30 271A  
                            __end_ofPL22 217A                              __end_ofPL14 216C  
                            __end_ofPL32 2CBA                              __end_ofPL24 1B9A  
                            __end_ofPL16 1E94                              __end_ofPL34 1BB8  
                            __end_ofPL26 1BAA                              __end_ofPL18 1EA2  
                            __end_ofPL28 24BE                             i2printf@prec 0012  
                    start_initialization 2812                     __size_ofi2_lcd_write 001E  
                      __size_ofi2___wmul 0026                              __end_of_aux 23D0  
                              i2printf@c 001D                                i2printf@f 0011  
        _qtd_caracteres_recebidos_serial 0035                               ?i2___lwdiv 0001  
                             ?i2___lwmod 0008                        __size_ofi2_printf 02A8  
                        lcd_gotoxy@linha 0063                       __end_of_Read_b_eep 2E84  
                        ?_resetar_timer1 0060                        __size_of_Busy_eep 0006  
                             ?i2_isdigit 0001                         ??_carregar_senha 0064  
               main@conta_a_ser_alterada 00A6                      __size_of_lcd_gotoxy 004A  
                               ??___wmul 0064                              __pdataBANK0 00EC  
                       __CFG_LPT1OSC$OFF 000000                       _caractere_recebido 00B2  
                               ??_printf 0078                              __pbssBIGRAM 0150  
                            __pbssCOMRAM 002D                            __pcstackBANK0 0060  
                      i2___lwmod@divisor 000A                        i2___lwmod@counter 000C  
                numero_para_ascii@numero 0071                             _isdigit$1538 0061  
                          ?_zerar_string 0060                        __size_of_delay_ms 002A  
                  __size_of_limpar_linha 0024                        __size_of_lcd_init 00A8  
                               ?i2_putch 0001                        __size_of_lcd_putc 0068  
                       ___lwdiv@dividend 0060           __size_of_eeprom_config_inicial 0078  
          __end_of_eeprom_config_inicial 270A               __size_of_numero_para_ascii 0080  
                        ??_dia_da_semana 0070                                __pintcode 1008  
            ?_escrever_simbolo_fechadura 0001                                 ?___awdiv 0066  
                               ?___lbdiv 0060                                 ?___awmod 0060  
                               ?___lwdiv 0060                                 ?___lwmod 0067  
           __end_of_verificar_num_contas 2CE4                                _lcd_clear 2E3E  
                              _lcd_write 2D7E                              __smallconst 1100  
                               ?_isdigit 0001              ascii_para_numero@caractere1 0061  
            ascii_para_numero@caractere2 0060              ascii_para_numero@caractere3 0062  
                           _limpar_linha 2D5A                            ?i2_lcd_gotoxy 0002  
                         ??_zerar_string 0062                         ___lwdiv@quotient 0065  
                              _linha_lcd 0033                              ??i2___lwdiv 0005  
                            ??i2___lwmod 000C                           __size_of_putch 000A  
                _enviar_caractere_serial 2E92                      _qtd_max_colunas_lcd 0037  
                         ___wmul@product 0064                                 _LATCbits 000F8B  
                               _LATDbits 000F8C                                 _LATEbits 000F8D  
                            ??i2_isdigit 0001             __end_of_enviar_string_serial 2A82  
                               i2u371_40 1FD8                                 i2u371_47 1FCE  
                               i2u367_40 1F84                                 i2u367_47 1F7A  
                               i2u767_47 2E66                                 i2u768_47 2C92  
                               _RCONbits 000FD0         _qtd_caracteres_recebidos_teclado 0036  
                               _PORTB_SR 0031                               ?_lcd_clear 0001  
                              aux@coluna 002B                               ?_lcd_write 0001  
                              main@i_838 00A9                        ___wmul@multiplier 0060  
                               i2___wmul 2D34                          Write_b_eep@badd 0060  
                        Write_b_eep@bdat 0062                               printf@flag 0084  
                             printf@prec 007C                                main@conta 00AB  
                              main@etapa 00AA                                lcd_putc@c 0064  
                              main@ordem 00AC                           ??i2_lcd_gotoxy 0003  
                           ??_lcd_gotoxy 0062                                 i2_printf 1EA2  
                           delay_ms@temp 0063                                copy_data0 285E  
                               _Busy_eep 2ECC                                 i2putch@c 0006  
               limpar_linha@coluna_atual 0065                         __size_ofi2_putch 0008  
                             _EECON1bits 000FA6                                 __Hrparam 0000  
                               __Lrparam 0000                        ?i2_resetar_timer1 0001  
                      limpar_linha@linha 0064                       __end_of_lcd_gotoxy 2ACC  
                     ??i2_resetar_timer1 0002                         __size_of___awdiv 0078  
                       __size_of___lbdiv 0034                         __size_of___awmod 0068  
                  i2___wmul@multiplicand 0003                         __size_of___lwdiv 004A  
                       __size_of___lwmod 003E                   numero_para_ascii@temp1 0072  
                 numero_para_ascii@temp2 006F                             ?_Write_b_eep 0060  
                    dia_da_semana@seculo 0081                         __size_of_isdigit 001C  
                 __size_of_config_serial 0022                                 _delay_ms 2CE4  
                        ___lwdiv@divisor 0062                          ___lwdiv@counter 0064  
                               __ptext10 279A                                 __ptext11 2D5A  
                               __ptext20 2C5A                                 __ptext12 2A82  
                               __ptext21 2ECC                                 __ptext13 24BE  
                               __ptext30 2DE6                                 __ptext22 23D0  
                               __ptext14 2E3E                                 __ptext31 295C  
                               __ptext23 2D0E                                 __ptext15 2886  
                               __ptext40 2E22                                 __ptext24 2BAA  
                               __ptext16 2D7E                                 __ptext41 2D34  
                               __ptext33 2EA0                                 __ptext25 2ACC  
                               __ptext17 2A2C                                 __ptext42 2BE8  
                               __ptext34 1EA2                                 __ptext26 2CE4  
                               __ptext18 2E92                                 __ptext43 2B60  
                               __ptext35 2EC4                                 __ptext27 2DC4  
                               __ptext19 2692                                 __ptext44 2566  
                               __ptext36 29C4                                 __ptext28 25FE  
                               __ptext37 2B16                                 __ptext29 2E72  
                               __ptext38 2E58                                 __ptext39 2C8E  
              ??_enviar_caractere_serial 0060                         ??_resetar_timer1 0061  
                               _lcd_init 24BE                                 _lcd_putc 28F4  
         carregar_senha@senha_a_carregar 0062                                 _lcd_type 0032  
                         i2_isdigit$1538 0002                     _verificar_num_contas 2CBA  
                       dia_da_semana@dia 006F                         dia_da_semana@ano 006C  
                       dia_da_semana@mes 006E                            __size_of_main 093C  
                               _ptr_data 00AF                     __end_of_zerar_string 2DC4  
                               aux@linha 002C                    resetar_timer1@valor_h 0061  
                  resetar_timer1@valor_l 0060                            ??i2_lcd_clear 0002  
                              printf@len 0082                              ??_lcd_clear 0061  
                              printf@val 0080                                 main@cont 00AE  
                          ??i2_lcd_write 0001                              ??_lcd_write 0060  
                  __CFG_CPUDIV$OSC4_PLL6 000000                               _INTCONbits 000FF2  
                   _enviar_string_serial 2A2C                      delay_ms@delay_total 0060  
                               isdigit@c 0062                                 intlevel2 0000  
                  ?_verificar_num_contas 0001                         ___lwmod@dividend 0067  
                           _qtd_max_dias 003F                            _config_serial 2DC4  
                   __end_ofi2_lcd_gotoxy 2B60          __end_of_enviar_caractere_serial 2EA0  
                          _buffer_serial 0100                                 printf@ap 007F  
                               printf@cp 007D                          carregar_senha@i 0068  
                        ___lwmod@divisor 0069                    ?_enviar_string_serial 0060  
                        ___lwmod@counter 006B                      __end_ofi2_lcd_clear 2E72  
                    __end_ofi2_lcd_write 2CAC                  teclado_matricial@coluna 0002  
         verificar_num_contas@qtd_contas 0062                   teclado_matricial@linha 0001  
                         ?_config_serial 0001  
