

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Fri Aug 07 10:56:18 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    47                           	psect	pa_nodes,global,class=CODE,delta=1
    48  0000                     prodh	equ	0xFF4
    49                           prodl	equ	0xFF3
    50                           intcon	equ	0xFF2
    51                           intcon2	equ	0xFF1
    52                           wreg	equ	0xFE8
    53                           indf1	equ	0xFE7
    54                           postinc1	equ	0xFE6
    55                           plusw1	equ	0xFE3
    56                           fsr1h	equ	0xFE2
    57                           fsr1l	equ	0xFE1
    58                           indf2	equ	0xFDF
    59                           postinc2	equ	0xFDE
    60                           plusw2	equ	0xFDB
    61                           fsr2h	equ	0xFDA
    62                           fsr2l	equ	0xFD9
    63                           status	equ	0xFD8
    64                           
    65                           	psect	idataCOMRAM
    66  006F17                     __pidataCOMRAM:
    67                           	opt stack 0
    68                           
    69                           ;initializer for dia_da_semana@F5261
    70  006F17  00                 	db	0
    71  006F18  03                 	db	3
    72  006F19  03                 	db	3
    73  006F1A  06                 	db	6
    74  006F1B  01                 	db	1
    75  006F1C  04                 	db	4
    76  006F1D  06                 	db	6
    77  006F1E  02                 	db	2
    78  006F1F  05                 	db	5
    79  006F20  00                 	db	0
    80  006F21  03                 	db	3
    81  006F22  05                 	db	5
    82                           
    83                           ;initializer for _qtd_max_dias
    84  006F23  1F                 	db	31
    85  0000                     _ADCON1	set	4033
    86  0000                     _CMCON	set	4020
    87  0000                     _EEADR	set	4009
    88  0000                     _EECON1bits	set	4006
    89  0000                     _EECON2	set	4007
    90  0000                     _EEDATA	set	4008
    91  0000                     _INTCON	set	4082
    92  0000                     _INTCON2	set	4081
    93  0000                     _INTCONbits	set	4082
    94  0000                     _LATB	set	3978
    95  0000                     _LATD	set	3980
    96  0000                     _LATDbits	set	3980
    97  0000                     _OSCCON	set	4051
    98  0000                     _PIE1	set	3997
    99  0000                     _PIR1bits	set	3998
   100  0000                     _PORTAbits	set	3968
   101  0000                     _PORTB	set	3969
   102  0000                     _PORTBbits	set	3969
   103  0000                     _PORTCbits	set	3970
   104  0000                     _PORTD	set	3971
   105  0000                     _PORTDbits	set	3971
   106  0000                     _RCONbits	set	4048
   107  0000                     _RCREG	set	4014
   108  0000                     _SPBRG	set	4015
   109  0000                     _SSPADD	set	4040
   110  0000                     _SSPBUF	set	4041
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPCON1bits	set	4038
   113  0000                     _SSPCON2	set	4037
   114  0000                     _SSPCON2bits	set	4037
   115  0000                     _SSPSTAT	set	4039
   116  0000                     _SSPSTATbits	set	4039
   117  0000                     _T0CON	set	4053
   118  0000                     _T1CON	set	4045
   119  0000                     _TMR0H	set	4055
   120  0000                     _TMR0L	set	4054
   121  0000                     _TMR1H	set	4047
   122  0000                     _TMR1L	set	4046
   123  0000                     _TRISB	set	3987
   124  0000                     _TRISBbits	set	3987
   125  0000                     _TRISC	set	3988
   126  0000                     _TRISD	set	3989
   127  0000                     _TXREG	set	4013
   128  0000                     _BRG16	set	32195
   129  0000                     _BRGH	set	32098
   130  0000                     _CREN	set	32092
   131  0000                     _FERR	set	32090
   132  0000                     _OERR	set	32089
   133  0000                     _RBIE	set	32659
   134  0000                     _RBIF	set	32656
   135  0000                     _RCIE	set	31981
   136  0000                     _RCIF	set	31989
   137  0000                     _RX9	set	32094
   138  0000                     _SPEN	set	32095
   139  0000                     _SYNC	set	32100
   140  0000                     _TMR0IE	set	32661
   141  0000                     _TMR0IF	set	32658
   142  0000                     _TMR1IE	set	31976
   143  0000                     _TMR1IF	set	31984
   144  0000                     _TMR1ON	set	32360
   145  0000                     _TRMT	set	32097
   146  0000                     _TX9	set	32102
   147  0000                     _TXCKP	set	32196
   148  0000                     _TXEN	set	32101
   149  0000                     _TXIE	set	31980
   150  0000                     _WR	set	32049
   151                           
   152                           ; #config settings
   153  0000                     prodh	equ	0xFF4
   154                           prodl	equ	0xFF3
   155                           intcon	equ	0xFF2
   156                           intcon2	equ	0xFF1
   157                           wreg	equ	0xFE8
   158                           indf1	equ	0xFE7
   159                           postinc1	equ	0xFE6
   160                           plusw1	equ	0xFE3
   161                           fsr1h	equ	0xFE2
   162                           fsr1l	equ	0xFE1
   163                           indf2	equ	0xFDF
   164                           postinc2	equ	0xFDE
   165                           plusw2	equ	0xFDB
   166                           fsr2h	equ	0xFDA
   167                           fsr2l	equ	0xFD9
   168                           status	equ	0xFD8
   169                           
   170                           	psect	cinit
   171  00721C                     __pcinit:
   172                           	opt stack 0
   173  00721C                     start_initialization:
   174                           	opt stack 0
   175  00721C                     __initialization:
   176                           	opt stack 0
   177                           
   178                           ; Clear objects allocated to BIGRAM (272 bytes)
   179  00721C  EE00  F0EB         	lfsr	0,__pbssBIGRAM
   180  007220  EE11 F010          	lfsr	1,272
   181  007224                     clear_0:
   182  007224  6AEE               	clrf	postinc0,c
   183  007226  50E5               	movf	postdec1,w,c
   184  007228  50E1               	movf	fsr1l,w,c
   185  00722A  E1FC               	bnz	clear_0
   186  00722C  50E2               	movf	fsr1h,w,c
   187  00722E  E1FA               	bnz	clear_0
   188                           
   189                           ; Clear objects allocated to BANK0 (100 bytes)
   190  007230  EE00  F060         	lfsr	0,__pbssBANK0
   191  007234  0E64               	movlw	100
   192  007236                     clear_1:
   193  007236  6AEE               	clrf	postinc0,c
   194  007238  06E8               	decf	wreg,f,c
   195  00723A  E1FD               	bnz	clear_1
   196                           
   197                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   198  00723C  6A41               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   199                           
   200                           ; Clear objects allocated to COMRAM (12 bytes)
   201  00723E  EE00  F035         	lfsr	0,__pbssCOMRAM
   202  007242  0E0C               	movlw	12
   203  007244                     clear_2:
   204  007244  6AEE               	clrf	postinc0,c
   205  007246  06E8               	decf	wreg,f,c
   206  007248  E1FD               	bnz	clear_2
   207                           
   208                           ; Initialize objects allocated to COMRAM (13 bytes)
   209                           ; load TBLPTR registers with __pidataCOMRAM
   210  00724A  0E17               	movlw	low __pidataCOMRAM
   211  00724C  6EF6               	movwf	tblptrl,c
   212  00724E  0E6F               	movlw	high __pidataCOMRAM
   213  007250  6EF7               	movwf	tblptrh,c
   214  007252  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   215  007254  6EF8               	movwf	tblptru,c
   216  007256  EE00  F028         	lfsr	0,__pdataCOMRAM
   217  00725A  EE10 F00D          	lfsr	1,13
   218  00725E                     copy_data0:
   219  00725E  0009               	tblrd		*+
   220  007260  CFF5 FFEE          	movff	tablat,postinc0
   221  007264  50E5               	movf	postdec1,w,c
   222  007266  50E1               	movf	fsr1l,w,c
   223  007268  E1FA               	bnz	copy_data0
   224  00726A                     end_of_initialization:
   225                           	opt stack 0
   226  00726A                     __end_of__initialization:
   227                           	opt stack 0
   228  00726A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  00726C  6EF8               	movwf	tblptru,c
   230  00726E  0100               	movlb	0
   231  007270  EFAA  F03C         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           prodh	equ	0xFF4
   237                           prodl	equ	0xFF3
   238                           intcon	equ	0xFF2
   239                           intcon2	equ	0xFF1
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           indf1	equ	0xFE7
   243                           postinc1	equ	0xFE6
   244                           postdec1	equ	0xFE5
   245                           plusw1	equ	0xFE3
   246                           fsr1h	equ	0xFE2
   247                           fsr1l	equ	0xFE1
   248                           indf2	equ	0xFDF
   249                           postinc2	equ	0xFDE
   250                           plusw2	equ	0xFDB
   251                           fsr2h	equ	0xFDA
   252                           fsr2l	equ	0xFD9
   253                           status	equ	0xFD8
   254                           
   255                           	psect	bitbssCOMRAM
   256  000208                     __pbitbssCOMRAM:
   257                           	opt stack 0
   258  000208                     _debounce:
   259                           	opt stack 0
   260  000208                     	ds	1
   261  000209                     _enviar:
   262                           	opt stack 0
   263  000209                     	ds	1
   264  00020A                     _modo_bluetooth_teclado:
   265                           	opt stack 0
   266  00020A                     	ds	1
   267  00020B                     _receber:
   268                           	opt stack 0
   269  00020B                     	ds	1
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           prodh	equ	0xFF4
   275                           prodl	equ	0xFF3
   276                           intcon	equ	0xFF2
   277                           intcon2	equ	0xFF1
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           indf1	equ	0xFE7
   281                           postinc1	equ	0xFE6
   282                           postdec1	equ	0xFE5
   283                           plusw1	equ	0xFE3
   284                           fsr1h	equ	0xFE2
   285                           fsr1l	equ	0xFE1
   286                           indf2	equ	0xFDF
   287                           postinc2	equ	0xFDE
   288                           plusw2	equ	0xFDB
   289                           fsr2h	equ	0xFDA
   290                           fsr2l	equ	0xFD9
   291                           status	equ	0xFD8
   292                           
   293                           	psect	bssCOMRAM
   294  000035                     __pbssCOMRAM:
   295                           	opt stack 0
   296  000035                     _PORTB_SR:
   297                           	opt stack 0
   298  000035                     	ds	1
   299  000036                     _caractere_recebido:
   300                           	opt stack 0
   301  000036                     	ds	1
   302  000037                     _num_interrupt_timer1:
   303                           	opt stack 0
   304  000037                     	ds	1
   305  000038                     _qtd_caracteres_recebidos:
   306                           	opt stack 0
   307  000038                     	ds	1
   308  000039                     _qtd_vezes_mesma_tecla_pressionada:
   309                           	opt stack 0
   310  000039                     	ds	1
   311  00003A                     _data_atual:
   312                           	opt stack 0
   313  00003A                     	ds	7
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           prodh	equ	0xFF4
   319                           prodl	equ	0xFF3
   320                           intcon	equ	0xFF2
   321                           intcon2	equ	0xFF1
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           indf1	equ	0xFE7
   325                           postinc1	equ	0xFE6
   326                           postdec1	equ	0xFE5
   327                           plusw1	equ	0xFE3
   328                           fsr1h	equ	0xFE2
   329                           fsr1l	equ	0xFE1
   330                           indf2	equ	0xFDF
   331                           postinc2	equ	0xFDE
   332                           plusw2	equ	0xFDB
   333                           fsr2h	equ	0xFDA
   334                           fsr2l	equ	0xFD9
   335                           status	equ	0xFD8
   336                           
   337                           	psect	dataCOMRAM
   338  000028                     __pdataCOMRAM:
   339                           	opt stack 0
   340  000028                     dia_da_semana@F5261:
   341                           	opt stack 0
   342  000028                     	ds	12
   343  000034                     _qtd_max_dias:
   344                           	opt stack 0
   345  000034                     	ds	1
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           prodh	equ	0xFF4
   351                           prodl	equ	0xFF3
   352                           intcon	equ	0xFF2
   353                           intcon2	equ	0xFF1
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           indf1	equ	0xFE7
   357                           postinc1	equ	0xFE6
   358                           postdec1	equ	0xFE5
   359                           plusw1	equ	0xFE3
   360                           fsr1h	equ	0xFE2
   361                           fsr1l	equ	0xFE1
   362                           indf2	equ	0xFDF
   363                           postinc2	equ	0xFDE
   364                           plusw2	equ	0xFDB
   365                           fsr2h	equ	0xFDA
   366                           fsr2l	equ	0xFD9
   367                           status	equ	0xFD8
   368                           
   369                           	psect	bssBANK0
   370  000060                     __pbssBANK0:
   371                           	opt stack 0
   372  000060                     _nova_senha:
   373                           	opt stack 0
   374  000060                     	ds	16
   375  000070                     _ptr_data:
   376                           	opt stack 0
   377  000070                     	ds	2
   378  000072                     _FLAGS_1:
   379                           	opt stack 0
   380  000072                     	ds	1
   381  000073                     _FLAGS_2:
   382                           	opt stack 0
   383  000073                     	ds	1
   384  000074                     _buffer_serial:
   385                           	opt stack 0
   386  000074                     	ds	80
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           prodh	equ	0xFF4
   392                           prodl	equ	0xFF3
   393                           intcon	equ	0xFF2
   394                           intcon2	equ	0xFF1
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           indf1	equ	0xFE7
   398                           postinc1	equ	0xFE6
   399                           postdec1	equ	0xFE5
   400                           plusw1	equ	0xFE3
   401                           fsr1h	equ	0xFE2
   402                           fsr1l	equ	0xFE1
   403                           indf2	equ	0xFDF
   404                           postinc2	equ	0xFDE
   405                           plusw2	equ	0xFDB
   406                           fsr2h	equ	0xFDA
   407                           fsr2l	equ	0xFD9
   408                           status	equ	0xFD8
   409                           
   410                           	psect	bssBIGRAM
   411  0000EB                     __pbssBIGRAM:
   412                           	opt stack 0
   413  0000EB                     _senha:
   414                           	opt stack 0
   415  0000EB                     	ds	272
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           prodh	equ	0xFF4
   421                           prodl	equ	0xFF3
   422                           intcon	equ	0xFF2
   423                           intcon2	equ	0xFF1
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           indf1	equ	0xFE7
   427                           postinc1	equ	0xFE6
   428                           postdec1	equ	0xFE5
   429                           plusw1	equ	0xFE3
   430                           fsr1h	equ	0xFE2
   431                           fsr1l	equ	0xFE1
   432                           indf2	equ	0xFDF
   433                           postinc2	equ	0xFDE
   434                           plusw2	equ	0xFDB
   435                           fsr2h	equ	0xFDA
   436                           fsr2l	equ	0xFD9
   437                           status	equ	0xFD8
   438                           
   439                           	psect	cstackBANK0
   440  0000C4                     __pcstackBANK0:
   441                           	opt stack 0
   442  0000C4                     ___awdiv@counter:
   443                           	opt stack 0
   444  0000C4                     dia_da_semana@ano:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x0
   448  0000C4                     	ds	1
   449  0000C5                     ___awdiv@sign:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1
   453  0000C5                     	ds	1
   454  0000C6                     dia_da_semana@mes:
   455                           	opt stack 0
   456  0000C6                     ___awdiv@quotient:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2
   460  0000C6                     	ds	1
   461  0000C7                     dia_da_semana@dia:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x3
   465  0000C7                     	ds	1
   466  0000C8                     ??_dia_da_semana:
   467  0000C8                     numero_para_ascii@temp2:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x4
   471  0000C8                     	ds	1
   472  0000C9                     numero_para_ascii@numero:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x5
   476  0000C9                     	ds	1
   477  0000CA                     numero_para_ascii@temp1:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x6
   481  0000CA                     	ds	3
   482  0000CD                     dia_da_semana@tabela_mes:
   483                           	opt stack 0
   484                           
   485                           ; 12 bytes @ 0x9
   486  0000CD                     	ds	12
   487  0000D9                     dia_da_semana@seculo:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x15
   491  0000D9                     	ds	1
   492  0000DA                     ??_main:
   493                           
   494                           ; 0 bytes @ 0x16
   495  0000DA                     	ds	5
   496  0000DF                     main@temp_731:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x1B
   500  0000DF                     	ds	1
   501  0000E0                     main@ultimo_caractere_recebido:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1C
   505  0000E0                     	ds	1
   506  0000E1                     main@temp:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x1D
   510  0000E1                     	ds	1
   511  0000E2                     main@j:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x1E
   515  0000E2                     	ds	1
   516  0000E3                     main@qtd_total_contas:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x1F
   520  0000E3                     	ds	1
   521  0000E4                     main@conta_a_ser_alterada:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x20
   525  0000E4                     	ds	1
   526  0000E5                     main@i:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x21
   530  0000E5                     	ds	1
   531  0000E6                     main@etapa:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x22
   535  0000E6                     	ds	1
   536  0000E7                     main@conta:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x23
   540  0000E7                     	ds	1
   541  0000E8                     main@funcao:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x24
   545  0000E8                     	ds	1
   546  0000E9                     main@cont:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x25
   550  0000E9                     	ds	1
   551  0000EA                     main@ordem:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x26
   555  0000EA                     	ds	1
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           prodh	equ	0xFF4
   561                           prodl	equ	0xFF3
   562                           intcon	equ	0xFF2
   563                           intcon2	equ	0xFF1
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           indf1	equ	0xFE7
   567                           postinc1	equ	0xFE6
   568                           postdec1	equ	0xFE5
   569                           plusw1	equ	0xFE3
   570                           fsr1h	equ	0xFE2
   571                           fsr1l	equ	0xFE1
   572                           indf2	equ	0xFDF
   573                           postinc2	equ	0xFDE
   574                           plusw2	equ	0xFDB
   575                           fsr2h	equ	0xFDA
   576                           fsr2l	equ	0xFD9
   577                           status	equ	0xFD8
   578                           
   579                           	psect	cstackCOMRAM
   580  000001                     __pcstackCOMRAM:
   581                           	opt stack 0
   582  000001                     ?i2___wmul:
   583                           	opt stack 0
   584  000001                     teclado_matricial@linha:
   585                           	opt stack 0
   586  000001                     i2___lbdiv@divisor:
   587                           	opt stack 0
   588  000001                     i2___wmul@multiplier:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x0
   592  000001                     	ds	1
   593  000002                     teclado_matricial@coluna:
   594                           	opt stack 0
   595  000002                     i2___lbdiv@dividend:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x1
   599  000002                     	ds	1
   600  000003                     teclado_matricial@temp:
   601                           	opt stack 0
   602  000003                     i2___lbdiv@counter:
   603                           	opt stack 0
   604  000003                     i2___wmul@multiplicand:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x2
   608  000003                     	ds	1
   609  000004                     teclado_matricial@caractere:
   610                           	opt stack 0
   611  000004                     i2___lbdiv@quotient:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x3
   615  000004                     	ds	1
   616  000005                     i2___wmul@product:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x4
   620  000005                     	ds	2
   621  000007                     ?i2___awdiv:
   622                           	opt stack 0
   623  000007                     i2___awdiv@dividend:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x6
   627  000007                     	ds	2
   628  000009                     i2___awdiv@divisor:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x8
   632  000009                     	ds	2
   633  00000B                     i2___awdiv@counter:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0xA
   637  00000B                     	ds	1
   638  00000C                     i2___awdiv@sign:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0xB
   642  00000C                     	ds	1
   643  00000D                     i2___awdiv@quotient:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0xC
   647  00000D                     	ds	2
   648  00000F                     ??i2_numero_para_ascii:
   649                           
   650                           ; 0 bytes @ 0xE
   651  00000F                     	ds	1
   652  000010                     i2numero_para_ascii@numero:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0xF
   656  000010                     	ds	1
   657  000011                     i2numero_para_ascii@temp2:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x10
   661  000011                     	ds	1
   662  000012                     i2numero_para_ascii@temp1:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x11
   666  000012                     	ds	1
   667  000013                     ??_aux:
   668                           
   669                           ; 0 bytes @ 0x12
   670  000013                     	ds	5
   671  000018                     aux@caractere_a_exibir:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x17
   675  000018                     	ds	3
   676  00001B                     aux@coluna:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x1A
   680  00001B                     	ds	1
   681  00001C                     aux@linha:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x1B
   685  00001C                     	ds	1
   686  00001D                     ??_IdleI2C:
   687  00001D                     ?_strlen:
   688                           	opt stack 0
   689  00001D                     ?___wmul:
   690                           	opt stack 0
   691  00001D                     ?___lwdiv:
   692                           	opt stack 0
   693  00001D                     ascii_para_numero@caractere2:
   694                           	opt stack 0
   695  00001D                     config_serial@baud:
   696                           	opt stack 0
   697  00001D                     OpenI2C@slew:
   698                           	opt stack 0
   699  00001D                     ___lbdiv@divisor:
   700                           	opt stack 0
   701  00001D                     delay_ms@delay_total:
   702                           	opt stack 0
   703  00001D                     Read_b_eep@badd:
   704                           	opt stack 0
   705  00001D                     Write_b_eep@badd:
   706                           	opt stack 0
   707  00001D                     ___wmul@multiplier:
   708                           	opt stack 0
   709  00001D                     ___lwdiv@dividend:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x1C
   713  00001D                     	ds	1
   714  00001E                     ascii_para_numero@caractere1:
   715                           	opt stack 0
   716  00001E                     OpenI2C@sync_mode:
   717                           	opt stack 0
   718  00001E                     WriteI2C@data_out:
   719                           	opt stack 0
   720  00001E                     ___lbdiv@dividend:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x1D
   724  00001E                     	ds	1
   725  00001F                     ??_delay_ms:
   726  00001F                     ascii_para_numero@caractere3:
   727                           	opt stack 0
   728  00001F                     verificar_num_contas@qtd_contas:
   729                           	opt stack 0
   730  00001F                     Write_b_eep@bdat:
   731                           	opt stack 0
   732  00001F                     ___lbdiv@counter:
   733                           	opt stack 0
   734  00001F                     strlen@cp:
   735                           	opt stack 0
   736  00001F                     carregar_senha@senha_a_carregar:
   737                           	opt stack 0
   738  00001F                     ___wmul@multiplicand:
   739                           	opt stack 0
   740  00001F                     ___lwdiv@divisor:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x1E
   744  00001F                     	ds	1
   745  000020                     ascii_para_numero@numero:
   746                           	opt stack 0
   747  000020                     verificar_num_contas@i:
   748                           	opt stack 0
   749  000020                     Write_b_eep@GIE_BIT_VAL:
   750                           	opt stack 0
   751  000020                     ___lbdiv@quotient:
   752                           	opt stack 0
   753  000020                     strlen@s:
   754                           	opt stack 0
   755  000020                     delay_ms@temp:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x1F
   759  000020                     	ds	1
   760  000021                     ??_carregar_senha:
   761  000021                     eeprom_config_inicial@i:
   762                           	opt stack 0
   763  000021                     ___lwdiv@counter:
   764                           	opt stack 0
   765  000021                     ___wmul@product:
   766                           	opt stack 0
   767  000021                     memset@c:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x20
   771  000021                     	ds	1
   772  000022                     ___lwdiv@quotient:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x21
   776  000022                     	ds	1
   777  000023                     ?___awdiv:
   778                           	opt stack 0
   779  000023                     ?___lwmod:
   780                           	opt stack 0
   781  000023                     ___awdiv@dividend:
   782                           	opt stack 0
   783  000023                     ___lwmod@dividend:
   784                           	opt stack 0
   785  000023                     memset@n:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x22
   789  000023                     	ds	2
   790  000025                     carregar_senha@i:
   791                           	opt stack 0
   792  000025                     memset@p:
   793                           	opt stack 0
   794  000025                     ___awdiv@divisor:
   795                           	opt stack 0
   796  000025                     ___lwmod@divisor:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x24
   800  000025                     	ds	1
   801  000026                     carregar_senha@conta:
   802                           	opt stack 0
   803  000026                     memset@p1:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x25
   807  000026                     	ds	1
   808  000027                     ??_numero_para_ascii:
   809  000027                     zerar_string@string_a_zerar:
   810                           	opt stack 0
   811  000027                     ___lwmod@counter:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x26
   815  000027                     	ds	1
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           prodh	equ	0xFF4
   821                           prodl	equ	0xFF3
   822                           intcon	equ	0xFF2
   823                           intcon2	equ	0xFF1
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           indf1	equ	0xFE7
   827                           postinc1	equ	0xFE6
   828                           postdec1	equ	0xFE5
   829                           plusw1	equ	0xFE3
   830                           fsr1h	equ	0xFE2
   831                           fsr1l	equ	0xFE1
   832                           indf2	equ	0xFDF
   833                           postinc2	equ	0xFDE
   834                           plusw2	equ	0xFDB
   835                           fsr2h	equ	0xFDA
   836                           fsr2l	equ	0xFD9
   837                           status	equ	0xFD8
   838                           
   839 ;;
   840 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   841 ;;
   842 ;; *************** function _main *****************
   843 ;; Defined at:
   844 ;;		line 317 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  temp            1   27[BANK0 ] unsigned char 
   849 ;;  i               1   33[BANK0 ] unsigned char 
   850 ;;  j               1   30[BANK0 ] unsigned char 
   851 ;;  ordem           1   38[BANK0 ] unsigned char 
   852 ;;  cont            1   37[BANK0 ] unsigned char 
   853 ;;  funcao          1   36[BANK0 ] unsigned char 
   854 ;;  conta           1   35[BANK0 ] unsigned char 
   855 ;;  etapa           1   34[BANK0 ] unsigned char 
   856 ;;  conta_a_ser_    1   32[BANK0 ] unsigned char 
   857 ;;  qtd_total_co    1   31[BANK0 ] unsigned char 
   858 ;;  temp            1   29[BANK0 ] unsigned char 
   859 ;;  ultimo_carac    1   28[BANK0 ] unsigned char 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  2  268[None  ] int 
   862 ;; Registers used:
   863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : F/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   869 ;;      Params:         0       0       0       0       0       0       0       0       0
   870 ;;      Locals:         0      12       0       0       0       0       0       0       0
   871 ;;      Temps:          0       5       0       0       0       0       0       0       0
   872 ;;      Totals:         0      17       0       0       0       0       0       0       0
   873 ;;Total ram usage:       17 bytes
   874 ;; Hardware stack levels required when called:    5
   875 ;; This function calls:
   876 ;;		_Busy_eep
   877 ;;		_IdleI2C
   878 ;;		_OpenI2C
   879 ;;		_ReadI2C
   880 ;;		_Read_b_eep
   881 ;;		_WriteI2C
   882 ;;		_Write_b_eep
   883 ;;		_ascii_para_numero
   884 ;;		_carregar_senha
   885 ;;		_config_serial
   886 ;;		_delay_ms
   887 ;;		_dia_da_semana
   888 ;;		_eeprom_config_inicial
   889 ;;		_memset
   890 ;;		_numero_para_ascii
   891 ;;		_strlen
   892 ;;		_verificar_num_contas
   893 ;;		_zerar_string
   894 ;; This function is called by:
   895 ;;		Startup code after reset
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text0
   900  007954                     __ptext0:
   901                           	opt stack 0
   902  007954                     _main:
   903                           	opt stack 26
   904                           
   905                           ;main.c: 319: unsigned char ordem = 0;
   906                           
   907                           ;incstack = 0
   908  007954  0100               	movlb	0	; () banked
   909  007956  6BEA               	clrf	main@ordem& (0+255),b
   910                           
   911                           ;main.c: 320: unsigned char etapa=0;
   912  007958  6BE6               	clrf	main@etapa& (0+255),b
   913                           
   914                           ;main.c: 321: unsigned char funcao=0;
   915  00795A  6BE8               	clrf	main@funcao& (0+255),b
   916                           
   917                           ;main.c: 323: unsigned char conta_a_ser_alterada=0;
   918  00795C  6BE4               	clrf	main@conta_a_ser_alterada& (0+255),b
   919                           
   920                           ;main.c: 324: unsigned char cont=0;
   921  00795E  6BE9               	clrf	main@cont& (0+255),b
   922                           
   923                           ;main.c: 325: unsigned char qtd_total_contas=0;
   924  007960  6BE3               	clrf	main@qtd_total_contas& (0+255),b
   925                           
   926                           ;main.c: 326: unsigned char ultimo_caractere_recebido=0;
   927  007962  6BE0               	clrf	main@ultimo_caractere_recebido& (0+255),b
   928                           
   929                           ; BSR set to: 0
   930                           ;main.c: 328: zerar_string(buffer_serial);
   931  007964  0E74               	movlw	_buffer_serial& (0+255)
   932  007966  ECBD  F037         	call	_zerar_string
   933                           
   934                           ;main.c: 330: memset(buffer_serial,0,(strlen(buffer_serial)));
   935  00796A  6A22               	clrf	memset@c+1,c
   936  00796C  6A21               	clrf	memset@c,c
   937  00796E  0E74               	movlw	_buffer_serial& (0+255)
   938  007970  ECEA  F037         	call	_strlen
   939  007974  C01D  F023         	movff	?_strlen,memset@n
   940  007978  C01E  F024         	movff	?_strlen+1,memset@n+1
   941  00797C  0E74               	movlw	_buffer_serial& (0+255)
   942  00797E  EC34  F038         	call	_memset
   943                           
   944                           ;main.c: 333: OSCCON=0XF0;
   945  007982  0EF0               	movlw	240
   946  007984  6ED3               	movwf	4051,c	;volatile
   947                           
   948                           ;main.c: 336: INTCON = 0b11100000;
   949  007986  0EE0               	movlw	224
   950  007988  6EF2               	movwf	intcon,c	;volatile
   951                           
   952                           ;main.c: 337: INTCON2 =0b00000000;
   953  00798A  6AF1               	clrf	intcon2,c	;volatile
   954                           
   955                           ;main.c: 338: PIE1=0b00100001;
   956  00798C  0E21               	movlw	33
   957  00798E  6E9D               	movwf	3997,c	;volatile
   958                           
   959                           ;main.c: 339: RCONbits.IPEN = 0;
   960  007990  9ED0               	bcf	4048,7,c	;volatile
   961                           
   962                           ;main.c: 343: T0CON = 0b10000111;
   963  007992  0E87               	movlw	135
   964  007994  6ED5               	movwf	4053,c	;volatile
   965                           
   966                           ;main.c: 344: TMR0H=0xC2;
   967  007996  0EC2               	movlw	194
   968  007998  6ED7               	movwf	4055,c	;volatile
   969                           
   970                           ;main.c: 345: TMR0L= 0xF7;
   971  00799A  0EF7               	movlw	247
   972  00799C  6ED6               	movwf	4054,c	;volatile
   973                           
   974                           ;main.c: 348: LATD=0;
   975  00799E  6A8C               	clrf	3980,c	;volatile
   976                           
   977                           ;main.c: 350: TRISB=0xF0;
   978  0079A0  0EF0               	movlw	240
   979  0079A2  6E93               	movwf	3987,c	;volatile
   980                           
   981                           ;main.c: 351: LATB=0x0F;
   982  0079A4  0E0F               	movlw	15
   983  0079A6  6E8A               	movwf	3978,c	;volatile
   984                           
   985                           ;main.c: 352: TRISC=0xC3;
   986  0079A8  0EC3               	movlw	195
   987  0079AA  6E94               	movwf	3988,c	;volatile
   988                           
   989                           ;main.c: 353: TRISD=0x00;
   990  0079AC  6A95               	clrf	3989,c	;volatile
   991                           
   992                           ;main.c: 354: ADCON1=0XFF;
   993  0079AE  68C1               	setf	4033,c	;volatile
   994                           
   995                           ;main.c: 355: CMCON=0X07;
   996  0079B0  0E07               	movlw	7
   997  0079B2  6EB4               	movwf	4020,c	;volatile
   998                           
   999                           ;main.c: 358: T1CON = 0b00001110;
  1000  0079B4  0E0E               	movlw	14
  1001  0079B6  6ECD               	movwf	4045,c	;volatile
  1002                           
  1003                           ;main.c: 359: TMR1H=0XC0;
  1004  0079B8  0EC0               	movlw	192
  1005  0079BA  6ECF               	movwf	4047,c	;volatile
  1006                           
  1007                           ;main.c: 360: TMR1L=0;
  1008  0079BC  6ACE               	clrf	4046,c	;volatile
  1009                           
  1010                           ;main.c: 363: if(Read_b_eep(0) == 0xFF) eeprom_config_inicial();
  1011  0079BE  6A1E               	clrf	Read_b_eep@badd+1,c
  1012  0079C0  6A1D               	clrf	Read_b_eep@badd,c
  1013  0079C2  EC9A  F037         	call	_Read_b_eep	;wreg free
  1014  0079C6  0AFF               	xorlw	255
  1015  0079C8  B4D8               	btfsc	status,2,c
  1016  0079CA  EC3A  F039         	call	_eeprom_config_inicial	;wreg free
  1017                           
  1018                           ;main.c: 365: config_serial(35);
  1019  0079CE  0E23               	movlw	35
  1020  0079D0  ECDA  F037         	call	_config_serial
  1021                           
  1022                           ;main.c: 366: qtd_total_contas = verificar_num_contas();
  1023  0079D4  EC21  F038         	call	_verificar_num_contas	;wreg free
  1024  0079D8  0100               	movlb	0	; () banked
  1025  0079DA  6FE3               	movwf	main@qtd_total_contas& (0+255),b
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 367: numero_para_ascii(qtd_total_contas);
  1029  0079DC  51E3               	movf	main@qtd_total_contas& (0+255),w,b
  1030  0079DE  EC23  F03A         	call	_numero_para_ascii
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 369: for(conta=0;conta<qtd_total_contas;conta++){
  1034  0079E2  6BE7               	clrf	main@conta& (0+255),b
  1035  0079E4  D009               	goto	l3728
  1036  0079E6                     l3724:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;main.c: 370: carregar_senha(conta, senha);}
  1040  0079E6  0EEB               	movlw	low _senha
  1041  0079E8  6E1F               	movwf	carregar_senha@senha_a_carregar,c
  1042  0079EA  0E00               	movlw	high _senha
  1043  0079EC  6E20               	movwf	carregar_senha@senha_a_carregar+1,c
  1044  0079EE  51E7               	movf	main@conta& (0+255),w,b
  1045  0079F0  ECAB  F03A         	call	_carregar_senha
  1046  0079F4  0100               	movlb	0	; () banked
  1047  0079F6  2BE7               	incf	main@conta& (0+255),f,b
  1048  0079F8                     l3728:
  1049                           
  1050                           ; BSR set to: 0
  1051  0079F8  51E3               	movf	main@qtd_total_contas& (0+255),w,b
  1052  0079FA  5DE7               	subwf	main@conta& (0+255),w,b
  1053  0079FC  E3F4               	bnc	l3724
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 372: conta=0;
  1057  0079FE  6BE7               	clrf	main@conta& (0+255),b
  1058                           
  1059                           ;main.c: 373: RCIE=1;
  1060  007A00  8A9D               	bsf	3997,5,c	;volatile
  1061                           
  1062                           ;main.c: 375: data_atual.ano=0;
  1063  007A02  6A3A               	clrf	_data_atual,c
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;main.c: 376: data_atual.mes=1;
  1067  007A04  0E01               	movlw	1
  1068  007A06  6E3B               	movwf	_data_atual+1,c
  1069                           
  1070                           ;main.c: 377: data_atual.dia=1;
  1071  007A08  6E3C               	movwf	_data_atual+2,c
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;main.c: 378: data_atual.dia_da_semana= dia_da_semana(data_atual.ano,data_atual.mes,data
      +                          _atual.dia);
  1075  007A0A  C03A  F0C4         	movff	_data_atual,dia_da_semana@ano
  1076  007A0E  6BC5               	clrf	(dia_da_semana@ano+1)& (0+255),b
  1077  007A10  C03B  F0C6         	movff	_data_atual+1,dia_da_semana@mes
  1078  007A14  C03C  F0C7         	movff	_data_atual+2,dia_da_semana@dia
  1079  007A18  EC03  F03B         	call	_dia_da_semana	;wreg free
  1080  007A1C  6E40               	movwf	_data_atual+6,c
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;main.c: 379: data_atual.hora=0;
  1084  007A1E  6A3D               	clrf	_data_atual+3,c
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 380: data_atual.minuto=0;
  1088  007A20  6A3E               	clrf	_data_atual+4,c
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;main.c: 381: data_atual.segundo=0;
  1092  007A22  6A3F               	clrf	_data_atual+5,c
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;main.c: 382: PORTB_SR=PORTB;
  1096  007A24  CF81 F035          	movff	3969,_PORTB_SR	;volatile
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;main.c: 383: RBIE=1;
  1100  007A28  86F2               	bsf	intcon,3,c	;volatile
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;main.c: 384: RBIF=0;
  1104  007A2A  90F2               	bcf	intcon,0,c	;volatile
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;main.c: 385: cont=0;
  1108  007A2C  6BE9               	clrf	main@cont& (0+255),b
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 387: TRISBbits.TRISB1 = 1 ;
  1112  007A2E  8293               	bsf	3987,1,c	;volatile
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;main.c: 388: TRISBbits.TRISB0 = 1 ;
  1116  007A30  8093               	bsf	3987,0,c	;volatile
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;main.c: 389: OpenI2C(0b00001000,0b10000000);
  1120  007A32  0E80               	movlw	128
  1121  007A34  6E1D               	movwf	OpenI2C@slew,c
  1122  007A36  0E08               	movlw	8
  1123  007A38  ECA3  F037         	call	_OpenI2C
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;main.c: 390: SSPADD = 39;
  1127  007A3C  0E27               	movlw	39
  1128  007A3E  6EC8               	movwf	4040,c	;volatile
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;main.c: 392: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1132  007A40  80C5               	bsf	4037,0,c	;volatile
  1133  007A42                     l273:
  1134  007A42  B0C5               	btfsc	4037,0,c	;volatile
  1135  007A44  D7FE               	goto	l273
  1136                           
  1137                           ;main.c: 396: IdleI2C();
  1138  007A46  EC92  F037         	call	_IdleI2C	;wreg free
  1139                           
  1140                           ;main.c: 397: WriteI2C(0b1010000);
  1141  007A4A  0E50               	movlw	80
  1142  007A4C  ECC8  F038         	call	_WriteI2C
  1143                           
  1144                           ;main.c: 398: IdleI2C();
  1145  007A50  EC92  F037         	call	_IdleI2C	;wreg free
  1146                           
  1147                           ;main.c: 399: WriteI2C(0x55);
  1148  007A54  0E55               	movlw	85
  1149  007A56  ECC8  F038         	call	_WriteI2C
  1150                           
  1151                           ;main.c: 400: IdleI2C();
  1152  007A5A  EC92  F037         	call	_IdleI2C	;wreg free
  1153                           
  1154                           ;main.c: 401: WriteI2C(0x55);
  1155  007A5E  0E55               	movlw	85
  1156  007A60  ECC8  F038         	call	_WriteI2C
  1157                           
  1158                           ;main.c: 402: IdleI2C();
  1159  007A64  EC92  F037         	call	_IdleI2C	;wreg free
  1160                           
  1161                           ;main.c: 403: WriteI2C('A');
  1162  007A68  0E41               	movlw	65
  1163  007A6A  ECC8  F038         	call	_WriteI2C
  1164                           
  1165                           ;main.c: 404: IdleI2C();
  1166  007A6E  EC92  F037         	call	_IdleI2C	;wreg free
  1167                           
  1168                           ;main.c: 405: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1169  007A72  84C5               	bsf	4037,2,c	;volatile
  1170  007A74                     l276:
  1171  007A74  B4C5               	btfsc	4037,2,c	;volatile
  1172  007A76  D7FE               	goto	l276
  1173                           
  1174                           ;main.c: 406: IdleI2C();
  1175  007A78  EC92  F037         	call	_IdleI2C	;wreg free
  1176                           
  1177                           ;main.c: 407: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1178  007A7C  80C5               	bsf	4037,0,c	;volatile
  1179  007A7E                     l279:
  1180  007A7E  B0C5               	btfsc	4037,0,c	;volatile
  1181  007A80  D7FE               	goto	l279
  1182                           
  1183                           ;main.c: 408: IdleI2C();
  1184  007A82  EC92  F037         	call	_IdleI2C	;wreg free
  1185                           
  1186                           ;main.c: 409: WriteI2C(0b1010001);
  1187  007A86  0E51               	movlw	81
  1188  007A88  ECC8  F038         	call	_WriteI2C
  1189                           
  1190                           ;main.c: 410: IdleI2C();
  1191  007A8C  EC92  F037         	call	_IdleI2C	;wreg free
  1192                           
  1193                           ;main.c: 411: WriteI2C(0x55);
  1194  007A90  0E55               	movlw	85
  1195  007A92  ECC8  F038         	call	_WriteI2C
  1196                           
  1197                           ;main.c: 412: IdleI2C();
  1198  007A96  EC92  F037         	call	_IdleI2C	;wreg free
  1199                           
  1200                           ;main.c: 413: WriteI2C(0x55);
  1201  007A9A  0E55               	movlw	85
  1202  007A9C  ECC8  F038         	call	_WriteI2C
  1203                           
  1204                           ;main.c: 414: IdleI2C();
  1205  007AA0  EC92  F037         	call	_IdleI2C	;wreg free
  1206                           
  1207                           ;main.c: 415: char temp = 0;
  1208  007AA4  0100               	movlb	0	; () banked
  1209  007AA6  6BE1               	clrf	main@temp& (0+255),b
  1210                           
  1211                           ;main.c: 416: temp = ReadI2C();
  1212  007AA8  ECB0  F037         	call	_ReadI2C	;wreg free
  1213  007AAC  6FE1               	movwf	main@temp& (0+255),b
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;main.c: 417: numero_para_ascii(temp);
  1217  007AAE  51E1               	movf	main@temp& (0+255),w,b
  1218  007AB0  EC23  F03A         	call	_numero_para_ascii
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;main.c: 418: if(temp == 'A'){LATDbits.LD3=1;}
  1222  007AB4  0E41               	movlw	65
  1223  007AB6  19E1               	xorwf	main@temp& (0+255),w,b
  1224  007AB8  B4D8               	btfsc	status,2,c
  1225                           
  1226                           ; BSR set to: 0
  1227  007ABA  868C               	bsf	3980,3,c	;volatile
  1228  007ABC                     l283:
  1229  007ABC  A2AC               	btfss	4012,1,c	;volatile
  1230  007ABE  D7FE               	goto	l283
  1231                           
  1232                           ;main.c: 420: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  1233  007AC0  8AC5               	bsf	4037,5,c	;volatile
  1234  007AC2  88C5               	bsf	4037,4,c	;volatile
  1235  007AC4                     l286:
  1236  007AC4  B8C5               	btfsc	4037,4,c	;volatile
  1237  007AC6  D7FE               	goto	l286
  1238                           
  1239                           ;main.c: 421: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1240  007AC8  84C5               	bsf	4037,2,c	;volatile
  1241  007ACA                     l289:
  1242  007ACA  B4C5               	btfsc	4037,2,c	;volatile
  1243  007ACC  D7FE               	goto	l289
  1244  007ACE                     l292:
  1245                           
  1246                           ;main.c: 428: if(receber == 1){
  1247  007ACE  A641               	btfss	_receber/(0+8),_receber& (0+7),c
  1248  007AD0  D146               	goto	l293
  1249                           
  1250                           ;main.c: 431: if(1){
  1251  007AD2  9641               	bcf	_receber/(0+8),_receber& (0+7),c
  1252                           
  1253                           ;main.c: 432: TXREG = '\n';
  1254  007AD4  0E0A               	movlw	10
  1255  007AD6  6EAD               	movwf	4013,c	;volatile
  1256  007AD8                     l295:
  1257  007AD8  A2AC               	btfss	4012,1,c	;volatile
  1258  007ADA  D7FE               	goto	l295
  1259                           
  1260                           ;main.c: 434: char j;
  1261                           ;main.c: 435: for(j=0;j<qtd_caracteres_recebidos;j++){
  1262  007ADC  0100               	movlb	0	; () banked
  1263  007ADE  6BE2               	clrf	main@j& (0+255),b
  1264  007AE0  D006               	goto	l3784
  1265  007AE2                     l3780:
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;main.c: 436: TXREG = buffer_serial[j];
  1269  007AE2  51E2               	movf	main@j& (0+255),w,b
  1270  007AE4  DA87               	call	PL26	;call to abstracted procedure
  1271  007AE6                     l300:
  1272  007AE6  A2AC               	btfss	4012,1,c	;volatile
  1273  007AE8  D7FE               	goto	l300
  1274  007AEA  0100               	movlb	0	; () banked
  1275  007AEC  2BE2               	incf	main@j& (0+255),f,b
  1276  007AEE                     l3784:
  1277                           
  1278                           ; BSR set to: 0
  1279  007AEE  5038               	movf	_qtd_caracteres_recebidos,w,c
  1280  007AF0  5DE2               	subwf	main@j& (0+255),w,b
  1281  007AF2  E3F7               	bnc	l3780
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;main.c: 438: }
  1285                           ;main.c: 441: TXREG = '\n';
  1286  007AF4  0E0A               	movlw	10
  1287  007AF6  6EAD               	movwf	4013,c	;volatile
  1288  007AF8                     l304:
  1289  007AF8  A2AC               	btfss	4012,1,c	;volatile
  1290  007AFA  D7FE               	goto	l304
  1291                           
  1292                           ;main.c: 444: for(cont=0;cont<qtd_caracteres_recebidos;cont++){
  1293  007AFC  0100               	movlb	0	; () banked
  1294  007AFE  6BE9               	clrf	main@cont& (0+255),b
  1295  007B00  D12A               	goto	l3960
  1296  007B02                     l308:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 447: if((FLAGS_1 & (1<<0))){
  1300  007B02  A172               	btfss	_FLAGS_1& (0+255),0,b
  1301  007B04  D00C               	goto	l3794
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 449: if(buffer_serial[cont] != '>') {
  1305  007B06  51E9               	movf	main@cont& (0+255),w,b
  1306  007B08  0F74               	addlw	low _buffer_serial
  1307  007B0A  6ED9               	movwf	fsr2l,c
  1308  007B0C  6ADA               	clrf	fsr2h,c
  1309  007B0E  0E3E               	movlw	62
  1310  007B10  18DE               	xorwf	postinc2,w,c
  1311  007B12  A4D8               	btfss	status,2,c
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;main.c: 450: (FLAGS_1 |= (1<<7));}
  1315  007B14  8F72               	bsf	_FLAGS_1& (0+255),7,b
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 452: (FLAGS_1 &= ~(1<<0));
  1319  007B16  9172               	bcf	_FLAGS_1& (0+255),0,b
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;main.c: 453: ordem=0;
  1323  007B18  6BEA               	clrf	main@ordem& (0+255),b
  1324                           
  1325                           ;main.c: 454: etapa++;}
  1326  007B1A  2BE6               	incf	main@etapa& (0+255),f,b
  1327  007B1C  D10C               	goto	l3946
  1328  007B1E                     l3794:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 456: else if(etapa == 0){
  1332  007B1E  51E6               	movf	main@etapa& (0+255),w,b
  1333  007B20  E10A               	bnz	l3800
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 459: if(buffer_serial[cont] != 'I') {(FLAGS_1 |= (1<<7));}
  1337  007B22  51E9               	movf	main@cont& (0+255),w,b
  1338  007B24  0F74               	addlw	low _buffer_serial
  1339  007B26  6ED9               	movwf	fsr2l,c
  1340  007B28  6ADA               	clrf	fsr2h,c
  1341  007B2A  0E49               	movlw	73
  1342  007B2C  18DE               	xorwf	postinc2,w,c
  1343  007B2E  A4D8               	btfss	status,2,c
  1344                           
  1345                           ; BSR set to: 0
  1346  007B30  8F72               	bsf	_FLAGS_1& (0+255),7,b
  1347  007B32                     l313:
  1348                           
  1349                           ;main.c: 461: (FLAGS_1 |= (1<<0));
  1350  007B32  0100               	movlb	0	; () banked
  1351  007B34  D044               	goto	L1
  1352  007B36                     l3800:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 464: else if(etapa == 1){
  1356  007B36  05E6               	decf	main@etapa& (0+255),w,b
  1357  007B38  E115               	bnz	l3818
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 466: funcao = buffer_serial[cont++];
  1361  007B3A  51E9               	movf	main@cont& (0+255),w,b
  1362  007B3C  0F74               	addlw	low _buffer_serial
  1363  007B3E  6ED9               	movwf	fsr2l,c
  1364  007B40  6ADA               	clrf	fsr2h,c
  1365  007B42  50DF               	movf	indf2,w,c
  1366  007B44  6FE8               	movwf	main@funcao& (0+255),b
  1367                           
  1368                           ; BSR set to: 0
  1369  007B46  2BE9               	incf	main@cont& (0+255),f,b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 467: if(funcao<'0' || funcao>'7') {(FLAGS_1 |= (1<<7));}
  1373  007B48  0E2F               	movlw	47
  1374  007B4A  65E8               	cpfsgt	main@funcao& (0+255),b
  1375  007B4C  D003               	goto	l3810
  1376                           
  1377                           ; BSR set to: 0
  1378  007B4E  0E37               	movlw	55
  1379  007B50  65E8               	cpfsgt	main@funcao& (0+255),b
  1380  007B52  D001               	goto	l3812
  1381  007B54                     l3810:
  1382                           
  1383                           ; BSR set to: 0
  1384  007B54  8F72               	bsf	_FLAGS_1& (0+255),7,b
  1385  007B56                     l3812:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 469: conta = ((buffer_serial[cont]) - '0');
  1389  007B56  DA47               	call	PL22	;call to abstracted procedure
  1390  007B58  6FE7               	movwf	main@conta& (0+255),b
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 471: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  1394  007B5A  0E0F               	movlw	15
  1395  007B5C  65E7               	cpfsgt	main@conta& (0+255),b
  1396  007B5E  D7E9               	goto	l313
  1397                           
  1398                           ; BSR set to: 0
  1399  007B60  8572               	bsf	_FLAGS_1& (0+255),2,b
  1400  007B62  D7E7               	goto	l313
  1401  007B64                     l3818:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;main.c: 479: else if(etapa == 2){
  1405  007B64  0E02               	movlw	2
  1406  007B66  19E6               	xorwf	main@etapa& (0+255),w,b
  1407  007B68  E12C               	bnz	l3836
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;main.c: 481: for(ordem=0;senha[conta][ordem]!= 0;ordem++){
  1411  007B6A  6BEA               	clrf	main@ordem& (0+255),b
  1412  007B6C  D023               	goto	l3832
  1413  007B6E                     l3822:
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 482: if(senha[conta][ordem] != buffer_serial[cont++]) {
  1417  007B6E  DA25               	call	PL16	;call to abstracted procedure
  1418  007B70  51E7               	movf	main@conta& (0+255),w,b
  1419  007B72  0D11               	mullw	17
  1420  007B74  0EEB               	movlw	low _senha
  1421  007B76  6FDC               	movwf	(??_main+2)& (0+255),b
  1422  007B78  0E00               	movlw	high _senha
  1423  007B7A  6FDD               	movwf	(??_main+3)& (0+255),b
  1424  007B7C  50F3               	movf	prodl,w,c
  1425  007B7E  27DC               	addwf	(??_main+2)& (0+255),f,b
  1426  007B80  50F4               	movf	prodh,w,c
  1427  007B82  23DD               	addwfc	(??_main+3)& (0+255),f,b
  1428  007B84  51EA               	movf	main@ordem& (0+255),w,b
  1429  007B86  25DC               	addwf	(??_main+2)& (0+255),w,b
  1430  007B88  6EE1               	movwf	fsr1l,c
  1431  007B8A  0E00               	movlw	0
  1432  007B8C  21DD               	addwfc	(??_main+3)& (0+255),w,b
  1433  007B8E  6EE2               	movwf	fsr1h,c
  1434  007B90  50DE               	movf	postinc2,w,c
  1435  007B92  18E6               	xorwf	postinc1,w,c
  1436  007B94  E00D               	bz	l3830
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;main.c: 483: (FLAGS_1 |= (1<<6));
  1440  007B96  8D72               	bsf	_FLAGS_1& (0+255),6,b
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 484: TXREG = senha[conta][ordem]; while(!TRMT){}
  1444  007B98  51E7               	movf	main@conta& (0+255),w,b
  1445  007B9A  D9F5               	call	PL6	;call to abstracted procedure
  1446  007B9C  D9FE               	call	PL10	;call to abstracted procedure
  1447  007B9E  6EAD               	movwf	4013,c	;volatile
  1448  007BA0                     l325:
  1449  007BA0  A2AC               	btfss	4012,1,c	;volatile
  1450  007BA2  D7FE               	goto	l325
  1451                           
  1452                           ;main.c: 485: TXREG = buffer_serial[--cont]; while(!TRMT){}
  1453  007BA4  0100               	movlb	0	; () banked
  1454  007BA6  07E9               	decf	main@cont& (0+255),f,b
  1455  007BA8  51E9               	movf	main@cont& (0+255),w,b
  1456  007BAA  DA24               	call	PL26	;call to abstracted procedure
  1457  007BAC                     l328:
  1458  007BAC  A2AC               	btfss	4012,1,c	;volatile
  1459  007BAE  D7FE               	goto	l328
  1460  007BB0                     l3830:
  1461  007BB0  0100               	movlb	0	; () banked
  1462  007BB2  2BEA               	incf	main@ordem& (0+255),f,b
  1463  007BB4                     l3832:
  1464                           
  1465                           ; BSR set to: 0
  1466  007BB4  51E7               	movf	main@conta& (0+255),w,b
  1467  007BB6  D9E7               	call	PL6	;call to abstracted procedure
  1468  007BB8  D9F0               	call	PL10	;call to abstracted procedure
  1469  007BBA  E1D9               	bnz	l3822
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;main.c: 486: }
  1473                           ;main.c: 487: }
  1474                           ;main.c: 488: cont--;
  1475  007BBC  07E9               	decf	main@cont& (0+255),f,b
  1476  007BBE                     L1:
  1477                           
  1478                           ;main.c: 489: (FLAGS_1 |= (1<<0));
  1479  007BBE  8172               	bsf	_FLAGS_1& (0+255),0,b
  1480                           
  1481                           ;main.c: 491: }
  1482  007BC0  D0BA               	goto	l3946
  1483  007BC2                     l3836:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;main.c: 494: else if(etapa == 3){
  1487  007BC2  0E03               	movlw	3
  1488  007BC4  19E6               	xorwf	main@etapa& (0+255),w,b
  1489  007BC6  E001 D0A6          	bnz	l3936
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;main.c: 495: if(funcao == '0' || funcao == '2'){
  1493  007BCA  0E30               	movlw	48
  1494  007BCC  19E8               	xorwf	main@funcao& (0+255),w,b
  1495  007BCE  E003               	bz	l336
  1496                           
  1497                           ; BSR set to: 0
  1498  007BD0  0E32               	movlw	50
  1499  007BD2  19E8               	xorwf	main@funcao& (0+255),w,b
  1500  007BD4  E118               	bnz	l3854
  1501  007BD6                     l336:
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 497: for(ordem=0;ordem<2;ordem++){
  1505  007BD6  6BEA               	clrf	main@ordem& (0+255),b
  1506  007BD8                     l3846:
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 498: if( buffer_serial[cont++] != ('N'+(ordem))) {(FLAGS_1 |= (1<<7));}
  1510  007BD8  D9F0               	call	PL16	;call to abstracted procedure
  1511  007BDA  50DF               	movf	indf2,w,c
  1512  007BDC  6FDB               	movwf	(??_main+1)& (0+255),b
  1513  007BDE  6BDC               	clrf	(??_main+2)& (0+255),b
  1514  007BE0  51EA               	movf	main@ordem& (0+255),w,b
  1515  007BE2  6FDD               	movwf	(??_main+3)& (0+255),b
  1516  007BE4  6BDE               	clrf	(??_main+4)& (0+255),b
  1517  007BE6  0E4E               	movlw	78
  1518  007BE8  27DD               	addwf	(??_main+3)& (0+255),f,b
  1519  007BEA  0E00               	movlw	0
  1520  007BEC  23DE               	addwfc	(??_main+4)& (0+255),f,b
  1521  007BEE  51DB               	movf	(??_main+1)& (0+255),w,b
  1522  007BF0  19DD               	xorwf	(??_main+3)& (0+255),w,b
  1523  007BF2  E103               	bnz	u4590
  1524  007BF4  51DC               	movf	(??_main+2)& (0+255),w,b
  1525  007BF6  19DE               	xorwf	(??_main+4)& (0+255),w,b
  1526  007BF8  A4D8               	btfss	status,2,c
  1527  007BFA                     u4590:
  1528                           
  1529                           ; BSR set to: 0
  1530  007BFA  8F72               	bsf	_FLAGS_1& (0+255),7,b
  1531                           
  1532                           ; BSR set to: 0
  1533  007BFC  2BEA               	incf	main@ordem& (0+255),f,b
  1534                           
  1535                           ; BSR set to: 0
  1536  007BFE  0E01               	movlw	1
  1537  007C00  65EA               	cpfsgt	main@ordem& (0+255),b
  1538  007C02  D7EA               	goto	l3846
  1539  007C04  D796               	goto	l313
  1540  007C06                     l3854:
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 504: else if(funcao == '1'){
  1544  007C06  0E31               	movlw	49
  1545  007C08  19E8               	xorwf	main@funcao& (0+255),w,b
  1546  007C0A  E105               	bnz	l3860
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 506: endereco_inic_eeprom = (1794 + (buffer_serial[cont] *26));
  1550  007C0C  51EA               	movf	main@ordem& (0+255),w,b
  1551  007C0E  E001 D092          	bnz	l3946
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 508: ordem++;
  1555  007C12  2BEA               	incf	main@ordem& (0+255),f,b
  1556  007C14  D090               	goto	l3946
  1557  007C16                     l3860:
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;main.c: 513: else if(funcao == '4'){
  1561  007C16  0E34               	movlw	52
  1562  007C18  19E8               	xorwf	main@funcao& (0+255),w,b
  1563  007C1A  E13B               	bnz	l3894
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 521: ptr_data= &data_atual.ano;
  1567  007C1C  0E3A               	movlw	low _data_atual
  1568  007C1E  6F70               	movwf	_ptr_data& (0+255),b
  1569  007C20  6B71               	clrf	(_ptr_data+1)& (0+255),b
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;main.c: 523: for(ordem=0;ordem<6;ordem++){
  1573  007C22  6BEA               	clrf	main@ordem& (0+255),b
  1574  007C24                     l3868:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 524: if(buffer_serial[cont] == 'X') {
  1578  007C24  51E9               	movf	main@cont& (0+255),w,b
  1579  007C26  0F74               	addlw	low _buffer_serial
  1580  007C28  6ED9               	movwf	fsr2l,c
  1581  007C2A  6ADA               	clrf	fsr2h,c
  1582  007C2C  0E58               	movlw	88
  1583  007C2E  18DE               	xorwf	postinc2,w,c
  1584  007C30  E103               	bnz	l3874
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;main.c: 525: ordem++;
  1588  007C32  2BEA               	incf	main@ordem& (0+255),f,b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 526: cont+=2;}
  1592  007C34  0E02               	movlw	2
  1593  007C36  27E9               	addwf	main@cont& (0+255),f,b
  1594  007C38                     l3874:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;main.c: 528: *(ptr_data+ordem) = ascii_para_numero('0',buffer_serial[cont],buffer_seria
      +                          l[cont+1]);
  1598  007C38  D9C8               	call	PL18	;call to abstracted procedure
  1599  007C3A  51E9               	movf	main@cont& (0+255),w,b
  1600  007C3C  0F74               	addlw	low _buffer_serial
  1601  007C3E  6EE1               	movwf	fsr1l,c
  1602  007C40  6AE2               	clrf	fsr1h,c
  1603  007C42  50E7               	movf	indf1,w,c
  1604  007C44  6E1D               	movwf	ascii_para_numero@caractere2,c
  1605  007C46  51E9               	movf	main@cont& (0+255),w,b
  1606  007C48  0F75               	addlw	low (_buffer_serial+1)
  1607  007C4A  6EE1               	movwf	fsr1l,c
  1608  007C4C  6AE2               	clrf	fsr1h,c
  1609  007C4E  50E7               	movf	indf1,w,c
  1610  007C50  6E1E               	movwf	ascii_para_numero@caractere1,c
  1611  007C52  0E30               	movlw	48
  1612  007C54  ECCA  F037         	call	_ascii_para_numero
  1613  007C58  6EDF               	movwf	indf2,c
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;main.c: 529: char temp = *(ptr_data+ordem);
  1617  007C5A  D9B7               	call	PL18	;call to abstracted procedure
  1618  007C5C  50DF               	movf	indf2,w,c
  1619  007C5E  6FDF               	movwf	main@temp_731& (0+255),b
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 530: numero_para_ascii(temp);
  1623  007C60  51DF               	movf	main@temp_731& (0+255),w,b
  1624  007C62  EC23  F03A         	call	_numero_para_ascii
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;main.c: 531: numero_para_ascii(ordem);
  1628  007C66  51EA               	movf	main@ordem& (0+255),w,b
  1629  007C68  EC23  F03A         	call	_numero_para_ascii
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;main.c: 532: cont+=2;}
  1633  007C6C  0E02               	movlw	2
  1634  007C6E  27E9               	addwf	main@cont& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 0
  1637  007C70  2BEA               	incf	main@ordem& (0+255),f,b
  1638                           
  1639                           ; BSR set to: 0
  1640  007C72  0E05               	movlw	5
  1641  007C74  65EA               	cpfsgt	main@ordem& (0+255),b
  1642  007C76  D7D6               	goto	l3868
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;main.c: 534: data_atual.dia_da_semana = dia_da_semana(data_atual.ano,data_atual.mes,dat
      +                          a_atual.dia);
  1646  007C78  C03A  F0C4         	movff	_data_atual,dia_da_semana@ano
  1647  007C7C  6BC5               	clrf	(dia_da_semana@ano+1)& (0+255),b
  1648  007C7E  C03B  F0C6         	movff	_data_atual+1,dia_da_semana@mes
  1649  007C82  C03C  F0C7         	movff	_data_atual+2,dia_da_semana@dia
  1650  007C86  EC03  F03B         	call	_dia_da_semana	;wreg free
  1651  007C8A  6E40               	movwf	_data_atual+6,c
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 535: (FLAGS_1 |= (1<<0));
  1655  007C8C  8172               	bsf	_FLAGS_1& (0+255),0,b
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 536: cont--;
  1659  007C8E  07E9               	decf	main@cont& (0+255),f,b
  1660                           
  1661                           ;main.c: 537: }
  1662  007C90  D052               	goto	l3946
  1663  007C92                     l3894:
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;main.c: 539: else if(funcao == '7'){
  1667  007C92  0E37               	movlw	55
  1668  007C94  19E8               	xorwf	main@funcao& (0+255),w,b
  1669  007C96  E14F               	bnz	l3946
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 541: conta_a_ser_alterada = (buffer_serial[cont] - '0');
  1673  007C98  D9A6               	call	PL22	;call to abstracted procedure
  1674  007C9A  6FE4               	movwf	main@conta_a_ser_alterada& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 543: if( conta_a_ser_alterada != conta && (!((((conta*16)+ (16-1)) & (1<<6)))) 
      +                          ){
  1678  007C9C  19E7               	xorwf	main@conta& (0+255),w,b
  1679  007C9E  E008               	bz	l3904
  1680                           
  1681                           ; BSR set to: 0
  1682  007CA0  51E7               	movf	main@conta& (0+255),w,b
  1683  007CA2  0D10               	mullw	16
  1684  007CA4  CFF3 F0DA          	movff	prodl,??_main
  1685  007CA8  0E0F               	movlw	15
  1686  007CAA  27DA               	addwf	??_main& (0+255),f,b
  1687  007CAC  ADDA               	btfss	??_main& (0+255),6,b
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 544: (FLAGS_1 |= (1<<3));
  1691  007CAE  8772               	bsf	_FLAGS_1& (0+255),3,b
  1692  007CB0                     l3904:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;main.c: 545: }
  1696                           ;main.c: 547: for(ordem=0;ordem<(16-1);ordem++){
  1697  007CB0  6BEA               	clrf	main@ordem& (0+255),b
  1698  007CB2                     l3910:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 548: cont++;
  1702  007CB2  2BE9               	incf	main@cont& (0+255),f,b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 550: if(buffer_serial[cont] == '<') {
  1706  007CB4  51E9               	movf	main@cont& (0+255),w,b
  1707  007CB6  0F74               	addlw	low _buffer_serial
  1708  007CB8  6ED9               	movwf	fsr2l,c
  1709  007CBA  6ADA               	clrf	fsr2h,c
  1710  007CBC  0E3C               	movlw	60
  1711  007CBE  18DE               	xorwf	postinc2,w,c
  1712  007CC0  E110               	bnz	l3924
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 551: if(ordem<5) (FLAGS_1 |= (1<<7));
  1716  007CC2  0E05               	movlw	5
  1717  007CC4  61EA               	cpfslt	main@ordem& (0+255),b
  1718  007CC6  D002               	goto	l3918
  1719                           
  1720                           ; BSR set to: 0
  1721  007CC8  8F72               	bsf	_FLAGS_1& (0+255),7,b
  1722  007CCA  D01F               	goto	l3930
  1723  007CCC                     l3918:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 553: else {
  1727                           ;main.c: 554: if(ordem<16-2) (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16)+ordem),
      +                          0));
  1728  007CCC  0E0E               	movlw	14
  1729  007CCE  61EA               	cpfslt	main@ordem& (0+255),b
  1730  007CD0  D730               	goto	l313
  1731                           
  1732                           ; BSR set to: 0
  1733  007CD2  EC88  F037         	call	_Busy_eep	;wreg free
  1734  007CD6  D949               	call	PL4	;call to abstracted procedure
  1735  007CD8  D97F               	call	PL20	;call to abstracted procedure
  1736  007CDA  6A1F               	clrf	Write_b_eep@bdat,c
  1737  007CDC  EC75  F038         	call	_Write_b_eep	;wreg free
  1738  007CE0  D728               	goto	l313
  1739  007CE2                     l3924:
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 559: else{
  1743                           ;main.c: 561: senha[conta_a_ser_alterada][ordem] = buffer_serial[cont];
  1744  007CE2  51E9               	movf	main@cont& (0+255),w,b
  1745  007CE4  0F74               	addlw	low _buffer_serial
  1746  007CE6  6ED9               	movwf	fsr2l,c
  1747  007CE8  6ADA               	clrf	fsr2h,c
  1748  007CEA  51E4               	movf	main@conta_a_ser_alterada& (0+255),w,b
  1749  007CEC  D94C               	call	PL6	;call to abstracted procedure
  1750  007CEE  51EA               	movf	main@ordem& (0+255),w,b
  1751  007CF0  D95C               	call	PL14	;call to abstracted procedure
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 562: (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16)+ordem),buffer_serial[c
      +                          ont]));}
  1755  007CF2  EC88  F037         	call	_Busy_eep	;wreg free
  1756  007CF6  D939               	call	PL4	;call to abstracted procedure
  1757  007CF8  D96F               	call	PL20	;call to abstracted procedure
  1758  007CFA  51E9               	movf	main@cont& (0+255),w,b
  1759  007CFC  0F74               	addlw	low _buffer_serial
  1760  007CFE  6ED9               	movwf	fsr2l,c
  1761  007D00  6ADA               	clrf	fsr2h,c
  1762  007D02  50DF               	movf	indf2,w,c
  1763  007D04  6E1F               	movwf	Write_b_eep@bdat,c
  1764  007D06  EC75  F038         	call	_Write_b_eep	;wreg free
  1765  007D0A                     l3930:
  1766  007D0A  0100               	movlb	0	; () banked
  1767  007D0C  2BEA               	incf	main@ordem& (0+255),f,b
  1768                           
  1769                           ; BSR set to: 0
  1770  007D0E  0E0E               	movlw	14
  1771  007D10  65EA               	cpfsgt	main@ordem& (0+255),b
  1772  007D12  D7CF               	goto	l3910
  1773  007D14  D70E               	goto	l313
  1774  007D16                     l3936:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 569: else if(etapa == 4){
  1778  007D16  0E04               	movlw	4
  1779  007D18  19E6               	xorwf	main@etapa& (0+255),w,b
  1780  007D1A  E10D               	bnz	l3946
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 570: if(buffer_serial[cont] != 'F') {(FLAGS_1 |= (1<<7));}
  1784  007D1C  51E9               	movf	main@cont& (0+255),w,b
  1785  007D1E  0F74               	addlw	low _buffer_serial
  1786  007D20  6ED9               	movwf	fsr2l,c
  1787  007D22  6ADA               	clrf	fsr2h,c
  1788  007D24  0E46               	movlw	70
  1789  007D26  18DE               	xorwf	postinc2,w,c
  1790  007D28  A4D8               	btfss	status,2,c
  1791                           
  1792                           ; BSR set to: 0
  1793  007D2A  8F72               	bsf	_FLAGS_1& (0+255),7,b
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 571: enviar=1; receber=qtd_caracteres_recebidos=0;}
  1797  007D2C  8241               	bsf	_enviar/(0+8),_enviar& (0+7),c
  1798                           
  1799                           ; BSR set to: 0
  1800  007D2E  6A38               	clrf	_qtd_caracteres_recebidos,c
  1801  007D30  9641               	bcf	_receber/(0+8),_receber& (0+7),c
  1802  007D32  B038               	btfsc	_qtd_caracteres_recebidos,0,c
  1803  007D34  8641               	bsf	_receber/(0+8),_receber& (0+7),c
  1804  007D36                     l3946:
  1805                           
  1806                           ;main.c: 575: if(FLAGS_1>3) {
  1807  007D36  0E03               	movlw	3
  1808  007D38  0100               	movlb	0	; () banked
  1809  007D3A  6572               	cpfsgt	_FLAGS_1& (0+255),b
  1810  007D3C  D00A               	goto	l3958
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 576: (FLAGS_1 &= ~(1<<0));
  1814  007D3E  9172               	bcf	_FLAGS_1& (0+255),0,b
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;main.c: 577: TXREG = '0' + etapa;
  1818  007D40  51E6               	movf	main@etapa& (0+255),w,b
  1819  007D42  0F30               	addlw	48
  1820  007D44  6EAD               	movwf	4013,c	;volatile
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 578: etapa = 0;
  1824  007D46  6BE6               	clrf	main@etapa& (0+255),b
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 579: enviar=1;
  1828  007D48  8241               	bsf	_enviar/(0+8),_enviar& (0+7),c
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 580: receber=qtd_caracteres_recebidos=0;}
  1832  007D4A  6A38               	clrf	_qtd_caracteres_recebidos,c
  1833  007D4C  9641               	bcf	_receber/(0+8),_receber& (0+7),c
  1834  007D4E  B038               	btfsc	_qtd_caracteres_recebidos,0,c
  1835  007D50  8641               	bsf	_receber/(0+8),_receber& (0+7),c
  1836  007D52                     l3958:
  1837  007D52  0100               	movlb	0	; () banked
  1838  007D54  2BE9               	incf	main@cont& (0+255),f,b
  1839  007D56                     l3960:
  1840                           
  1841                           ; BSR set to: 0
  1842  007D56  5038               	movf	_qtd_caracteres_recebidos,w,c
  1843  007D58  5DE9               	subwf	main@cont& (0+255),w,b
  1844  007D5A  E201 D6D2          	bnc	l308
  1845  007D5E                     l293:
  1846                           
  1847                           ;main.c: 586: }
  1848                           ;main.c: 587: }
  1849                           ;main.c: 589: if(enviar==1){
  1850  007D5E  A241               	btfss	_enviar/(0+8),_enviar& (0+7),c
  1851  007D60  D0D5               	goto	l4058
  1852                           
  1853                           ;main.c: 590: enviar=0;
  1854  007D62  9241               	bcf	_enviar/(0+8),_enviar& (0+7),c
  1855                           
  1856                           ;main.c: 591: qtd_caracteres_recebidos=0;
  1857  007D64  6A38               	clrf	_qtd_caracteres_recebidos,c
  1858                           
  1859                           ;main.c: 592: memset(buffer_serial,0, 80);
  1860  007D66  6A22               	clrf	memset@c+1,c
  1861  007D68  6A21               	clrf	memset@c,c
  1862  007D6A  6A24               	clrf	memset@n+1,c
  1863  007D6C  0E50               	movlw	80
  1864  007D6E  6E23               	movwf	memset@n,c
  1865  007D70  0E74               	movlw	_buffer_serial& (0+255)
  1866  007D72  EC34  F038         	call	_memset
  1867                           
  1868                           ;main.c: 593: TXREG = '\n';
  1869  007D76  0E0A               	movlw	10
  1870  007D78  6EAD               	movwf	4013,c	;volatile
  1871  007D7A                     l366:
  1872  007D7A  A2AC               	btfss	4012,1,c	;volatile
  1873  007D7C  D7FE               	goto	l366
  1874                           
  1875                           ;main.c: 595: TXREG = 'I';
  1876  007D7E  0E49               	movlw	73
  1877  007D80  6EAD               	movwf	4013,c	;volatile
  1878  007D82                     l369:
  1879  007D82  A2AC               	btfss	4012,1,c	;volatile
  1880  007D84  D7FE               	goto	l369
  1881                           
  1882                           ;main.c: 598: if(FLAGS_1<4 && etapa == 4){
  1883  007D86  0E04               	movlw	4
  1884  007D88  0100               	movlb	0	; () banked
  1885  007D8A  6172               	cpfslt	_FLAGS_1& (0+255),b
  1886  007D8C  D071               	goto	l372
  1887                           
  1888                           ; BSR set to: 0
  1889  007D8E  19E6               	xorwf	main@etapa& (0+255),w,b
  1890  007D90  E16F               	bnz	l372
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 599: etapa = 0;
  1894  007D92  6BE6               	clrf	main@etapa& (0+255),b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;main.c: 600: TXREG = 'O';
  1898  007D94  0E4F               	movlw	79
  1899  007D96  6EAD               	movwf	4013,c	;volatile
  1900  007D98                     l373:
  1901  007D98  A2AC               	btfss	4012,1,c	;volatile
  1902  007D9A  D7FE               	goto	l373
  1903                           
  1904                           ;main.c: 602: TXREG = 'K';
  1905  007D9C  0E4B               	movlw	75
  1906  007D9E  6EAD               	movwf	4013,c	;volatile
  1907  007DA0                     l376:
  1908  007DA0  A2AC               	btfss	4012,1,c	;volatile
  1909  007DA2  D7FE               	goto	l376
  1910                           
  1911                           ;main.c: 605: if(funcao == '2'){
  1912  007DA4  0E32               	movlw	50
  1913  007DA6  0100               	movlb	0	; () banked
  1914  007DA8  19E8               	xorwf	main@funcao& (0+255),w,b
  1915  007DAA  E121               	bnz	l3984
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 606: numero_para_ascii(data_atual.ano);
  1919  007DAC  503A               	movf	_data_atual,w,c
  1920  007DAE  EC23  F03A         	call	_numero_para_ascii
  1921                           
  1922                           ;main.c: 607: numero_para_ascii(data_atual.mes);
  1923  007DB2  503B               	movf	_data_atual+1,w,c
  1924  007DB4  EC23  F03A         	call	_numero_para_ascii
  1925                           
  1926                           ;main.c: 608: numero_para_ascii(data_atual.dia_da_semana);
  1927  007DB8  5040               	movf	_data_atual+6,w,c
  1928  007DBA  EC23  F03A         	call	_numero_para_ascii
  1929                           
  1930                           ;main.c: 609: numero_para_ascii(data_atual.dia);
  1931  007DBE  503C               	movf	_data_atual+2,w,c
  1932  007DC0  EC23  F03A         	call	_numero_para_ascii
  1933                           
  1934                           ;main.c: 610: numero_para_ascii(data_atual.hora);
  1935  007DC4  503D               	movf	_data_atual+3,w,c
  1936  007DC6  EC23  F03A         	call	_numero_para_ascii
  1937                           
  1938                           ;main.c: 611: numero_para_ascii(data_atual.minuto);
  1939  007DCA  503E               	movf	_data_atual+4,w,c
  1940  007DCC  EC23  F03A         	call	_numero_para_ascii
  1941                           
  1942                           ;main.c: 612: numero_para_ascii(data_atual.segundo);
  1943  007DD0  503F               	movf	_data_atual+5,w,c
  1944  007DD2  EC23  F03A         	call	_numero_para_ascii
  1945                           
  1946                           ;main.c: 613: numero_para_ascii(qtd_total_contas);
  1947  007DD6  51E3               	movf	main@qtd_total_contas& (0+255),w,b
  1948  007DD8  EC23  F03A         	call	_numero_para_ascii
  1949                           
  1950                           ;main.c: 614: numero_para_ascii(16);
  1951  007DDC  0E10               	movlw	16
  1952  007DDE  EC23  F03A         	call	_numero_para_ascii
  1953  007DE2  0E01               	movlw	1
  1954                           
  1955                           ;main.c: 615: numero_para_ascii(PORTAbits.RA0);}
  1956  007DE4  A080               	btfss	3968,0,c	;volatile
  1957  007DE6  0E00               	movlw	0
  1958  007DE8  EC23  F03A         	call	_numero_para_ascii
  1959  007DEC  D088               	goto	l4056
  1960  007DEE                     l3984:
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;main.c: 618: else if(funcao == '7'){
  1964  007DEE  0E37               	movlw	55
  1965  007DF0  19E8               	xorwf	main@funcao& (0+255),w,b
  1966  007DF2  E128               	bnz	l4000
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;main.c: 619: char i=0;
  1970  007DF4  6BE5               	clrf	main@i& (0+255),b
  1971  007DF6                     l3988:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 621: senha[conta_a_ser_alterada][i] = nova_senha[i];
  1975  007DF6  51E5               	movf	main@i& (0+255),w,b
  1976  007DF8  0F60               	addlw	low _nova_senha
  1977  007DFA  6ED9               	movwf	fsr2l,c
  1978  007DFC  6ADA               	clrf	fsr2h,c
  1979  007DFE  51E4               	movf	main@conta_a_ser_alterada& (0+255),w,b
  1980  007E00  D8C2               	call	PL6	;call to abstracted procedure
  1981  007E02  51E5               	movf	main@i& (0+255),w,b
  1982  007E04  D8D2               	call	PL14	;call to abstracted procedure
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;main.c: 622: (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16) + i),nova_senha[i]));
  1986  007E06  EC88  F037         	call	_Busy_eep	;wreg free
  1987  007E0A  D8AF               	call	PL4	;call to abstracted procedure
  1988  007E0C  51E5               	movf	main@i& (0+255),w,b
  1989  007E0E  25DA               	addwf	??_main& (0+255),w,b
  1990  007E10  6E1D               	movwf	Write_b_eep@badd,c
  1991  007E12  0E00               	movlw	0
  1992  007E14  21DB               	addwfc	(??_main+1)& (0+255),w,b
  1993  007E16  6E1E               	movwf	Write_b_eep@badd+1,c
  1994  007E18  51E5               	movf	main@i& (0+255),w,b
  1995  007E1A  0F60               	addlw	low _nova_senha
  1996  007E1C  6ED9               	movwf	fsr2l,c
  1997  007E1E  6ADA               	clrf	fsr2h,c
  1998  007E20  50DF               	movf	indf2,w,c
  1999  007E22  6E1F               	movwf	Write_b_eep@bdat,c
  2000  007E24  EC75  F038         	call	_Write_b_eep	;wreg free
  2001  007E28                     l383:
  2002  007E28  B2A6               	btfsc	4006,1,c	;volatile
  2003  007E2A  D7FE               	goto	l383
  2004                           
  2005                           ;main.c: 624: i++;} while(nova_senha[i-1] && i<16);
  2006  007E2C  0100               	movlb	0	; () banked
  2007  007E2E  2BE5               	incf	main@i& (0+255),f,b
  2008                           
  2009                           ; BSR set to: 0
  2010  007E30  51E5               	movf	main@i& (0+255),w,b
  2011  007E32  0F5F               	addlw	low (_nova_senha+255)
  2012  007E34  6ED9               	movwf	fsr2l,c
  2013  007E36  6ADA               	clrf	fsr2h,c
  2014  007E38  50DF               	movf	indf2,w,c
  2015  007E3A  E061               	bz	l4056
  2016                           
  2017                           ; BSR set to: 0
  2018  007E3C  0E0F               	movlw	15
  2019  007E3E  65E5               	cpfsgt	main@i& (0+255),b
  2020  007E40  D7DA               	goto	l3988
  2021  007E42  D05D               	goto	l4056
  2022  007E44                     l4000:
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;main.c: 627: else if(funcao == '0'){
  2026  007E44  0E30               	movlw	48
  2027  007E46  19E8               	xorwf	main@funcao& (0+255),w,b
  2028  007E48  E010               	bz	l4012
  2029  007E4A  D059               	goto	l4056
  2030  007E4C                     l392:
  2031                           
  2032                           ;main.c: 630: PORTCbits.RC0=1;
  2033  007E4C  8082               	bsf	3970,0,c	;volatile
  2034                           
  2035                           ;main.c: 631: delay_ms(325);
  2036  007E4E  0E01               	movlw	1
  2037  007E50  6E1E               	movwf	delay_ms@delay_total+1,c
  2038  007E52  0E45               	movlw	69
  2039  007E54  6E1D               	movwf	delay_ms@delay_total,c
  2040  007E56  EC47  F038         	call	_delay_ms	;wreg free
  2041                           
  2042                           ;main.c: 632: PORTCbits.RC0=0;
  2043  007E5A  9082               	bcf	3970,0,c	;volatile
  2044                           
  2045                           ;main.c: 633: if(PORTAbits.RA0 == 0) delay_ms(100);
  2046  007E5C  B080               	btfsc	3968,0,c	;volatile
  2047  007E5E  D005               	goto	l4012
  2048  007E60  6A1E               	clrf	delay_ms@delay_total+1,c
  2049  007E62  0E64               	movlw	100
  2050  007E64  6E1D               	movwf	delay_ms@delay_total,c
  2051  007E66  EC47  F038         	call	_delay_ms	;wreg free
  2052  007E6A                     l4012:
  2053  007E6A  B080               	btfsc	3968,0,c	;volatile
  2054  007E6C  D048               	goto	l4056
  2055  007E6E  D7EE               	goto	l392
  2056  007E70                     l372:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;main.c: 639: else{
  2060                           ;main.c: 640: etapa = 0;
  2061  007E70  6BE6               	clrf	main@etapa& (0+255),b
  2062                           
  2063                           ;main.c: 641: cont=qtd_caracteres_recebidos=0;
  2064  007E72  6A38               	clrf	_qtd_caracteres_recebidos,c
  2065  007E74  6BE9               	clrf	main@cont& (0+255),b
  2066                           
  2067                           ;main.c: 643: if((FLAGS_1 & (1<<3))){
  2068  007E76  A772               	btfss	_FLAGS_1& (0+255),3,b
  2069  007E78  D00A               	goto	l4020
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;main.c: 644: TXREG = 'E';
  2073  007E7A  0E45               	movlw	69
  2074  007E7C  6EAD               	movwf	4013,c	;volatile
  2075  007E7E                     l397:
  2076  007E7E  A2AC               	btfss	4012,1,c	;volatile
  2077  007E80  D7FE               	goto	l397
  2078                           
  2079                           ;main.c: 646: TXREG = 'N';
  2080  007E82  0E4E               	movlw	78
  2081  007E84  6EAD               	movwf	4013,c	;volatile
  2082  007E86                     l400:
  2083  007E86  A2AC               	btfss	4012,1,c	;volatile
  2084  007E88  D7FE               	goto	l400
  2085                           
  2086                           ;main.c: 649: (FLAGS_1 &= ~(1<<3));}
  2087  007E8A  0100               	movlb	0	; () banked
  2088  007E8C  9772               	bcf	_FLAGS_1& (0+255),3,b
  2089  007E8E                     l4020:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 651: if((FLAGS_1 & (1<<7))){
  2093  007E8E  AF72               	btfss	_FLAGS_1& (0+255),7,b
  2094  007E90  D012               	goto	l4032
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;main.c: 652: TXREG = 'E';
  2098  007E92  0E45               	movlw	69
  2099  007E94  6EAD               	movwf	4013,c	;volatile
  2100  007E96                     l404:
  2101  007E96  A2AC               	btfss	4012,1,c	;volatile
  2102  007E98  D7FE               	goto	l404
  2103                           
  2104                           ;main.c: 654: TXREG = 'P';
  2105  007E9A  0E50               	movlw	80
  2106  007E9C  6EAD               	movwf	4013,c	;volatile
  2107  007E9E                     l407:
  2108  007E9E  A2AC               	btfss	4012,1,c	;volatile
  2109  007EA0  D7FE               	goto	l407
  2110                           
  2111                           ;main.c: 656: if(funcao == '7'){
  2112  007EA2  0E37               	movlw	55
  2113  007EA4  0100               	movlb	0	; () banked
  2114  007EA6  19E8               	xorwf	main@funcao& (0+255),w,b
  2115  007EA8  E104               	bnz	l4030
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;main.c: 657: TXREG = 'S';
  2119  007EAA  0E53               	movlw	83
  2120  007EAC  6EAD               	movwf	4013,c	;volatile
  2121  007EAE                     l411:
  2122  007EAE  A2AC               	btfss	4012,1,c	;volatile
  2123  007EB0  D7FE               	goto	l411
  2124  007EB2                     l4030:
  2125                           
  2126                           ;main.c: 659: }
  2127                           ;main.c: 661: (FLAGS_1 &= ~(1<<7));}
  2128  007EB2  0100               	movlb	0	; () banked
  2129  007EB4  9F72               	bcf	_FLAGS_1& (0+255),7,b
  2130  007EB6                     l4032:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;main.c: 663: if((FLAGS_1 & (1<<4))){
  2134  007EB6  A972               	btfss	_FLAGS_1& (0+255),4,b
  2135  007EB8  D00A               	goto	l4040
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 665: TXREG = 'E';
  2139  007EBA  0E45               	movlw	69
  2140  007EBC  6EAD               	movwf	4013,c	;volatile
  2141  007EBE                     l415:
  2142  007EBE  A2AC               	btfss	4012,1,c	;volatile
  2143  007EC0  D7FE               	goto	l415
  2144                           
  2145                           ;main.c: 667: TXREG = 'C';
  2146  007EC2  0E43               	movlw	67
  2147  007EC4  6EAD               	movwf	4013,c	;volatile
  2148  007EC6                     l418:
  2149  007EC6  A2AC               	btfss	4012,1,c	;volatile
  2150  007EC8  D7FE               	goto	l418
  2151                           
  2152                           ;main.c: 669: (FLAGS_1 &= ~(1<<4));}
  2153  007ECA  0100               	movlb	0	; () banked
  2154  007ECC  9972               	bcf	_FLAGS_1& (0+255),4,b
  2155  007ECE                     l4040:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 672: if((FLAGS_1 & (1<<6))){
  2159  007ECE  AD72               	btfss	_FLAGS_1& (0+255),6,b
  2160  007ED0  D00A               	goto	l4048
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;main.c: 673: TXREG = 'E';
  2164  007ED2  0E45               	movlw	69
  2165  007ED4  6EAD               	movwf	4013,c	;volatile
  2166  007ED6                     l422:
  2167  007ED6  A2AC               	btfss	4012,1,c	;volatile
  2168  007ED8  D7FE               	goto	l422
  2169                           
  2170                           ;main.c: 675: TXREG = 'S';
  2171  007EDA  0E53               	movlw	83
  2172  007EDC  6EAD               	movwf	4013,c	;volatile
  2173  007EDE                     l425:
  2174  007EDE  A2AC               	btfss	4012,1,c	;volatile
  2175  007EE0  D7FE               	goto	l425
  2176                           
  2177                           ;main.c: 677: (FLAGS_1 &= ~(1<<6));}
  2178  007EE2  0100               	movlb	0	; () banked
  2179  007EE4  9D72               	bcf	_FLAGS_1& (0+255),6,b
  2180  007EE6                     l4048:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;main.c: 679: if((FLAGS_1 & (1<<2))){
  2184  007EE6  A572               	btfss	_FLAGS_1& (0+255),2,b
  2185  007EE8  D00A               	goto	l4056
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;main.c: 680: TXREG = 'E';
  2189  007EEA  0E45               	movlw	69
  2190  007EEC  6EAD               	movwf	4013,c	;volatile
  2191  007EEE                     l429:
  2192  007EEE  A2AC               	btfss	4012,1,c	;volatile
  2193  007EF0  D7FE               	goto	l429
  2194                           
  2195                           ;main.c: 682: TXREG = 'I';
  2196  007EF2  0E49               	movlw	73
  2197  007EF4  6EAD               	movwf	4013,c	;volatile
  2198  007EF6                     l432:
  2199  007EF6  A2AC               	btfss	4012,1,c	;volatile
  2200  007EF8  D7FE               	goto	l432
  2201                           
  2202                           ;main.c: 684: (FLAGS_1 &= ~(1<<2));}
  2203  007EFA  0100               	movlb	0	; () banked
  2204  007EFC  9572               	bcf	_FLAGS_1& (0+255),2,b
  2205  007EFE                     l4056:
  2206                           
  2207                           ;main.c: 685: }
  2208                           ;main.c: 689: TXREG='F';
  2209  007EFE  0E46               	movlw	70
  2210  007F00  6EAD               	movwf	4013,c	;volatile
  2211  007F02                     l435:
  2212  007F02  A2AC               	btfss	4012,1,c	;volatile
  2213  007F04  D7FE               	goto	l435
  2214                           
  2215                           ;main.c: 691: PORTB_SR = PORTB;
  2216  007F06  CF81 F035          	movff	3969,_PORTB_SR	;volatile
  2217                           
  2218                           ;main.c: 692: RBIE=1;}
  2219  007F0A  86F2               	bsf	intcon,3,c	;volatile
  2220  007F0C                     l4058:
  2221                           
  2222                           ;main.c: 696: if((PORTB&0xF0) == 0xF0 && RBIE==0 && debounce==1 && modo_bluetooth_teclad
      +                          o==1){
  2223  007F0C  5081               	movf	3969,w,c	;volatile
  2224  007F0E  0BF0               	andlw	240
  2225  007F10  0AF0               	xorlw	240
  2226  007F12  B4D8               	btfsc	status,2,c
  2227  007F14  B6F2               	btfsc	intcon,3,c	;volatile
  2228  007F16  D5DB               	goto	l292
  2229  007F18  B041               	btfsc	_debounce/(0+8),_debounce& (0+7),c
  2230  007F1A  A441               	btfss	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  2231  007F1C  D5D8               	goto	l292
  2232                           
  2233                           ;main.c: 698: delay_ms(60);
  2234  007F1E  6A1E               	clrf	delay_ms@delay_total+1,c
  2235  007F20  0E3C               	movlw	60
  2236  007F22  6E1D               	movwf	delay_ms@delay_total,c
  2237  007F24  EC47  F038         	call	_delay_ms	;wreg free
  2238                           
  2239                           ;main.c: 700: if((FLAGS_2 & (1<<4)) && !TMR1ON) {
  2240  007F28  0100               	movlb	0	; () banked
  2241  007F2A  B973               	btfsc	_FLAGS_2& (0+255),4,b
  2242                           
  2243                           ; BSR set to: 0
  2244  007F2C  B0CD               	btfsc	4045,0,c	;volatile
  2245  007F2E  D003               	goto	l4074
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;main.c: 702: TMR1ON=1;
  2249  007F30  80CD               	bsf	4045,0,c	;volatile
  2250                           
  2251                           ;main.c: 703: ultimo_caractere_recebido=0;}
  2252  007F32  6BE0               	clrf	main@ultimo_caractere_recebido& (0+255),b
  2253  007F34  D015               	goto	l440
  2254  007F36                     l4074:
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;main.c: 705: else if(caractere_recebido == ultimo_caractere_recebido){
  2258  007F36  51E0               	movf	main@ultimo_caractere_recebido& (0+255),w,b
  2259  007F38  1836               	xorwf	_caractere_recebido,w,c
  2260  007F3A  E10F               	bnz	l441
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;main.c: 707: if(++qtd_vezes_mesma_tecla_pressionada == 3 || ( (qtd_vezes_mesma_tecla_pr
      +                          essionada>3-1) && caractere_recebido == '9')){
  2264  007F3C  2A39               	incf	_qtd_vezes_mesma_tecla_pressionada,f,c
  2265  007F3E  0E03               	movlw	3
  2266  007F40  1839               	xorwf	_qtd_vezes_mesma_tecla_pressionada,w,c
  2267  007F42  E006               	bz	l444
  2268                           
  2269                           ; BSR set to: 0
  2270  007F44  0E02               	movlw	2
  2271  007F46  6439               	cpfsgt	_qtd_vezes_mesma_tecla_pressionada,c
  2272  007F48  D00B               	goto	l440
  2273                           
  2274                           ; BSR set to: 0
  2275  007F4A  0E39               	movlw	57
  2276  007F4C  1836               	xorwf	_caractere_recebido,w,c
  2277  007F4E  E108               	bnz	l440
  2278  007F50                     l444:
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 708: TMR1ON=0;
  2282  007F50  90CD               	bcf	4045,0,c	;volatile
  2283                           
  2284                           ;main.c: 709: TMR1H=TMR1L=0;
  2285  007F52  6ACE               	clrf	4046,c	;volatile
  2286  007F54  6ACF               	clrf	4047,c	;volatile
  2287                           
  2288                           ;main.c: 710: qtd_vezes_mesma_tecla_pressionada=0;}
  2289  007F56  6A39               	clrf	_qtd_vezes_mesma_tecla_pressionada,c
  2290  007F58  D003               	goto	l440
  2291  007F5A                     l441:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 715: else if((FLAGS_2 & (1<<4))) {
  2295  007F5A  B973               	btfsc	_FLAGS_2& (0+255),4,b
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;main.c: 716: ultimo_caractere_recebido=caractere_recebido;}
  2299  007F5C  C036  F0E0         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  2300  007F60                     l440:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;main.c: 719: PORTB_SR=PORTB;
  2304  007F60  CF81 F035          	movff	3969,_PORTB_SR	;volatile
  2305                           
  2306                           ;main.c: 720: RBIE=1;
  2307  007F64  86F2               	bsf	intcon,3,c	;volatile
  2308                           
  2309                           ;main.c: 721: debounce=0;
  2310  007F66  9041               	bcf	_debounce/(0+8),_debounce& (0+7),c
  2311  007F68  D5B2               	goto	l292
  2312  007F6A                     __end_of_main:
  2313                           	opt stack 0
  2314  007F6A                     PL4:
  2315                           	opt stack 26
  2316  007F6A  0100               	movlb	0	; () banked
  2317  007F6C  51E4               	movf	main@conta_a_ser_alterada& (0+255),w,b
  2318  007F6E  6FDA               	movwf	??_main& (0+255),b
  2319  007F70  6BDB               	clrf	(??_main+1)& (0+255),b
  2320  007F72  3BDA               	swapf	??_main& (0+255),f,b
  2321  007F74  3BDB               	swapf	(??_main+1)& (0+255),f,b
  2322  007F76  0EF0               	movlw	240
  2323  007F78  17DB               	andwf	(??_main+1)& (0+255),f,b
  2324  007F7A  51DA               	movf	??_main& (0+255),w,b
  2325  007F7C  0B0F               	andlw	15
  2326  007F7E  13DB               	iorwf	(??_main+1)& (0+255),f,b
  2327  007F80  0EF0               	movlw	240
  2328  007F82  17DA               	andwf	??_main& (0+255),f,b
  2329  007F84  0CF0               	retlw	240
  2330  007F86                     __end_ofPL4:
  2331                           	opt stack 0
  2332  007F86                     PL6:
  2333                           	opt stack 26
  2334  007F86  0D11               	mullw	17
  2335  007F88  0EEB               	movlw	low _senha
  2336  007F8A  6FDA               	movwf	??_main& (0+255),b
  2337  007F8C  0E00               	movlw	high _senha
  2338  007F8E  6FDB               	movwf	(??_main+1)& (0+255),b
  2339  007F90  50F3               	movf	prodl,w,c
  2340  007F92  27DA               	addwf	??_main& (0+255),f,b
  2341  007F94  50F4               	movf	prodh,w,c
  2342  007F96  23DB               	addwfc	(??_main+1)& (0+255),f,b
  2343  007F98  0012               	return	
  2344  007F9A                     __end_ofPL6:
  2345                           	opt stack 0
  2346  007F9A                     PL10:
  2347                           	opt stack 26
  2348  007F9A  51EA               	movf	main@ordem& (0+255),w,b
  2349  007F9C  25DA               	addwf	??_main& (0+255),w,b
  2350  007F9E  6ED9               	movwf	fsr2l,c
  2351  007FA0  0E00               	movlw	0
  2352  007FA2  21DB               	addwfc	(??_main+1)& (0+255),w,b
  2353  007FA4  6EDA               	movwf	fsr2h,c
  2354  007FA6  50DF               	movf	indf2,w,c
  2355  007FA8  0012               	return	
  2356  007FAA                     __end_ofPL10:
  2357                           	opt stack 0
  2358  007FAA                     PL14:
  2359                           	opt stack 26
  2360  007FAA  25DA               	addwf	??_main& (0+255),w,b
  2361  007FAC  6EE1               	movwf	fsr1l,c
  2362  007FAE  0E00               	movlw	0
  2363  007FB0  21DB               	addwfc	(??_main+1)& (0+255),w,b
  2364  007FB2  6EE2               	movwf	fsr1h,c
  2365  007FB4  CFDF FFE7          	movff	indf2,indf1
  2366  007FB8  0012               	return	
  2367  007FBA                     __end_ofPL14:
  2368                           	opt stack 0
  2369  007FBA                     PL16:
  2370                           	opt stack 26
  2371  007FBA  2BE9               	incf	main@cont& (0+255),f,b
  2372  007FBC  05E9               	decf	main@cont& (0+255),w,b
  2373  007FBE  6FDA               	movwf	??_main& (0+255),b
  2374  007FC0  51DA               	movf	??_main& (0+255),w,b
  2375  007FC2  0F74               	addlw	low _buffer_serial
  2376  007FC4  6ED9               	movwf	fsr2l,c
  2377  007FC6  6ADA               	clrf	fsr2h,c
  2378  007FC8  0012               	return	
  2379  007FCA                     __end_ofPL16:
  2380                           	opt stack 0
  2381  007FCA                     PL18:
  2382                           	opt stack 26
  2383  007FCA  51EA               	movf	main@ordem& (0+255),w,b
  2384  007FCC  2570               	addwf	_ptr_data& (0+255),w,b
  2385  007FCE  6ED9               	movwf	fsr2l,c
  2386  007FD0  0E00               	movlw	0
  2387  007FD2  2171               	addwfc	(_ptr_data+1)& (0+255),w,b
  2388  007FD4  6EDA               	movwf	fsr2h,c
  2389  007FD6  0012               	return	
  2390  007FD8                     __end_ofPL18:
  2391                           	opt stack 0
  2392  007FD8                     PL20:
  2393                           	opt stack 26
  2394  007FD8  51EA               	movf	main@ordem& (0+255),w,b
  2395  007FDA  25DA               	addwf	??_main& (0+255),w,b
  2396  007FDC  6E1D               	movwf	Write_b_eep@badd,c
  2397  007FDE  0E00               	movlw	0
  2398  007FE0  21DB               	addwfc	(??_main+1)& (0+255),w,b
  2399  007FE2  6E1E               	movwf	Write_b_eep@badd+1,c
  2400  007FE4  0012               	return	
  2401  007FE6                     __end_ofPL20:
  2402                           	opt stack 0
  2403  007FE6                     PL22:
  2404                           	opt stack 26
  2405  007FE6  51E9               	movf	main@cont& (0+255),w,b
  2406  007FE8  0F74               	addlw	low _buffer_serial
  2407  007FEA  6ED9               	movwf	fsr2l,c
  2408  007FEC  6ADA               	clrf	fsr2h,c
  2409  007FEE  50DF               	movf	indf2,w,c
  2410  007FF0  0FD0               	addlw	208
  2411  007FF2  0012               	return	
  2412  007FF4                     __end_ofPL22:
  2413                           	opt stack 0
  2414  007FF4                     PL26:
  2415                           	opt stack 26
  2416  007FF4  0F74               	addlw	low _buffer_serial
  2417  007FF6  6ED9               	movwf	fsr2l,c
  2418  007FF8  6ADA               	clrf	fsr2h,c
  2419  007FFA  50DF               	movf	indf2,w,c
  2420  007FFC  6EAD               	movwf	4013,c	;volatile
  2421  007FFE  0012               	return	
  2422  008000                     __end_ofPL26:
  2423                           	opt stack 0
  2424                           tblptru	equ	0xFF8
  2425                           tblptrh	equ	0xFF7
  2426                           tblptrl	equ	0xFF6
  2427                           tablat	equ	0xFF5
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           intcon	equ	0xFF2
  2431                           intcon2	equ	0xFF1
  2432                           postinc0	equ	0xFEE
  2433                           wreg	equ	0xFE8
  2434                           indf1	equ	0xFE7
  2435                           postinc1	equ	0xFE6
  2436                           postdec1	equ	0xFE5
  2437                           plusw1	equ	0xFE3
  2438                           fsr1h	equ	0xFE2
  2439                           fsr1l	equ	0xFE1
  2440                           indf2	equ	0xFDF
  2441                           postinc2	equ	0xFDE
  2442                           plusw2	equ	0xFDB
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function _zerar_string *****************
  2448 ;; Defined at:
  2449 ;;		line 107 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  string_a_zer    1    wreg     PTR unsigned char 
  2452 ;;		 -> buffer_serial(80), 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  string_a_zer    1   38[COMRAM] PTR unsigned char 
  2455 ;;		 -> buffer_serial(80), 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : F/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2465 ;;      Params:         0       0       0       0       0       0       0       0       0
  2466 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2468 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2469 ;;Total ram usage:        1 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		_memset
  2474 ;;		_strlen
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text1
  2481  006F7A                     __ptext1:
  2482                           	opt stack 0
  2483  006F7A                     _zerar_string:
  2484                           	opt stack 26
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;incstack = 0
  2488                           ;zerar_string@string_a_zerar stored from wreg
  2489  006F7A  6E27               	movwf	zerar_string@string_a_zerar,c
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;main.c: 108: memset(string_a_zerar,0, strlen(string_a_zerar));}
  2493  006F7C  6A22               	clrf	memset@c+1,c
  2494  006F7E  6A21               	clrf	memset@c,c
  2495  006F80  5027               	movf	zerar_string@string_a_zerar,w,c
  2496  006F82  ECEA  F037         	call	_strlen
  2497  006F86  C01D  F023         	movff	?_strlen,memset@n
  2498  006F8A  C01E  F024         	movff	?_strlen+1,memset@n+1
  2499  006F8E  5027               	movf	zerar_string@string_a_zerar,w,c
  2500  006F90  EF34  F038         	goto	_memset
  2501  006F94                     __end_of_zerar_string:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           intcon	equ	0xFF2
  2510                           intcon2	equ	0xFF1
  2511                           postinc0	equ	0xFEE
  2512                           wreg	equ	0xFE8
  2513                           indf1	equ	0xFE7
  2514                           postinc1	equ	0xFE6
  2515                           postdec1	equ	0xFE5
  2516                           plusw1	equ	0xFE3
  2517                           fsr1h	equ	0xFE2
  2518                           fsr1l	equ	0xFE1
  2519                           indf2	equ	0xFDF
  2520                           postinc2	equ	0xFDE
  2521                           plusw2	equ	0xFDB
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _strlen *****************
  2527 ;; Defined at:
  2528 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;  s               1    wreg     PTR const unsigned char 
  2531 ;;		 -> buffer_serial(80), 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  s               1   31[COMRAM] PTR const unsigned char 
  2534 ;;		 -> buffer_serial(80), 
  2535 ;;  cp              1   30[COMRAM] PTR const unsigned char 
  2536 ;;		 -> buffer_serial(80), 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  2   28[COMRAM] unsigned int 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2546 ;;      Params:         2       0       0       0       0       0       0       0       0
  2547 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2549 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2550 ;;Total ram usage:        4 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    3
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_zerar_string
  2557 ;;		_main
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text2
  2562  006FD4                     __ptext2:
  2563                           	opt stack 0
  2564  006FD4                     _strlen:
  2565                           	opt stack 26
  2566                           
  2567                           ;incstack = 0
  2568                           ;strlen@s stored from wreg
  2569  006FD4  6E20               	movwf	strlen@s,c
  2570  006FD6  C020  F01F         	movff	strlen@s,strlen@cp
  2571  006FDA  D001               	goto	l2456
  2572  006FDC                     l2454:
  2573  006FDC  2A1F               	incf	strlen@cp,f,c
  2574  006FDE                     l2456:
  2575  006FDE  501F               	movf	strlen@cp,w,c
  2576  006FE0  6ED9               	movwf	fsr2l,c
  2577  006FE2  6ADA               	clrf	fsr2h,c
  2578  006FE4  50DF               	movf	indf2,w,c
  2579  006FE6  E1FA               	bnz	l2454
  2580  006FE8  5020               	movf	strlen@s,w,c
  2581  006FEA  5C1F               	subwf	strlen@cp,w,c
  2582  006FEC  6E1D               	movwf	?_strlen,c
  2583  006FEE  6A1E               	clrf	?_strlen+1,c
  2584  006FF0  BE1D               	btfsc	?_strlen,7,c
  2585  006FF2  061E               	decf	?_strlen+1,f,c
  2586  006FF4  0012               	return		;funcret
  2587  006FF6                     __end_of_strlen:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           intcon	equ	0xFF2
  2596                           intcon2	equ	0xFF1
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           indf1	equ	0xFE7
  2600                           postinc1	equ	0xFE6
  2601                           postdec1	equ	0xFE5
  2602                           plusw1	equ	0xFE3
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           plusw2	equ	0xFDB
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _memset *****************
  2613 ;; Defined at:
  2614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  p1              1    wreg     PTR void 
  2617 ;;		 -> buffer_serial(80), 
  2618 ;;  c               2   32[COMRAM] int 
  2619 ;;  n               2   34[COMRAM] unsigned int 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  p1              1   37[COMRAM] PTR void 
  2622 ;;		 -> buffer_serial(80), 
  2623 ;;  p               1   36[COMRAM] PTR unsigned char 
  2624 ;;		 -> buffer_serial(80), 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      PTR void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2634 ;;      Params:         4       0       0       0       0       0       0       0       0
  2635 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2637 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2638 ;;Total ram usage:        6 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    3
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_zerar_string
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text3
  2650  007068                     __ptext3:
  2651                           	opt stack 0
  2652  007068                     _memset:
  2653                           	opt stack 26
  2654                           
  2655                           ;incstack = 0
  2656                           ;memset@p1 stored from wreg
  2657  007068  6E26               	movwf	memset@p1,c
  2658  00706A  C026  F025         	movff	memset@p1,memset@p
  2659  00706E  D006               	goto	l2468
  2660  007070                     l2464:
  2661  007070  5025               	movf	memset@p,w,c
  2662  007072  6ED9               	movwf	fsr2l,c
  2663  007074  6ADA               	clrf	fsr2h,c
  2664  007076  C021  FFDF         	movff	memset@c,indf2
  2665  00707A  2A25               	incf	memset@p,f,c
  2666  00707C                     l2468:
  2667  00707C  0623               	decf	memset@n,f,c
  2668  00707E  A0D8               	btfss	status,0,c
  2669  007080  0624               	decf	memset@n+1,f,c
  2670  007082  2823               	incf	memset@n,w,c
  2671  007084  E1F5               	bnz	l2464
  2672  007086  2824               	incf	memset@n+1,w,c
  2673  007088  B4D8               	btfsc	status,2,c
  2674  00708A  0012               	return		;funcret
  2675  00708C  D7F1               	goto	l2464
  2676  00708E                     __end_of_memset:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           intcon	equ	0xFF2
  2685                           intcon2	equ	0xFF1
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           indf1	equ	0xFE7
  2689                           postinc1	equ	0xFE6
  2690                           postdec1	equ	0xFE5
  2691                           plusw1	equ	0xFE3
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           plusw2	equ	0xFDB
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _verificar_num_contas *****************
  2702 ;; Defined at:
  2703 ;;		line 23 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  i               1   31[COMRAM] unsigned char 
  2708 ;;  qtd_contas      1   30[COMRAM] unsigned char 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      unsigned char 
  2711 ;; Registers used:
  2712 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2718 ;;      Params:         0       0       0       0       0       0       0       0       0
  2719 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2721 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2722 ;;Total ram usage:        2 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    4
  2725 ;; This function calls:
  2726 ;;		_Read_b_eep
  2727 ;; This function is called by:
  2728 ;;		_main
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text4
  2733  007042                     __ptext4:
  2734                           	opt stack 0
  2735  007042                     _verificar_num_contas:
  2736                           	opt stack 26
  2737                           
  2738                           ;eeprom_interna.c: 24: char i;
  2739                           ;eeprom_interna.c: 25: unsigned char qtd_contas=0;
  2740                           
  2741                           ;incstack = 0
  2742  007042  6A1F               	clrf	verificar_num_contas@qtd_contas,c
  2743                           
  2744                           ;eeprom_interna.c: 26: for(i=0;i<16;i++){
  2745  007044  6A20               	clrf	verificar_num_contas@i,c
  2746  007046                     l2800:
  2747                           
  2748                           ;eeprom_interna.c: 27: if(Read_b_eep(i*16) != 0xFF) {qtd_contas++;}
  2749  007046  5020               	movf	verificar_num_contas@i,w,c
  2750  007048  0D10               	mullw	16
  2751  00704A  CFF3 F01D          	movff	prodl,Read_b_eep@badd
  2752  00704E  CFF4 F01E          	movff	prodh,Read_b_eep@badd+1
  2753  007052  EC9A  F037         	call	_Read_b_eep	;wreg free
  2754  007056  0AFF               	xorlw	255
  2755  007058  A4D8               	btfss	status,2,c
  2756  00705A  2A1F               	incf	verificar_num_contas@qtd_contas,f,c
  2757  00705C  2A20               	incf	verificar_num_contas@i,f,c
  2758  00705E  0E0F               	movlw	15
  2759  007060  6420               	cpfsgt	verificar_num_contas@i,c
  2760  007062  D7F1               	goto	l2800
  2761                           
  2762                           ;eeprom_interna.c: 28: }
  2763                           ;eeprom_interna.c: 29: return (qtd_contas);
  2764  007064  501F               	movf	verificar_num_contas@qtd_contas,w,c
  2765  007066  0012               	return		;funcret
  2766  007068                     __end_of_verificar_num_contas:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           intcon2	equ	0xFF1
  2776                           postinc0	equ	0xFEE
  2777                           wreg	equ	0xFE8
  2778                           indf1	equ	0xFE7
  2779                           postinc1	equ	0xFE6
  2780                           postdec1	equ	0xFE5
  2781                           plusw1	equ	0xFE3
  2782                           fsr1h	equ	0xFE2
  2783                           fsr1l	equ	0xFE1
  2784                           indf2	equ	0xFDF
  2785                           postinc2	equ	0xFDE
  2786                           plusw2	equ	0xFDB
  2787                           fsr2h	equ	0xFDA
  2788                           fsr2l	equ	0xFD9
  2789                           status	equ	0xFD8
  2790                           
  2791 ;; *************** function _numero_para_ascii *****************
  2792 ;; Defined at:
  2793 ;;		line 86 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  numero          1    wreg     unsigned char 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  numero          1    5[BANK0 ] unsigned char 
  2798 ;;  temp1           1    6[BANK0 ] unsigned char 
  2799 ;;  temp2           1    4[BANK0 ] unsigned char 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;		None               void
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : F/0
  2806 ;;		On exit  : F/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2809 ;;      Params:         0       0       0       0       0       0       0       0       0
  2810 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2811 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2812 ;;      Totals:         1       3       0       0       0       0       0       0       0
  2813 ;;Total ram usage:        4 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    4
  2816 ;; This function calls:
  2817 ;;		___awdiv
  2818 ;;		___lbdiv
  2819 ;;		___wmul
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text5
  2826  007446                     __ptext5:
  2827                           	opt stack 0
  2828  007446                     _numero_para_ascii:
  2829                           	opt stack 26
  2830                           
  2831                           ;incstack = 0
  2832                           ;numero_para_ascii@numero stored from wreg
  2833  007446  6FC9               	movwf	numero_para_ascii@numero& (0+255),b
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;ascii.c: 87: char temp1;
  2837                           ;ascii.c: 88: char temp2;
  2838                           ;ascii.c: 90: TXREG = '+';
  2839  007448  0E2B               	movlw	43
  2840  00744A  6EAD               	movwf	4013,c	;volatile
  2841  00744C                     l485:
  2842                           
  2843                           ; BSR set to: 0
  2844  00744C  A2AC               	btfss	4012,1,c	;volatile
  2845  00744E  D7FE               	goto	l485
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;ascii.c: 93: temp1 = numero/100;
  2849  007450  0E64               	movlw	100
  2850  007452  6E1D               	movwf	___lbdiv@divisor,c
  2851  007454  51C9               	movf	numero_para_ascii@numero& (0+255),w,b
  2852  007456  EC8F  F038         	call	___lbdiv
  2853  00745A  6FCA               	movwf	numero_para_ascii@temp1& (0+255),b
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;ascii.c: 94: TXREG = '0'+ temp1;
  2857  00745C  51CA               	movf	numero_para_ascii@temp1& (0+255),w,b
  2858  00745E  0F30               	addlw	48
  2859  007460  6EAD               	movwf	4013,c	;volatile
  2860  007462                     l488:
  2861                           
  2862                           ; BSR set to: 0
  2863  007462  A2AC               	btfss	4012,1,c	;volatile
  2864  007464  D7FE               	goto	l488
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;ascii.c: 97: temp2 = ((numero - temp1*100)/10);
  2868  007466  C0CA  F01D         	movff	numero_para_ascii@temp1,___wmul@multiplier
  2869  00746A  6A1E               	clrf	___wmul@multiplier+1,c
  2870  00746C  6820               	setf	___wmul@multiplicand+1,c
  2871  00746E  0E9C               	movlw	156
  2872  007470  6E1F               	movwf	___wmul@multiplicand,c
  2873  007472  EC0E  F038         	call	___wmul	;wreg free
  2874  007476  51C9               	movf	numero_para_ascii@numero& (0+255),w,b
  2875  007478  241D               	addwf	?___wmul,w,c
  2876  00747A  6E23               	movwf	___awdiv@dividend,c
  2877  00747C  0E00               	movlw	0
  2878  00747E  201E               	addwfc	?___wmul+1,w,c
  2879  007480  6E24               	movwf	___awdiv@dividend+1,c
  2880  007482  6A26               	clrf	___awdiv@divisor+1,c
  2881  007484  0E0A               	movlw	10
  2882  007486  6E25               	movwf	___awdiv@divisor,c
  2883  007488  ECE7  F039         	call	___awdiv	;wreg free
  2884  00748C  5023               	movf	?___awdiv,w,c
  2885  00748E  6FC8               	movwf	numero_para_ascii@temp2& (0+255),b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;ascii.c: 98: TXREG = '0'+ temp2;
  2889  007490  51C8               	movf	numero_para_ascii@temp2& (0+255),w,b
  2890  007492  0F30               	addlw	48
  2891  007494  6EAD               	movwf	4013,c	;volatile
  2892  007496                     l491:
  2893                           
  2894                           ; BSR set to: 0
  2895  007496  A2AC               	btfss	4012,1,c	;volatile
  2896  007498  D7FE               	goto	l491
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;ascii.c: 101: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  2900  00749A  51CA               	movf	numero_para_ascii@temp1& (0+255),w,b
  2901  00749C  0D9C               	mullw	156
  2902  00749E  CFF3 F027          	movff	prodl,??_numero_para_ascii
  2903  0074A2  51C8               	movf	numero_para_ascii@temp2& (0+255),w,b
  2904  0074A4  0DF6               	mullw	246
  2905  0074A6  50F3               	movf	prodl,w,c
  2906  0074A8  2427               	addwf	??_numero_para_ascii,w,c
  2907  0074AA  25C9               	addwf	numero_para_ascii@numero& (0+255),w,b
  2908  0074AC  0F30               	addlw	48
  2909  0074AE  6EAD               	movwf	4013,c	;volatile
  2910  0074B0                     l494:
  2911                           
  2912                           ; BSR set to: 0
  2913  0074B0  A2AC               	btfss	4012,1,c	;volatile
  2914  0074B2  D7FE               	goto	l494
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;ascii.c: 104: TXREG = '+';
  2918  0074B4  0E2B               	movlw	43
  2919  0074B6  6EAD               	movwf	4013,c	;volatile
  2920  0074B8                     l497:
  2921                           
  2922                           ; BSR set to: 0
  2923  0074B8  B2AC               	btfsc	4012,1,c	;volatile
  2924                           
  2925                           ; BSR set to: 0
  2926  0074BA  0012               	return		;funcret
  2927  0074BC  D7FD               	goto	l497
  2928  0074BE                     __end_of_numero_para_ascii:
  2929                           	opt stack 0
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           prodh	equ	0xFF4
  2935                           prodl	equ	0xFF3
  2936                           intcon	equ	0xFF2
  2937                           intcon2	equ	0xFF1
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           indf1	equ	0xFE7
  2941                           postinc1	equ	0xFE6
  2942                           postdec1	equ	0xFE5
  2943                           plusw1	equ	0xFE3
  2944                           fsr1h	equ	0xFE2
  2945                           fsr1l	equ	0xFE1
  2946                           indf2	equ	0xFDF
  2947                           postinc2	equ	0xFDE
  2948                           plusw2	equ	0xFDB
  2949                           fsr2h	equ	0xFDA
  2950                           fsr2l	equ	0xFD9
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function ___lbdiv *****************
  2954 ;; Defined at:
  2955 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  dividend        1    wreg     unsigned char 
  2958 ;;  divisor         1   28[COMRAM] unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  dividend        1   29[COMRAM] unsigned char 
  2961 ;;  quotient        1   31[COMRAM] unsigned char 
  2962 ;;  counter         1   30[COMRAM] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      unsigned char 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0
  2967 ;; Tracked objects:
  2968 ;;		On entry : F/0
  2969 ;;		On exit  : F/0
  2970 ;;		Unchanged: F/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2972 ;;      Params:         1       0       0       0       0       0       0       0       0
  2973 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2975 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2976 ;;Total ram usage:        4 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    3
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_numero_para_ascii
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text6
  2987  00711E                     __ptext6:
  2988                           	opt stack 0
  2989  00711E                     ___lbdiv:
  2990                           	opt stack 26
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;incstack = 0
  2994                           ;___lbdiv@dividend stored from wreg
  2995  00711E  6E1E               	movwf	___lbdiv@dividend,c
  2996                           
  2997                           ; BSR set to: 0
  2998  007120  6A20               	clrf	___lbdiv@quotient,c
  2999                           
  3000                           ; BSR set to: 0
  3001  007122  501D               	movf	___lbdiv@divisor,w,c
  3002  007124  E014               	bz	l3594
  3003                           
  3004                           ; BSR set to: 0
  3005  007126  0E01               	movlw	1
  3006  007128  6E1F               	movwf	___lbdiv@counter,c
  3007  00712A  D003               	goto	l3582
  3008  00712C                     l3578:
  3009                           
  3010                           ; BSR set to: 0
  3011  00712C  90D8               	bcf	status,0,c
  3012  00712E  361D               	rlcf	___lbdiv@divisor,f,c
  3013                           
  3014                           ; BSR set to: 0
  3015  007130  2A1F               	incf	___lbdiv@counter,f,c
  3016  007132                     l3582:
  3017                           
  3018                           ; BSR set to: 0
  3019  007132  AE1D               	btfss	___lbdiv@divisor,7,c
  3020  007134  D7FB               	goto	l3578
  3021  007136                     l3584:
  3022                           
  3023                           ; BSR set to: 0
  3024  007136  90D8               	bcf	status,0,c
  3025  007138  3620               	rlcf	___lbdiv@quotient,f,c
  3026  00713A  501D               	movf	___lbdiv@divisor,w,c
  3027  00713C  5C1E               	subwf	___lbdiv@dividend,w,c
  3028  00713E  E303               	bnc	l3590
  3029                           
  3030                           ; BSR set to: 0
  3031  007140  501D               	movf	___lbdiv@divisor,w,c
  3032  007142  5E1E               	subwf	___lbdiv@dividend,f,c
  3033                           
  3034                           ; BSR set to: 0
  3035  007144  8020               	bsf	___lbdiv@quotient,0,c
  3036  007146                     l3590:
  3037                           
  3038                           ; BSR set to: 0
  3039  007146  90D8               	bcf	status,0,c
  3040  007148  321D               	rrcf	___lbdiv@divisor,f,c
  3041                           
  3042                           ; BSR set to: 0
  3043  00714A  2E1F               	decfsz	___lbdiv@counter,f,c
  3044  00714C  D7F4               	goto	l3584
  3045  00714E                     l3594:
  3046                           
  3047                           ; BSR set to: 0
  3048  00714E  5020               	movf	___lbdiv@quotient,w,c
  3049                           
  3050                           ; BSR set to: 0
  3051  007150  0012               	return		;funcret
  3052  007152                     __end_of___lbdiv:
  3053                           	opt stack 0
  3054                           tblptru	equ	0xFF8
  3055                           tblptrh	equ	0xFF7
  3056                           tblptrl	equ	0xFF6
  3057                           tablat	equ	0xFF5
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           intcon	equ	0xFF2
  3061                           intcon2	equ	0xFF1
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           indf1	equ	0xFE7
  3065                           postinc1	equ	0xFE6
  3066                           postdec1	equ	0xFE5
  3067                           plusw1	equ	0xFE3
  3068                           fsr1h	equ	0xFE2
  3069                           fsr1l	equ	0xFE1
  3070                           indf2	equ	0xFDF
  3071                           postinc2	equ	0xFDE
  3072                           plusw2	equ	0xFDB
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function ___awdiv *****************
  3078 ;; Defined at:
  3079 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  dividend        2   34[COMRAM] int 
  3082 ;;  divisor         2   36[COMRAM] int 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  quotient        2    2[BANK0 ] int 
  3085 ;;  sign            1    1[BANK0 ] unsigned char 
  3086 ;;  counter         1    0[BANK0 ] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2   34[COMRAM] int 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0
  3091 ;; Tracked objects:
  3092 ;;		On entry : F/0
  3093 ;;		On exit  : F/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3096 ;;      Params:         4       0       0       0       0       0       0       0       0
  3097 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3099 ;;      Totals:         4       4       0       0       0       0       0       0       0
  3100 ;;Total ram usage:        8 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    3
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_numero_para_ascii
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text7
  3111  0073CE                     __ptext7:
  3112                           	opt stack 0
  3113  0073CE                     ___awdiv:
  3114                           	opt stack 26
  3115                           
  3116                           ; BSR set to: 0
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;incstack = 0
  3120  0073CE  6BC5               	clrf	___awdiv@sign& (0+255),b
  3121                           
  3122                           ; BSR set to: 0
  3123  0073D0  AE26               	btfss	___awdiv@divisor+1,7,c
  3124  0073D2  D006               	goto	l3536
  3125                           
  3126                           ; BSR set to: 0
  3127  0073D4  6C25               	negf	___awdiv@divisor,c
  3128  0073D6  1E26               	comf	___awdiv@divisor+1,f,c
  3129  0073D8  B0D8               	btfsc	status,0,c
  3130  0073DA  2A26               	incf	___awdiv@divisor+1,f,c
  3131                           
  3132                           ; BSR set to: 0
  3133  0073DC  0E01               	movlw	1
  3134  0073DE  6FC5               	movwf	___awdiv@sign& (0+255),b
  3135  0073E0                     l3536:
  3136                           
  3137                           ; BSR set to: 0
  3138  0073E0  AE24               	btfss	___awdiv@dividend+1,7,c
  3139  0073E2  D006               	goto	l3542
  3140                           
  3141                           ; BSR set to: 0
  3142  0073E4  6C23               	negf	___awdiv@dividend,c
  3143  0073E6  1E24               	comf	___awdiv@dividend+1,f,c
  3144  0073E8  B0D8               	btfsc	status,0,c
  3145  0073EA  2A24               	incf	___awdiv@dividend+1,f,c
  3146                           
  3147                           ; BSR set to: 0
  3148  0073EC  0E01               	movlw	1
  3149  0073EE  1BC5               	xorwf	___awdiv@sign& (0+255),f,b
  3150  0073F0                     l3542:
  3151                           
  3152                           ; BSR set to: 0
  3153  0073F0  6BC6               	clrf	___awdiv@quotient& (0+255),b
  3154  0073F2  6BC7               	clrf	(___awdiv@quotient+1)& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157  0073F4  5025               	movf	___awdiv@divisor,w,c
  3158  0073F6  1026               	iorwf	___awdiv@divisor+1,w,c
  3159  0073F8  E01B               	bz	l3564
  3160                           
  3161                           ; BSR set to: 0
  3162  0073FA  0E01               	movlw	1
  3163  0073FC  6FC4               	movwf	___awdiv@counter& (0+255),b
  3164  0073FE  D004               	goto	l3550
  3165  007400                     l3548:
  3166                           
  3167                           ; BSR set to: 0
  3168  007400  90D8               	bcf	status,0,c
  3169  007402  3625               	rlcf	___awdiv@divisor,f,c
  3170  007404  3626               	rlcf	___awdiv@divisor+1,f,c
  3171  007406  2BC4               	incf	___awdiv@counter& (0+255),f,b
  3172  007408                     l3550:
  3173                           
  3174                           ; BSR set to: 0
  3175  007408  AE26               	btfss	___awdiv@divisor+1,7,c
  3176  00740A  D7FA               	goto	l3548
  3177  00740C                     l3552:
  3178                           
  3179                           ; BSR set to: 0
  3180  00740C  90D8               	bcf	status,0,c
  3181  00740E  37C6               	rlcf	___awdiv@quotient& (0+255),f,b
  3182  007410  37C7               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3183                           
  3184                           ; BSR set to: 0
  3185  007412  5025               	movf	___awdiv@divisor,w,c
  3186  007414  5C23               	subwf	___awdiv@dividend,w,c
  3187  007416  5026               	movf	___awdiv@divisor+1,w,c
  3188  007418  5824               	subwfb	___awdiv@dividend+1,w,c
  3189  00741A  E305               	bnc	l3560
  3190                           
  3191                           ; BSR set to: 0
  3192  00741C  5025               	movf	___awdiv@divisor,w,c
  3193  00741E  5E23               	subwf	___awdiv@dividend,f,c
  3194  007420  5026               	movf	___awdiv@divisor+1,w,c
  3195  007422  5A24               	subwfb	___awdiv@dividend+1,f,c
  3196                           
  3197                           ; BSR set to: 0
  3198  007424  81C6               	bsf	___awdiv@quotient& (0+255),0,b
  3199  007426                     l3560:
  3200                           
  3201                           ; BSR set to: 0
  3202  007426  90D8               	bcf	status,0,c
  3203  007428  3226               	rrcf	___awdiv@divisor+1,f,c
  3204  00742A  3225               	rrcf	___awdiv@divisor,f,c
  3205                           
  3206                           ; BSR set to: 0
  3207  00742C  2FC4               	decfsz	___awdiv@counter& (0+255),f,b
  3208  00742E  D7EE               	goto	l3552
  3209  007430                     l3564:
  3210                           
  3211                           ; BSR set to: 0
  3212  007430  51C5               	movf	___awdiv@sign& (0+255),w,b
  3213  007432  E004               	bz	l3568
  3214                           
  3215                           ; BSR set to: 0
  3216  007434  6DC6               	negf	___awdiv@quotient& (0+255),b
  3217  007436  1FC7               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3218  007438  B0D8               	btfsc	status,0,c
  3219  00743A  2BC7               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3220  00743C                     l3568:
  3221                           
  3222                           ; BSR set to: 0
  3223  00743C  C0C6  F023         	movff	___awdiv@quotient,?___awdiv
  3224  007440  C0C7  F024         	movff	___awdiv@quotient+1,?___awdiv+1
  3225                           
  3226                           ; BSR set to: 0
  3227  007444  0012               	return		;funcret
  3228  007446                     __end_of___awdiv:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           prodh	equ	0xFF4
  3235                           prodl	equ	0xFF3
  3236                           intcon	equ	0xFF2
  3237                           intcon2	equ	0xFF1
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           indf1	equ	0xFE7
  3241                           postinc1	equ	0xFE6
  3242                           postdec1	equ	0xFE5
  3243                           plusw1	equ	0xFE3
  3244                           fsr1h	equ	0xFE2
  3245                           fsr1l	equ	0xFE1
  3246                           indf2	equ	0xFDF
  3247                           postinc2	equ	0xFDE
  3248                           plusw2	equ	0xFDB
  3249                           fsr2h	equ	0xFDA
  3250                           fsr2l	equ	0xFD9
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function _eeprom_config_inicial *****************
  3254 ;; Defined at:
  3255 ;;		line 33 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  i               1   32[COMRAM] unsigned char 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;		None               void
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3269 ;;      Params:         0       0       0       0       0       0       0       0       0
  3270 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3272 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3273 ;;Total ram usage:        1 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    4
  3276 ;; This function calls:
  3277 ;;		_Busy_eep
  3278 ;;		_Write_b_eep
  3279 ;; This function is called by:
  3280 ;;		_main
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text8
  3285  007274                     __ptext8:
  3286                           	opt stack 0
  3287  007274                     _eeprom_config_inicial:
  3288                           	opt stack 26
  3289                           
  3290                           ;eeprom_interna.c: 34: unsigned char i;
  3291                           ;eeprom_interna.c: 36: for(i=0;i<10;i++){
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;incstack = 0
  3295  007274  6A21               	clrf	eeprom_config_inicial@i,c
  3296  007276                     l2750:
  3297                           
  3298                           ;eeprom_interna.c: 37: (Busy_eep(), Write_b_eep(i,('0'+i)));
  3299  007276  EC88  F037         	call	_Busy_eep	;wreg free
  3300  00727A  C021  F01D         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  3301  00727E  6A1E               	clrf	Write_b_eep@badd+1,c
  3302  007280  5021               	movf	eeprom_config_inicial@i,w,c
  3303  007282  0F30               	addlw	48
  3304  007284  6E1F               	movwf	Write_b_eep@bdat,c
  3305  007286  EC75  F038         	call	_Write_b_eep	;wreg free
  3306                           
  3307                           ;eeprom_interna.c: 38: (Busy_eep(), Write_b_eep(16+i,('a'+i)));
  3308  00728A  EC88  F037         	call	_Busy_eep	;wreg free
  3309  00728E  D820               	call	PL24	;call to abstracted procedure
  3310  007290  5021               	movf	eeprom_config_inicial@i,w,c
  3311  007292  0F61               	addlw	97
  3312  007294  6E1F               	movwf	Write_b_eep@bdat,c
  3313  007296  EC75  F038         	call	_Write_b_eep	;wreg free
  3314  00729A  2A21               	incf	eeprom_config_inicial@i,f,c
  3315  00729C  0E09               	movlw	9
  3316  00729E  6421               	cpfsgt	eeprom_config_inicial@i,c
  3317  0072A0  D7EA               	goto	l2750
  3318                           
  3319                           ;eeprom_interna.c: 40: }
  3320                           ;eeprom_interna.c: 41: (Busy_eep(), Write_b_eep(i,0));
  3321  0072A2  EC88  F037         	call	_Busy_eep	;wreg free
  3322  0072A6  C021  F01D         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  3323  0072AA  6A1E               	clrf	Write_b_eep@badd+1,c
  3324  0072AC  6A1F               	clrf	Write_b_eep@bdat,c
  3325  0072AE  EC75  F038         	call	_Write_b_eep	;wreg free
  3326                           
  3327                           ;eeprom_interna.c: 42: (Busy_eep(), Write_b_eep(16+i,0));
  3328  0072B2  EC88  F037         	call	_Busy_eep	;wreg free
  3329  0072B6  D80C               	call	PL24	;call to abstracted procedure
  3330  0072B8  6A1F               	clrf	Write_b_eep@bdat,c
  3331  0072BA  EC75  F038         	call	_Write_b_eep	;wreg free
  3332                           
  3333                           ;eeprom_interna.c: 44: (Busy_eep(), Write_b_eep(((16*2)-1),0b11111101));
  3334  0072BE  EC88  F037         	call	_Busy_eep	;wreg free
  3335  0072C2  6A1E               	clrf	Write_b_eep@badd+1,c
  3336  0072C4  0E1F               	movlw	31
  3337  0072C6  6E1D               	movwf	Write_b_eep@badd,c
  3338  0072C8  0EFD               	movlw	253
  3339  0072CA  6E1F               	movwf	Write_b_eep@bdat,c
  3340  0072CC  EF75  F038         	goto	_Write_b_eep	;wreg free
  3341  0072D0                     __end_of_eeprom_config_inicial:
  3342                           	opt stack 0
  3343  0072D0                     PL24:
  3344                           	opt stack 26
  3345  0072D0  0E10               	movlw	16
  3346  0072D2  2421               	addwf	eeprom_config_inicial@i,w,c
  3347  0072D4  6E1D               	movwf	Write_b_eep@badd,c
  3348  0072D6  6A1E               	clrf	Write_b_eep@badd+1,c
  3349  0072D8  0E00               	movlw	0
  3350  0072DA  221E               	addwfc	Write_b_eep@badd+1,f,c
  3351  0072DC  0C00               	retlw	0
  3352  0072DE                     __end_ofPL24:
  3353                           	opt stack 0
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           prodh	equ	0xFF4
  3359                           prodl	equ	0xFF3
  3360                           intcon	equ	0xFF2
  3361                           intcon2	equ	0xFF1
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           indf1	equ	0xFE7
  3365                           postinc1	equ	0xFE6
  3366                           postdec1	equ	0xFE5
  3367                           plusw1	equ	0xFE3
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           postinc2	equ	0xFDE
  3372                           plusw2	equ	0xFDB
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _Write_b_eep *****************
  3378 ;; Defined at:
  3379 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\write_B.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  badd            2   28[COMRAM] unsigned int 
  3382 ;;  bdat            1   30[COMRAM] unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  GIE_BIT_VAL     1   31[COMRAM] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;		None               void
  3387 ;; Registers used:
  3388 ;;		wreg, status,2
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3394 ;;      Params:         3       0       0       0       0       0       0       0       0
  3395 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3397 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3398 ;;Total ram usage:        4 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    3
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_main
  3405 ;;		_eeprom_config_inicial
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text9
  3410  0070EA                     __ptext9:
  3411                           	opt stack 0
  3412  0070EA                     _Write_b_eep:
  3413                           	opt stack 26
  3414                           
  3415                           ;incstack = 0
  3416  0070EA  C01D  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  3417  0070EE  C01F  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  3418  0070F2  9EA6               	bcf	4006,7,c	;volatile
  3419  0070F4  9CA6               	bcf	4006,6,c	;volatile
  3420  0070F6  84A6               	bsf	4006,2,c	;volatile
  3421  0070F8  0E00               	movlw	0
  3422  0070FA  BEF2               	btfsc	intcon,7,c	;volatile
  3423  0070FC  0E01               	movlw	1
  3424  0070FE  6E20               	movwf	Write_b_eep@GIE_BIT_VAL,c
  3425  007100  9EF2               	bcf	intcon,7,c	;volatile
  3426  007102  0E55               	movlw	85
  3427  007104  6EA7               	movwf	4007,c	;volatile
  3428  007106  0EAA               	movlw	170
  3429  007108  6EA7               	movwf	4007,c	;volatile
  3430  00710A  82A6               	bsf	4006,1,c	;volatile
  3431  00710C                     l697:
  3432  00710C  B2A6               	btfsc	4006,1,c	;volatile
  3433  00710E  D7FE               	goto	l697
  3434  007110  B020               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  3435  007112  D002               	bra	u2095
  3436  007114  9EF2               	bcf	intcon,7,c	;volatile
  3437  007116  D001               	bra	u2096
  3438  007118                     u2095:
  3439  007118  8EF2               	bsf	intcon,7,c	;volatile
  3440  00711A                     u2096:
  3441  00711A  94A6               	bcf	4006,2,c	;volatile
  3442  00711C  0012               	return		;funcret
  3443  00711E                     __end_of_Write_b_eep:
  3444                           	opt stack 0
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           intcon	equ	0xFF2
  3452                           intcon2	equ	0xFF1
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           indf1	equ	0xFE7
  3456                           postinc1	equ	0xFE6
  3457                           postdec1	equ	0xFE5
  3458                           plusw1	equ	0xFE3
  3459                           fsr1h	equ	0xFE2
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           plusw2	equ	0xFDB
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _Busy_eep *****************
  3469 ;; Defined at:
  3470 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\busy_eep.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;		None
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;		None
  3475 ;; Return value:  Size  Location     Type
  3476 ;;		None               void
  3477 ;; Registers used:
  3478 ;;		None
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3484 ;;      Params:         0       0       0       0       0       0       0       0       0
  3485 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3487 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3488 ;;Total ram usage:        0 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    3
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;;		_eeprom_config_inicial
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text10
  3500  006F10                     __ptext10:
  3501                           	opt stack 0
  3502  006F10                     _Busy_eep:
  3503                           	opt stack 26
  3504  006F10                     l670:
  3505  006F10  A2A6               	btfss	4006,1,c	;volatile
  3506  006F12  0012               	return		;funcret
  3507  006F14  D7FD               	goto	l670
  3508  006F16                     __end_of_Busy_eep:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           intcon	equ	0xFF2
  3517                           intcon2	equ	0xFF1
  3518                           postinc0	equ	0xFEE
  3519                           wreg	equ	0xFE8
  3520                           indf1	equ	0xFE7
  3521                           postinc1	equ	0xFE6
  3522                           postdec1	equ	0xFE5
  3523                           plusw1	equ	0xFE3
  3524                           fsr1h	equ	0xFE2
  3525                           fsr1l	equ	0xFE1
  3526                           indf2	equ	0xFDF
  3527                           postinc2	equ	0xFDE
  3528                           plusw2	equ	0xFDB
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _dia_da_semana *****************
  3534 ;; Defined at:
  3535 ;;		line 4 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  ano             2    0[BANK0 ] unsigned int 
  3538 ;;  mes             1    2[BANK0 ] unsigned char 
  3539 ;;  dia             1    3[BANK0 ] unsigned char 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  tabela_mes     12    9[BANK0 ] unsigned char [12]
  3542 ;;  seculo          1   21[BANK0 ] unsigned char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      unsigned char 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : F/0
  3549 ;;		On exit  : F/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3552 ;;      Params:         0       4       0       0       0       0       0       0       0
  3553 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3554 ;;      Temps:          0       5       0       0       0       0       0       0       0
  3555 ;;      Totals:         0      22       0       0       0       0       0       0       0
  3556 ;;Total ram usage:       22 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    4
  3559 ;; This function calls:
  3560 ;;		___lwdiv
  3561 ;;		___lwmod
  3562 ;;		___wmul
  3563 ;; This function is called by:
  3564 ;;		_main
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text11
  3569  007606                     __ptext11:
  3570                           	opt stack 0
  3571  007606                     _dia_da_semana:
  3572                           	opt stack 26
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;time.c: 6: char tabela_mes[]= {0,3,3,6,1,4,6,2,5,0,3,5};
  3576                           
  3577                           ;incstack = 0
  3578  007606  EE20  F028         	lfsr	2,dia_da_semana@F5261
  3579  00760A  EE10  F0CD         	lfsr	1,dia_da_semana@tabela_mes
  3580  00760E  0E0B               	movlw	11
  3581  007610                     u4251:
  3582  007610  CFDB FFE3          	movff	plusw2,plusw1
  3583  007614  06E8               	decf	wreg,f,c
  3584  007616  E2FC               	bc	u4251
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;time.c: 7: unsigned char seculo;
  3588                           ;time.c: 9: ano+=15;
  3589  007618  0E0F               	movlw	15
  3590  00761A  27C4               	addwf	dia_da_semana@ano& (0+255),f,b
  3591  00761C  0E00               	movlw	0
  3592  00761E  23C5               	addwfc	(dia_da_semana@ano+1)& (0+255),f,b
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;time.c: 10: seculo = ano/100;
  3596  007620  C0C4  F01D         	movff	dia_da_semana@ano,___lwdiv@dividend
  3597  007624  C0C5  F01E         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  3598  007628  6A20               	clrf	___lwdiv@divisor+1,c
  3599  00762A  0E64               	movlw	100
  3600  00762C  6E1F               	movwf	___lwdiv@divisor,c
  3601  00762E  ECE9  F038         	call	___lwdiv	;wreg free
  3602  007632  501D               	movf	?___lwdiv,w,c
  3603  007634  6FD9               	movwf	dia_da_semana@seculo& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;time.c: 11: ano-= (ano/100);
  3607  007636  C0C4  F01D         	movff	dia_da_semana@ano,___lwdiv@dividend
  3608  00763A  C0C5  F01E         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  3609  00763E  6A20               	clrf	___lwdiv@divisor+1,c
  3610  007640  0E64               	movlw	100
  3611  007642  6E1F               	movwf	___lwdiv@divisor,c
  3612  007644  ECE9  F038         	call	___lwdiv	;wreg free
  3613  007648  501D               	movf	?___lwdiv,w,c
  3614  00764A  5FC4               	subwf	dia_da_semana@ano& (0+255),f,b
  3615  00764C  501E               	movf	?___lwdiv+1,w,c
  3616  00764E  5BC5               	subwfb	(dia_da_semana@ano+1)& (0+255),f,b
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;time.c: 13: if(! ((ano+3)%4) ){
  3620  007650  C0C4  F0C8         	movff	dia_da_semana@ano,??_dia_da_semana
  3621  007654  0E03               	movlw	3
  3622  007656  27C8               	addwf	??_dia_da_semana& (0+255),f,b
  3623  007658  17C8               	andwf	??_dia_da_semana& (0+255),f,b
  3624  00765A  E10B               	bnz	l3668
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;time.c: 14: if (mes==1) tabela_mes[mes-1]=6;
  3628  00765C  05C6               	decf	dia_da_semana@mes& (0+255),w,b
  3629  00765E  E103               	bnz	l3664
  3630                           
  3631                           ; BSR set to: 0
  3632  007660  D841               	call	PL12	;call to abstracted procedure
  3633  007662  0E06               	movlw	6
  3634  007664  D005               	goto	L2
  3635  007666                     l3664:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;time.c: 15: else if(mes==2) tabela_mes[mes-1]=2;}
  3639  007666  0E02               	movlw	2
  3640  007668  19C6               	xorwf	dia_da_semana@mes& (0+255),w,b
  3641  00766A  E103               	bnz	l3668
  3642                           
  3643                           ; BSR set to: 0
  3644  00766C  D83B               	call	PL12	;call to abstracted procedure
  3645  00766E  0E02               	movlw	2
  3646  007670                     L2:
  3647  007670  6EDF               	movwf	indf2,c
  3648  007672                     l3668:
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;time.c: 17: return (( (6 - seculo*2) + dia + tabela_mes[mes-1] + ano + (ano/4))%7);
  3652  007672  C0D9  F01D         	movff	dia_da_semana@seculo,___wmul@multiplier
  3653  007676  6A1E               	clrf	___wmul@multiplier+1,c
  3654  007678  6820               	setf	___wmul@multiplicand+1,c
  3655  00767A  0EFE               	movlw	254
  3656  00767C  6E1F               	movwf	___wmul@multiplicand,c
  3657  00767E  EC0E  F038         	call	___wmul	;wreg free
  3658  007682  C0C4  F0C8         	movff	dia_da_semana@ano,??_dia_da_semana
  3659  007686  C0C5  F0C9         	movff	dia_da_semana@ano+1,??_dia_da_semana+1
  3660  00768A  90D8               	bcf	status,0,c
  3661  00768C  33C9               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  3662  00768E  33C8               	rrcf	??_dia_da_semana& (0+255),f,b
  3663  007690  90D8               	bcf	status,0,c
  3664  007692  33C9               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  3665  007694  33C8               	rrcf	??_dia_da_semana& (0+255),f,b
  3666  007696  C0C6  F0CA         	movff	dia_da_semana@mes,??_dia_da_semana+2
  3667  00769A  07CA               	decf	(??_dia_da_semana+2)& (0+255),f,b
  3668  00769C  51CA               	movf	(??_dia_da_semana+2)& (0+255),w,b
  3669  00769E  0FCD               	addlw	low dia_da_semana@tabela_mes
  3670  0076A0  6ED9               	movwf	fsr2l,c
  3671  0076A2  6ADA               	clrf	fsr2h,c
  3672  0076A4  50DF               	movf	indf2,w,c
  3673  0076A6  C0C7  F0CB         	movff	dia_da_semana@dia,??_dia_da_semana+3
  3674  0076AA  6BCC               	clrf	(??_dia_da_semana+4)& (0+255),b
  3675  0076AC  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  3676  0076AE  0E00               	movlw	0
  3677  0076B0  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  3678  0076B2  51C8               	movf	??_dia_da_semana& (0+255),w,b
  3679  0076B4  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  3680  0076B6  51C9               	movf	(??_dia_da_semana+1)& (0+255),w,b
  3681  0076B8  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  3682  0076BA  501D               	movf	?___wmul,w,c
  3683  0076BC  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  3684  0076BE  501E               	movf	?___wmul+1,w,c
  3685  0076C0  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  3686  0076C2  51C4               	movf	dia_da_semana@ano& (0+255),w,b
  3687  0076C4  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  3688  0076C6  51C5               	movf	(dia_da_semana@ano+1)& (0+255),w,b
  3689  0076C8  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  3690  0076CA  0E06               	movlw	6
  3691  0076CC  25CB               	addwf	(??_dia_da_semana+3)& (0+255),w,b
  3692  0076CE  6E23               	movwf	___lwmod@dividend,c
  3693  0076D0  0E00               	movlw	0
  3694  0076D2  21CC               	addwfc	(??_dia_da_semana+4)& (0+255),w,b
  3695  0076D4  6E24               	movwf	___lwmod@dividend+1,c
  3696  0076D6  6A26               	clrf	___lwmod@divisor+1,c
  3697  0076D8  0E07               	movlw	7
  3698  0076DA  6E25               	movwf	___lwmod@divisor,c
  3699  0076DC  ECA9  F038         	call	___lwmod	;wreg free
  3700  0076E0  5023               	movf	?___lwmod,w,c
  3701                           
  3702                           ; BSR set to: 0
  3703  0076E2  0012               	return		;funcret
  3704  0076E4                     __end_of_dia_da_semana:
  3705                           	opt stack 0
  3706  0076E4                     PL12:
  3707                           	opt stack 26
  3708  0076E4  C0C6  F0C8         	movff	dia_da_semana@mes,??_dia_da_semana
  3709  0076E8  07C8               	decf	??_dia_da_semana& (0+255),f,b
  3710  0076EA  51C8               	movf	??_dia_da_semana& (0+255),w,b
  3711  0076EC  0FCD               	addlw	low dia_da_semana@tabela_mes
  3712  0076EE  6ED9               	movwf	fsr2l,c
  3713  0076F0  6ADA               	clrf	fsr2h,c
  3714  0076F2  0012               	return	
  3715  0076F4                     __end_ofPL12:
  3716                           	opt stack 0
  3717                           tblptru	equ	0xFF8
  3718                           tblptrh	equ	0xFF7
  3719                           tblptrl	equ	0xFF6
  3720                           tablat	equ	0xFF5
  3721                           prodh	equ	0xFF4
  3722                           prodl	equ	0xFF3
  3723                           intcon	equ	0xFF2
  3724                           intcon2	equ	0xFF1
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           indf1	equ	0xFE7
  3728                           postinc1	equ	0xFE6
  3729                           postdec1	equ	0xFE5
  3730                           plusw1	equ	0xFE3
  3731                           fsr1h	equ	0xFE2
  3732                           fsr1l	equ	0xFE1
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           plusw2	equ	0xFDB
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function ___wmul *****************
  3741 ;; Defined at:
  3742 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  multiplier      2   28[COMRAM] unsigned int 
  3745 ;;  multiplicand    2   30[COMRAM] unsigned int 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  product         2   32[COMRAM] unsigned int 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  2   28[COMRAM] unsigned int 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0, prodl, prodh
  3752 ;; Tracked objects:
  3753 ;;		On entry : F/0
  3754 ;;		On exit  : F/0
  3755 ;;		Unchanged: F/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3757 ;;      Params:         4       0       0       0       0       0       0       0       0
  3758 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3760 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3761 ;;Total ram usage:        6 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    3
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_numero_para_ascii
  3768 ;;		_dia_da_semana
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text12
  3773  00701C                     __ptext12:
  3774                           	opt stack 0
  3775  00701C                     ___wmul:
  3776                           	opt stack 26
  3777                           
  3778                           ; BSR set to: 0
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;incstack = 0
  3782  00701C  501D               	movf	___wmul@multiplier,w,c
  3783  00701E  021F               	mulwf	___wmul@multiplicand,c
  3784  007020  CFF3 F021          	movff	prodl,___wmul@product
  3785  007024  CFF4 F022          	movff	prodh,___wmul@product+1
  3786  007028  501D               	movf	___wmul@multiplier,w,c
  3787  00702A  0220               	mulwf	___wmul@multiplicand+1,c
  3788  00702C  50F3               	movf	prodl,w,c
  3789  00702E  2622               	addwf	___wmul@product+1,f,c
  3790  007030  501E               	movf	___wmul@multiplier+1,w,c
  3791  007032  021F               	mulwf	___wmul@multiplicand,c
  3792  007034  50F3               	movf	prodl,w,c
  3793  007036  2622               	addwf	___wmul@product+1,f,c
  3794                           
  3795                           ; BSR set to: 0
  3796  007038  C021  F01D         	movff	___wmul@product,?___wmul
  3797  00703C  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  3798                           
  3799                           ; BSR set to: 0
  3800  007040  0012               	return		;funcret
  3801  007042                     __end_of___wmul:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           prodh	equ	0xFF4
  3808                           prodl	equ	0xFF3
  3809                           intcon	equ	0xFF2
  3810                           intcon2	equ	0xFF1
  3811                           postinc0	equ	0xFEE
  3812                           wreg	equ	0xFE8
  3813                           indf1	equ	0xFE7
  3814                           postinc1	equ	0xFE6
  3815                           postdec1	equ	0xFE5
  3816                           plusw1	equ	0xFE3
  3817                           fsr1h	equ	0xFE2
  3818                           fsr1l	equ	0xFE1
  3819                           indf2	equ	0xFDF
  3820                           postinc2	equ	0xFDE
  3821                           plusw2	equ	0xFDB
  3822                           fsr2h	equ	0xFDA
  3823                           fsr2l	equ	0xFD9
  3824                           status	equ	0xFD8
  3825                           
  3826 ;; *************** function ___lwmod *****************
  3827 ;; Defined at:
  3828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  dividend        2   34[COMRAM] unsigned int 
  3831 ;;  divisor         2   36[COMRAM] unsigned int 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  counter         1   38[COMRAM] unsigned char 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  2   34[COMRAM] unsigned int 
  3836 ;; Registers used:
  3837 ;;		wreg, status,2, status,0
  3838 ;; Tracked objects:
  3839 ;;		On entry : F/0
  3840 ;;		On exit  : F/0
  3841 ;;		Unchanged: F/0
  3842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3843 ;;      Params:         4       0       0       0       0       0       0       0       0
  3844 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3845 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3846 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3847 ;;Total ram usage:        5 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    3
  3850 ;; This function calls:
  3851 ;;		Nothing
  3852 ;; This function is called by:
  3853 ;;		_dia_da_semana
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text13
  3858  007152                     __ptext13:
  3859                           	opt stack 0
  3860  007152                     ___lwmod:
  3861                           	opt stack 26
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;incstack = 0
  3867  007152  5025               	movf	___lwmod@divisor,w,c
  3868  007154  1026               	iorwf	___lwmod@divisor+1,w,c
  3869  007156  E017               	bz	l1303
  3870                           
  3871                           ; BSR set to: 0
  3872  007158  0E01               	movlw	1
  3873  00715A  6E27               	movwf	___lwmod@counter,c
  3874  00715C  D004               	goto	l3626
  3875  00715E                     l3624:
  3876                           
  3877                           ; BSR set to: 0
  3878  00715E  90D8               	bcf	status,0,c
  3879  007160  3625               	rlcf	___lwmod@divisor,f,c
  3880  007162  3626               	rlcf	___lwmod@divisor+1,f,c
  3881  007164  2A27               	incf	___lwmod@counter,f,c
  3882  007166                     l3626:
  3883                           
  3884                           ; BSR set to: 0
  3885  007166  AE26               	btfss	___lwmod@divisor+1,7,c
  3886  007168  D7FA               	goto	l3624
  3887  00716A                     l3628:
  3888                           
  3889                           ; BSR set to: 0
  3890  00716A  5025               	movf	___lwmod@divisor,w,c
  3891  00716C  5C23               	subwf	___lwmod@dividend,w,c
  3892  00716E  5026               	movf	___lwmod@divisor+1,w,c
  3893  007170  5824               	subwfb	___lwmod@dividend+1,w,c
  3894  007172  E304               	bnc	l3632
  3895                           
  3896                           ; BSR set to: 0
  3897  007174  5025               	movf	___lwmod@divisor,w,c
  3898  007176  5E23               	subwf	___lwmod@dividend,f,c
  3899  007178  5026               	movf	___lwmod@divisor+1,w,c
  3900  00717A  5A24               	subwfb	___lwmod@dividend+1,f,c
  3901  00717C                     l3632:
  3902                           
  3903                           ; BSR set to: 0
  3904  00717C  90D8               	bcf	status,0,c
  3905  00717E  3226               	rrcf	___lwmod@divisor+1,f,c
  3906  007180  3225               	rrcf	___lwmod@divisor,f,c
  3907                           
  3908                           ; BSR set to: 0
  3909  007182  2E27               	decfsz	___lwmod@counter,f,c
  3910  007184  D7F2               	goto	l3628
  3911  007186                     l1303:
  3912                           
  3913                           ; BSR set to: 0
  3914  007186  C023  F023         	movff	___lwmod@dividend,?___lwmod
  3915  00718A  C024  F024         	movff	___lwmod@dividend+1,?___lwmod+1
  3916                           
  3917                           ; BSR set to: 0
  3918  00718E  0012               	return		;funcret
  3919  007190                     __end_of___lwmod:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           intcon2	equ	0xFF1
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           indf1	equ	0xFE7
  3932                           postinc1	equ	0xFE6
  3933                           postdec1	equ	0xFE5
  3934                           plusw1	equ	0xFE3
  3935                           fsr1h	equ	0xFE2
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           plusw2	equ	0xFDB
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function ___lwdiv *****************
  3945 ;; Defined at:
  3946 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  dividend        2   28[COMRAM] unsigned int 
  3949 ;;  divisor         2   30[COMRAM] unsigned int 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  quotient        2   33[COMRAM] unsigned int 
  3952 ;;  counter         1   32[COMRAM] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  2   28[COMRAM] unsigned int 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : F/0
  3959 ;;		On exit  : F/0
  3960 ;;		Unchanged: F/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3962 ;;      Params:         4       0       0       0       0       0       0       0       0
  3963 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3965 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3966 ;;Total ram usage:        7 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    3
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_dia_da_semana
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text14
  3977  0071D2                     __ptext14:
  3978                           	opt stack 0
  3979  0071D2                     ___lwdiv:
  3980                           	opt stack 26
  3981                           
  3982                           ; BSR set to: 0
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;incstack = 0
  3986  0071D2  6A22               	clrf	___lwdiv@quotient,c
  3987  0071D4  6A23               	clrf	___lwdiv@quotient+1,c
  3988                           
  3989                           ; BSR set to: 0
  3990  0071D6  501F               	movf	___lwdiv@divisor,w,c
  3991  0071D8  1020               	iorwf	___lwdiv@divisor+1,w,c
  3992  0071DA  E01B               	bz	l1293
  3993                           
  3994                           ; BSR set to: 0
  3995  0071DC  0E01               	movlw	1
  3996  0071DE  6E21               	movwf	___lwdiv@counter,c
  3997  0071E0  D004               	goto	l3606
  3998  0071E2                     l3604:
  3999                           
  4000                           ; BSR set to: 0
  4001  0071E2  90D8               	bcf	status,0,c
  4002  0071E4  361F               	rlcf	___lwdiv@divisor,f,c
  4003  0071E6  3620               	rlcf	___lwdiv@divisor+1,f,c
  4004  0071E8  2A21               	incf	___lwdiv@counter,f,c
  4005  0071EA                     l3606:
  4006                           
  4007                           ; BSR set to: 0
  4008  0071EA  AE20               	btfss	___lwdiv@divisor+1,7,c
  4009  0071EC  D7FA               	goto	l3604
  4010  0071EE                     l3608:
  4011                           
  4012                           ; BSR set to: 0
  4013  0071EE  90D8               	bcf	status,0,c
  4014  0071F0  3622               	rlcf	___lwdiv@quotient,f,c
  4015  0071F2  3623               	rlcf	___lwdiv@quotient+1,f,c
  4016                           
  4017                           ; BSR set to: 0
  4018  0071F4  501F               	movf	___lwdiv@divisor,w,c
  4019  0071F6  5C1D               	subwf	___lwdiv@dividend,w,c
  4020  0071F8  5020               	movf	___lwdiv@divisor+1,w,c
  4021  0071FA  581E               	subwfb	___lwdiv@dividend+1,w,c
  4022  0071FC  E305               	bnc	l3616
  4023                           
  4024                           ; BSR set to: 0
  4025  0071FE  501F               	movf	___lwdiv@divisor,w,c
  4026  007200  5E1D               	subwf	___lwdiv@dividend,f,c
  4027  007202  5020               	movf	___lwdiv@divisor+1,w,c
  4028  007204  5A1E               	subwfb	___lwdiv@dividend+1,f,c
  4029                           
  4030                           ; BSR set to: 0
  4031  007206  8022               	bsf	___lwdiv@quotient,0,c
  4032  007208                     l3616:
  4033                           
  4034                           ; BSR set to: 0
  4035  007208  90D8               	bcf	status,0,c
  4036  00720A  3220               	rrcf	___lwdiv@divisor+1,f,c
  4037  00720C  321F               	rrcf	___lwdiv@divisor,f,c
  4038                           
  4039                           ; BSR set to: 0
  4040  00720E  2E21               	decfsz	___lwdiv@counter,f,c
  4041  007210  D7EE               	goto	l3608
  4042  007212                     l1293:
  4043                           
  4044                           ; BSR set to: 0
  4045  007212  C022  F01D         	movff	___lwdiv@quotient,?___lwdiv
  4046  007216  C023  F01E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4047                           
  4048                           ; BSR set to: 0
  4049  00721A  0012               	return		;funcret
  4050  00721C                     __end_of___lwdiv:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           intcon2	equ	0xFF1
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           indf1	equ	0xFE7
  4063                           postinc1	equ	0xFE6
  4064                           postdec1	equ	0xFE5
  4065                           plusw1	equ	0xFE3
  4066                           fsr1h	equ	0xFE2
  4067                           fsr1l	equ	0xFE1
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           plusw2	equ	0xFDB
  4071                           fsr2h	equ	0xFDA
  4072                           fsr2l	equ	0xFD9
  4073                           status	equ	0xFD8
  4074                           
  4075 ;; *************** function _delay_ms *****************
  4076 ;; Defined at:
  4077 ;;		line 79 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  delay_total     2   28[COMRAM] unsigned int 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  temp            2   31[COMRAM] unsigned int 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;		None               void
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4091 ;;      Params:         2       0       0       0       0       0       0       0       0
  4092 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4093 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4094 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4095 ;;Total ram usage:        5 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    3
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text15
  4106  00708E                     __ptext15:
  4107                           	opt stack 0
  4108  00708E                     _delay_ms:
  4109                           	opt stack 27
  4110                           
  4111                           ;ascii.c: 80: unsigned int temp = 0;
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;incstack = 0
  4115  00708E  6A20               	clrf	delay_ms@temp,c
  4116  007090  6A21               	clrf	delay_ms@temp+1,c
  4117                           
  4118                           ;ascii.c: 81: while(temp < delay_total){
  4119  007092  D00A               	goto	l479
  4120  007094                     l2908:
  4121                           
  4122                           ;ascii.c: 82: _delay((unsigned long)((1)*(16000000/4000.0)));
  4123  007094  0E06               	movlw	6
  4124  007096  6E1F               	movwf	??_delay_ms& (0+255),c
  4125  007098  0E30               	movlw	48
  4126  00709A                     u5247:
  4127  00709A  2EE8               	decfsz	wreg,f,c
  4128  00709C  D7FE               	goto	u5247
  4129  00709E  2E1F               	decfsz	??_delay_ms& (0+255),f,c
  4130  0070A0  D7FC               	goto	u5247
  4131  0070A2  D000               	nop2	
  4132                           
  4133                           ;ascii.c: 83: temp++;}
  4134  0070A4  4A20               	infsnz	delay_ms@temp,f,c
  4135  0070A6  2A21               	incf	delay_ms@temp+1,f,c
  4136  0070A8                     l479:
  4137  0070A8  501D               	movf	delay_ms@delay_total,w,c
  4138  0070AA  5C20               	subwf	delay_ms@temp,w,c
  4139  0070AC  501E               	movf	delay_ms@delay_total+1,w,c
  4140  0070AE  5821               	subwfb	delay_ms@temp+1,w,c
  4141  0070B0  B0D8               	btfsc	status,0,c
  4142  0070B2  0012               	return		;funcret
  4143  0070B4  D7EF               	goto	l2908
  4144  0070B6                     __end_of_delay_ms:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           intcon2	equ	0xFF1
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           indf1	equ	0xFE7
  4157                           postinc1	equ	0xFE6
  4158                           postdec1	equ	0xFE5
  4159                           plusw1	equ	0xFE3
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           plusw2	equ	0xFDB
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _config_serial *****************
  4170 ;; Defined at:
  4171 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  baud            1    wreg     unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  baud            1   28[COMRAM] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;		None               void
  4178 ;; Registers used:
  4179 ;;		wreg
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0
  4186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4188 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4189 ;;Total ram usage:        1 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    3
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_main
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text16
  4200  006FB4                     __ptext16:
  4201                           	opt stack 0
  4202  006FB4                     _config_serial:
  4203                           	opt stack 27
  4204                           
  4205                           ;incstack = 0
  4206                           ;config_serial@baud stored from wreg
  4207  006FB4  6E1D               	movwf	config_serial@baud,c
  4208                           
  4209                           ;serial.c: 7: SYNC=0;
  4210  006FB6  98AC               	bcf	4012,4,c	;volatile
  4211                           
  4212                           ;serial.c: 8: BRGH=1;
  4213  006FB8  84AC               	bsf	4012,2,c	;volatile
  4214                           
  4215                           ;serial.c: 9: BRG16=1;
  4216  006FBA  86B8               	bsf	4024,3,c	;volatile
  4217                           
  4218                           ;serial.c: 10: SPBRG=baud;
  4219  006FBC  C01D  FFAF         	movff	config_serial@baud,4015	;volatile
  4220                           
  4221                           ;serial.c: 11: TX9=0;
  4222  006FC0  9CAC               	bcf	4012,6,c	;volatile
  4223                           
  4224                           ;serial.c: 12: RX9=0;
  4225  006FC2  9CAB               	bcf	4011,6,c	;volatile
  4226                           
  4227                           ;serial.c: 13: TXEN=1;
  4228  006FC4  8AAC               	bsf	4012,5,c	;volatile
  4229                           
  4230                           ;serial.c: 14: RCIE=0;
  4231  006FC6  9A9D               	bcf	3997,5,c	;volatile
  4232                           
  4233                           ;serial.c: 15: CREN=1;
  4234  006FC8  88AB               	bsf	4011,4,c	;volatile
  4235                           
  4236                           ;serial.c: 16: SPEN=1;
  4237  006FCA  8EAB               	bsf	4011,7,c	;volatile
  4238                           
  4239                           ;serial.c: 17: TXCKP = 0;
  4240  006FCC  98B8               	bcf	4024,4,c	;volatile
  4241                           
  4242                           ;serial.c: 18: TXIE = 0;
  4243  006FCE  989D               	bcf	3997,4,c	;volatile
  4244                           
  4245                           ;serial.c: 19: TX9 = 0;
  4246  006FD0  9CAC               	bcf	4012,6,c	;volatile
  4247  006FD2  0012               	return		;funcret
  4248  006FD4                     __end_of_config_serial:
  4249                           	opt stack 0
  4250                           tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           prodh	equ	0xFF4
  4255                           prodl	equ	0xFF3
  4256                           intcon	equ	0xFF2
  4257                           intcon2	equ	0xFF1
  4258                           postinc0	equ	0xFEE
  4259                           wreg	equ	0xFE8
  4260                           indf1	equ	0xFE7
  4261                           postinc1	equ	0xFE6
  4262                           postdec1	equ	0xFE5
  4263                           plusw1	equ	0xFE3
  4264                           fsr1h	equ	0xFE2
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           plusw2	equ	0xFDB
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _carregar_senha *****************
  4274 ;; Defined at:
  4275 ;;		line 7 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  conta           1    wreg     unsigned char 
  4278 ;;  senha_a_carr    2   30[COMRAM] PTR unsigned char [17]
  4279 ;;		 -> senha(272), 
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  conta           1   37[COMRAM] unsigned char 
  4282 ;;  i               1   36[COMRAM] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;		None               void
  4285 ;; Registers used:
  4286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : F/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4292 ;;      Params:         2       0       0       0       0       0       0       0       0
  4293 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4294 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4295 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4296 ;;Total ram usage:        8 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    4
  4299 ;; This function calls:
  4300 ;;		_Read_b_eep
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text17
  4307  007556                     __ptext17:
  4308                           	opt stack 0
  4309  007556                     _carregar_senha:
  4310                           	opt stack 26
  4311                           
  4312                           ;incstack = 0
  4313                           ;carregar_senha@conta stored from wreg
  4314  007556  6E26               	movwf	carregar_senha@conta,c
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;eeprom_interna.c: 8: TXREG = '\n';
  4318  007558  0E0A               	movlw	10
  4319  00755A  6EAD               	movwf	4013,c	;volatile
  4320  00755C                     l589:
  4321                           
  4322                           ; BSR set to: 0
  4323  00755C  A2AC               	btfss	4012,1,c	;volatile
  4324  00755E  D7FE               	goto	l589
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;eeprom_interna.c: 10: char i = 0;
  4328  007560  6A25               	clrf	carregar_senha@i,c
  4329  007562                     l2812:
  4330                           
  4331                           ;eeprom_interna.c: 13: senha_a_carregar[conta][i] = Read_b_eep((conta*16) + i);
  4332  007562  D834               	call	PL2	;call to abstracted procedure
  4333  007564  5025               	movf	carregar_senha@i,w,c
  4334  007566  D83D               	call	PL8	;call to abstracted procedure
  4335  007568  5025               	movf	carregar_senha@i,w,c
  4336  00756A  2423               	addwf	??_carregar_senha+2,w,c
  4337  00756C  6E1D               	movwf	Read_b_eep@badd,c
  4338  00756E  0E00               	movlw	0
  4339  007570  2024               	addwfc	??_carregar_senha+3,w,c
  4340  007572  6E1E               	movwf	Read_b_eep@badd+1,c
  4341  007574  EC9A  F037         	call	_Read_b_eep	;wreg free
  4342  007578  6EDF               	movwf	indf2,c
  4343                           
  4344                           ;eeprom_interna.c: 14: TXREG= senha_a_carregar[conta][i];
  4345  00757A  D828               	call	PL2	;call to abstracted procedure
  4346  00757C  5025               	movf	carregar_senha@i,w,c
  4347  00757E  2421               	addwf	??_carregar_senha,w,c
  4348  007580  6ED9               	movwf	fsr2l,c
  4349  007582  0E00               	movlw	0
  4350  007584  2022               	addwfc	??_carregar_senha+1,w,c
  4351  007586  6EDA               	movwf	fsr2h,c
  4352  007588  50DF               	movf	indf2,w,c
  4353  00758A  6EAD               	movwf	4013,c	;volatile
  4354  00758C                     l593:
  4355  00758C  A2AC               	btfss	4012,1,c	;volatile
  4356  00758E  D7FE               	goto	l593
  4357                           
  4358                           ;eeprom_interna.c: 16: i++;} while( senha_a_carregar[conta][i-1] && i<(16-1));
  4359  007590  2A25               	incf	carregar_senha@i,f,c
  4360  007592  D81C               	call	PL2	;call to abstracted procedure
  4361  007594  5025               	movf	carregar_senha@i,w,c
  4362  007596  2621               	addwf	??_carregar_senha,f,c
  4363  007598  0E00               	movlw	0
  4364  00759A  2222               	addwfc	??_carregar_senha+1,f,c
  4365  00759C  0EFF               	movlw	255
  4366  00759E  2421               	addwf	??_carregar_senha,w,c
  4367  0075A0  6ED9               	movwf	fsr2l,c
  4368  0075A2  0EFF               	movlw	255
  4369  0075A4  2022               	addwfc	??_carregar_senha+1,w,c
  4370  0075A6  6EDA               	movwf	fsr2h,c
  4371  0075A8  50DF               	movf	indf2,w,c
  4372  0075AA  E003               	bz	l2822
  4373  0075AC  0E0E               	movlw	14
  4374  0075AE  6425               	cpfsgt	carregar_senha@i,c
  4375  0075B0  D7D8               	goto	l2812
  4376  0075B2                     l2822:
  4377                           
  4378                           ;eeprom_interna.c: 20: senha_a_carregar[conta][16] = Read_b_eep((16*(conta+1))-1);
  4379  0075B2  D80C               	call	PL2	;call to abstracted procedure
  4380  0075B4  0E10               	movlw	16
  4381  0075B6  D815               	call	PL8	;call to abstracted procedure
  4382  0075B8  0E0F               	movlw	15
  4383  0075BA  2423               	addwf	??_carregar_senha+2,w,c
  4384  0075BC  6E1D               	movwf	Read_b_eep@badd,c
  4385  0075BE  0E00               	movlw	0
  4386  0075C0  2024               	addwfc	??_carregar_senha+3,w,c
  4387  0075C2  6E1E               	movwf	Read_b_eep@badd+1,c
  4388  0075C4  EC9A  F037         	call	_Read_b_eep	;wreg free
  4389  0075C8  6EDF               	movwf	indf2,c
  4390  0075CA  0012               	return		;funcret
  4391  0075CC                     __end_of_carregar_senha:
  4392                           	opt stack 0
  4393  0075CC                     PL2:
  4394                           	opt stack 26
  4395  0075CC  5026               	movf	carregar_senha@conta,w,c
  4396  0075CE  0D11               	mullw	17
  4397  0075D0  C01F  F021         	movff	carregar_senha@senha_a_carregar,??_carregar_senha
  4398  0075D4  C020  F022         	movff	carregar_senha@senha_a_carregar+1,??_carregar_senha+1
  4399  0075D8  50F3               	movf	prodl,w,c
  4400  0075DA  2621               	addwf	??_carregar_senha,f,c
  4401  0075DC  50F4               	movf	prodh,w,c
  4402  0075DE  2222               	addwfc	??_carregar_senha+1,f,c
  4403  0075E0  0012               	return	
  4404  0075E2                     __end_ofPL2:
  4405                           	opt stack 0
  4406  0075E2                     PL8:
  4407                           	opt stack 26
  4408  0075E2  2421               	addwf	??_carregar_senha,w,c
  4409  0075E4  6ED9               	movwf	fsr2l,c
  4410  0075E6  0E00               	movlw	0
  4411  0075E8  2022               	addwfc	??_carregar_senha+1,w,c
  4412  0075EA  6EDA               	movwf	fsr2h,c
  4413  0075EC  5026               	movf	carregar_senha@conta,w,c
  4414  0075EE  6E23               	movwf	(??_carregar_senha+2)& (0+255),c
  4415  0075F0  6A24               	clrf	(??_carregar_senha+3)& (0+255),c
  4416  0075F2  3A23               	swapf	??_carregar_senha+2,f,c
  4417  0075F4  3A24               	swapf	??_carregar_senha+3,f,c
  4418  0075F6  0EF0               	movlw	240
  4419  0075F8  1624               	andwf	??_carregar_senha+3,f,c
  4420  0075FA  5023               	movf	??_carregar_senha+2,w,c
  4421  0075FC  0B0F               	andlw	15
  4422  0075FE  1224               	iorwf	??_carregar_senha+3,f,c
  4423  007600  0EF0               	movlw	240
  4424  007602  1623               	andwf	??_carregar_senha+2,f,c
  4425  007604  0CF0               	retlw	240
  4426  007606                     __end_ofPL8:
  4427                           	opt stack 0
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           intcon2	equ	0xFF1
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           indf1	equ	0xFE7
  4439                           postinc1	equ	0xFE6
  4440                           postdec1	equ	0xFE5
  4441                           plusw1	equ	0xFE3
  4442                           fsr1h	equ	0xFE2
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           plusw2	equ	0xFDB
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _Read_b_eep *****************
  4452 ;; Defined at:
  4453 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\read_B.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  badd            2   28[COMRAM] unsigned int 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;		None
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      unsigned char 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4467 ;;      Params:         2       0       0       0       0       0       0       0       0
  4468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4470 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4471 ;;Total ram usage:        2 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    3
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;;		_carregar_senha
  4479 ;;		_verificar_num_contas
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text18
  4484  006F34                     __ptext18:
  4485                           	opt stack 0
  4486  006F34                     _Read_b_eep:
  4487                           	opt stack 26
  4488                           
  4489                           ;incstack = 0
  4490  006F34  C01D  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  4491  006F38  9CA6               	bcf	4006,6,c	;volatile
  4492  006F3A  9EA6               	bcf	4006,7,c	;volatile
  4493  006F3C  80A6               	bsf	4006,0,c	;volatile
  4494  006F3E  F000               	nop	
  4495  006F40  F000               	nop	
  4496  006F42  50A8               	movf	4008,w,c	;volatile
  4497  006F44  0012               	return		;funcret
  4498  006F46                     __end_of_Read_b_eep:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           prodh	equ	0xFF4
  4505                           prodl	equ	0xFF3
  4506                           intcon	equ	0xFF2
  4507                           intcon2	equ	0xFF1
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           indf1	equ	0xFE7
  4511                           postinc1	equ	0xFE6
  4512                           postdec1	equ	0xFE5
  4513                           plusw1	equ	0xFE3
  4514                           fsr1h	equ	0xFE2
  4515                           fsr1l	equ	0xFE1
  4516                           indf2	equ	0xFDF
  4517                           postinc2	equ	0xFDE
  4518                           plusw2	equ	0xFDB
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _ascii_para_numero *****************
  4524 ;; Defined at:
  4525 ;;		line 108 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  caractere3      1    wreg     unsigned char 
  4528 ;;  caractere2      1   28[COMRAM] unsigned char 
  4529 ;;  caractere1      1   29[COMRAM] unsigned char 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  caractere3      1   30[COMRAM] unsigned char 
  4532 ;;  numero          1   31[COMRAM] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      unsigned char 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0, prodl, prodh
  4537 ;; Tracked objects:
  4538 ;;		On entry : F/0
  4539 ;;		On exit  : F/0
  4540 ;;		Unchanged: F/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4542 ;;      Params:         2       0       0       0       0       0       0       0       0
  4543 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4545 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4546 ;;Total ram usage:        4 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    3
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_main
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text19
  4557  006F94                     __ptext19:
  4558                           	opt stack 0
  4559  006F94                     _ascii_para_numero:
  4560                           	opt stack 27
  4561                           
  4562                           ;incstack = 0
  4563                           ;ascii_para_numero@caractere3 stored from wreg
  4564  006F94  6E1F               	movwf	ascii_para_numero@caractere3,c
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;ascii.c: 109: char numero;
  4568                           ;ascii.c: 110: numero=((caractere3 - '0')*100);
  4569  006F96  501F               	movf	ascii_para_numero@caractere3,w,c
  4570  006F98  0FD0               	addlw	208
  4571  006F9A  0D64               	mullw	100
  4572  006F9C  CFF3 F020          	movff	prodl,ascii_para_numero@numero
  4573                           
  4574                           ;ascii.c: 111: numero+=((caractere2 - '0')*10);
  4575  006FA0  501D               	movf	ascii_para_numero@caractere2,w,c
  4576  006FA2  0FD0               	addlw	208
  4577  006FA4  0D0A               	mullw	10
  4578  006FA6  50F3               	movf	prodl,w,c
  4579  006FA8  2620               	addwf	ascii_para_numero@numero,f,c
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;ascii.c: 112: numero+=(caractere1 - '0');
  4583  006FAA  501E               	movf	ascii_para_numero@caractere1,w,c
  4584  006FAC  0FD0               	addlw	208
  4585  006FAE  2620               	addwf	ascii_para_numero@numero,f,c
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;ascii.c: 113: return numero;}
  4589  006FB0  5020               	movf	ascii_para_numero@numero,w,c
  4590                           
  4591                           ; BSR set to: 0
  4592  006FB2  0012               	return		;funcret
  4593  006FB4                     __end_of_ascii_para_numero:
  4594                           	opt stack 0
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           intcon2	equ	0xFF1
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           indf1	equ	0xFE7
  4606                           postinc1	equ	0xFE6
  4607                           postdec1	equ	0xFE5
  4608                           plusw1	equ	0xFE3
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           plusw2	equ	0xFDB
  4614                           fsr2h	equ	0xFDA
  4615                           fsr2l	equ	0xFD9
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _WriteI2C *****************
  4619 ;; Defined at:
  4620 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_writ.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  data_out        1    wreg     unsigned char 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  data_out        1   29[COMRAM] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      char 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2, status,0, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4634 ;;      Params:         0       0       0       0       0       0       0       0       0
  4635 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4637 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4638 ;;Total ram usage:        1 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    4
  4641 ;; This function calls:
  4642 ;;		_IdleI2C
  4643 ;; This function is called by:
  4644 ;;		_main
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text20
  4649  007190                     __ptext20:
  4650                           	opt stack 0
  4651  007190                     _WriteI2C:
  4652                           	opt stack 26
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;incstack = 0
  4656                           ;WriteI2C@data_out stored from wreg
  4657  007190  6E1E               	movwf	WriteI2C@data_out,c
  4658  007192  C01E  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  4659  007196  BEC6               	btfsc	4038,7,c	;volatile
  4660  007198  D01B               	goto	l756
  4661  00719A  50C6               	movf	4038,w,c	;volatile
  4662  00719C  0B0F               	andlw	15
  4663  00719E  0A08               	xorlw	8
  4664  0071A0  E00A               	bz	l2878
  4665  0071A2  50C6               	movf	4038,w,c	;volatile
  4666  0071A4  0B0F               	andlw	15
  4667  0071A6  0A0B               	xorlw	11
  4668  0071A8  E006               	bz	l2878
  4669  0071AA  88C6               	bsf	4038,4,c	;volatile
  4670  0071AC                     l759:
  4671  0071AC  A69E               	btfss	3998,3,c	;volatile
  4672  0071AE  D7FE               	goto	l759
  4673  0071B0  A4C7               	btfss	4039,2,c	;volatile
  4674  0071B2  50C7               	movf	4039,w,c	;volatile
  4675  0071B4  D00D               	goto	l756
  4676  0071B6                     l2878:
  4677  0071B6  50C6               	movf	4038,w,c	;volatile
  4678  0071B8  0B0F               	andlw	15
  4679  0071BA  0A08               	xorlw	8
  4680  0071BC  E004               	bz	l768
  4681  0071BE  50C6               	movf	4038,w,c	;volatile
  4682  0071C0  0B0F               	andlw	15
  4683  0071C2  0A0B               	xorlw	11
  4684  0071C4  E105               	bnz	l756
  4685  0071C6                     l768:
  4686  0071C6  B0C7               	btfsc	4039,0,c	;volatile
  4687  0071C8  D7FE               	goto	l768
  4688  0071CA  EC92  F037         	call	_IdleI2C	;wreg free
  4689  0071CE  50C5               	movf	4037,w,c	;volatile
  4690  0071D0                     l756:
  4691  0071D0  0012               	return		;funcret
  4692  0071D2                     __end_of_WriteI2C:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           postinc0	equ	0xFEE
  4703                           wreg	equ	0xFE8
  4704                           indf1	equ	0xFE7
  4705                           postinc1	equ	0xFE6
  4706                           postdec1	equ	0xFE5
  4707                           plusw1	equ	0xFE3
  4708                           fsr1h	equ	0xFE2
  4709                           fsr1l	equ	0xFE1
  4710                           indf2	equ	0xFDF
  4711                           postinc2	equ	0xFDE
  4712                           plusw2	equ	0xFDB
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _IdleI2C *****************
  4718 ;; Defined at:
  4719 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_idle.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;		None               void
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, status,0
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4735 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4736 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4737 ;;Total ram usage:        1 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    3
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_main
  4744 ;;		_WriteI2C
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text21
  4749  006F24                     __ptext21:
  4750                           	opt stack 0
  4751  006F24                     _IdleI2C:
  4752                           	opt stack 26
  4753  006F24                     l2478:
  4754  006F24  CFC5 F01D          	movff	4037,??_IdleI2C	;volatile
  4755  006F28  0E1F               	movlw	31
  4756  006F2A  161D               	andwf	??_IdleI2C,f,c
  4757  006F2C  B4D8               	btfsc	status,2,c
  4758  006F2E  B4C7               	btfsc	4039,2,c	;volatile
  4759  006F30  D7F9               	goto	l2478
  4760  006F32  0C1F               	retlw	31	;funcret
  4761  006F34                     __end_of_IdleI2C:
  4762                           	opt stack 0
  4763                           tblptru	equ	0xFF8
  4764                           tblptrh	equ	0xFF7
  4765                           tblptrl	equ	0xFF6
  4766                           tablat	equ	0xFF5
  4767                           prodh	equ	0xFF4
  4768                           prodl	equ	0xFF3
  4769                           intcon	equ	0xFF2
  4770                           intcon2	equ	0xFF1
  4771                           postinc0	equ	0xFEE
  4772                           wreg	equ	0xFE8
  4773                           indf1	equ	0xFE7
  4774                           postinc1	equ	0xFE6
  4775                           postdec1	equ	0xFE5
  4776                           plusw1	equ	0xFE3
  4777                           fsr1h	equ	0xFE2
  4778                           fsr1l	equ	0xFE1
  4779                           indf2	equ	0xFDF
  4780                           postinc2	equ	0xFDE
  4781                           plusw2	equ	0xFDB
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _ReadI2C *****************
  4787 ;; Defined at:
  4788 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_read.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      unsigned char 
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0
  4797 ;; Tracked objects:
  4798 ;;		On entry : F/0
  4799 ;;		On exit  : F/0
  4800 ;;		Unchanged: F/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4805 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4806 ;;Total ram usage:        0 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    3
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_main
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text22
  4817  006F60                     __ptext22:
  4818                           	opt stack 0
  4819  006F60                     _ReadI2C:
  4820                           	opt stack 27
  4821                           
  4822                           ; BSR set to: 0
  4823                           
  4824                           ;incstack = 0
  4825  006F60  50C6               	movf	4038,w,c	;volatile
  4826  006F62  0B0F               	andlw	15
  4827  006F64  0A08               	xorlw	8
  4828  006F66  E004               	bz	l734
  4829                           
  4830                           ; BSR set to: 0
  4831  006F68  50C6               	movf	4038,w,c	;volatile
  4832  006F6A  0B0F               	andlw	15
  4833  006F6C  0A0B               	xorlw	11
  4834  006F6E  B4D8               	btfsc	status,2,c
  4835  006F70                     l734:
  4836                           
  4837                           ; BSR set to: 0
  4838  006F70  86C5               	bsf	4037,3,c	;volatile
  4839  006F72                     l735:
  4840                           
  4841                           ; BSR set to: 0
  4842  006F72  A0C7               	btfss	4039,0,c	;volatile
  4843  006F74  D7FE               	goto	l735
  4844                           
  4845                           ; BSR set to: 0
  4846  006F76  50C9               	movf	4041,w,c	;volatile
  4847                           
  4848                           ; BSR set to: 0
  4849  006F78  0012               	return		;funcret
  4850  006F7A                     __end_of_ReadI2C:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           intcon2	equ	0xFF1
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           indf1	equ	0xFE7
  4863                           postinc1	equ	0xFE6
  4864                           postdec1	equ	0xFE5
  4865                           plusw1	equ	0xFE3
  4866                           fsr1h	equ	0xFE2
  4867                           fsr1l	equ	0xFE1
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           plusw2	equ	0xFDB
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _OpenI2C *****************
  4876 ;; Defined at:
  4877 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_open.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;  sync_mode       1    wreg     unsigned char 
  4880 ;;  slew            1   28[COMRAM] unsigned char 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  sync_mode       1   29[COMRAM] unsigned char 
  4883 ;; Return value:  Size  Location     Type
  4884 ;;		None               void
  4885 ;; Registers used:
  4886 ;;		wreg, status,2, status,0
  4887 ;; Tracked objects:
  4888 ;;		On entry : F/0
  4889 ;;		On exit  : F/0
  4890 ;;		Unchanged: F/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4892 ;;      Params:         1       0       0       0       0       0       0       0       0
  4893 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4895 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4896 ;;Total ram usage:        2 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    3
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_main
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text23
  4907  006F46                     __ptext23:
  4908                           	opt stack 0
  4909  006F46                     _OpenI2C:
  4910                           	opt stack 27
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;incstack = 0
  4914                           ;OpenI2C@sync_mode stored from wreg
  4915  006F46  6E1E               	movwf	OpenI2C@sync_mode,c
  4916                           
  4917                           ; BSR set to: 0
  4918  006F48  0E3F               	movlw	63
  4919  006F4A  16C7               	andwf	4039,f,c	;volatile
  4920                           
  4921                           ; BSR set to: 0
  4922  006F4C  6AC6               	clrf	4038,c	;volatile
  4923                           
  4924                           ; BSR set to: 0
  4925  006F4E  6AC5               	clrf	4037,c	;volatile
  4926  006F50  501E               	movf	OpenI2C@sync_mode,w,c
  4927  006F52  12C6               	iorwf	4038,f,c	;volatile
  4928  006F54  501D               	movf	OpenI2C@slew,w,c
  4929  006F56  12C7               	iorwf	4039,f,c	;volatile
  4930                           
  4931                           ; BSR set to: 0
  4932  006F58  8293               	bsf	3987,1,c	;volatile
  4933                           
  4934                           ; BSR set to: 0
  4935  006F5A  8093               	bsf	3987,0,c	;volatile
  4936                           
  4937                           ; BSR set to: 0
  4938  006F5C  8AC6               	bsf	4038,5,c	;volatile
  4939                           
  4940                           ; BSR set to: 0
  4941  006F5E  0012               	return		;funcret
  4942  006F60                     __end_of_OpenI2C:
  4943                           	opt stack 0
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           intcon2	equ	0xFF1
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           postinc1	equ	0xFE6
  4956                           postdec1	equ	0xFE5
  4957                           plusw1	equ	0xFE3
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           plusw2	equ	0xFDB
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _aux *****************
  4968 ;; Defined at:
  4969 ;;		line 110 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  temp            1    0        unsigned char 
  4974 ;;  temp            1    0        unsigned char 
  4975 ;;  caractere_a_    1   23[COMRAM] unsigned char 
  4976 ;;  linha           1   27[COMRAM] unsigned char 
  4977 ;;  coluna          1   26[COMRAM] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4987 ;;      Params:         0       0       0       0       0       0       0       0       0
  4988 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4989 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4990 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4991 ;;Total ram usage:       10 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    2
  4994 ;; This function calls:
  4995 ;;		_teclado_matricial
  4996 ;;		i2_numero_para_ascii
  4997 ;; This function is called by:
  4998 ;;		Interrupt level 2
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	intcode
  5003  001008                     __pintcode:
  5004                           	opt stack 0
  5005  001008                     _aux:
  5006                           	opt stack 26
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;incstack = 0
  5010  001008  CFD9 F014          	movff	fsr2l,??_aux+1
  5011  00100C  CFDA F015          	movff	fsr2h,??_aux+2
  5012  001010  CFF3 F016          	movff	prodl,??_aux+3
  5013  001014  ED7A  F03B         	call	int_func,f	;refresh shadow registers
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           intcon	equ	0xFF2
  5021                           intcon2	equ	0xFF1
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           indf1	equ	0xFE7
  5025                           postinc1	equ	0xFE6
  5026                           postdec1	equ	0xFE5
  5027                           plusw1	equ	0xFE3
  5028                           fsr1h	equ	0xFE2
  5029                           fsr1l	equ	0xFE1
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           plusw2	equ	0xFDB
  5033                           fsr2h	equ	0xFDA
  5034                           fsr2l	equ	0xFD9
  5035                           status	equ	0xFD8
  5036                           
  5037                           	psect	intcode_body
  5038  0076F4                     __pintcode_body:
  5039                           	opt stack 26
  5040  0076F4                     int_func:
  5041                           	opt stack 26
  5042  0076F4  0006               	pop		; remove dummy address from shadow register refresh
  5043  0076F6  CFF4 F017          	movff	prodh,??_aux+4
  5044                           
  5045                           ;main.c: 112: if(TMR1IE && TMR1IF){
  5046  0076FA  B09D               	btfsc	3997,0,c	;volatile
  5047  0076FC  A09E               	btfss	3998,0,c	;volatile
  5048  0076FE  D021               	goto	i2l184
  5049                           
  5050                           ;main.c: 113: TMR1IF=0;
  5051  007700  909E               	bcf	3998,0,c	;volatile
  5052                           
  5053                           ;main.c: 114: TMR1H=0xC0;
  5054  007702  0EC0               	movlw	192
  5055  007704  6ECF               	movwf	4047,c	;volatile
  5056                           
  5057                           ;main.c: 116: if(modo_bluetooth_teclado==0){
  5058  007706  B441               	btfsc	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  5059  007708  D006               	goto	i2l185
  5060                           
  5061                           ;main.c: 117: qtd_caracteres_recebidos=0;
  5062  00770A  6A38               	clrf	_qtd_caracteres_recebidos,c
  5063                           
  5064                           ;main.c: 118: (FLAGS_1 |= (1<<7));
  5065  00770C  0100               	movlb	0	; () banked
  5066  00770E  8F72               	bsf	_FLAGS_1& (0+255),7,b
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;main.c: 119: enviar=1;
  5070  007710  8241               	bsf	_enviar/(0+8),_enviar& (0+7),c
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;main.c: 120: TMR1ON=0;
  5074  007712  90CD               	bcf	4045,0,c	;volatile
  5075                           
  5076                           ;main.c: 121: }
  5077  007714  D016               	goto	i2l184
  5078  007716                     i2l185:
  5079                           
  5080                           ;main.c: 124: else if(modo_bluetooth_teclado==1 && ++num_interrupt_timer1==10){
  5081  007716  A441               	btfss	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  5082  007718  D014               	goto	i2l184
  5083  00771A  2A37               	incf	_num_interrupt_timer1,f,c
  5084  00771C  0E0A               	movlw	10
  5085  00771E  1837               	xorwf	_num_interrupt_timer1,w,c
  5086  007720  E110               	bnz	i2l184
  5087                           
  5088                           ;main.c: 125: numero_para_ascii(qtd_vezes_mesma_tecla_pressionada);
  5089  007722  5039               	movf	_qtd_vezes_mesma_tecla_pressionada,w,c
  5090  007724  ECAB  F039         	call	i2_numero_para_ascii
  5091                           
  5092                           ;main.c: 127: char caractere_a_exibir;
  5093                           ;main.c: 128: caractere_a_exibir = ( ('a' + ((caractere_recebido-'1')*3))+ qtd_vezes_mes
      +                          ma_tecla_pressionada);
  5094  007728  5036               	movf	_caractere_recebido,w,c
  5095  00772A  0D03               	mullw	3
  5096  00772C  50F3               	movf	prodl,w,c
  5097  00772E  2439               	addwf	_qtd_vezes_mesma_tecla_pressionada,w,c
  5098  007730  0FCE               	addlw	206
  5099  007732  6E18               	movwf	aux@caractere_a_exibir,c
  5100                           
  5101                           ;main.c: 129: TXREG = caractere_a_exibir;
  5102  007734  C018  FFAD         	movff	aux@caractere_a_exibir,4013	;volatile
  5103  007738                     i2l188:
  5104  007738  A2AC               	btfss	4012,1,c	;volatile
  5105  00773A  D7FE               	goto	i2l188
  5106                           
  5107                           ;main.c: 131: qtd_vezes_mesma_tecla_pressionada=0;
  5108  00773C  6A39               	clrf	_qtd_vezes_mesma_tecla_pressionada,c
  5109                           
  5110                           ;main.c: 132: TMR1ON=0;
  5111  00773E  90CD               	bcf	4045,0,c	;volatile
  5112                           
  5113                           ;main.c: 133: num_interrupt_timer1=0;}
  5114  007740  6A37               	clrf	_num_interrupt_timer1,c
  5115  007742                     i2l184:
  5116                           
  5117                           ;main.c: 135: }
  5118                           ;main.c: 137: if(TMR0IE && TMR0IF){
  5119  007742  BAF2               	btfsc	intcon,5,c	;volatile
  5120  007744  A4F2               	btfss	intcon,2,c	;volatile
  5121  007746  D04F               	goto	i2l191
  5122                           
  5123                           ;main.c: 138: TMR0H = 0xC2;
  5124  007748  0EC2               	movlw	194
  5125  00774A  6ED7               	movwf	4055,c	;volatile
  5126                           
  5127                           ;main.c: 139: TMR0L+=0xF7;
  5128  00774C  0EF7               	movlw	247
  5129  00774E  26D6               	addwf	4054,f,c	;volatile
  5130                           
  5131                           ;main.c: 140: TMR0IF=0;
  5132  007750  94F2               	bcf	intcon,2,c	;volatile
  5133                           
  5134                           ;main.c: 141: LATDbits.LD1^=1;
  5135  007752  728C               	btg	3980,1,c	;volatile
  5136                           
  5137                           ;main.c: 143: if(++data_atual.segundo>59){
  5138  007754  2A3F               	incf	_data_atual+5,f,c
  5139  007756  0E3B               	movlw	59
  5140  007758  643F               	cpfsgt	_data_atual+5,c
  5141  00775A  D045               	goto	i2l191
  5142                           
  5143                           ;main.c: 144: data_atual.segundo=0;
  5144  00775C  6A3F               	clrf	_data_atual+5,c
  5145                           
  5146                           ;main.c: 146: if(++data_atual.minuto>59){
  5147  00775E  2A3E               	incf	_data_atual+4,f,c
  5148  007760  0E3B               	movlw	59
  5149  007762  643E               	cpfsgt	_data_atual+4,c
  5150  007764  D040               	goto	i2l191
  5151                           
  5152                           ;main.c: 149: data_atual.minuto=0;
  5153  007766  6A3E               	clrf	_data_atual+4,c
  5154                           
  5155                           ;main.c: 151: if(++data_atual.hora>23){
  5156  007768  2A3D               	incf	_data_atual+3,f,c
  5157  00776A  0E17               	movlw	23
  5158  00776C  643D               	cpfsgt	_data_atual+3,c
  5159  00776E  D03B               	goto	i2l191
  5160                           
  5161                           ;main.c: 153: data_atual.hora=0;
  5162  007770  6A3D               	clrf	_data_atual+3,c
  5163                           
  5164                           ;main.c: 154: if(++data_atual.dia_da_semana > 6) data_atual.dia_da_semana = 1;
  5165  007772  2A40               	incf	_data_atual+6,f,c
  5166  007774  0E06               	movlw	6
  5167  007776  6440               	cpfsgt	_data_atual+6,c
  5168  007778  D002               	goto	i2l2978
  5169  00777A  0E01               	movlw	1
  5170  00777C  6E40               	movwf	_data_atual+6,c
  5171  00777E                     i2l2978:
  5172                           
  5173                           ;main.c: 156: if(++data_atual.dia >= qtd_max_dias) {
  5174  00777E  2A3C               	incf	_data_atual+2,f,c
  5175  007780  5034               	movf	_qtd_max_dias,w,c
  5176  007782  5C3C               	subwf	_data_atual+2,w,c
  5177  007784  E330               	bnc	i2l191
  5178                           
  5179                           ;main.c: 157: data_atual.dia=1;
  5180  007786  0E01               	movlw	1
  5181  007788  6E3C               	movwf	_data_atual+2,c
  5182                           
  5183                           ;main.c: 159: switch(++data_atual.mes){
  5184  00778A  D012               	goto	i2l2998
  5185  00778C                     i2l2982:
  5186                           
  5187                           ;main.c: 161: case 3:
  5188                           ;main.c: 162: case 5:
  5189                           ;main.c: 163: case 7:
  5190                           ;main.c: 164: case 8:
  5191                           ;main.c: 165: case 10:
  5192                           ;main.c: 166: case 12:
  5193                           ;main.c: 167: qtd_max_dias=31;
  5194  00778C  0E1F               	movlw	31
  5195  00778E  D00B               	goto	L5
  5196  007790                     i2l2984:
  5197                           
  5198                           ;main.c: 171: if(!((data_atual.ano+3)%4)) qtd_max_dias=29;
  5199  007790  C03A  F013         	movff	_data_atual,??_aux
  5200  007794  0E03               	movlw	3
  5201  007796  2613               	addwf	??_aux,f,c
  5202  007798  1613               	andwf	??_aux,f,c
  5203  00779A  E102               	bnz	i2l2988
  5204  00779C  0E1D               	movlw	29
  5205  00779E  D003               	goto	L5
  5206  0077A0                     i2l2988:
  5207                           
  5208                           ;main.c: 172: else qtd_max_dias=28;
  5209  0077A0  0E1C               	movlw	28
  5210  0077A2  D001               	goto	L5
  5211  0077A4                     i2l2990:
  5212                           
  5213                           ;main.c: 176: case 6:
  5214                           ;main.c: 177: case 9:
  5215                           ;main.c: 178: case 11:
  5216                           ;main.c: 179: qtd_max_dias=30;
  5217  0077A4  0E1E               	movlw	30
  5218  0077A6                     L5:
  5219  0077A6  6E34               	movwf	_qtd_max_dias,c
  5220                           
  5221                           ;main.c: 180: break;
  5222  0077A8  D01E               	goto	i2l191
  5223  0077AA                     i2l2992:
  5224                           
  5225                           ;main.c: 183: data_atual.ano++;
  5226  0077AA  2A3A               	incf	_data_atual,f,c
  5227                           
  5228                           ;main.c: 184: data_atual.mes=0;
  5229  0077AC  6A3B               	clrf	_data_atual+1,c
  5230                           
  5231                           ;main.c: 185: break;}
  5232  0077AE  D01B               	goto	i2l191
  5233  0077B0                     i2l2998:
  5234  0077B0  2A3B               	incf	_data_atual+1,f,c
  5235  0077B2  503B               	movf	_data_atual+1,w,c
  5236                           
  5237                           ; Switch size 1, requested type "space"
  5238                           ; Number of cases is 12, Range of values is 1 to 12
  5239                           ; switch strategies available:
  5240                           ; Name         Instructions Cycles
  5241                           ; simple_byte           37    19 (average)
  5242                           ;	Chosen strategy is simple_byte
  5243  0077B4  0A01               	xorlw	1	; case 1
  5244  0077B6  E0EA               	bz	i2l2982
  5245  0077B8  0A03               	xorlw	3	; case 2
  5246  0077BA  E0EA               	bz	i2l2984
  5247  0077BC  0A01               	xorlw	1	; case 3
  5248  0077BE  E0E6               	bz	i2l2982
  5249  0077C0  0A07               	xorlw	7	; case 4
  5250  0077C2  E0F0               	bz	i2l2990
  5251  0077C4  0A01               	xorlw	1	; case 5
  5252  0077C6  E0E2               	bz	i2l2982
  5253  0077C8  0A03               	xorlw	3	; case 6
  5254  0077CA  E0EC               	bz	i2l2990
  5255  0077CC  0A01               	xorlw	1	; case 7
  5256  0077CE  E0DE               	bz	i2l2982
  5257  0077D0  0A0F               	xorlw	15	; case 8
  5258  0077D2  E0DC               	bz	i2l2982
  5259  0077D4  0A01               	xorlw	1	; case 9
  5260  0077D6  E0E6               	bz	i2l2990
  5261  0077D8  0A03               	xorlw	3	; case 10
  5262  0077DA  E0D8               	bz	i2l2982
  5263  0077DC  0A01               	xorlw	1	; case 11
  5264  0077DE  E0E2               	bz	i2l2990
  5265  0077E0  0A07               	xorlw	7	; case 12
  5266  0077E2  E0D4               	bz	i2l2982
  5267  0077E4  D7E2               	goto	i2l2992
  5268  0077E6                     i2l191:
  5269                           
  5270                           ;main.c: 186: }
  5271                           ;main.c: 188: }
  5272                           ;main.c: 189: }
  5273                           ;main.c: 190: }
  5274                           ;main.c: 193: }
  5275                           ;main.c: 195: if(TMR1IE && TMR1IF){
  5276  0077E6  B09D               	btfsc	3997,0,c	;volatile
  5277  0077E8  A09E               	btfss	3998,0,c	;volatile
  5278  0077EA  D003               	goto	i2l3008
  5279                           
  5280                           ;main.c: 196: LATDbits.LD2^=1;
  5281  0077EC  748C               	btg	3980,2,c	;volatile
  5282                           
  5283                           ;main.c: 197: TMR1IF=0;
  5284  0077EE  909E               	bcf	3998,0,c	;volatile
  5285                           
  5286                           ;main.c: 198: TMR1ON=0;}
  5287  0077F0  90CD               	bcf	4045,0,c	;volatile
  5288  0077F2                     i2l3008:
  5289                           
  5290                           ;main.c: 200: if(RBIE && RBIF){
  5291  0077F2  B6F2               	btfsc	intcon,3,c	;volatile
  5292  0077F4  A0F2               	btfss	intcon,0,c	;volatile
  5293  0077F6  D06C               	goto	i2l3072
  5294                           
  5295                           ;main.c: 202: char linha=0;
  5296  0077F8  6A1C               	clrf	aux@linha,c
  5297                           
  5298                           ;main.c: 203: PORTB_SR=(PORTB&0xF0);
  5299  0077FA  5081               	movf	3969,w,c	;volatile
  5300  0077FC  0BF0               	andlw	240
  5301  0077FE  6E35               	movwf	_PORTB_SR,c
  5302                           
  5303                           ;main.c: 204: RBIF=0;
  5304  007800  90F2               	bcf	intcon,0,c	;volatile
  5305                           
  5306                           ;main.c: 205: if(PORTB_SR != 0xF0) {
  5307  007802  0EF0               	movlw	240
  5308  007804  1835               	xorwf	_PORTB_SR,w,c
  5309  007806  E061               	bz	i2l3070
  5310                           
  5311                           ;main.c: 206: RBIE=0;
  5312  007808  96F2               	bcf	intcon,3,c	;volatile
  5313                           
  5314                           ;main.c: 207: debounce=1;
  5315  00780A  8041               	bsf	_debounce/(0+8),_debounce& (0+7),c
  5316                           
  5317                           ;main.c: 208: modo_bluetooth_teclado=1;
  5318  00780C  8441               	bsf	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  5319                           
  5320                           ;main.c: 209: LATDbits.LD0^=1;
  5321  00780E  708C               	btg	3980,0,c	;volatile
  5322                           
  5323                           ;main.c: 211: if(PORTBbits.RB7==0){coluna=1;}
  5324  007810  BE81               	btfsc	3969,7,c	;volatile
  5325  007812  D002               	goto	i2l217
  5326  007814  0E01               	movlw	1
  5327  007816  D00B               	goto	L8
  5328  007818                     i2l217:
  5329                           
  5330                           ;main.c: 213: else if(PORTBbits.RB6==0){coluna=2;}
  5331  007818  BC81               	btfsc	3969,6,c	;volatile
  5332  00781A  D002               	goto	i2l219
  5333  00781C  0E02               	movlw	2
  5334  00781E  D007               	goto	L8
  5335  007820                     i2l219:
  5336                           
  5337                           ;main.c: 215: else if(PORTBbits.RB5==0){coluna=3;}
  5338  007820  BA81               	btfsc	3969,5,c	;volatile
  5339  007822  D002               	goto	i2l221
  5340  007824  0E03               	movlw	3
  5341  007826  D003               	goto	L8
  5342  007828                     i2l221:
  5343                           
  5344                           ;main.c: 217: else if(PORTBbits.RB4==0){coluna=4;}
  5345  007828  B881               	btfsc	3969,4,c	;volatile
  5346  00782A  D003               	goto	i2l223
  5347  00782C  0E04               	movlw	4
  5348  00782E                     L8:
  5349  00782E  6E1B               	movwf	aux@coluna,c
  5350  007830  D001               	goto	i2l3032
  5351  007832                     i2l223:
  5352                           
  5353                           ;main.c: 219: else{coluna=0;}
  5354  007832  6A1B               	clrf	aux@coluna,c
  5355  007834                     i2l3032:
  5356                           
  5357                           ;main.c: 223: TRISB&=0x0F;
  5358  007834  0E0F               	movlw	15
  5359  007836  1693               	andwf	3987,f,c	;volatile
  5360                           
  5361                           ;main.c: 224: LATB|=0xF0;
  5362  007838  0EF0               	movlw	240
  5363  00783A  128A               	iorwf	3978,f,c	;volatile
  5364  00783C                     i2l3034:
  5365  00783C  CF83 F013          	movff	3971,??_aux	;volatile
  5366  007840  0EF0               	movlw	240
  5367  007842  1613               	andwf	??_aux,f,c
  5368  007844  E1FB               	bnz	i2l3034
  5369                           
  5370                           ;main.c: 229: TRISD|=0xF0;
  5371  007846  1295               	iorwf	3989,f,c	;volatile
  5372                           
  5373                           ;main.c: 231: if(PORTDbits.RD4==1){linha=1;}
  5374  007848  A883               	btfss	3971,4,c	;volatile
  5375  00784A  D002               	goto	i2l231
  5376  00784C  0E01               	movlw	1
  5377  00784E  D00B               	goto	L11
  5378  007850                     i2l231:
  5379                           
  5380                           ;main.c: 233: else if(PORTDbits.RD5==1){linha=2;}
  5381  007850  AA83               	btfss	3971,5,c	;volatile
  5382  007852  D002               	goto	i2l233
  5383  007854  0E02               	movlw	2
  5384  007856  D007               	goto	L11
  5385  007858                     i2l233:
  5386                           
  5387                           ;main.c: 235: else if(PORTDbits.RD6==1){linha=3;}
  5388  007858  AC83               	btfss	3971,6,c	;volatile
  5389  00785A  D002               	goto	i2l235
  5390  00785C  0E03               	movlw	3
  5391  00785E  D003               	goto	L11
  5392  007860                     i2l235:
  5393                           
  5394                           ;main.c: 237: else if(PORTDbits.RD7==1){linha=4;}
  5395  007860  AE83               	btfss	3971,7,c	;volatile
  5396  007862  D003               	goto	i2l237
  5397  007864  0E04               	movlw	4
  5398  007866                     L11:
  5399  007866  6E1C               	movwf	aux@linha,c
  5400  007868  D001               	goto	i2l3048
  5401  00786A                     i2l237:
  5402                           
  5403                           ;main.c: 239: else{linha=0;}
  5404  00786A  6A1C               	clrf	aux@linha,c
  5405  00786C                     i2l3048:
  5406                           
  5407                           ;main.c: 241: if(linha && coluna){
  5408  00786C  501C               	movf	aux@linha,w,c
  5409  00786E  E01F               	bz	i2l239
  5410  007870  501B               	movf	aux@coluna,w,c
  5411  007872  E01D               	bz	i2l239
  5412                           
  5413                           ;main.c: 242: TXREG = '\n';
  5414  007874  0E0A               	movlw	10
  5415  007876  6EAD               	movwf	4013,c	;volatile
  5416  007878                     i2l240:
  5417  007878  A2AC               	btfss	4012,1,c	;volatile
  5418  00787A  D7FE               	goto	i2l240
  5419                           
  5420                           ;main.c: 244: caractere_recebido = teclado_matricial(coluna,linha);
  5421  00787C  C01C  F001         	movff	aux@linha,teclado_matricial@linha
  5422  007880  501B               	movf	aux@coluna,w,c
  5423  007882  EC5F  F03A         	call	_teclado_matricial
  5424  007886  6E36               	movwf	_caractere_recebido,c
  5425                           
  5426                           ;main.c: 245: TXREG = caractere_recebido;
  5427  007888  C036  FFAD         	movff	_caractere_recebido,4013	;volatile
  5428                           
  5429                           ;main.c: 246: numero_para_ascii(linha);
  5430  00788C  501C               	movf	aux@linha,w,c
  5431  00788E  ECAB  F039         	call	i2_numero_para_ascii
  5432                           
  5433                           ;main.c: 247: numero_para_ascii(coluna);
  5434  007892  501B               	movf	aux@coluna,w,c
  5435  007894  ECAB  F039         	call	i2_numero_para_ascii
  5436                           
  5437                           ;main.c: 249: if(caractere_recebido == 'A'){
  5438  007898  0E41               	movlw	65
  5439  00789A  1836               	xorwf	_caractere_recebido,w,c
  5440  00789C  E102               	bnz	i2l3062
  5441                           
  5442                           ;main.c: 250: (FLAGS_2 ^= (1<<4));
  5443  00789E  0E10               	movlw	16
  5444  0078A0  D004               	goto	L12
  5445  0078A2                     i2l3062:
  5446                           
  5447                           ;main.c: 253: else if(caractere_recebido == 'M'){
  5448  0078A2  0E4D               	movlw	77
  5449  0078A4  1836               	xorwf	_caractere_recebido,w,c
  5450  0078A6  E103               	bnz	i2l239
  5451                           
  5452                           ;main.c: 254: (FLAGS_2 ^= (1<<5));}
  5453  0078A8  0E20               	movlw	32
  5454  0078AA                     L12:
  5455  0078AA  0100               	movlb	0	; () banked
  5456  0078AC  1B73               	xorwf	_FLAGS_2& (0+255),f,b
  5457  0078AE                     i2l239:
  5458                           
  5459                           ;main.c: 256: }
  5460                           ;main.c: 259: TRISB|=0xF0;
  5461  0078AE  0EF0               	movlw	240
  5462  0078B0  1293               	iorwf	3987,f,c	;volatile
  5463                           
  5464                           ;main.c: 260: LATD&=0x0F;
  5465  0078B2  0E0F               	movlw	15
  5466  0078B4  168C               	andwf	3980,f,c	;volatile
  5467                           
  5468                           ;main.c: 261: TRISD&=0X0F;
  5469  0078B6  1695               	andwf	3989,f,c	;volatile
  5470  0078B8                     i2l3066:
  5471  0078B8  CF83 F013          	movff	3971,??_aux	;volatile
  5472  0078BC  0EF0               	movlw	240
  5473  0078BE  1613               	andwf	??_aux,f,c
  5474  0078C0  E1FB               	bnz	i2l3066
  5475  0078C2                     i2l3068:
  5476  0078C2  5081               	movf	3969,w,c	;volatile
  5477  0078C4  0BF0               	andlw	240
  5478  0078C6  0AF0               	xorlw	240
  5479  0078C8  E1FC               	bnz	i2l3068
  5480  0078CA                     i2l3070:
  5481                           
  5482                           ;main.c: 266: }
  5483                           ;main.c: 268: PORTB_SR=(PORTB&0xF0);}
  5484  0078CA  5081               	movf	3969,w,c	;volatile
  5485  0078CC  0BF0               	andlw	240
  5486  0078CE  6E35               	movwf	_PORTB_SR,c
  5487  0078D0                     i2l3072:
  5488                           
  5489                           ;main.c: 270: if(RCIE && RCIF){
  5490  0078D0  BA9D               	btfsc	3997,5,c	;volatile
  5491  0078D2  AA9E               	btfss	3998,5,c	;volatile
  5492  0078D4  D036               	goto	i2l266
  5493                           
  5494                           ;main.c: 271: modo_bluetooth_teclado=0;;
  5495  0078D6  9441               	bcf	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  5496                           
  5497                           ;main.c: 273: if(OERR==1){
  5498  0078D8  A2AB               	btfss	4011,1,c	;volatile
  5499  0078DA  D00A               	goto	i2l253
  5500                           
  5501                           ;main.c: 274: (FLAGS_1 |= (1<<4));
  5502  0078DC  0100               	movlb	0	; () banked
  5503  0078DE  8972               	bsf	_FLAGS_1& (0+255),4,b
  5504  0078E0                     i2l3080:
  5505  0078E0  50AE               	movf	4014,w,c	;volatile
  5506                           
  5507                           ;main.c: 278: CREN = 0;
  5508  0078E2  98AB               	bcf	4011,4,c	;volatile
  5509                           
  5510                           ;main.c: 279: CREN = 1;
  5511  0078E4  88AB               	bsf	4011,4,c	;volatile
  5512                           
  5513                           ;main.c: 282: }while(OERR);
  5514  0078E6  B2AB               	btfsc	4011,1,c	;volatile
  5515  0078E8  D7FB               	goto	i2l3080
  5516  0078EA                     i2l256:
  5517                           
  5518                           ;main.c: 283: enviar=1;
  5519  0078EA  8241               	bsf	_enviar/(0+8),_enviar& (0+7),c
  5520                           
  5521                           ;main.c: 284: receber=0;
  5522  0078EC  9641               	bcf	_receber/(0+8),_receber& (0+7),c
  5523                           
  5524                           ;main.c: 286: }
  5525  0078EE  D028               	goto	i2l3108
  5526  0078F0                     i2l253:
  5527                           
  5528                           ;main.c: 288: else if(FERR==1){
  5529  0078F0  A4AB               	btfss	4011,2,c	;volatile
  5530  0078F2  D008               	goto	i2l258
  5531                           
  5532                           ;main.c: 289: (FLAGS_1 |= (1<<4));
  5533  0078F4  0100               	movlb	0	; () banked
  5534  0078F6  8972               	bsf	_FLAGS_1& (0+255),4,b
  5535  0078F8                     i2l3090:
  5536  0078F8  50AE               	movf	4014,w,c	;volatile
  5537                           
  5538                           ;main.c: 293: SPEN=0;
  5539  0078FA  9EAB               	bcf	4011,7,c	;volatile
  5540                           
  5541                           ;main.c: 294: SPEN=1;
  5542  0078FC  8EAB               	bsf	4011,7,c	;volatile
  5543                           
  5544                           ;main.c: 296: }while(FERR);
  5545  0078FE  A4AB               	btfss	4011,2,c	;volatile
  5546  007900  D7F4               	goto	i2l256
  5547  007902  D7FA               	goto	i2l3090
  5548  007904                     i2l258:
  5549                           
  5550                           ;main.c: 300: else{
  5551                           ;main.c: 301: TMR1ON=0;
  5552  007904  90CD               	bcf	4045,0,c	;volatile
  5553                           
  5554                           ;main.c: 302: buffer_serial[qtd_caracteres_recebidos] = RCREG;
  5555  007906  5038               	movf	_qtd_caracteres_recebidos,w,c
  5556  007908  0F74               	addlw	low _buffer_serial
  5557  00790A  6ED9               	movwf	fsr2l,c
  5558  00790C  6ADA               	clrf	fsr2h,c
  5559  00790E  CFAE FFDF          	movff	4014,indf2	;volatile
  5560                           
  5561                           ;main.c: 303: TXREG = buffer_serial[qtd_caracteres_recebidos];
  5562  007912  5038               	movf	_qtd_caracteres_recebidos,w,c
  5563  007914  0F74               	addlw	low _buffer_serial
  5564  007916  6ED9               	movwf	fsr2l,c
  5565  007918  6ADA               	clrf	fsr2h,c
  5566  00791A  50DF               	movf	indf2,w,c
  5567  00791C  6EAD               	movwf	4013,c	;volatile
  5568                           
  5569                           ;main.c: 304: TMR1ON=1;
  5570  00791E  80CD               	bsf	4045,0,c	;volatile
  5571                           
  5572                           ;main.c: 305: if(++qtd_caracteres_recebidos == 80 || buffer_serial[qtd_caracteres_recebi
      +                          dos-1] == 'F'){
  5573  007920  2A38               	incf	_qtd_caracteres_recebidos,f,c
  5574  007922  0E50               	movlw	80
  5575  007924  1838               	xorwf	_qtd_caracteres_recebidos,w,c
  5576  007926  E007               	bz	i2l265
  5577  007928  5038               	movf	_qtd_caracteres_recebidos,w,c
  5578  00792A  0F73               	addlw	low (_buffer_serial+255)
  5579  00792C  6ED9               	movwf	fsr2l,c
  5580  00792E  6ADA               	clrf	fsr2h,c
  5581  007930  0E46               	movlw	70
  5582  007932  18DE               	xorwf	postinc2,w,c
  5583  007934  E105               	bnz	i2l3108
  5584  007936                     i2l265:
  5585                           
  5586                           ;main.c: 306: receber=1;
  5587  007936  8641               	bsf	_receber/(0+8),_receber& (0+7),c
  5588                           
  5589                           ;main.c: 307: TMR1ON=0;
  5590  007938  90CD               	bcf	4045,0,c	;volatile
  5591                           
  5592                           ;main.c: 308: TMR1L=0;
  5593  00793A  6ACE               	clrf	4046,c	;volatile
  5594                           
  5595                           ;main.c: 309: TMR1H=0xC0;}
  5596  00793C  0EC0               	movlw	192
  5597  00793E  6ECF               	movwf	4047,c	;volatile
  5598  007940                     i2l3108:
  5599                           
  5600                           ;main.c: 310: }
  5601                           ;main.c: 312: RCIF=0;}
  5602  007940  9A9E               	bcf	3998,5,c	;volatile
  5603  007942                     i2l266:
  5604  007942  C017  FFF4         	movff	??_aux+4,prodh
  5605  007946  C016  FFF3         	movff	??_aux+3,prodl
  5606  00794A  C015  FFDA         	movff	??_aux+2,fsr2h
  5607  00794E  C014  FFD9         	movff	??_aux+1,fsr2l
  5608  007952  0011               	retfie		f
  5609  007954                     __end_of_aux:
  5610                           	opt stack 0
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon	equ	0xFF2
  5618                           intcon2	equ	0xFF1
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           indf1	equ	0xFE7
  5622                           postinc1	equ	0xFE6
  5623                           postdec1	equ	0xFE5
  5624                           plusw1	equ	0xFE3
  5625                           fsr1h	equ	0xFE2
  5626                           fsr1l	equ	0xFE1
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           plusw2	equ	0xFDB
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function i2_numero_para_ascii *****************
  5635 ;; Defined at:
  5636 ;;		line 86 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  numero          1    wreg     unsigned char 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  numero          1   15[COMRAM] unsigned char 
  5641 ;;  numero_para_    1   17[COMRAM] unsigned char 
  5642 ;;  numero_para_    1   16[COMRAM] unsigned char 
  5643 ;; Return value:  Size  Location     Type
  5644 ;;		None               void
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5652 ;;      Params:         0       0       0       0       0       0       0       0       0
  5653 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5654 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5655 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5656 ;;Total ram usage:        4 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    1
  5659 ;; This function calls:
  5660 ;;		i2___awdiv
  5661 ;;		i2___lbdiv
  5662 ;;		i2___wmul
  5663 ;; This function is called by:
  5664 ;;		_aux
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text25
  5669  007356                     __ptext25:
  5670                           	opt stack 0
  5671  007356                     i2_numero_para_ascii:
  5672                           	opt stack 26
  5673                           
  5674                           ;incstack = 0
  5675                           ;i2numero_para_ascii@numero stored from wreg
  5676  007356  6E10               	movwf	i2numero_para_ascii@numero,c
  5677                           
  5678                           ;ascii.c: 87: char temp1;
  5679                           ;ascii.c: 88: char temp2;
  5680                           ;ascii.c: 90: TXREG = '+';
  5681  007358  0E2B               	movlw	43
  5682  00735A  6EAD               	movwf	4013,c	;volatile
  5683  00735C                     i2l485:
  5684  00735C  A2AC               	btfss	4012,1,c	;volatile
  5685  00735E  D7FE               	goto	i2l485
  5686                           
  5687                           ;ascii.c: 93: temp1 = numero/100;
  5688  007360  0E64               	movlw	100
  5689  007362  6E01               	movwf	i2___lbdiv@divisor,c
  5690  007364  5010               	movf	i2numero_para_ascii@numero,w,c
  5691  007366  EC5B  F038         	call	i2___lbdiv
  5692  00736A  6E12               	movwf	i2numero_para_ascii@temp1,c
  5693                           
  5694                           ;ascii.c: 94: TXREG = '0'+ temp1;
  5695  00736C  5012               	movf	i2numero_para_ascii@temp1,w,c
  5696  00736E  0F30               	addlw	48
  5697  007370  6EAD               	movwf	4013,c	;volatile
  5698  007372                     i2l488:
  5699  007372  A2AC               	btfss	4012,1,c	;volatile
  5700  007374  D7FE               	goto	i2l488
  5701                           
  5702                           ;ascii.c: 97: temp2 = ((numero - temp1*100)/10);
  5703  007376  C012  F001         	movff	i2numero_para_ascii@temp1,i2___wmul@multiplier
  5704  00737A  6A02               	clrf	i2___wmul@multiplier+1,c
  5705  00737C  6804               	setf	i2___wmul@multiplicand+1,c
  5706  00737E  0E9C               	movlw	156
  5707  007380  6E03               	movwf	i2___wmul@multiplicand,c
  5708  007382  ECFB  F037         	call	i2___wmul	;wreg free
  5709  007386  5010               	movf	i2numero_para_ascii@numero,w,c
  5710  007388  2401               	addwf	?i2___wmul,w,c
  5711  00738A  6E07               	movwf	i2___awdiv@dividend,c
  5712  00738C  0E00               	movlw	0
  5713  00738E  2002               	addwfc	?i2___wmul+1,w,c
  5714  007390  6E08               	movwf	i2___awdiv@dividend+1,c
  5715  007392  6A0A               	clrf	i2___awdiv@divisor+1,c
  5716  007394  0E0A               	movlw	10
  5717  007396  6E09               	movwf	i2___awdiv@divisor,c
  5718  007398  EC6F  F039         	call	i2___awdiv	;wreg free
  5719  00739C  5007               	movf	?i2___awdiv,w,c
  5720  00739E  6E11               	movwf	i2numero_para_ascii@temp2,c
  5721                           
  5722                           ;ascii.c: 98: TXREG = '0'+ temp2;
  5723  0073A0  5011               	movf	i2numero_para_ascii@temp2,w,c
  5724  0073A2  0F30               	addlw	48
  5725  0073A4  6EAD               	movwf	4013,c	;volatile
  5726  0073A6                     i2l491:
  5727  0073A6  A2AC               	btfss	4012,1,c	;volatile
  5728  0073A8  D7FE               	goto	i2l491
  5729                           
  5730                           ;ascii.c: 101: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  5731  0073AA  5012               	movf	i2numero_para_ascii@temp1,w,c
  5732  0073AC  0D9C               	mullw	156
  5733  0073AE  CFF3 F00F          	movff	prodl,??i2_numero_para_ascii
  5734  0073B2  5011               	movf	i2numero_para_ascii@temp2,w,c
  5735  0073B4  0DF6               	mullw	246
  5736  0073B6  50F3               	movf	prodl,w,c
  5737  0073B8  240F               	addwf	??i2_numero_para_ascii,w,c
  5738  0073BA  2410               	addwf	i2numero_para_ascii@numero,w,c
  5739  0073BC  0F30               	addlw	48
  5740  0073BE  6EAD               	movwf	4013,c	;volatile
  5741  0073C0                     i2l494:
  5742  0073C0  A2AC               	btfss	4012,1,c	;volatile
  5743  0073C2  D7FE               	goto	i2l494
  5744                           
  5745                           ;ascii.c: 104: TXREG = '+';
  5746  0073C4  0E2B               	movlw	43
  5747  0073C6  6EAD               	movwf	4013,c	;volatile
  5748  0073C8                     i2l497:
  5749  0073C8  B2AC               	btfsc	4012,1,c	;volatile
  5750  0073CA  0012               	return		;funcret
  5751  0073CC  D7FD               	goto	i2l497
  5752  0073CE                     __end_ofi2_numero_para_ascii:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodh	equ	0xFF4
  5759                           prodl	equ	0xFF3
  5760                           intcon	equ	0xFF2
  5761                           intcon2	equ	0xFF1
  5762                           postinc0	equ	0xFEE
  5763                           wreg	equ	0xFE8
  5764                           indf1	equ	0xFE7
  5765                           postinc1	equ	0xFE6
  5766                           postdec1	equ	0xFE5
  5767                           plusw1	equ	0xFE3
  5768                           fsr1h	equ	0xFE2
  5769                           fsr1l	equ	0xFE1
  5770                           indf2	equ	0xFDF
  5771                           postinc2	equ	0xFDE
  5772                           plusw2	equ	0xFDB
  5773                           fsr2h	equ	0xFDA
  5774                           fsr2l	equ	0xFD9
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function i2___wmul *****************
  5778 ;; Defined at:
  5779 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;  multiplier      2    0[COMRAM] unsigned int 
  5782 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  __wmul          2    4[COMRAM] unsigned int 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  2    0[COMRAM] unsigned int 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0, prodl, prodh
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5794 ;;      Params:         4       0       0       0       0       0       0       0       0
  5795 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5797 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5798 ;;Total ram usage:        6 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		i2_numero_para_ascii
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text26
  5808  006FF6                     __ptext26:
  5809                           	opt stack 0
  5810  006FF6                     i2___wmul:
  5811                           	opt stack 26
  5812                           
  5813                           ;incstack = 0
  5814  006FF6  5001               	movf	i2___wmul@multiplier,w,c
  5815  006FF8  0203               	mulwf	i2___wmul@multiplicand,c
  5816  006FFA  CFF3 F005          	movff	prodl,i2___wmul@product
  5817  006FFE  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5818  007002  5001               	movf	i2___wmul@multiplier,w,c
  5819  007004  0204               	mulwf	i2___wmul@multiplicand+1,c
  5820  007006  50F3               	movf	prodl,w,c
  5821  007008  2606               	addwf	i2___wmul@product+1,f,c
  5822  00700A  5002               	movf	i2___wmul@multiplier+1,w,c
  5823  00700C  0203               	mulwf	i2___wmul@multiplicand,c
  5824  00700E  50F3               	movf	prodl,w,c
  5825  007010  2606               	addwf	i2___wmul@product+1,f,c
  5826  007012  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5827  007016  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5828  00701A  0012               	return		;funcret
  5829  00701C                     __end_ofi2___wmul:
  5830                           	opt stack 0
  5831                           tblptru	equ	0xFF8
  5832                           tblptrh	equ	0xFF7
  5833                           tblptrl	equ	0xFF6
  5834                           tablat	equ	0xFF5
  5835                           prodh	equ	0xFF4
  5836                           prodl	equ	0xFF3
  5837                           intcon	equ	0xFF2
  5838                           intcon2	equ	0xFF1
  5839                           postinc0	equ	0xFEE
  5840                           wreg	equ	0xFE8
  5841                           indf1	equ	0xFE7
  5842                           postinc1	equ	0xFE6
  5843                           postdec1	equ	0xFE5
  5844                           plusw1	equ	0xFE3
  5845                           fsr1h	equ	0xFE2
  5846                           fsr1l	equ	0xFE1
  5847                           indf2	equ	0xFDF
  5848                           postinc2	equ	0xFDE
  5849                           plusw2	equ	0xFDB
  5850                           fsr2h	equ	0xFDA
  5851                           fsr2l	equ	0xFD9
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function i2___lbdiv *****************
  5855 ;; Defined at:
  5856 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  dividend        1    wreg     unsigned char 
  5859 ;;  divisor         1    0[COMRAM] unsigned char 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  dividend        1    1[COMRAM] unsigned char 
  5862 ;;  __lbdiv         1    3[COMRAM] unsigned char 
  5863 ;;  __lbdiv         1    2[COMRAM] unsigned char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      unsigned char 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5873 ;;      Params:         1       0       0       0       0       0       0       0       0
  5874 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5876 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5877 ;;Total ram usage:        4 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		i2_numero_para_ascii
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text27
  5887  0070B6                     __ptext27:
  5888                           	opt stack 0
  5889  0070B6                     i2___lbdiv:
  5890                           	opt stack 26
  5891                           
  5892                           ;incstack = 0
  5893                           ;i2___lbdiv@dividend stored from wreg
  5894  0070B6  6E02               	movwf	i2___lbdiv@dividend,c
  5895  0070B8  6A04               	clrf	i2___lbdiv@quotient,c
  5896  0070BA  5001               	movf	i2___lbdiv@divisor,w,c
  5897  0070BC  E014               	bz	i2l2682
  5898  0070BE  0E01               	movlw	1
  5899  0070C0  6E03               	movwf	i2___lbdiv@counter,c
  5900  0070C2  D003               	goto	i2l2670
  5901  0070C4                     i2l2666:
  5902  0070C4  90D8               	bcf	status,0,c
  5903  0070C6  3601               	rlcf	i2___lbdiv@divisor,f,c
  5904  0070C8  2A03               	incf	i2___lbdiv@counter,f,c
  5905  0070CA                     i2l2670:
  5906  0070CA  AE01               	btfss	i2___lbdiv@divisor,7,c
  5907  0070CC  D7FB               	goto	i2l2666
  5908  0070CE                     i2l2672:
  5909  0070CE  90D8               	bcf	status,0,c
  5910  0070D0  3604               	rlcf	i2___lbdiv@quotient,f,c
  5911  0070D2  5001               	movf	i2___lbdiv@divisor,w,c
  5912  0070D4  5C02               	subwf	i2___lbdiv@dividend,w,c
  5913  0070D6  E303               	bnc	i2l2678
  5914  0070D8  5001               	movf	i2___lbdiv@divisor,w,c
  5915  0070DA  5E02               	subwf	i2___lbdiv@dividend,f,c
  5916  0070DC  8004               	bsf	i2___lbdiv@quotient,0,c
  5917  0070DE                     i2l2678:
  5918  0070DE  90D8               	bcf	status,0,c
  5919  0070E0  3201               	rrcf	i2___lbdiv@divisor,f,c
  5920  0070E2  2E03               	decfsz	i2___lbdiv@counter,f,c
  5921  0070E4  D7F4               	goto	i2l2672
  5922  0070E6                     i2l2682:
  5923  0070E6  5004               	movf	i2___lbdiv@quotient,w,c
  5924  0070E8  0012               	return		;funcret
  5925  0070EA                     __end_ofi2___lbdiv:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon2	equ	0xFF1
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           indf1	equ	0xFE7
  5938                           postinc1	equ	0xFE6
  5939                           postdec1	equ	0xFE5
  5940                           plusw1	equ	0xFE3
  5941                           fsr1h	equ	0xFE2
  5942                           fsr1l	equ	0xFE1
  5943                           indf2	equ	0xFDF
  5944                           postinc2	equ	0xFDE
  5945                           plusw2	equ	0xFDB
  5946                           fsr2h	equ	0xFDA
  5947                           fsr2l	equ	0xFD9
  5948                           status	equ	0xFD8
  5949                           
  5950 ;; *************** function i2___awdiv *****************
  5951 ;; Defined at:
  5952 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  dividend        2    6[COMRAM] int 
  5955 ;;  divisor         2    8[COMRAM] int 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  __awdiv         2   12[COMRAM] int 
  5958 ;;  __awdiv         1   11[COMRAM] unsigned char 
  5959 ;;  __awdiv         1   10[COMRAM] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  2    6[COMRAM] int 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5969 ;;      Params:         4       0       0       0       0       0       0       0       0
  5970 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5972 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5973 ;;Total ram usage:        8 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		i2_numero_para_ascii
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           	psect	text28
  5983  0072DE                     __ptext28:
  5984                           	opt stack 0
  5985  0072DE                     i2___awdiv:
  5986                           	opt stack 26
  5987                           
  5988                           ;incstack = 0
  5989  0072DE  6A0C               	clrf	i2___awdiv@sign,c
  5990  0072E0  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  5991  0072E2  D006               	goto	i2l2624
  5992  0072E4  6C09               	negf	i2___awdiv@divisor,c
  5993  0072E6  1E0A               	comf	i2___awdiv@divisor+1,f,c
  5994  0072E8  B0D8               	btfsc	status,0,c
  5995  0072EA  2A0A               	incf	i2___awdiv@divisor+1,f,c
  5996  0072EC  0E01               	movlw	1
  5997  0072EE  6E0C               	movwf	i2___awdiv@sign,c
  5998  0072F0                     i2l2624:
  5999  0072F0  AE08               	btfss	i2___awdiv@dividend+1,7,c
  6000  0072F2  D006               	goto	i2l2630
  6001  0072F4  6C07               	negf	i2___awdiv@dividend,c
  6002  0072F6  1E08               	comf	i2___awdiv@dividend+1,f,c
  6003  0072F8  B0D8               	btfsc	status,0,c
  6004  0072FA  2A08               	incf	i2___awdiv@dividend+1,f,c
  6005  0072FC  0E01               	movlw	1
  6006  0072FE  1A0C               	xorwf	i2___awdiv@sign,f,c
  6007  007300                     i2l2630:
  6008  007300  6A0D               	clrf	i2___awdiv@quotient,c
  6009  007302  6A0E               	clrf	i2___awdiv@quotient+1,c
  6010  007304  5009               	movf	i2___awdiv@divisor,w,c
  6011  007306  100A               	iorwf	i2___awdiv@divisor+1,w,c
  6012  007308  E01B               	bz	i2l2652
  6013  00730A  0E01               	movlw	1
  6014  00730C  6E0B               	movwf	i2___awdiv@counter,c
  6015  00730E  D004               	goto	i2l2638
  6016  007310                     i2l2636:
  6017  007310  90D8               	bcf	status,0,c
  6018  007312  3609               	rlcf	i2___awdiv@divisor,f,c
  6019  007314  360A               	rlcf	i2___awdiv@divisor+1,f,c
  6020  007316  2A0B               	incf	i2___awdiv@counter,f,c
  6021  007318                     i2l2638:
  6022  007318  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  6023  00731A  D7FA               	goto	i2l2636
  6024  00731C                     i2l2640:
  6025  00731C  90D8               	bcf	status,0,c
  6026  00731E  360D               	rlcf	i2___awdiv@quotient,f,c
  6027  007320  360E               	rlcf	i2___awdiv@quotient+1,f,c
  6028  007322  5009               	movf	i2___awdiv@divisor,w,c
  6029  007324  5C07               	subwf	i2___awdiv@dividend,w,c
  6030  007326  500A               	movf	i2___awdiv@divisor+1,w,c
  6031  007328  5808               	subwfb	i2___awdiv@dividend+1,w,c
  6032  00732A  E305               	bnc	i2l2648
  6033  00732C  5009               	movf	i2___awdiv@divisor,w,c
  6034  00732E  5E07               	subwf	i2___awdiv@dividend,f,c
  6035  007330  500A               	movf	i2___awdiv@divisor+1,w,c
  6036  007332  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  6037  007334  800D               	bsf	i2___awdiv@quotient,0,c
  6038  007336                     i2l2648:
  6039  007336  90D8               	bcf	status,0,c
  6040  007338  320A               	rrcf	i2___awdiv@divisor+1,f,c
  6041  00733A  3209               	rrcf	i2___awdiv@divisor,f,c
  6042  00733C  2E0B               	decfsz	i2___awdiv@counter,f,c
  6043  00733E  D7EE               	goto	i2l2640
  6044  007340                     i2l2652:
  6045  007340  500C               	movf	i2___awdiv@sign,w,c
  6046  007342  E004               	bz	i2l2656
  6047  007344  6C0D               	negf	i2___awdiv@quotient,c
  6048  007346  1E0E               	comf	i2___awdiv@quotient+1,f,c
  6049  007348  B0D8               	btfsc	status,0,c
  6050  00734A  2A0E               	incf	i2___awdiv@quotient+1,f,c
  6051  00734C                     i2l2656:
  6052  00734C  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  6053  007350  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  6054  007354  0012               	return		;funcret
  6055  007356                     __end_ofi2___awdiv:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           intcon2	equ	0xFF1
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           indf1	equ	0xFE7
  6068                           postinc1	equ	0xFE6
  6069                           postdec1	equ	0xFE5
  6070                           plusw1	equ	0xFE3
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           plusw2	equ	0xFDB
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _teclado_matricial *****************
  6081 ;; Defined at:
  6082 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  coluna          1    wreg     unsigned char 
  6085 ;;  linha           1    0[COMRAM] unsigned char 
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;  coluna          1    1[COMRAM] unsigned char 
  6088 ;;  caractere       1    3[COMRAM] unsigned char 
  6089 ;;  temp            1    2[COMRAM] unsigned char 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      unsigned char 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0, prodl, prodh
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6099 ;;      Params:         1       0       0       0       0       0       0       0       0
  6100 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6102 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6103 ;;Total ram usage:        4 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; This function calls:
  6106 ;;		Nothing
  6107 ;; This function is called by:
  6108 ;;		_aux
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           	psect	text29
  6113  0074BE                     __ptext29:
  6114                           	opt stack 0
  6115  0074BE                     _teclado_matricial:
  6116                           	opt stack 27
  6117                           
  6118                           ;incstack = 0
  6119                           ;teclado_matricial@coluna stored from wreg
  6120  0074BE  6E02               	movwf	teclado_matricial@coluna,c
  6121                           
  6122                           ;ascii.c: 8: char temp = ((linha-1)*4) + coluna;
  6123  0074C0  5001               	movf	teclado_matricial@linha,w,c
  6124  0074C2  0D04               	mullw	4
  6125  0074C4  50F3               	movf	prodl,w,c
  6126  0074C6  2402               	addwf	teclado_matricial@coluna,w,c
  6127  0074C8  0FFC               	addlw	252
  6128  0074CA  6E03               	movwf	teclado_matricial@temp,c
  6129                           
  6130                           ;ascii.c: 9: char caractere;
  6131                           ;ascii.c: 11: switch(temp){
  6132  0074CC  D021               	goto	i2l2738
  6133  0074CE                     i2l2704:
  6134                           
  6135                           ;ascii.c: 13: caractere = 'M';
  6136  0074CE  0E4D               	movlw	77
  6137  0074D0  D01D               	goto	L27
  6138  0074D2                     i2l2706:
  6139                           
  6140                           ;ascii.c: 17: caractere = '0';
  6141  0074D2  0E30               	movlw	48
  6142  0074D4  D01B               	goto	L27
  6143  0074D6                     i2l2708:
  6144                           
  6145                           ;ascii.c: 21: caractere = 'F';
  6146  0074D6  0E46               	movlw	70
  6147  0074D8  D019               	goto	L27
  6148  0074DA                     i2l2710:
  6149                           
  6150                           ;ascii.c: 25: caractere = 'D';
  6151  0074DA  0E44               	movlw	68
  6152  0074DC  D017               	goto	L27
  6153  0074DE                     i2l2712:
  6154                           
  6155                           ;ascii.c: 29: caractere = '7';
  6156  0074DE  0E37               	movlw	55
  6157  0074E0  D015               	goto	L27
  6158  0074E2                     i2l2714:
  6159                           
  6160                           ;ascii.c: 33: caractere = '8';
  6161  0074E2  0E38               	movlw	56
  6162  0074E4  D013               	goto	L27
  6163  0074E6                     i2l2716:
  6164                           
  6165                           ;ascii.c: 37: caractere = '9';
  6166  0074E6  0E39               	movlw	57
  6167  0074E8  D011               	goto	L27
  6168  0074EA                     i2l2718:
  6169                           
  6170                           ;ascii.c: 41: caractere = 'C';
  6171  0074EA  0E43               	movlw	67
  6172  0074EC  D00F               	goto	L27
  6173  0074EE                     i2l2720:
  6174                           
  6175                           ;ascii.c: 45: caractere = '4';
  6176  0074EE  0E34               	movlw	52
  6177  0074F0  D00D               	goto	L27
  6178  0074F2                     i2l2722:
  6179                           
  6180                           ;ascii.c: 49: caractere = '5';
  6181  0074F2  0E35               	movlw	53
  6182  0074F4  D00B               	goto	L27
  6183  0074F6                     i2l2724:
  6184                           
  6185                           ;ascii.c: 53: caractere = '6';
  6186  0074F6  0E36               	movlw	54
  6187  0074F8  D009               	goto	L27
  6188  0074FA                     i2l2726:
  6189                           
  6190                           ;ascii.c: 57: caractere = 'B';
  6191  0074FA  0E42               	movlw	66
  6192  0074FC  D007               	goto	L27
  6193  0074FE                     i2l2728:
  6194                           
  6195                           ;ascii.c: 61: caractere = '1';
  6196  0074FE  0E31               	movlw	49
  6197  007500  D005               	goto	L27
  6198  007502                     i2l2730:
  6199                           
  6200                           ;ascii.c: 65: caractere = '2';
  6201  007502  0E32               	movlw	50
  6202  007504  D003               	goto	L27
  6203  007506                     i2l2732:
  6204                           
  6205                           ;ascii.c: 69: caractere = '3';
  6206  007506  0E33               	movlw	51
  6207  007508  D001               	goto	L27
  6208  00750A                     i2l2734:
  6209                           
  6210                           ;ascii.c: 73: caractere = 'A';
  6211  00750A  0E41               	movlw	65
  6212  00750C                     L27:
  6213  00750C  6E04               	movwf	teclado_matricial@caractere,c
  6214                           
  6215                           ;ascii.c: 74: break;}
  6216  00750E  D021               	goto	i2l2740
  6217  007510                     i2l2738:
  6218  007510  5003               	movf	teclado_matricial@temp,w,c
  6219                           
  6220                           ; Switch size 1, requested type "space"
  6221                           ; Number of cases is 16, Range of values is 1 to 16
  6222                           ; switch strategies available:
  6223                           ; Name         Instructions Cycles
  6224                           ; simple_byte           49    25 (average)
  6225                           ;	Chosen strategy is simple_byte
  6226  007512  0A01               	xorlw	1	; case 1
  6227  007514  E0DC               	bz	i2l2704
  6228  007516  0A03               	xorlw	3	; case 2
  6229  007518  E0DC               	bz	i2l2706
  6230  00751A  0A01               	xorlw	1	; case 3
  6231  00751C  E0DC               	bz	i2l2708
  6232  00751E  0A07               	xorlw	7	; case 4
  6233  007520  E0DC               	bz	i2l2710
  6234  007522  0A01               	xorlw	1	; case 5
  6235  007524  E0DC               	bz	i2l2712
  6236  007526  0A03               	xorlw	3	; case 6
  6237  007528  E0DC               	bz	i2l2714
  6238  00752A  0A01               	xorlw	1	; case 7
  6239  00752C  E0DC               	bz	i2l2716
  6240  00752E  0A0F               	xorlw	15	; case 8
  6241  007530  E0DC               	bz	i2l2718
  6242  007532  0A01               	xorlw	1	; case 9
  6243  007534  E0DC               	bz	i2l2720
  6244  007536  0A03               	xorlw	3	; case 10
  6245  007538  E0DC               	bz	i2l2722
  6246  00753A  0A01               	xorlw	1	; case 11
  6247  00753C  E0DC               	bz	i2l2724
  6248  00753E  0A07               	xorlw	7	; case 12
  6249  007540  E0DC               	bz	i2l2726
  6250  007542  0A01               	xorlw	1	; case 13
  6251  007544  E0DC               	bz	i2l2728
  6252  007546  0A03               	xorlw	3	; case 14
  6253  007548  E0DC               	bz	i2l2730
  6254  00754A  0A01               	xorlw	1	; case 15
  6255  00754C  E0DC               	bz	i2l2732
  6256  00754E  0A1F               	xorlw	31	; case 16
  6257  007550  E0DC               	bz	i2l2734
  6258  007552                     i2l2740:
  6259                           
  6260                           ;ascii.c: 76: return caractere;
  6261  007552  5004               	movf	teclado_matricial@caractere,w,c
  6262  007554  0012               	return		;funcret
  6263  007556                     __end_of_teclado_matricial:
  6264                           	opt stack 0
  6265  0000                     tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           intcon2	equ	0xFF1
  6273                           postinc0	equ	0xFEE
  6274                           wreg	equ	0xFE8
  6275                           indf1	equ	0xFE7
  6276                           postinc1	equ	0xFE6
  6277                           postdec1	equ	0xFE5
  6278                           plusw1	equ	0xFE3
  6279                           fsr1h	equ	0xFE2
  6280                           fsr1l	equ	0xFE1
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           plusw2	equ	0xFDB
  6284                           fsr2h	equ	0xFDA
  6285                           fsr2l	equ	0xFD9
  6286                           status	equ	0xFD8
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodh	equ	0xFF4
  6292                           prodl	equ	0xFF3
  6293                           intcon	equ	0xFF2
  6294                           intcon2	equ	0xFF1
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           indf1	equ	0xFE7
  6298                           postinc1	equ	0xFE6
  6299                           postdec1	equ	0xFE5
  6300                           plusw1	equ	0xFE3
  6301                           fsr1h	equ	0xFE2
  6302                           fsr1l	equ	0xFE1
  6303                           indf2	equ	0xFDF
  6304                           postinc2	equ	0xFDE
  6305                           plusw2	equ	0xFDB
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310                           	psect	rparam
  6311  0000                     tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           intcon	equ	0xFF2
  6318                           intcon2	equ	0xFF1
  6319                           postinc0	equ	0xFEE
  6320                           wreg	equ	0xFE8
  6321                           indf1	equ	0xFE7
  6322                           postinc1	equ	0xFE6
  6323                           postdec1	equ	0xFE5
  6324                           plusw1	equ	0xFE3
  6325                           fsr1h	equ	0xFE2
  6326                           fsr1l	equ	0xFE1
  6327                           indf2	equ	0xFDF
  6328                           postinc2	equ	0xFDE
  6329                           plusw2	equ	0xFDB
  6330                           fsr2h	equ	0xFDA
  6331                           fsr2l	equ	0xFD9
  6332                           status	equ	0xFD8
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           intcon2	equ	0xFF1
  6341                           postinc0	equ	0xFEE
  6342                           wreg	equ	0xFE8
  6343                           indf1	equ	0xFE7
  6344                           postinc1	equ	0xFE6
  6345                           postdec1	equ	0xFE5
  6346                           plusw1	equ	0xFE3
  6347                           fsr1h	equ	0xFE2
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           plusw2	equ	0xFDB
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        13
    BSS         384
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      65
    BANK0           160     39     139
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 80
		 -> buffer_serial(BANK0[80]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 80
		 -> buffer_serial(BANK0[80]), 

    memset@p1	PTR void  size(1) Largest target is 80
		 -> buffer_serial(BANK0[80]), 

    memset@p	PTR unsigned char  size(1) Largest target is 80
		 -> buffer_serial(BANK0[80]), 

    carregar_senha@senha_a_carregar	PTR unsigned char [17] size(2) Largest target is 272
		 -> senha(BIGRAM[272]), 

    ptr_data	PTR unsigned char  size(2) Largest target is 7
		 -> NULL(NULL[0]), data_atual.ano(COMRAM[1]), data_atual(COMRAM[7]), 

    sp__memset	PTR void  size(1) Largest target is 80
		 -> buffer_serial(BANK0[80]), 

    zerar_string@string_a_zerar	PTR unsigned char  size(1) Largest target is 80
		 -> buffer_serial(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_numero_para_ascii
    _main->_zerar_string
    _zerar_string->_memset
    _memset->_strlen
    _verificar_num_contas->_Read_b_eep
    _numero_para_ascii->___awdiv
    ___awdiv->___wmul
    _eeprom_config_inicial->_Write_b_eep
    _dia_da_semana->___lwmod
    ___lwmod->___wmul
    _carregar_senha->_Read_b_eep
    _WriteI2C->_IdleI2C

Critical Paths under _aux in COMRAM

    _aux->i2_numero_para_ascii
    i2_numero_para_ascii->i2___awdiv
    i2___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_dia_da_semana
    _numero_para_ascii->___awdiv

Critical Paths under _aux in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aux in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aux in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aux in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aux in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aux in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _aux in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _aux in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   13345
                                             22 BANK0     17    17      0
                           _Busy_eep
                            _IdleI2C
                            _OpenI2C
                            _ReadI2C
                         _Read_b_eep
                           _WriteI2C
                        _Write_b_eep
                  _ascii_para_numero
                     _carregar_senha
                      _config_serial
                           _delay_ms
                      _dia_da_semana
              _eeprom_config_inicial
                             _memset
                  _numero_para_ascii
                             _strlen
               _verificar_num_contas
                       _zerar_string
 ---------------------------------------------------------------------------------
 (1) _zerar_string                                         1     1      0     794
                                             38 COMRAM     1     1      0
                             _memset
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     150
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _memset                                               6     2      4     570
                                             32 COMRAM     6     2      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _verificar_num_contas                                 2     2      0     370
                                             30 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _numero_para_ascii                                    4     4      0    2059
                                             38 COMRAM     1     1      0
                                              4 BANK0      3     3      0
                            ___awdiv
                            ___lbdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     318
                                             28 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             34 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_config_inicial                                1     1      0    1270
                                             32 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    1092
                                             28 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dia_da_semana                                       22    18      4    2777
                                              0 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     888
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             34 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             28 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     238
                                             28 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _config_serial                                        1     1      0      22
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _carregar_senha                                       8     6      2     674
                                             30 COMRAM     8     6      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2     278
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ascii_para_numero                                    4     2      2     219
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _WriteI2C                                             1     1      0      22
                                             29 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (2) _IdleI2C                                              1     1      0       0
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                             28 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _aux                                                 10    10      0    1309
                                             18 COMRAM    10    10      0
                  _teclado_matricial
                i2_numero_para_ascii
 ---------------------------------------------------------------------------------
 (4) i2_numero_para_ascii                                  4     4      0     927
                                             14 COMRAM     4     4      0
                          i2___awdiv
                          i2___lbdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lbdiv                                            4     3      1     188
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _teclado_matricial                                    4     3      1     169
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Busy_eep
   _IdleI2C
   _OpenI2C
   _ReadI2C
   _Read_b_eep
   _WriteI2C
     _IdleI2C
   _Write_b_eep
   _ascii_para_numero
   _carregar_senha
     _Read_b_eep
   _config_serial
   _delay_ms
   _dia_da_semana
     ___lwdiv
     ___lwmod
       ___wmul (ARG)
     ___wmul
   _eeprom_config_inicial
     _Busy_eep
     _Write_b_eep
   _memset
     _strlen (ARG)
   _numero_para_ascii
     ___awdiv
       ___wmul (ARG)
     ___lbdiv
     ___wmul
   _strlen
   _verificar_num_contas
     _Read_b_eep
   _zerar_string
     _memset
       _strlen (ARG)
     _strlen

 _aux (ROOT)
   _teclado_matricial
   i2_numero_para_ascii
     i2___awdiv
       i2___wmul (ARG)
     i2___lbdiv
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     110      21       13.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      8B       5       86.9%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     27      41       1       68.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CC      20        0.0%
DATA                 0      0     1DC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Aug 07 10:56:18 2015

        i2numero_para_ascii@numero 0010               main@qtd_total_contas 00E3  
                               PL2 75CC              __end_of_dia_da_semana 76E4  
                               PL4 7F6A                                 PL6 7F86  
                               PL8 75E2              _eeprom_config_inicial 7274  
                      _SSPSTATbits 000FC7                                 _WR 007D31  
                     ___awdiv@sign 00C5                ___wmul@multiplicand 001F  
               __CFG_FOSC$XTPLL_XT 000000                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                                PL10 7F9A  
                              PL20 7FD8                                PL12 76E4  
                              PL22 7FE6                                PL14 7FAA  
                              PL24 72D0                                PL16 7FBA  
                              PL26 7FF4                                PL18 7FCA  
          __size_of_carregar_senha 0076                                l300 7AE6  
                              l400 7E86                                l304 7AF8  
                              l313 7B32                                l411 7EAE  
                              l404 7E96                                l308 7B02  
                              l325 7BA0                                l422 7ED6  
                              l415 7EBE                                l407 7E9E  
                              l440 7F60                                l432 7EF6  
                              l336 7BD6                                l328 7BAC  
                              l441 7F5A                                l425 7EDE  
                              l273 7A42                                l418 7EC6  
                              l435 7F02                                l283 7ABC  
                              l444 7F50                                l372 7E70  
                              l292 7ACE                                l276 7A74  
                              l429 7EEE                                l373 7D98  
                              l293 7D5E                                l366 7D7A  
                              l286 7AC4                                l383 7E28  
                              l295 7AD8                                l279 7A7E  
                              l392 7E4C                                l376 7DA0  
                              l369 7D82                                l289 7ACA  
                              l491 7496                                l485 744C  
                              l397 7E7E                                l734 6F70  
                              l670 6F10                                l494 74B0  
                              l735 6F72                                l479 70A8  
                              l488 7462                                l593 758C  
                              l497 74B8                                l756 71D0  
                              l589 755C                                l759 71AC  
                              l768 71C6                                l697 710C  
                     __CFG_CPB$OFF 000000                       __CFG_CPD$OFF 000000  
                              _RX9 007D5E                                _TX9 007D66  
                     __CFG_BOR$OFF 000000                                _aux 1008  
             __size_of_Write_b_eep 0034                                wreg 000FE8  
                     __CFG_LVP$OFF 000000                       __CFG_WDT$OFF 000000  
                             l1303 7186                               l4000 7E44  
                             l4020 7E8E                               l4012 7E6A  
                             l1293 7212                               l4030 7EB2  
                             l4040 7ECE                               l4032 7EB6  
                             l2454 6FDC                               l2800 7046  
                             l2464 7070                               l2456 6FDE  
                             l4048 7EE6                               l4056 7EFE  
                             l4074 7F36                               l4058 7F0C  
                             l2812 7562                               l3604 71E2  
                             l2468 707C                               l2478 6F24  
                             l2822 75B2                               l3606 71EA  
                             l2750 7276                               l3550 7408  
                             l3542 73F0                               l3616 7208  
                             l3608 71EE                               l3632 717C  
                             l3624 715E                               l3560 7426  
                             l3552 740C                               l3536 73E0  
                             l3800 7B36                               l3626 7166  
                             l3810 7B54                               l2908 7094  
                             l3628 716A                               l3548 7400  
                             l3564 7430                               l3812 7B56  
                             l3724 79E6                               l3590 7146  
                             l3582 7132                               l3910 7CB2  
                             l3830 7BB0                               l3822 7B6E  
           ??_verificar_num_contas 001F                               ?_aux 0001  
                             l3664 7666                               l3568 743C  
                             l3584 7136                               l3904 7CB0  
                             l3832 7BB4                               l3728 79F8  
                             l3578 712C                               l3594 714E  
                             l3930 7D0A                               l3818 7B64  
                             l3668 7672                               l3924 7CE2  
                             l3860 7C16                               l3836 7BC2  
                             l3780 7AE2                               l2878 71B6  
                             l3918 7CCC                               l3846 7BD8  
                             l3854 7C06                               l3936 7D16  
                             l3960 7D56                               l3784 7AEE  
                             l3874 7C38                               l3946 7D36  
                             l3794 7B1E                               l3868 7C24  
                             l3958 7D52                               l3894 7C92  
                             l3984 7DEE                               l3988 7DF6  
                             _BRGH 007D62                               _CREN 007D5C  
                             _FERR 007D5A                               _LATB 000F8A  
                             _LATD 000F8C                               u2095 7118  
                             u2096 711A                               _PIE1 000F9D  
                             u4251 7610                               u5247 709A  
                             _RBIE 007F93                               _RBIF 007F90  
                             _RCIE 007CED                               _RCIF 007CF5  
                             u4590 7BFA                               _OERR 007D59  
                             _SPEN 007D5F                               _TRMT 007D61  
                             _TXIE 007CEC                               _TXEN 007D65  
                             _SYNC 007D64                       __CFG_PWRT$ON 000000  
                             _main 7954                               fsr1h 000FE2  
                             fsr2h 000FDA                               indf1 000FE7  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               prodh 000FF4  
                             prodl 000FF3                               start 1018  
            __size_of_zerar_string 001A                      __CFG_IESO$OFF 000000  
                  __end_of_IdleI2C 6F34                      __CFG_MCLRE$ON 000000  
                     ___param_bank 000010                    __end_of_ReadI2C 6F7A  
                  __end_of_OpenI2C 6F60                              ??_aux 0013  
                    __CFG_PLLDIV$1 000000                              ?_main 0001  
                  __end_of___awdiv 7446                    __end_of___lbdiv 7152  
                            _EEADR 000FA9                              _BRG16 007DC3  
                            _CMCON 000FB4                              _T0CON 000FD5  
                  ___awdiv@divisor 0025                              _T1CON 000FCD  
                config_serial@baud 001D                    __end_of___lwdiv 721C  
                  __end_of___lwmod 7190                              i2l221 7828  
                            i2l231 7850                              i2l223 7832  
                            i2l240 7878                              i2l233 7858  
                            i2l217 7818                              i2l235 7860  
                            i2l219 7820                              i2l253 78F0  
                            i2l237 786A                              i2l239 78AE  
                            i2l191 77E6                              i2l256 78EA  
                            i2l184 7742                              i2l265 7936  
                            i2l185 7716                              i2l258 7904  
                            i2l266 7942                              i2l188 7738  
                            i2l491 73A6                              i2l485 735C  
                            i2l494 73C0                              i2l488 7372  
                            i2l497 73C8                    ___awdiv@counter 00C4  
                            _RCREG 000FAE                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _SPBRG 000FAF  
                            _PORTB 000F81                              _PORTD 000F83  
                    __CFG_USBDIV$1 000000                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TXCKP 007DC4                              _TXREG 000FAD  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                    __CFG_WRT2$OFF 000000                      __CFG_WRT3$OFF 000000  
            aux@caractere_a_exibir 0018                     __CFG_EBTR0$OFF 000000  
                   __CFG_FCMEN$OFF 000000                     __CFG_EBTR1$OFF 000000  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                    __CFG_WRTB$OFF 000000                      __CFG_WRTC$OFF 000000  
                    __CFG_WRTD$OFF 000000                     Read_b_eep@badd 001D  
                     main@temp_731 00DF                     __CFG_EBTRB$OFF 000000  
           Write_b_eep@GIE_BIT_VAL 0020                              _senha 00EB  
                            main@i 00E5                              main@j 00E2  
                     _zerar_string 6F7A                     __pbitbssCOMRAM 0208  
                            tablat 000FF5                   __end_ofi2___wmul 701C  
             _num_interrupt_timer1 0037                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
                  ??_config_serial 001D                    ___lbdiv@divisor 001D  
                  ___lbdiv@counter 001F                 __size_ofi2___awdiv 0078  
               __size_ofi2___lbdiv 0034                    __initialization 721C  
                     __end_of_main 7F6A             ?_eeprom_config_inicial 0001  
                       _Read_b_eep 6F34                   __end_of_Busy_eep 6F16  
          ascii_para_numero@numero 0020                             ??_main 00DA  
                    __activetblptr 000002                    __CFG_CCP2MX$OFF 000000  
                           _ADCON1 000FC1                             _EEDATA 000FA8  
                           _EECON2 000FA7                   ___awdiv@dividend 0023  
                 __end_of_WriteI2C 71D2                i2_numero_para_ascii 7356  
                      OpenI2C@slew 001D                             i2l3032 7834  
                           i2l3008 77F2                             i2l3034 783C  
                           i2l3108 7940                             i2l3062 78A2  
                           i2l3070 78CA                             i2l3080 78E0  
                           i2l3048 786C                             i2l3072 78D0  
                           i2l3090 78F8                             i2l3066 78B8  
                           i2l3068 78C2                             i2l2710 74DA  
                           i2l2630 7300                             i2l2720 74EE  
                           i2l2712 74DE                             i2l2704 74CE  
                           i2l2640 731C                             i2l2624 72F0  
                           i2l2730 7502                             i2l2722 74F2  
                           i2l2714 74E2                             i2l2706 74D2  
                           i2l2732 7506                             i2l2724 74F6  
                           i2l2716 74E6                             i2l2708 74D6  
                           i2l2740 7552                             i2l2636 7310  
                           i2l2652 7340                             i2l2734 750A  
                           i2l2726 74FA                             i2l2718 74EA  
                           i2l2638 7318                             i2l2670 70CA  
                           i2l2728 74FE                             i2l2656 734C  
                           i2l2648 7336                             i2l2672 70CE  
                           i2l2738 7510                             i2l2666 70C4  
                           i2l2682 70E6                             i2l2678 70DE  
                           i2l2990 77A4                             i2l2982 778C  
                           i2l2992 77AA                             i2l2984 7790  
                           _INTCON 000FF2                             i2l2978 777E  
                           i2l2988 77A0                             i2l2998 77B0  
                        ??_IdleI2C 001D                             _OSCCON 000FD3  
                           _TMR0IE 007F95                             _TMR0IF 007F92  
                           _TMR1IE 007CE8                             _TMR1IF 007CF0  
                           _TMR1ON 007E68                             _SSPADD 000FC8  
                           _SSPBUF 000FC9                          ??_ReadI2C 001D  
                   __CFG_VREGEN$ON 000000                   __end_of_delay_ms 70B6  
                        ??_OpenI2C 001E                     __CFG_XINST$OFF 000000  
                _teclado_matricial 74BE                  _ascii_para_numero 6F94  
         i2numero_para_ascii@temp1 0012           i2numero_para_ascii@temp2 0011  
                           ___wmul 701C                          ??___awdiv 0027  
               ?_teclado_matricial 0001                          ??___lbdiv 001E  
                   __CFG_STVREN$ON 000000                 ?_ascii_para_numero 001D  
             ?i2_numero_para_ascii 0001                          ??___lwdiv 0021  
                        ??___lwmod 0027                             _enviar 0209  
                           _memset 7068                             clear_0 7224  
                           clear_1 7236                             clear_2 7244  
                 ___awdiv@quotient 00C6                     _carregar_senha 7556  
                           _strlen 6FD4                     i2___awdiv@sign 000C  
              ??_teclado_matricial 0002                ??_ascii_para_numero 001F  
                     __pdataCOMRAM 0028                  __end_ofi2___awdiv 7356  
          dia_da_semana@tabela_mes 00CD                  __end_ofi2___lbdiv 70EA  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                carregar_senha@conta 0026  
                 ___lbdiv@dividend 001E                         __accesstop 0060  
          __end_of__initialization 726A                    __CFG_PBADEN$OFF 000000  
        __end_of_teclado_matricial 7556                      ___rparam_used 000001  
        __end_of_ascii_para_numero 6FB4                     __pcstackCOMRAM 0001  
            ??i2_numero_para_ascii 000F                        ?_Read_b_eep 001D  
           __end_of_carregar_senha 75CC                         __end_ofPL2 75E2  
                       __end_ofPL4 7F86                         __end_ofPL6 7F9A  
                       __end_ofPL8 7606                   ___lbdiv@quotient 0020  
                        ?i2___wmul 0001                         __pbssBANK0 0060  
                        ?_Busy_eep 0001                         _data_atual 003A  
           eeprom_config_inicial@i 0021                            ?___wmul 001D  
                  ?_carregar_senha 001F                            ?_memset 0021  
                        ?_WriteI2C 0001                      ??_Write_b_eep 0020  
                          _FLAGS_1 0072                            _FLAGS_2 0073  
                          ?_strlen 001D                         ??i2___wmul 0005  
                          _INTCON2 000FF1                          ?_delay_ms 001D  
                          _SSPCON1 000FC6                            _SSPCON2 000FC5  
                          _SSPSTAT 000FC7                __size_of_Read_b_eep 0012  
                          _IdleI2C 6F24             __size_of_dia_da_semana 00DE  
                       ??_Busy_eep 001D      __size_of_verificar_num_contas 0026  
                          _ReadI2C 6F60                 dia_da_semana@F5261 0028  
       __size_of_teclado_matricial 0098         __size_of_ascii_para_numero 0020  
          ??_eeprom_config_inicial 0021                            _OpenI2C 6F46  
                          __Hparam 0000                            __Lparam 0000  
                          ___awdiv 73CE                            ___lbdiv 711E  
    main@ultimo_caractere_recebido 00E0                    __size_of___wmul 0026  
                          ___lwdiv 71D2                            ___lwmod 7152  
                          __pcinit 721C                         ??_WriteI2C 001E  
                  __size_of_memset 0026                            __ramtop 0800  
                          __ptext0 7954                            __ptext1 6F7A  
                          __ptext2 6FD4                            __ptext3 7068  
                          __ptext4 7042                            __ptext5 7446  
                          __ptext6 711E                            __ptext7 73CE  
                          __ptext8 7274                            __ptext9 70EA  
                  __size_of_strlen 0022                       __size_of_aux 694C  
                          _receber 020B         zerar_string@string_a_zerar 0027  
                       ??_delay_ms 001F                __end_of_Write_b_eep 711E  
                   __pintcode_body 76F4               end_of_initialization 726A  
                          memset@c 0021                            memset@n 0023  
                          memset@p 0025                      __Lmediumconst 0000  
                          int_func 76F4                i2___wmul@multiplier 0001  
            __end_of_config_serial 6FD4                         _nova_senha 0060  
                          postdec1 000FE5                            postinc0 000FEE  
                          postinc1 000FE6                            postinc2 000FDE  
                _numero_para_ascii 7446                      _dia_da_semana 7606  
                          strlen@s 0020                 ?_numero_para_ascii 0001  
                        _PORTAbits 000F80                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
_qtd_vezes_mesma_tecla_pressionada 0039              teclado_matricial@temp 0003  
                        _TRISBbits 000F93                ??_numero_para_ascii 0027  
                        i2___awdiv 72DE                          i2___lbdiv 70B6  
                       main@funcao 00E8                 i2___awdiv@dividend 0007  
       teclado_matricial@caractere 0004          __end_of_numero_para_ascii 74BE  
                     ??_Read_b_eep 001F                     ?_dia_da_semana 00C4  
            verificar_num_contas@i 0020                     __end_of___wmul 7042  
                    __pidataCOMRAM 6F17                        _Write_b_eep 70EA  
                   __end_of_memset 708E                   i2___wmul@product 0005  
                   __end_of_strlen 6FF6                        __end_ofPL10 7FAA  
                      __end_ofPL20 7FE6                        __end_ofPL12 76F4  
                      __end_ofPL22 7FF4                        __end_ofPL14 7FBA  
                      __end_ofPL24 72DE                        __end_ofPL16 7FCA  
                      __end_ofPL26 8000                        __end_ofPL18 7FD8  
              start_initialization 721C                 i2___awdiv@quotient 000D  
                __size_ofi2___wmul 0026                        __end_of_aux 7954  
                       ?i2___awdiv 0007                         ?i2___lbdiv 0001  
                 WriteI2C@data_out 001E                 __end_of_Read_b_eep 6F46  
      __end_ofi2_numero_para_ascii 73CE                 i2___lbdiv@dividend 0002  
                __size_of_Busy_eep 0006                   ??_carregar_senha 0021  
         _qtd_caracteres_recebidos 0038           main@conta_a_ser_alterada 00E4  
                         ??___wmul 0021                   __CFG_LPT1OSC$OFF 000000  
                         ??_memset 0025                 _caractere_recebido 0036  
           _modo_bluetooth_teclado 020A                           ??_strlen 001F  
                __size_of_WriteI2C 0042                        __pbssBIGRAM 00EB  
                      __pbssCOMRAM 0035                      __pcstackBANK0 00C4  
               i2___lbdiv@quotient 0004            numero_para_ascii@numero 00C9  
                    ?_zerar_string 0001                  __size_of_delay_ms 0028  
                         ?_IdleI2C 0001                           ?_ReadI2C 0001  
                         ?_OpenI2C 001D                   ___lwdiv@dividend 001D  
   __size_of_eeprom_config_inicial 005C      __end_of_eeprom_config_inicial 72D0  
       __size_of_numero_para_ascii 0078                    ??_dia_da_semana 00C8  
                        __pintcode 1008                           ?___awdiv 0023  
                         ?___lbdiv 001D                           ?___lwdiv 001D  
                         ?___lwmod 0023       __end_of_verificar_num_contas 7068  
      ascii_para_numero@caractere1 001E        ascii_para_numero@caractere2 001D  
      ascii_para_numero@caractere3 001F                     ??_zerar_string 0027  
                 ___lwdiv@quotient 0022                        ??i2___awdiv 000B  
                      ??i2___lbdiv 0002                     ___wmul@product 0021  
                         _LATDbits 000F8C                           _PIR1bits 000F9E  
                         _RCONbits 000FD0                           _PORTB_SR 0035  
                        aux@coluna 001B                  ___wmul@multiplier 001D  
                         i2___wmul 6FF6                    Write_b_eep@badd 001D  
                  Write_b_eep@bdat 001F                          main@conta 00E7  
                        main@etapa 00E6                          main@ordem 00EA  
                i2___awdiv@divisor 0009                  i2___awdiv@counter 000B  
                     delay_ms@temp 0020                          copy_data0 725E  
                 OpenI2C@sync_mode 001E                           _Busy_eep 6F10  
                 __size_of_IdleI2C 0010                         _EECON1bits 000FA6  
                 __size_of_ReadI2C 001A                           __Hrparam 0000  
                i2___lbdiv@divisor 0001                   __size_of_OpenI2C 001A  
                i2___lbdiv@counter 0003                           __Lrparam 0000  
                 __size_of___awdiv 0078                   __size_of___lbdiv 0034  
            i2___wmul@multiplicand 0003                   __size_of___lwdiv 004A  
                 __size_of___lwmod 003E                           _WriteI2C 7190  
           numero_para_ascii@temp1 00CA             numero_para_ascii@temp2 00C8  
                     ?_Write_b_eep 001D                dia_da_semana@seculo 00D9  
                         _debounce 0208             __size_of_config_serial 0020  
                         _delay_ms 708E                    ___lwdiv@divisor 001F  
                  ___lwdiv@counter 0021                           __ptext10 6F10  
                         __ptext11 7606                           __ptext20 7190  
                         __ptext12 701C                           __ptext21 6F24  
                         __ptext13 7152                           __ptext22 6F60  
                         __ptext14 71D2                           __ptext23 6F46  
                         __ptext15 708E                           __ptext16 6FB4  
                         __ptext25 7356                           __ptext17 7556  
                         __ptext26 6FF6                           __ptext18 6F34  
                         __ptext27 70B6                           __ptext19 6F94  
                         __ptext28 72DE                           __ptext29 74BE  
   carregar_senha@senha_a_carregar 001F               _verificar_num_contas 7042  
                 dia_da_semana@dia 00C7                   dia_da_semana@ano 00C4  
                 dia_da_semana@mes 00C6                      __size_of_main 0616  
                         _ptr_data 0070               __end_of_zerar_string 6F94  
                         aux@linha 001C                           main@cont 00E9  
                         main@temp 00E1              __CFG_CPUDIV$OSC4_PLL6 000000  
                       _INTCONbits 000FF2                delay_ms@delay_total 001D  
                         memset@p1 0026                           intlevel2 0000  
            ?_verificar_num_contas 0001                   ___lwmod@dividend 0023  
                     _qtd_max_dias 0034                      _config_serial 6FB4  
                    _buffer_serial 0074       __size_ofi2_numero_para_ascii 0078  
                  carregar_senha@i 0025                    ___lwmod@divisor 0025  
                         strlen@cp 001F                    ___lwmod@counter 0027  
                      _SSPCON1bits 000FC6                        _SSPCON2bits 000FC5  
          teclado_matricial@coluna 0002     verificar_num_contas@qtd_contas 001F  
           teclado_matricial@linha 0001                     ?_config_serial 0001  
