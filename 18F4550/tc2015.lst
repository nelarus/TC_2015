

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 17 14:59:47 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	pa_nodes,global,class=CODE,delta=1
    66  0000                     tblptru	equ	0xFF8
    67                           tblptrh	equ	0xFF7
    68                           tblptrl	equ	0xFF6
    69                           tablat	equ	0xFF5
    70                           prodh	equ	0xFF4
    71                           prodl	equ	0xFF3
    72                           intcon	equ	0xFF2
    73                           intcon2	equ	0xFF1
    74                           indf0	equ	0xFEF
    75                           plusw0	equ	0xFEB
    76                           fsr0h	equ	0xFEA
    77                           fsr0l	equ	0xFE9
    78                           wreg	equ	0xFE8
    79                           indf1	equ	0xFE7
    80                           postinc1	equ	0xFE6
    81                           plusw1	equ	0xFE3
    82                           fsr1h	equ	0xFE2
    83                           fsr1l	equ	0xFE1
    84                           indf2	equ	0xFDF
    85                           postinc2	equ	0xFDE
    86                           postdec2	equ	0xFDD
    87                           plusw2	equ	0xFDB
    88                           fsr2h	equ	0xFDA
    89                           fsr2l	equ	0xFD9
    90                           status	equ	0xFD8
    91                           
    92                           	psect	idataCOMRAM
    93  005F17                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for dia_da_semana@F5283
    97  005F17  00                 	db	0
    98  005F18  03                 	db	3
    99  005F19  03                 	db	3
   100  005F1A  06                 	db	6
   101  005F1B  01                 	db	1
   102  005F1C  04                 	db	4
   103  005F1D  06                 	db	6
   104  005F1E  02                 	db	2
   105  005F1F  05                 	db	5
   106  005F20  00                 	db	0
   107  005F21  03                 	db	3
   108  005F22  05                 	db	5
   109                           
   110                           ;initializer for _qtd_max_dias
   111  005F23  1F                 	db	31
   112                           tblptru	equ	0xFF8
   113                           tblptrh	equ	0xFF7
   114                           tblptrl	equ	0xFF6
   115                           tablat	equ	0xFF5
   116                           prodh	equ	0xFF4
   117                           prodl	equ	0xFF3
   118                           intcon	equ	0xFF2
   119                           intcon2	equ	0xFF1
   120                           indf0	equ	0xFEF
   121                           plusw0	equ	0xFEB
   122                           fsr0h	equ	0xFEA
   123                           fsr0l	equ	0xFE9
   124                           wreg	equ	0xFE8
   125                           indf1	equ	0xFE7
   126                           postinc1	equ	0xFE6
   127                           plusw1	equ	0xFE3
   128                           fsr1h	equ	0xFE2
   129                           fsr1l	equ	0xFE1
   130                           indf2	equ	0xFDF
   131                           postinc2	equ	0xFDE
   132                           postdec2	equ	0xFDD
   133                           plusw2	equ	0xFDB
   134                           fsr2h	equ	0xFDA
   135                           fsr2l	equ	0xFD9
   136                           status	equ	0xFD8
   137                           
   138                           	psect	mediumconst
   139  007E96                     __pmediumconst:
   140                           	opt stack 0
   141  007E96  00                 	db	0
   142  007E97                     _dpowers:
   143                           	opt stack 0
   144  007E97  0001               	dw	1
   145  007E99  000A               	dw	10
   146  007E9B  0064               	dw	100
   147  007E9D  03E8               	dw	1000
   148  007E9F  2710               	dw	10000
   149  007EA1                     __end_of_dpowers:
   150                           	opt stack 0
   151  0000                     _ADCON1	set	4033
   152  0000                     _CMCON	set	4020
   153  0000                     _EEADR	set	4009
   154  0000                     _EECON1bits	set	4006
   155  0000                     _EECON2	set	4007
   156  0000                     _EEDATA	set	4008
   157  0000                     _INTCON	set	4082
   158  0000                     _INTCON2	set	4081
   159  0000                     _INTCONbits	set	4082
   160  0000                     _LATA	set	3977
   161  0000                     _LATB	set	3978
   162  0000                     _LATCbits	set	3979
   163  0000                     _LATD	set	3980
   164  0000                     _LATDbits	set	3980
   165  0000                     _LATEbits	set	3981
   166  0000                     _OSCCON	set	4051
   167  0000                     _PIE1	set	3997
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTBbits	set	3969
   170  0000                     _PORTD	set	3971
   171  0000                     _PORTDbits	set	3971
   172  0000                     _PORTEbits	set	3972
   173  0000                     _RCONbits	set	4048
   174  0000                     _RCREG	set	4014
   175  0000                     _SPBRG	set	4015
   176  0000                     _T0CON	set	4053
   177  0000                     _T1CON	set	4045
   178  0000                     _TMR0H	set	4055
   179  0000                     _TMR0L	set	4054
   180  0000                     _TMR1H	set	4047
   181  0000                     _TMR1L	set	4046
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _TRISD	set	3989
   186  0000                     _TRISE	set	3990
   187  0000                     _TXREG	set	4013
   188  0000                     _BRG16	set	32195
   189  0000                     _BRGH	set	32098
   190  0000                     _CREN	set	32092
   191  0000                     _FERR	set	32090
   192  0000                     _OERR	set	32089
   193  0000                     _RBIE	set	32659
   194  0000                     _RBIF	set	32656
   195  0000                     _RCIE	set	31981
   196  0000                     _RCIF	set	31989
   197  0000                     _RX9	set	32094
   198  0000                     _SPEN	set	32095
   199  0000                     _SYNC	set	32100
   200  0000                     _TMR0IE	set	32661
   201  0000                     _TMR0IF	set	32658
   202  0000                     _TMR1IE	set	31976
   203  0000                     _TMR1IF	set	31984
   204  0000                     _TMR1ON	set	32360
   205  0000                     _TRMT	set	32097
   206  0000                     _TX9	set	32102
   207  0000                     _TXCKP	set	32196
   208  0000                     _TXEN	set	32101
   209  0000                     _TXIE	set	31980
   210  0000                     _WR	set	32049
   211  007EA1                     STR_29:
   212  007EA1  0A                 	db	10
   213  007EA2  0A                 	db	10
   214  007EA3  0A                 	db	10
   215  007EA4  25                 	db	37
   216  007EA5  30                 	db	48	;'0'
   217  007EA6  32                 	db	50	;'2'
   218  007EA7  64                 	db	100	;'d'
   219  007EA8  3A                 	db	58	;':'
   220  007EA9  25                 	db	37
   221  007EAA  30                 	db	48	;'0'
   222  007EAB  32                 	db	50	;'2'
   223  007EAC  64                 	db	100	;'d'
   224  007EAD  3A                 	db	58	;':'
   225  007EAE  25                 	db	37
   226  007EAF  30                 	db	48	;'0'
   227  007EB0  32                 	db	50	;'2'
   228  007EB1  64                 	db	100	;'d'
   229  007EB2  2D                 	db	45
   230  007EB3  25                 	db	37
   231  007EB4  30                 	db	48	;'0'
   232  007EB5  32                 	db	50	;'2'
   233  007EB6  64                 	db	100	;'d'
   234  007EB7  2E                 	db	46
   235  007EB8  25                 	db	37
   236  007EB9  30                 	db	48	;'0'
   237  007EBA  32                 	db	50	;'2'
   238  007EBB  64                 	db	100	;'d'
   239  007EBC  2E                 	db	46
   240  007EBD  25                 	db	37
   241  007EBE  30                 	db	48	;'0'
   242  007EBF  32                 	db	50	;'2'
   243  007EC0  64                 	db	100	;'d'
   244  007EC1  00                 	db	0
   245  007EC2                     STR_15:
   246  007EC2  0A                 	db	10
   247  007EC3  0A                 	db	10
   248  007EC4  43                 	db	67	;'C'
   249  007EC5  6F                 	db	111	;'o'
   250  007EC6  6E                 	db	110	;'n'
   251  007EC7  74                 	db	116	;'t'
   252  007EC8  61                 	db	97	;'a'
   253  007EC9  20                 	db	32
   254  007ECA  6E                 	db	110	;'n'
   255  007ECB  61                 	db	97	;'a'
   256  007ECC  6F                 	db	111	;'o'
   257  007ECD  20                 	db	32
   258  007ECE  65                 	db	101	;'e'
   259  007ECF  78                 	db	120	;'x'
   260  007ED0  69                 	db	105	;'i'
   261  007ED1  73                 	db	115	;'s'
   262  007ED2  74                 	db	116	;'t'
   263  007ED3  65                 	db	101	;'e'
   264  007ED4  6E                 	db	110	;'n'
   265  007ED5  74                 	db	116	;'t'
   266  007ED6  65                 	db	101	;'e'
   267  007ED7  00                 	db	0
   268  007ED8                     STR_14:
   269  007ED8  0A                 	db	10
   270  007ED9  0A                 	db	10
   271  007EDA  45                 	db	69	;'E'
   272  007EDB  72                 	db	114	;'r'
   273  007EDC  72                 	db	114	;'r'
   274  007EDD  6F                 	db	111	;'o'
   275  007EDE  20                 	db	32
   276  007EDF  64                 	db	100	;'d'
   277  007EE0  65                 	db	101	;'e'
   278  007EE1  20                 	db	32
   279  007EE2  70                 	db	112	;'p'
   280  007EE3  72                 	db	114	;'r'
   281  007EE4  6F                 	db	111	;'o'
   282  007EE5  74                 	db	116	;'t'
   283  007EE6  6F                 	db	111	;'o'
   284  007EE7  63                 	db	99	;'c'
   285  007EE8  6F                 	db	111	;'o'
   286  007EE9  6C                 	db	108	;'l'
   287  007EEA  6F                 	db	111	;'o'
   288  007EEB  00                 	db	0
   289  007EEC                     STR_26:
   290  007EEC  0A                 	db	10
   291  007EED  71                 	db	113	;'q'
   292  007EEE  74                 	db	116	;'t'
   293  007EEF  64                 	db	100	;'d'
   294  007EF0  5F                 	db	95	;'_'
   295  007EF1  74                 	db	116	;'t'
   296  007EF2  6F                 	db	111	;'o'
   297  007EF3  74                 	db	116	;'t'
   298  007EF4  61                 	db	97	;'a'
   299  007EF5  6C                 	db	108	;'l'
   300  007EF6  5F                 	db	95	;'_'
   301  007EF7  63                 	db	99	;'c'
   302  007EF8  6F                 	db	111	;'o'
   303  007EF9  6E                 	db	110	;'n'
   304  007EFA  74                 	db	116	;'t'
   305  007EFB  61                 	db	97	;'a'
   306  007EFC  73                 	db	115	;'s'
   307  007EFD  3A                 	db	58	;':'
   308  007EFE  00                 	db	0
   309  007EFF                     STR_12:
   310  007EFF  0A                 	db	10
   311  007F00  0A                 	db	10
   312  007F01  45                 	db	69	;'E'
   313  007F02  72                 	db	114	;'r'
   314  007F03  72                 	db	114	;'r'
   315  007F04  6F                 	db	111	;'o'
   316  007F05  20                 	db	32
   317  007F06  64                 	db	100	;'d'
   318  007F07  65                 	db	101	;'e'
   319  007F08  20                 	db	32
   320  007F09  61                 	db	97	;'a'
   321  007F0A  62                 	db	98	;'b'
   322  007F0B  65                 	db	101	;'e'
   323  007F0C  72                 	db	114	;'r'
   324  007F0D  74                 	db	116	;'t'
   325  007F0E  75                 	db	117	;'u'
   326  007F0F  72                 	db	114	;'r'
   327  007F10  61                 	db	97	;'a'
   328  007F11  00                 	db	0
   329  007F12                     STR_16:
   330  007F12  0A                 	db	10
   331  007F13  0A                 	db	10
   332  007F14  53                 	db	83	;'S'
   333  007F15  65                 	db	101	;'e'
   334  007F16  6E                 	db	110	;'n'
   335  007F17  68                 	db	104	;'h'
   336  007F18  61                 	db	97	;'a'
   337  007F19  20                 	db	32
   338  007F1A  69                 	db	105	;'i'
   339  007F1B  6E                 	db	110	;'n'
   340  007F1C  63                 	db	99	;'c'
   341  007F1D  6F                 	db	111	;'o'
   342  007F1E  72                 	db	114	;'r'
   343  007F1F  72                 	db	114	;'r'
   344  007F20  65                 	db	101	;'e'
   345  007F21  74                 	db	116	;'t'
   346  007F22  61                 	db	97	;'a'
   347  007F23  00                 	db	0
   348  007F24                     STR_10:
   349  007F24  0A                 	db	10
   350  007F25  0A                 	db	10
   351  007F26  44                 	db	68	;'D'
   352  007F27  65                 	db	101	;'e'
   353  007F28  73                 	db	115	;'s'
   354  007F29  74                 	db	116	;'t'
   355  007F2A  72                 	db	114	;'r'
   356  007F2B  61                 	db	97	;'a'
   357  007F2C  76                 	db	118	;'v'
   358  007F2D  61                 	db	97	;'a'
   359  007F2E  6E                 	db	110	;'n'
   360  007F2F  64                 	db	100	;'d'
   361  007F30  6F                 	db	111	;'o'
   362  007F31  2E                 	db	46
   363  007F32  2E                 	db	46
   364  007F33  2E                 	db	46
   365  007F34  00                 	db	0
   366  007F35                     STR_27:
   367  007F35  0A                 	db	10
   368  007F36  71                 	db	113	;'q'
   369  007F37  74                 	db	116	;'t'
   370  007F38  64                 	db	100	;'d'
   371  007F39  5F                 	db	95	;'_'
   372  007F3A  6D                 	db	109	;'m'
   373  007F3B  61                 	db	97	;'a'
   374  007F3C  78                 	db	120	;'x'
   375  007F3D  5F                 	db	95	;'_'
   376  007F3E  63                 	db	99	;'c'
   377  007F3F  6F                 	db	111	;'o'
   378  007F40  6E                 	db	110	;'n'
   379  007F41  74                 	db	116	;'t'
   380  007F42  61                 	db	97	;'a'
   381  007F43  73                 	db	115	;'s'
   382  007F44  3A                 	db	58	;':'
   383  007F45  00                 	db	0
   384  007F46                     STR_13:
   385  007F46  0A                 	db	10
   386  007F47  0A                 	db	10
   387  007F48  50                 	db	80	;'P'
   388  007F49  6F                 	db	111	;'o'
   389  007F4A  72                 	db	114	;'r'
   390  007F4B  74                 	db	116	;'t'
   391  007F4C  61                 	db	97	;'a'
   392  007F4D  20                 	db	32
   393  007F4E  61                 	db	97	;'a'
   394  007F4F  62                 	db	98	;'b'
   395  007F50  65                 	db	101	;'e'
   396  007F51  72                 	db	114	;'r'
   397  007F52  74                 	db	116	;'t'
   398  007F53  61                 	db	97	;'a'
   399  007F54  00                 	db	0
   400  007F55                     STR_21:
   401  007F55  0A                 	db	10
   402  007F56  64                 	db	100	;'d'
   403  007F57  69                 	db	105	;'i'
   404  007F58  61                 	db	97	;'a'
   405  007F59  5F                 	db	95	;'_'
   406  007F5A  73                 	db	115	;'s'
   407  007F5B  65                 	db	101	;'e'
   408  007F5C  6D                 	db	109	;'m'
   409  007F5D  61                 	db	97	;'a'
   410  007F5E  6E                 	db	110	;'n'
   411  007F5F  61                 	db	97	;'a'
   412  007F60  3A                 	db	58	;':'
   413  007F61  00                 	db	0
   414  007F62                     STR_5:
   415  007F62  0A                 	db	10
   416  007F63  65                 	db	101	;'e'
   417  007F64  74                 	db	116	;'t'
   418  007F65  61                 	db	97	;'a'
   419  007F66  70                 	db	112	;'p'
   420  007F67  61                 	db	97	;'a'
   421  007F68  5F                 	db	95	;'_'
   422  007F69  65                 	db	101	;'e'
   423  007F6A  3A                 	db	58	;':'
   424  007F6B  00                 	db	0
   425  007F6C                     STR_25:
   426  007F6C  0A                 	db	10
   427  007F6D  73                 	db	115	;'s'
   428  007F6E  65                 	db	101	;'e'
   429  007F6F  67                 	db	103	;'g'
   430  007F70  75                 	db	117	;'u'
   431  007F71  6E                 	db	110	;'n'
   432  007F72  64                 	db	100	;'d'
   433  007F73  6F                 	db	111	;'o'
   434  007F74  3A                 	db	58	;':'
   435  007F75  00                 	db	0
   436  007F76                     STR_24:
   437  007F76  0A                 	db	10
   438  007F77  6D                 	db	109	;'m'
   439  007F78  69                 	db	105	;'i'
   440  007F79  6E                 	db	110	;'n'
   441  007F7A  75                 	db	117	;'u'
   442  007F7B  74                 	db	116	;'t'
   443  007F7C  6F                 	db	111	;'o'
   444  007F7D  3A                 	db	58	;':'
   445  007F7E  00                 	db	0
   446  007F7F                     STR_42:
   447  007F7F  28                 	db	40
   448  007F80  6E                 	db	110	;'n'
   449  007F81  75                 	db	117	;'u'
   450  007F82  6C                 	db	108	;'l'
   451  007F83  6C                 	db	108	;'l'
   452  007F84  29                 	db	41
   453  007F85  00                 	db	0
   454  007F86                     STR_23:
   455  007F86  0A                 	db	10
   456  007F87  68                 	db	104	;'h'
   457  007F88  6F                 	db	111	;'o'
   458  007F89  72                 	db	114	;'r'
   459  007F8A  61                 	db	97	;'a'
   460  007F8B  3A                 	db	58	;':'
   461  007F8C  00                 	db	0
   462  007F8D                     STR_36:
   463  007F8D  44                 	db	68	;'D'
   464  007F8E  49                 	db	73	;'I'
   465  007F8F  53                 	db	83	;'S'
   466  007F90  43                 	db	67	;'C'
   467  007F91  3F                 	db	63	;'?'
   468  007F92  00                 	db	0
   469  007F93                     STR_39:
   470  007F93  52                 	db	82	;'R'
   471  007F94  41                 	db	65	;'A'
   472  007F95  44                 	db	68	;'D'
   473  007F96  44                 	db	68	;'D'
   474  007F97  3F                 	db	63	;'?'
   475  007F98  00                 	db	0
   476  007F99                     STR_35:
   477  007F99  41                 	db	65	;'A'
   478  007F9A  44                 	db	68	;'D'
   479  007F9B  44                 	db	68	;'D'
   480  007F9C  52                 	db	82	;'R'
   481  007F9D  3F                 	db	63	;'?'
   482  007F9E  00                 	db	0
   483  007F9F                     STR_40:
   484  007F9F  53                 	db	83	;'S'
   485  007FA0  4C                 	db	76	;'L'
   486  007FA1  45                 	db	69	;'E'
   487  007FA2  45                 	db	69	;'E'
   488  007FA3  50                 	db	80	;'P'
   489  007FA4  00                 	db	0
   490  007FA5                     STR_37:
   491  007FA5  52                 	db	82	;'R'
   492  007FA6  45                 	db	69	;'E'
   493  007FA7  53                 	db	83	;'S'
   494  007FA8  45                 	db	69	;'E'
   495  007FA9  54                 	db	84	;'T'
   496  007FAA  00                 	db	0
   497  007FAB                     STR_38:
   498  007FAB  53                 	db	83	;'S'
   499  007FAC  54                 	db	84	;'T'
   500  007FAD  41                 	db	65	;'A'
   501  007FAE  52                 	db	82	;'R'
   502  007FAF  54                 	db	84	;'T'
   503  007FB0  00                 	db	0
   504  007FB1                     STR_22:
   505  007FB1  0A                 	db	10
   506  007FB2  64                 	db	100	;'d'
   507  007FB3  69                 	db	105	;'i'
   508  007FB4  61                 	db	97	;'a'
   509  007FB5  3A                 	db	58	;':'
   510  007FB6  00                 	db	0
   511  007FB7                     STR_19:
   512  007FB7  0A                 	db	10
   513  007FB8  61                 	db	97	;'a'
   514  007FB9  6E                 	db	110	;'n'
   515  007FBA  6F                 	db	111	;'o'
   516  007FBB  3A                 	db	58	;':'
   517  007FBC  00                 	db	0
   518  007FBD                     STR_20:
   519  007FBD  0A                 	db	10
   520  007FBE  6D                 	db	109	;'m'
   521  007FBF  65                 	db	101	;'e'
   522  007FC0  73                 	db	115	;'s'
   523  007FC1  3A                 	db	58	;':'
   524  007FC2  00                 	db	0
   525  007FC3                     STR_6:
   526  007FC3  46                 	db	70	;'F'
   527  007FC4  2D                 	db	45
   528  007FC5  65                 	db	101	;'e'
   529  007FC6  73                 	db	115	;'s'
   530  007FC7  70                 	db	112	;'p'
   531  007FC8  00                 	db	0
   532  007FC9                     STR_33:
   533  007FC9  42                 	db	66	;'B'
   534  007FCA  41                 	db	65	;'A'
   535  007FCB  55                 	db	85	;'U'
   536  007FCC  44                 	db	68	;'D'
   537  007FCD  00                 	db	0
   538  007FCE                     STR_34:
   539  007FCE  52                 	db	82	;'R'
   540  007FCF  4F                 	db	79	;'O'
   541  007FD0  4C                 	db	76	;'L'
   542  007FD1  45                 	db	69	;'E'
   543  007FD2  00                 	db	0
   544  007FD3                     STR_32:
   545  007FD3  4E                 	db	78	;'N'
   546  007FD4  41                 	db	65	;'A'
   547  007FD5  4D                 	db	77	;'M'
   548  007FD6  45                 	db	69	;'E'
   549  007FD7  00                 	db	0
   550  007FD8                     STR_3:
   551  007FD8  71                 	db	113	;'q'
   552  007FD9  74                 	db	116	;'t'
   553  007FDA  64                 	db	100	;'d'
   554  007FDB  3A                 	db	58	;':'
   555  007FDC  00                 	db	0
   556  007FDD                     STR_7:
   557  007FDD  0A                 	db	10
   558  007FDE  0A                 	db	10
   559  007FDF  25                 	db	37
   560  007FE0  73                 	db	115	;'s'
   561  007FE1  00                 	db	0
   562  007FE2                     STR_31:
   563  007FE2  41                 	db	65	;'A'
   564  007FE3  54                 	db	84	;'T'
   565  007FE4  2B                 	db	43
   566  007FE5  00                 	db	0
   567  007FE6                     STR_41:
   568  007FE6  43                 	db	67	;'C'
   569  007FE7  4F                 	db	79	;'O'
   570  007FE8  4E                 	db	78	;'N'
   571  007FE9  00                 	db	0
   572  007FEA                     STR_4:
   573  007FEA  0A                 	db	10
   574  007FEB  69                 	db	105	;'i'
   575  007FEC  3A                 	db	58	;':'
   576  007FED  00                 	db	0
   577  007FEE                     STR_8:
   578  007FEE  2A                 	db	42
   579  007FEF  25                 	db	37
   580  007FF0  63                 	db	99	;'c'
   581  007FF1  00                 	db	0
   582  007FF2  41                 	db	65	;'A'
   583  007FF3  54                 	db	84	;'T'
   584  007FF4  00                 	db	0
   585  007FF5                     STR_17:
   586  007FF5  0A                 	db	10
   587  007FF6  49                 	db	73	;'I'
   588  007FF7  00                 	db	0
   589  007FF8                     STR_18:
   590  007FF8  4F                 	db	79	;'O'
   591  007FF9  4B                 	db	75	;'K'
   592  007FFA  00                 	db	0
   593  007FFB                     STR_28:
   594  007FFB  20                 	db	32
   595  007FFC  00                 	db	0
   596  007FFD                     STR_1:
   597  007FFD  2A                 	db	42
   598  007FFE  00                 	db	0
   599  0000                     
   600                           ; #config settings
   601  007FFF  00                 	db	0	; dummy byte at the end
   602  0000                     tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           prodh	equ	0xFF4
   607                           prodl	equ	0xFF3
   608                           intcon	equ	0xFF2
   609                           intcon2	equ	0xFF1
   610                           indf0	equ	0xFEF
   611                           plusw0	equ	0xFEB
   612                           fsr0h	equ	0xFEA
   613                           fsr0l	equ	0xFE9
   614                           wreg	equ	0xFE8
   615                           indf1	equ	0xFE7
   616                           postinc1	equ	0xFE6
   617                           plusw1	equ	0xFE3
   618                           fsr1h	equ	0xFE2
   619                           fsr1l	equ	0xFE1
   620                           indf2	equ	0xFDF
   621                           postinc2	equ	0xFDE
   622                           postdec2	equ	0xFDD
   623                           plusw2	equ	0xFDB
   624                           fsr2h	equ	0xFDA
   625                           fsr2l	equ	0xFD9
   626                           status	equ	0xFD8
   627                           
   628                           	psect	cinit
   629  006438                     __pcinit:
   630                           	opt stack 0
   631  006438                     start_initialization:
   632                           	opt stack 0
   633  006438                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Clear objects allocated to BIGRAM (288 bytes)
   637  006438  EE01  F050         	lfsr	0,__pbssBIGRAM
   638  00643C  EE11 F020          	lfsr	1,288
   639  006440                     clear_0:
   640  006440  6AEE               	clrf	postinc0,c
   641  006442  50E5               	movf	postdec1,w,c
   642  006444  50E1               	movf	fsr1l,w,c
   643  006446  E1FC               	bnz	clear_0
   644  006448  50E2               	movf	fsr1h,w,c
   645  00644A  E1FA               	bnz	clear_0
   646                           
   647                           ; Clear objects allocated to BANK1 (80 bytes)
   648  00644C  EE01  F000         	lfsr	0,__pbssBANK1
   649  006450  0E50               	movlw	80
   650  006452                     clear_1:
   651  006452  6AEE               	clrf	postinc0,c
   652  006454  06E8               	decf	wreg,f,c
   653  006456  E1FD               	bnz	clear_1
   654                           
   655                           ; Clear objects allocated to BANK0 (88 bytes)
   656  006458  EE00  F060         	lfsr	0,__pbssBANK0
   657  00645C  0E58               	movlw	88
   658  00645E                     clear_2:
   659  00645E  6AEE               	clrf	postinc0,c
   660  006460  06E8               	decf	wreg,f,c
   661  006462  E1FD               	bnz	clear_2
   662                           
   663                           ; Clear objects allocated to COMRAM (13 bytes)
   664  006464  EE00  F030         	lfsr	0,__pbssCOMRAM
   665  006468  0E0D               	movlw	13
   666  00646A                     clear_3:
   667  00646A  6AEE               	clrf	postinc0,c
   668  00646C  06E8               	decf	wreg,f,c
   669  00646E  E1FD               	bnz	clear_3
   670                           
   671                           ; Initialize objects allocated to COMRAM (13 bytes)
   672                           ; load TBLPTR registers with __pidataCOMRAM
   673  006470  0E17               	movlw	low __pidataCOMRAM
   674  006472  6EF6               	movwf	tblptrl,c
   675  006474  0E5F               	movlw	high __pidataCOMRAM
   676  006476  6EF7               	movwf	tblptrh,c
   677  006478  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   678  00647A  6EF8               	movwf	tblptru,c
   679  00647C  EE00  F03D         	lfsr	0,__pdataCOMRAM
   680  006480  EE10 F00D          	lfsr	1,13
   681  006484                     copy_data0:
   682  006484  0009               	tblrd		*+
   683  006486  CFF5 FFEE          	movff	tablat,postinc0
   684  00648A  50E5               	movf	postdec1,w,c
   685  00648C  50E1               	movf	fsr1l,w,c
   686  00648E  E1FA               	bnz	copy_data0
   687  006490                     end_of_initialization:
   688                           	opt stack 0
   689  006490                     __end_of__initialization:
   690                           	opt stack 0
   691  006490  0E00               	movlw	low (__Lmediumconst shr (0+16))
   692  006492  6EF8               	movwf	tblptru,c
   693  006494  0100               	movlb	0
   694  006496  EFDA  F039         	goto	_main	;jump to C main() function
   695                           tblptru	equ	0xFF8
   696                           tblptrh	equ	0xFF7
   697                           tblptrl	equ	0xFF6
   698                           tablat	equ	0xFF5
   699                           prodh	equ	0xFF4
   700                           prodl	equ	0xFF3
   701                           intcon	equ	0xFF2
   702                           intcon2	equ	0xFF1
   703                           indf0	equ	0xFEF
   704                           postinc0	equ	0xFEE
   705                           plusw0	equ	0xFEB
   706                           fsr0h	equ	0xFEA
   707                           fsr0l	equ	0xFE9
   708                           wreg	equ	0xFE8
   709                           indf1	equ	0xFE7
   710                           postinc1	equ	0xFE6
   711                           postdec1	equ	0xFE5
   712                           plusw1	equ	0xFE3
   713                           fsr1h	equ	0xFE2
   714                           fsr1l	equ	0xFE1
   715                           indf2	equ	0xFDF
   716                           postinc2	equ	0xFDE
   717                           postdec2	equ	0xFDD
   718                           plusw2	equ	0xFDB
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           status	equ	0xFD8
   722                           
   723                           	psect	bssCOMRAM
   724  000030                     __pbssCOMRAM:
   725                           	opt stack 0
   726  000030                     _data_atual:
   727                           	opt stack 0
   728  000030                     	ds	7
   729  000037                     _FLAGS_2:
   730                           	opt stack 0
   731  000037                     	ds	1
   732  000038                     _FLAGS_3:
   733                           	opt stack 0
   734  000038                     	ds	1
   735  000039                     _PORTB_SR:
   736                           	opt stack 0
   737  000039                     	ds	1
   738  00003A                     _num_interrupt_timer1:
   739                           	opt stack 0
   740  00003A                     	ds	1
   741  00003B                     _qtd_caracteres_recebidos_serial:
   742                           	opt stack 0
   743  00003B                     	ds	1
   744  00003C                     _qtd_caracteres_recebidos_teclado:
   745                           	opt stack 0
   746  00003C                     	ds	1
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           prodh	equ	0xFF4
   752                           prodl	equ	0xFF3
   753                           intcon	equ	0xFF2
   754                           intcon2	equ	0xFF1
   755                           indf0	equ	0xFEF
   756                           postinc0	equ	0xFEE
   757                           plusw0	equ	0xFEB
   758                           fsr0h	equ	0xFEA
   759                           fsr0l	equ	0xFE9
   760                           wreg	equ	0xFE8
   761                           indf1	equ	0xFE7
   762                           postinc1	equ	0xFE6
   763                           postdec1	equ	0xFE5
   764                           plusw1	equ	0xFE3
   765                           fsr1h	equ	0xFE2
   766                           fsr1l	equ	0xFE1
   767                           indf2	equ	0xFDF
   768                           postinc2	equ	0xFDE
   769                           postdec2	equ	0xFDD
   770                           plusw2	equ	0xFDB
   771                           fsr2h	equ	0xFDA
   772                           fsr2l	equ	0xFD9
   773                           status	equ	0xFD8
   774                           
   775                           	psect	dataCOMRAM
   776  00003D                     __pdataCOMRAM:
   777                           	opt stack 0
   778  00003D                     dia_da_semana@F5283:
   779                           	opt stack 0
   780  00003D                     	ds	12
   781  000049                     _qtd_max_dias:
   782                           	opt stack 0
   783  000049                     	ds	1
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           prodh	equ	0xFF4
   789                           prodl	equ	0xFF3
   790                           intcon	equ	0xFF2
   791                           intcon2	equ	0xFF1
   792                           indf0	equ	0xFEF
   793                           postinc0	equ	0xFEE
   794                           plusw0	equ	0xFEB
   795                           fsr0h	equ	0xFEA
   796                           fsr0l	equ	0xFE9
   797                           wreg	equ	0xFE8
   798                           indf1	equ	0xFE7
   799                           postinc1	equ	0xFE6
   800                           postdec1	equ	0xFE5
   801                           plusw1	equ	0xFE3
   802                           fsr1h	equ	0xFE2
   803                           fsr1l	equ	0xFE1
   804                           indf2	equ	0xFDF
   805                           postinc2	equ	0xFDE
   806                           postdec2	equ	0xFDD
   807                           plusw2	equ	0xFDB
   808                           fsr2h	equ	0xFDA
   809                           fsr2l	equ	0xFD9
   810                           status	equ	0xFD8
   811                           
   812                           	psect	bssBANK0
   813  000060                     __pbssBANK0:
   814                           	opt stack 0
   815  000060                     _nova_senha:
   816                           	opt stack 0
   817  000060                     	ds	16
   818  000070                     _FLAGS_1:
   819                           	opt stack 0
   820  000070                     	ds	1
   821  000071                     _Linha_3:
   822                           	opt stack 0
   823  000071                     	ds	1
   824  000072                     _Linha_4:
   825                           	opt stack 0
   826  000072                     	ds	1
   827  000073                     _caractere_recebido:
   828                           	opt stack 0
   829  000073                     	ds	1
   830  000074                     _lcd_type:
   831                           	opt stack 0
   832  000074                     	ds	1
   833  000075                     _linha_lcd:
   834                           	opt stack 0
   835  000075                     	ds	1
   836  000076                     _qtd_max_colunas_lcd:
   837                           	opt stack 0
   838  000076                     	ds	1
   839  000077                     _qtd_vezes_mesma_tecla_pressionada:
   840                           	opt stack 0
   841  000077                     	ds	1
   842  000078                     _buffer_teclado_matricial:
   843                           	opt stack 0
   844  000078                     	ds	40
   845  0000A0                     _parametro_configuracao_modulo_bt:
   846                           	opt stack 0
   847  0000A0                     	ds	17
   848  0000B1                     _data_recebida:
   849                           	opt stack 0
   850  0000B1                     	ds	7
   851                           tblptru	equ	0xFF8
   852                           tblptrh	equ	0xFF7
   853                           tblptrl	equ	0xFF6
   854                           tablat	equ	0xFF5
   855                           prodh	equ	0xFF4
   856                           prodl	equ	0xFF3
   857                           intcon	equ	0xFF2
   858                           intcon2	equ	0xFF1
   859                           indf0	equ	0xFEF
   860                           postinc0	equ	0xFEE
   861                           plusw0	equ	0xFEB
   862                           fsr0h	equ	0xFEA
   863                           fsr0l	equ	0xFE9
   864                           wreg	equ	0xFE8
   865                           indf1	equ	0xFE7
   866                           postinc1	equ	0xFE6
   867                           postdec1	equ	0xFE5
   868                           plusw1	equ	0xFE3
   869                           fsr1h	equ	0xFE2
   870                           fsr1l	equ	0xFE1
   871                           indf2	equ	0xFDF
   872                           postinc2	equ	0xFDE
   873                           postdec2	equ	0xFDD
   874                           plusw2	equ	0xFDB
   875                           fsr2h	equ	0xFDA
   876                           fsr2l	equ	0xFD9
   877                           status	equ	0xFD8
   878                           
   879                           	psect	bssBANK1
   880  000100                     __pbssBANK1:
   881                           	opt stack 0
   882  000100                     _buffer_serial:
   883                           	opt stack 0
   884  000100                     	ds	80
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           intcon	equ	0xFF2
   892                           intcon2	equ	0xFF1
   893                           indf0	equ	0xFEF
   894                           postinc0	equ	0xFEE
   895                           plusw0	equ	0xFEB
   896                           fsr0h	equ	0xFEA
   897                           fsr0l	equ	0xFE9
   898                           wreg	equ	0xFE8
   899                           indf1	equ	0xFE7
   900                           postinc1	equ	0xFE6
   901                           postdec1	equ	0xFE5
   902                           plusw1	equ	0xFE3
   903                           fsr1h	equ	0xFE2
   904                           fsr1l	equ	0xFE1
   905                           indf2	equ	0xFDF
   906                           postinc2	equ	0xFDE
   907                           postdec2	equ	0xFDD
   908                           plusw2	equ	0xFDB
   909                           fsr2h	equ	0xFDA
   910                           fsr2l	equ	0xFD9
   911                           status	equ	0xFD8
   912                           
   913                           	psect	bssBIGRAM
   914  000150                     __pbssBIGRAM:
   915                           	opt stack 0
   916  000150                     _senha:
   917                           	opt stack 0
   918  000150                     	ds	288
   919                           tblptru	equ	0xFF8
   920                           tblptrh	equ	0xFF7
   921                           tblptrl	equ	0xFF6
   922                           tablat	equ	0xFF5
   923                           prodh	equ	0xFF4
   924                           prodl	equ	0xFF3
   925                           intcon	equ	0xFF2
   926                           intcon2	equ	0xFF1
   927                           indf0	equ	0xFEF
   928                           postinc0	equ	0xFEE
   929                           plusw0	equ	0xFEB
   930                           fsr0h	equ	0xFEA
   931                           fsr0l	equ	0xFE9
   932                           wreg	equ	0xFE8
   933                           indf1	equ	0xFE7
   934                           postinc1	equ	0xFE6
   935                           postdec1	equ	0xFE5
   936                           plusw1	equ	0xFE3
   937                           fsr1h	equ	0xFE2
   938                           fsr1l	equ	0xFE1
   939                           indf2	equ	0xFDF
   940                           postinc2	equ	0xFDE
   941                           postdec2	equ	0xFDD
   942                           plusw2	equ	0xFDB
   943                           fsr2h	equ	0xFDA
   944                           fsr2l	equ	0xFD9
   945                           status	equ	0xFD8
   946                           
   947                           	psect	cstackBANK0
   948  0000B8                     __pcstackBANK0:
   949                           	opt stack 0
   950  0000B8                     ??_isdigit:
   951  0000B8                     ?___wmul:
   952                           	opt stack 0
   953  0000B8                     ?___awmod:
   954                           	opt stack 0
   955  0000B8                     ?___lwdiv:
   956                           	opt stack 0
   957  0000B8                     ascii_para_numero@caractere2:
   958                           	opt stack 0
   959  0000B8                     resetar_timer1@valor_l:
   960                           	opt stack 0
   961  0000B8                     config_serial@baud:
   962                           	opt stack 0
   963  0000B8                     enviar_caractere_serial@carater_a_enviar:
   964                           	opt stack 0
   965  0000B8                     lcd_write@c:
   966                           	opt stack 0
   967  0000B8                     ___lbdiv@divisor:
   968                           	opt stack 0
   969  0000B8                     zerar_string@string_a_zerar:
   970                           	opt stack 0
   971  0000B8                     delay_ms@delay_total:
   972                           	opt stack 0
   973  0000B8                     enviar_string_serial@string_a_enviar:
   974                           	opt stack 0
   975  0000B8                     Read_b_eep@badd:
   976                           	opt stack 0
   977  0000B8                     Write_b_eep@badd:
   978                           	opt stack 0
   979  0000B8                     ___wmul@multiplier:
   980                           	opt stack 0
   981  0000B8                     ___awmod@dividend:
   982                           	opt stack 0
   983  0000B8                     ___lwdiv@dividend:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x0
   987  0000B8                     	ds	1
   988  0000B9                     ??_lcd_clear:
   989  0000B9                     ascii_para_numero@caractere1:
   990                           	opt stack 0
   991  0000B9                     resetar_timer1@valor_h:
   992                           	opt stack 0
   993  0000B9                     lcd_gotoxy@coluna:
   994                           	opt stack 0
   995  0000B9                     _isdigit$1543:
   996                           	opt stack 0
   997  0000B9                     ___lbdiv@dividend:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x1
  1001  0000B9                     	ds	1
  1002  0000BA                     ??_lcd_gotoxy:
  1003  0000BA                     ??_lcd_init:
  1004  0000BA                     ??_delay_ms:
  1005  0000BA                     ascii_para_numero@numero:
  1006                           	opt stack 0
  1007  0000BA                     verificar_num_contas@qtd_contas:
  1008                           	opt stack 0
  1009  0000BA                     enviar_comando_at@parametro:
  1010                           	opt stack 0
  1011  0000BA                     Write_b_eep@bdat:
  1012                           	opt stack 0
  1013  0000BA                     isdigit@c:
  1014                           	opt stack 0
  1015  0000BA                     ___lbdiv@counter:
  1016                           	opt stack 0
  1017  0000BA                     carregar_senha@senha_a_carregar:
  1018                           	opt stack 0
  1019  0000BA                     ___wmul@multiplicand:
  1020                           	opt stack 0
  1021  0000BA                     ___awmod@divisor:
  1022                           	opt stack 0
  1023  0000BA                     ___lwdiv@divisor:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x2
  1027  0000BA                     	ds	1
  1028  0000BB                     ??_verificar_num_contas:
  1029  0000BB                     ascii_para_numero@caractere3:
  1030                           	opt stack 0
  1031  0000BB                     enviar_comando_at@comando:
  1032                           	opt stack 0
  1033  0000BB                     lcd_init@definir_tipo_lcd:
  1034                           	opt stack 0
  1035  0000BB                     lcd_gotoxy@linha:
  1036                           	opt stack 0
  1037  0000BB                     Write_b_eep@GIE_BIT_VAL:
  1038                           	opt stack 0
  1039  0000BB                     ___lbdiv@quotient:
  1040                           	opt stack 0
  1041  0000BB                     delay_ms@temp:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x3
  1045  0000BB                     	ds	1
  1046  0000BC                     ??_carregar_senha:
  1047  0000BC                     eeprom_config_inicial@i:
  1048                           	opt stack 0
  1049  0000BC                     limpar_linha@linha:
  1050                           	opt stack 0
  1051  0000BC                     lcd_putc@c:
  1052                           	opt stack 0
  1053  0000BC                     ___awmod@counter:
  1054                           	opt stack 0
  1055  0000BC                     ___lwdiv@counter:
  1056                           	opt stack 0
  1057  0000BC                     ___wmul@product:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x4
  1061  0000BC                     	ds	1
  1062  0000BD                     limpar_linha@coluna_atual:
  1063                           	opt stack 0
  1064  0000BD                     putch@c:
  1065                           	opt stack 0
  1066  0000BD                     ___awmod@sign:
  1067                           	opt stack 0
  1068  0000BD                     ___lwdiv@quotient:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x5
  1072  0000BD                     	ds	1
  1073  0000BE                     ?___awdiv:
  1074                           	opt stack 0
  1075  0000BE                     verificar_num_contas@contas_cadastradas:
  1076                           	opt stack 0
  1077  0000BE                     ___awdiv@dividend:
  1078                           	opt stack 0
  1079                           
  1080                           ; 2 bytes @ 0x6
  1081  0000BE                     	ds	1
  1082  0000BF                     ?___lwmod:
  1083                           	opt stack 0
  1084  0000BF                     verificar_num_contas@i:
  1085                           	opt stack 0
  1086  0000BF                     ___lwmod@dividend:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x7
  1090  0000BF                     	ds	1
  1091  0000C0                     carregar_senha@i:
  1092                           	opt stack 0
  1093  0000C0                     ___awdiv@divisor:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x8
  1097  0000C0                     	ds	1
  1098  0000C1                     carregar_senha@conta:
  1099                           	opt stack 0
  1100  0000C1                     ___lwmod@divisor:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x9
  1104  0000C1                     	ds	1
  1105  0000C2                     ___awdiv@counter:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0xA
  1109  0000C2                     	ds	1
  1110  0000C3                     ___awdiv@sign:
  1111                           	opt stack 0
  1112  0000C3                     ___lwmod@counter:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0xB
  1116  0000C3                     	ds	1
  1117  0000C4                     ?_printf:
  1118                           	opt stack 0
  1119  0000C4                     dia_da_semana@ano:
  1120                           	opt stack 0
  1121  0000C4                     printf@f:
  1122                           	opt stack 0
  1123  0000C4                     ___awdiv@quotient:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0xC
  1127  0000C4                     	ds	2
  1128  0000C6                     ??_numero_para_ascii:
  1129  0000C6                     dia_da_semana@mes:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0xE
  1133  0000C6                     	ds	1
  1134  0000C7                     dia_da_semana@dia:
  1135                           	opt stack 0
  1136  0000C7                     numero_para_ascii@temp2:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0xF
  1140  0000C7                     	ds	1
  1141  0000C8                     ??_dia_da_semana:
  1142                           
  1143                           ; 0 bytes @ 0x10
  1144  0000C8                     	ds	1
  1145  0000C9                     numero_para_ascii@numero:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x11
  1149  0000C9                     	ds	1
  1150  0000CA                     numero_para_ascii@temp1:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x12
  1154  0000CA                     	ds	3
  1155  0000CD                     dia_da_semana@tabela_mes:
  1156                           	opt stack 0
  1157                           
  1158                           ; 12 bytes @ 0x15
  1159  0000CD                     	ds	5
  1160  0000D2                     ??_printf:
  1161                           
  1162                           ; 0 bytes @ 0x1A
  1163  0000D2                     	ds	4
  1164  0000D6                     printf@prec:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x1E
  1168  0000D6                     	ds	1
  1169  0000D7                     printf@cp:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x1F
  1173  0000D7                     	ds	2
  1174  0000D9                     dia_da_semana@seculo:
  1175                           	opt stack 0
  1176  0000D9                     printf@ap:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x21
  1180  0000D9                     	ds	1
  1181  0000DA                     printf@val:
  1182                           	opt stack 0
  1183  0000DA                     configurar_data_inicial@data_inicial:
  1184                           	opt stack 0
  1185                           
  1186                           ; 7 bytes @ 0x22
  1187  0000DA                     	ds	2
  1188  0000DC                     printf@len:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x24
  1192  0000DC                     	ds	2
  1193  0000DE                     printf@flag:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x26
  1197  0000DE                     	ds	1
  1198  0000DF                     printf@width:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x27
  1202  0000DF                     	ds	2
  1203  0000E1                     printf@c:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x29
  1207  0000E1                     	ds	1
  1208  0000E2                     ??_main:
  1209                           
  1210                           ; 0 bytes @ 0x2A
  1211  0000E2                     	ds	6
  1212  0000E8                     main@tentativas:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x30
  1216  0000E8                     	ds	1
  1217  0000E9                     main@comando_at:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x31
  1221  0000E9                     	ds	1
  1222  0000EA                     main@ptr_data:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x32
  1226  0000EA                     	ds	1
  1227  0000EB                     main@conta_a_ser_alterada:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x33
  1231  0000EB                     	ds	1
  1232  0000EC                     main@i:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x34
  1236  0000EC                     	ds	1
  1237  0000ED                     main@novo_valor:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x35
  1241  0000ED                     	ds	1
  1242  0000EE                     main@contas_cadastradas:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x36
  1246  0000EE                     	ds	2
  1247  0000F0                     main@qtd_total_contas:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x38
  1251  0000F0                     	ds	1
  1252  0000F1                     main@cont:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x39
  1256  0000F1                     	ds	1
  1257  0000F2                     main@ultimo_caractere_recebido:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x3A
  1261  0000F2                     	ds	1
  1262  0000F3                     main@i_795:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x3B
  1266  0000F3                     	ds	1
  1267  0000F4                     main@etapa:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x3C
  1271  0000F4                     	ds	1
  1272  0000F5                     main@funcao:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x3D
  1276  0000F5                     	ds	1
  1277  0000F6                     main@conta:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x3E
  1281  0000F6                     	ds	1
  1282  0000F7                     main@ptr_caractere_recebido_serial:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x3F
  1286  0000F7                     	ds	2
  1287  0000F9                     main@ordem:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x41
  1291  0000F9                     	ds	1
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           prodh	equ	0xFF4
  1297                           prodl	equ	0xFF3
  1298                           intcon	equ	0xFF2
  1299                           intcon2	equ	0xFF1
  1300                           indf0	equ	0xFEF
  1301                           postinc0	equ	0xFEE
  1302                           plusw0	equ	0xFEB
  1303                           fsr0h	equ	0xFEA
  1304                           fsr0l	equ	0xFE9
  1305                           wreg	equ	0xFE8
  1306                           indf1	equ	0xFE7
  1307                           postinc1	equ	0xFE6
  1308                           postdec1	equ	0xFE5
  1309                           plusw1	equ	0xFE3
  1310                           fsr1h	equ	0xFE2
  1311                           fsr1l	equ	0xFE1
  1312                           indf2	equ	0xFDF
  1313                           postinc2	equ	0xFDE
  1314                           postdec2	equ	0xFDD
  1315                           plusw2	equ	0xFDB
  1316                           fsr2h	equ	0xFDA
  1317                           fsr2l	equ	0xFD9
  1318                           status	equ	0xFD8
  1319                           
  1320                           	psect	cstackCOMRAM
  1321  000001                     __pcstackCOMRAM:
  1322                           	opt stack 0
  1323  000001                     ??i2_isdigit:
  1324  000001                     ?i2___wmul:
  1325                           	opt stack 0
  1326  000001                     ?i2___lwdiv:
  1327                           	opt stack 0
  1328  000001                     teclado_matricial@linha:
  1329                           	opt stack 0
  1330  000001                     i2resetar_timer1@valor_l:
  1331                           	opt stack 0
  1332  000001                     i2lcd_write@c:
  1333                           	opt stack 0
  1334  000001                     i2___wmul@multiplier:
  1335                           	opt stack 0
  1336  000001                     i2___lwdiv@dividend:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x0
  1340  000001                     	ds	1
  1341  000002                     ??i2_lcd_clear:
  1342  000002                     teclado_matricial@coluna:
  1343                           	opt stack 0
  1344  000002                     i2resetar_timer1@valor_h:
  1345                           	opt stack 0
  1346  000002                     i2lcd_gotoxy@coluna:
  1347                           	opt stack 0
  1348  000002                     i2_isdigit$1543:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x1
  1352  000002                     	ds	1
  1353  000003                     ??i2_lcd_gotoxy:
  1354  000003                     teclado_matricial@temp:
  1355                           	opt stack 0
  1356  000003                     i2isdigit@c:
  1357                           	opt stack 0
  1358  000003                     i2___wmul@multiplicand:
  1359                           	opt stack 0
  1360  000003                     i2___lwdiv@divisor:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x2
  1364  000003                     	ds	1
  1365  000004                     teclado_matricial@caractere:
  1366                           	opt stack 0
  1367  000004                     i2lcd_gotoxy@linha:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x3
  1371  000004                     	ds	1
  1372  000005                     i2lcd_putc@c:
  1373                           	opt stack 0
  1374  000005                     i2___wmul@product:
  1375                           	opt stack 0
  1376  000005                     i2___lwdiv@quotient:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x4
  1380  000005                     	ds	1
  1381  000006                     i2putch@c:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x5
  1385  000006                     	ds	1
  1386  000007                     i2___lwdiv@counter:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x6
  1390  000007                     	ds	1
  1391  000008                     ?i2___lwmod:
  1392                           	opt stack 0
  1393  000008                     i2___lwmod@dividend:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x7
  1397  000008                     	ds	2
  1398  00000A                     i2___lwmod@divisor:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x9
  1402  00000A                     	ds	2
  1403  00000C                     i2___lwmod@counter:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0xB
  1407  00000C                     	ds	1
  1408  00000D                     ?i2_printf:
  1409                           	opt stack 0
  1410  00000D                     i2printf@f:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0xC
  1414  00000D                     	ds	2
  1415  00000F                     ??i2_printf:
  1416                           
  1417                           ; 0 bytes @ 0xE
  1418  00000F                     	ds	4
  1419  000013                     i2printf@prec:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x12
  1423  000013                     	ds	1
  1424  000014                     i2printf@cp:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x13
  1428  000014                     	ds	2
  1429  000016                     i2printf@ap:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x15
  1433  000016                     	ds	1
  1434  000017                     i2printf@val:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x16
  1438  000017                     	ds	2
  1439  000019                     i2printf@len:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x18
  1443  000019                     	ds	2
  1444  00001B                     i2printf@flag:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x1A
  1448  00001B                     	ds	1
  1449  00001C                     i2printf@width:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x1B
  1453  00001C                     	ds	2
  1454  00001E                     i2printf@c:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x1D
  1458  00001E                     	ds	1
  1459  00001F                     ??_aux:
  1460                           
  1461                           ; 0 bytes @ 0x1E
  1462  00001F                     	ds	14
  1463  00002D                     aux@RCREG_temp:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x2C
  1467  00002D                     	ds	1
  1468  00002E                     aux@coluna:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x2D
  1472  00002E                     	ds	1
  1473  00002F                     aux@linha:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x2E
  1477  00002F                     	ds	1
  1478                           tblptru	equ	0xFF8
  1479                           tblptrh	equ	0xFF7
  1480                           tblptrl	equ	0xFF6
  1481                           tablat	equ	0xFF5
  1482                           prodh	equ	0xFF4
  1483                           prodl	equ	0xFF3
  1484                           intcon	equ	0xFF2
  1485                           intcon2	equ	0xFF1
  1486                           indf0	equ	0xFEF
  1487                           postinc0	equ	0xFEE
  1488                           plusw0	equ	0xFEB
  1489                           fsr0h	equ	0xFEA
  1490                           fsr0l	equ	0xFE9
  1491                           wreg	equ	0xFE8
  1492                           indf1	equ	0xFE7
  1493                           postinc1	equ	0xFE6
  1494                           postdec1	equ	0xFE5
  1495                           plusw1	equ	0xFE3
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           postinc2	equ	0xFDE
  1500                           postdec2	equ	0xFDD
  1501                           plusw2	equ	0xFDB
  1502                           fsr2h	equ	0xFDA
  1503                           fsr2l	equ	0xFD9
  1504                           status	equ	0xFD8
  1505                           
  1506 ;;
  1507 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1508 ;;
  1509 ;; *************** function _main *****************
  1510 ;; Defined at:
  1511 ;;		line 313 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  novo_valor      1   53[BANK0 ] unsigned char 
  1516 ;;  i               1   59[BANK0 ] unsigned char 
  1517 ;;  tentativas      1   48[BANK0 ] unsigned char 
  1518 ;;  ptr_caracter    2   63[BANK0 ] PTR unsigned char 
  1519 ;;		 -> buffer_serial(80), 
  1520 ;;  i               1   52[BANK0 ] unsigned char 
  1521 ;;  contas_cadas    2   54[BANK0 ] int 
  1522 ;;  ordem           1   65[BANK0 ] unsigned char 
  1523 ;;  conta           1   62[BANK0 ] unsigned char 
  1524 ;;  funcao          1   61[BANK0 ] unsigned char 
  1525 ;;  etapa           1   60[BANK0 ] unsigned char 
  1526 ;;  ultimo_carac    1   58[BANK0 ] unsigned char 
  1527 ;;  cont            1   57[BANK0 ] unsigned char 
  1528 ;;  qtd_total_co    1   56[BANK0 ] unsigned char 
  1529 ;;  conta_a_ser_    1   51[BANK0 ] unsigned char 
  1530 ;;  ptr_data        1   50[BANK0 ] PTR unsigned char 
  1531 ;;		 -> data_recebida.ano(1), data_recebida(7), 
  1532 ;;  comando_at      1   49[BANK0 ] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  2  256[None  ] int 
  1535 ;; Registers used:
  1536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1542 ;;      Params:         0       0       0       0       0       0       0       0       0
  1543 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1544 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1545 ;;      Totals:         0      24       0       0       0       0       0       0       0
  1546 ;;Total ram usage:       24 bytes
  1547 ;; Hardware stack levels required when called:   11
  1548 ;; This function calls:
  1549 ;;		_Busy_eep
  1550 ;;		_Read_b_eep
  1551 ;;		_Write_b_eep
  1552 ;;		___awmod
  1553 ;;		_ascii_para_numero
  1554 ;;		_carregar_senha
  1555 ;;		_config_serial
  1556 ;;		_configurar_data_inicial
  1557 ;;		_delay_ms
  1558 ;;		_dia_da_semana
  1559 ;;		_eeprom_config_inicial
  1560 ;;		_enviar_caractere_serial
  1561 ;;		_enviar_comando_at
  1562 ;;		_enviar_string_serial
  1563 ;;		_lcd_gotoxy
  1564 ;;		_lcd_init
  1565 ;;		_limpar_linha
  1566 ;;		_numero_para_ascii
  1567 ;;		_printf
  1568 ;;		_resetar_timer1
  1569 ;;		_verificar_num_contas
  1570 ;;		_zerar_string
  1571 ;; This function is called by:
  1572 ;;		Startup code after reset
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text0
  1577  0073B4                     __ptext0:
  1578                           	opt stack 0
  1579  0073B4                     _main:
  1580                           	opt stack 20
  1581                           
  1582                           ;main.c: 318: unsigned char etapa=0;
  1583                           
  1584                           ;incstack = 0
  1585  0073B4  0100               	movlb	0	; () banked
  1586  0073B6  6BF4               	clrf	main@etapa& (0+255),b
  1587                           
  1588                           ;main.c: 319: unsigned char funcao=0;
  1589  0073B8  6BF5               	clrf	main@funcao& (0+255),b
  1590                           
  1591                           ;main.c: 320: unsigned char conta=0;
  1592  0073BA  6BF6               	clrf	main@conta& (0+255),b
  1593                           
  1594                           ;main.c: 321: unsigned char conta_a_ser_alterada=0;
  1595  0073BC  6BEB               	clrf	main@conta_a_ser_alterada& (0+255),b
  1596                           
  1597                           ;main.c: 322: unsigned char comando_at=0;
  1598  0073BE  6BE9               	clrf	main@comando_at& (0+255),b
  1599                           
  1600                           ;main.c: 323: unsigned char cont=0;
  1601  0073C0  6BF1               	clrf	main@cont& (0+255),b
  1602                           
  1603                           ;main.c: 324: unsigned char qtd_total_contas=0;
  1604  0073C2  6BF0               	clrf	main@qtd_total_contas& (0+255),b
  1605                           
  1606                           ;main.c: 325: unsigned char ultimo_caractere_recebido=0;
  1607  0073C4  6BF2               	clrf	main@ultimo_caractere_recebido& (0+255),b
  1608                           
  1609                           ;main.c: 326: int contas_cadastradas=0;
  1610  0073C6  6BEE               	clrf	main@contas_cadastradas& (0+255),b
  1611  0073C8  6BEF               	clrf	(main@contas_cadastradas+1)& (0+255),b
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 327: char *ptr_data;
  1615                           ;main.c: 329: OSCCON=0XF0;
  1616  0073CA  0EF0               	movlw	240
  1617  0073CC  6ED3               	movwf	4051,c	;volatile
  1618                           
  1619                           ;main.c: 332: INTCON = 0b11100000;
  1620  0073CE  0EE0               	movlw	224
  1621  0073D0  6EF2               	movwf	intcon,c	;volatile
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;main.c: 333: INTCON2 =0b00000000;
  1625  0073D2  6AF1               	clrf	intcon2,c	;volatile
  1626                           
  1627                           ;main.c: 334: PIE1=0b00100001;
  1628  0073D4  0E21               	movlw	33
  1629  0073D6  6E9D               	movwf	3997,c	;volatile
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;main.c: 335: RCONbits.IPEN = 0;
  1633  0073D8  9ED0               	bcf	4048,7,c	;volatile
  1634                           
  1635                           ;main.c: 338: T0CON = 0b10000111;
  1636  0073DA  0E87               	movlw	135
  1637  0073DC  6ED5               	movwf	4053,c	;volatile
  1638                           
  1639                           ;main.c: 339: TMR0H=0xC2;
  1640  0073DE  0EC2               	movlw	194
  1641  0073E0  6ED7               	movwf	4055,c	;volatile
  1642                           
  1643                           ;main.c: 340: TMR0L= 0xF7;
  1644  0073E2  0EF7               	movlw	247
  1645  0073E4  6ED6               	movwf	4054,c	;volatile
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 343: LATD=0;
  1649  0073E6  6A8C               	clrf	3980,c	;volatile
  1650                           
  1651                           ;main.c: 347: TRISB=0xF0;
  1652  0073E8  0EF0               	movlw	240
  1653  0073EA  6E93               	movwf	3987,c	;volatile
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;main.c: 348: TRISA=0x00;
  1657  0073EC  6A92               	clrf	3986,c	;volatile
  1658                           
  1659                           ;main.c: 349: TRISE=0X04;
  1660  0073EE  0E04               	movlw	4
  1661  0073F0  6E96               	movwf	3990,c	;volatile
  1662                           
  1663                           ;main.c: 350: LATB=0x0F;
  1664  0073F2  0E0F               	movlw	15
  1665  0073F4  6E8A               	movwf	3978,c	;volatile
  1666                           
  1667                           ;main.c: 351: TRISC=0xCF;
  1668  0073F6  0ECF               	movlw	207
  1669  0073F8  6E94               	movwf	3988,c	;volatile
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 352: TRISD=0x00;
  1673  0073FA  6A95               	clrf	3989,c	;volatile
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 353: ADCON1=0XFF;
  1677  0073FC  68C1               	setf	4033,c	;volatile
  1678                           
  1679                           ;main.c: 354: CMCON=0X07;
  1680  0073FE  0E07               	movlw	7
  1681  007400  6EB4               	movwf	4020,c	;volatile
  1682                           
  1683                           ;main.c: 357: T1CON = 0b00001110;
  1684  007402  0E0E               	movlw	14
  1685  007404  6ECD               	movwf	4045,c	;volatile
  1686                           
  1687                           ;main.c: 358: TMR1H=0XC0;
  1688  007406  0EC0               	movlw	192
  1689  007408  6ECF               	movwf	4047,c	;volatile
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 359: TMR1L=0;
  1693  00740A  6ACE               	clrf	4046,c	;volatile
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 360: TMR1IE=1;
  1697  00740C  809D               	bsf	3997,0,c	;volatile
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 365: if(Read_b_eep(0) == 0xFF) eeprom_config_inicial();
  1701  00740E  6BB9               	clrf	(Read_b_eep@badd+1)& (0+255),b
  1702  007410  6BB8               	clrf	Read_b_eep@badd& (0+255),b
  1703  007412  ECA7  F02F         	call	_Read_b_eep	;wreg free
  1704  007416  0AFF               	xorlw	255
  1705  007418  B4D8               	btfsc	status,2,c
  1706  00741A  ECA1  F033         	call	_eeprom_config_inicial	;wreg free
  1707                           
  1708                           ;main.c: 369: config_serial(4);
  1709  00741E  0E04               	movlw	4
  1710  007420  ECC6  F031         	call	_config_serial
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 371: verificar_num_contas(&contas_cadastradas,&qtd_total_contas);
  1714  007424  0EF0               	movlw	low main@qtd_total_contas
  1715  007426  6FBA               	movwf	verificar_num_contas@qtd_contas& (0+255),b
  1716  007428  0EEE               	movlw	main@contas_cadastradas& (0+255)
  1717  00742A  EC9E  F031         	call	_verificar_num_contas
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 373: contas_cadastradas=3;
  1721  00742E  6BEF               	clrf	(main@contas_cadastradas+1)& (0+255),b
  1722  007430  0E03               	movlw	3
  1723  007432  6FEE               	movwf	main@contas_cadastradas& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 374: qtd_total_contas=2;
  1727  007434  0E02               	movlw	2
  1728  007436  6FF0               	movwf	main@qtd_total_contas& (0+255),b
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 376: enviar_caractere_serial('\n');
  1732  007438  0E0A               	movlw	10
  1733  00743A  EC99  F02F         	call	_enviar_caractere_serial
  1734                           
  1735                           ;main.c: 378: numero_para_ascii(qtd_total_contas);
  1736  00743E  0100               	movlb	0	; () banked
  1737  007440  51F0               	movf	main@qtd_total_contas& (0+255),w,b
  1738  007442  EC5F  F033         	call	_numero_para_ascii
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 380: for(conta=0;conta<qtd_total_contas;conta++){
  1742  007446  6BF6               	clrf	main@conta& (0+255),b
  1743  007448  D020               	goto	l5811
  1744  00744A                     l5801:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 381: carregar_senha(conta,senha);
  1748  00744A  0E50               	movlw	low _senha
  1749  00744C  6FBA               	movwf	carregar_senha@senha_a_carregar& (0+255),b
  1750  00744E  0E01               	movlw	high _senha
  1751  007450  6FBB               	movwf	(carregar_senha@senha_a_carregar+1)& (0+255),b
  1752  007452  51F6               	movf	main@conta& (0+255),w,b
  1753  007454  EC31  F034         	call	_carregar_senha
  1754                           
  1755                           ;main.c: 383: enviar_string_serial(&senha[conta][0]);
  1756  007458  0100               	movlb	0	; () banked
  1757  00745A  51F6               	movf	main@conta& (0+255),w,b
  1758  00745C  0D12               	mullw	18
  1759  00745E  0E50               	movlw	low _senha
  1760  007460  24F3               	addwf	prodl,w,c
  1761  007462  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1762  007464  0E01               	movlw	high _senha
  1763  007466  20F4               	addwfc	prodh,w,c
  1764  007468  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1765  00746A  ECF1  F031         	call	_enviar_string_serial	;wreg free
  1766                           
  1767                           ;main.c: 384: numero_para_ascii(senha[conta][16+1]);
  1768  00746E  0100               	movlb	0	; () banked
  1769  007470  EC2A  F03F         	call	PL20	;call to abstracted procedure
  1770  007474  EC5F  F033         	call	_numero_para_ascii
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 386: (contas_cadastradas |= (1<<conta));
  1774  007478  C0F6  F0E2         	movff	main@conta,??_main
  1775  00747C  ECF4  F03E         	call	PL2	;call to abstracted procedure
  1776  007480  51E3               	movf	(??_main+1)& (0+255),w,b
  1777  007482  13EE               	iorwf	main@contas_cadastradas& (0+255),f,b
  1778  007484  51E4               	movf	(??_main+2)& (0+255),w,b
  1779  007486  13EF               	iorwf	(main@contas_cadastradas+1)& (0+255),f,b
  1780                           
  1781                           ; BSR set to: 0
  1782  007488  2BF6               	incf	main@conta& (0+255),f,b
  1783  00748A                     l5811:
  1784                           
  1785                           ; BSR set to: 0
  1786  00748A  51F0               	movf	main@qtd_total_contas& (0+255),w,b
  1787  00748C  5DF6               	subwf	main@conta& (0+255),w,b
  1788  00748E  E3DD               	bnc	l5801
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 387: }
  1792                           ;main.c: 390: conta=0;
  1793  007490  6BF6               	clrf	main@conta& (0+255),b
  1794                           
  1795                           ;main.c: 391: RCIE=1;
  1796  007492  8A9D               	bsf	3997,5,c	;volatile
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 393: configurar_data_inicial(data_atual);
  1800  007494  EE20  F030         	lfsr	2,_data_atual
  1801  007498  EE00  F0DA         	lfsr	0,configurar_data_inicial@data_inicial
  1802  00749C  0E06               	movlw	6
  1803  00749E                     u6681:
  1804  00749E  CFDB FFEB          	movff	plusw2,plusw0
  1805  0074A2  06E8               	decf	wreg,f,c
  1806  0074A4  E2FC               	bc	u6681
  1807  0074A6  ECF7  F02F         	call	_configurar_data_inicial	;wreg free
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 395: PORTB_SR=PORTB;
  1811  0074AA  CF81 F039          	movff	3969,_PORTB_SR	;volatile
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 396: RBIE=1;
  1815  0074AE  86F2               	bsf	intcon,3,c	;volatile
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 397: RBIF=0;
  1819  0074B0  90F2               	bcf	intcon,0,c	;volatile
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 398: cont=0;
  1823  0074B2  6BF1               	clrf	main@cont& (0+255),b
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;main.c: 400: lcd_init(3);
  1827  0074B4  0E03               	movlw	3
  1828  0074B6  EC83  F034         	call	_lcd_init
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 401: lcd_gotoxy(1,20);
  1832  0074BA  0E14               	movlw	20
  1833  0074BC  6FB9               	movwf	lcd_gotoxy@coluna& (0+255),b
  1834  0074BE  0E01               	movlw	1
  1835  0074C0  EC52  F031         	call	_lcd_gotoxy
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 402: printf("%c",PORTEbits.RE2);
  1839  0074C4  EC20  F03F         	call	PL18	;call to abstracted procedure
  1840  0074C8  EC73  F038         	call	_printf	;wreg free
  1841  0074CC                     l5829:
  1842                           
  1843                           ;main.c: 406: if((FLAGS_2 & (1<<1))){
  1844  0074CC  A237               	btfss	_FLAGS_2,1,c
  1845  0074CE  D239               	goto	l6113
  1846                           
  1847                           ;main.c: 409: (FLAGS_2 &= ~(1<<1));
  1848  0074D0  9237               	bcf	_FLAGS_2,1,c
  1849                           
  1850                           ;main.c: 410: enviar_string_serial("qtd:");
  1851  0074D2  0ED8               	movlw	low STR_3
  1852  0074D4  0100               	movlb	0	; () banked
  1853  0074D6  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1854  0074D8  0E7F               	movlw	high STR_3
  1855  0074DA  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1856  0074DC  ECF1  F031         	call	_enviar_string_serial	;wreg free
  1857                           
  1858                           ;main.c: 411: numero_para_ascii(qtd_caracteres_recebidos_serial);
  1859  0074E0  503B               	movf	_qtd_caracteres_recebidos_serial,w,c
  1860  0074E2  EC5F  F033         	call	_numero_para_ascii
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;main.c: 413: if((FLAGS_3 & (1<<2))){
  1864  0074E6  A438               	btfss	_FLAGS_3,2,c
  1865  0074E8  D182               	goto	l263
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 415: enviar_caractere_serial('\n');
  1869  0074EA  0E0A               	movlw	10
  1870  0074EC  EC99  F02F         	call	_enviar_caractere_serial
  1871                           
  1872                           ;main.c: 416: enviar_string_serial(buffer_serial);
  1873  0074F0  0E00               	movlw	low _buffer_serial
  1874  0074F2  0100               	movlb	0	; () banked
  1875  0074F4  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1876  0074F6  0E01               	movlw	high _buffer_serial
  1877  0074F8  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1878  0074FA  ECF1  F031         	call	_enviar_string_serial	;wreg free
  1879                           
  1880                           ;main.c: 417: enviar_caractere_serial('\n');
  1881  0074FE  0E0A               	movlw	10
  1882  007500  EC99  F02F         	call	_enviar_caractere_serial
  1883                           
  1884                           ;main.c: 419: char *ptr_caractere_recebido_serial = &buffer_serial[0];
  1885  007504  0E00               	movlw	low _buffer_serial
  1886  007506  0100               	movlb	0	; () banked
  1887  007508  6FF7               	movwf	main@ptr_caractere_recebido_serial& (0+255),b
  1888  00750A  0E01               	movlw	high _buffer_serial
  1889  00750C  6FF8               	movwf	(main@ptr_caractere_recebido_serial+1)& (0+255),b
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 422: char i=0;
  1893  00750E  6BEC               	clrf	main@i& (0+255),b
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;main.c: 423: etapa=0;
  1897  007510  6BF4               	clrf	main@etapa& (0+255),b
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 424: ordem=0;
  1901  007512  6BF9               	clrf	main@ordem& (0+255),b
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 428: for(i=0;i<qtd_caracteres_recebidos_serial;i++){
  1905  007514  6BEC               	clrf	main@i& (0+255),b
  1906  007516  D164               	goto	l6025
  1907  007518                     l5855:
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 430: if(!i) ptr_caractere_recebido_serial = &buffer_serial[0];
  1911  007518  51EC               	movf	main@i& (0+255),w,b
  1912  00751A  E104               	bnz	l5859
  1913                           
  1914                           ; BSR set to: 0
  1915  00751C  0E00               	movlw	low _buffer_serial
  1916  00751E  6FF7               	movwf	main@ptr_caractere_recebido_serial& (0+255),b
  1917  007520  0E01               	movlw	high _buffer_serial
  1918  007522  6FF8               	movwf	(main@ptr_caractere_recebido_serial+1)& (0+255),b
  1919  007524                     l5859:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 432: enviar_string_serial("\ni:");numero_para_ascii(i);
  1923  007524  0EEA               	movlw	low STR_4
  1924  007526  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1925  007528  0E7F               	movlw	high STR_4
  1926  00752A  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1927  00752C  ECF1  F031         	call	_enviar_string_serial	;wreg free
  1928  007530  0100               	movlb	0	; () banked
  1929  007532  51EC               	movf	main@i& (0+255),w,b
  1930  007534  EC5F  F033         	call	_numero_para_ascii
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;main.c: 433: enviar_caractere_serial(*ptr_caractere_recebido_serial);
  1934  007538  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  1935  00753C  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  1936  007540  50DF               	movf	indf2,w,c
  1937  007542  EC99  F02F         	call	_enviar_caractere_serial
  1938                           
  1939                           ;main.c: 435: if(FLAGS_1){
  1940  007546  0100               	movlb	0	; () banked
  1941  007548  5170               	movf	_FLAGS_1& (0+255),w,b
  1942  00754A  E00E               	bz	l5877
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 436: enviar_string_serial("\netapa_e:"); numero_para_ascii(etapa);numero_para_a
      +                          scii(ordem);
  1946  00754C  0E62               	movlw	low STR_5
  1947  00754E  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1948  007550  0E7F               	movlw	high STR_5
  1949  007552  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1950  007554  ECF1  F031         	call	_enviar_string_serial	;wreg free
  1951  007558  0100               	movlb	0	; () banked
  1952  00755A  51F4               	movf	main@etapa& (0+255),w,b
  1953  00755C  EC5F  F033         	call	_numero_para_ascii
  1954                           
  1955                           ; BSR set to: 0
  1956  007560  51F9               	movf	main@ordem& (0+255),w,b
  1957  007562  EC5F  F033         	call	_numero_para_ascii
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 438: break;}
  1961  007566  D140               	goto	l268
  1962  007568                     l5877:
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 440: else if(*ptr_caractere_recebido_serial == '>'){
  1966  007568  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  1967  00756C  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  1968  007570  0E3E               	movlw	62
  1969  007572  18DE               	xorwf	postinc2,w,c
  1970  007574  E10B               	bnz	l5887
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;main.c: 442: if(etapa == 2 && senha[conta][ordem]!= (0)) (FLAGS_1 |= (1<<6));
  1974  007576  0E02               	movlw	2
  1975  007578  19F4               	xorwf	main@etapa& (0+255),w,b
  1976  00757A  E105               	bnz	l271
  1977                           
  1978                           ; BSR set to: 0
  1979  00757C  EC00  F03F         	call	PL10	;call to abstracted procedure
  1980  007580  50DF               	movf	indf2,w,c
  1981  007582  A4D8               	btfss	status,2,c
  1982                           
  1983                           ; BSR set to: 0
  1984  007584  8D70               	bsf	_FLAGS_1& (0+255),6,b
  1985  007586                     l271:
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 443: etapa++;
  1989  007586  2BF4               	incf	main@etapa& (0+255),f,b
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;main.c: 444: ordem=0;}
  1993  007588  6BF9               	clrf	main@ordem& (0+255),b
  1994  00758A  D127               	goto	l6023
  1995  00758C                     l5887:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 446: else if(etapa == 0){
  1999  00758C  51F4               	movf	main@etapa& (0+255),w,b
  2000  00758E  E10A               	bnz	l5893
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 447: if( (*ptr_caractere_recebido_serial) != 'I') (FLAGS_1 |= (1<<7));}
  2004  007590  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2005  007594  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2006  007598  0E49               	movlw	73
  2007  00759A  18DE               	xorwf	postinc2,w,c
  2008  00759C  E101 D11D          	bz	l6023
  2009  0075A0                     l5891:
  2010                           
  2011                           ; BSR set to: 0
  2012  0075A0  8F70               	bsf	_FLAGS_1& (0+255),7,b
  2013  0075A2  D11B               	goto	l6023
  2014  0075A4                     l5893:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;main.c: 449: else if(etapa == 1){
  2018  0075A4  05F4               	decf	main@etapa& (0+255),w,b
  2019  0075A6  E13C               	bnz	l5915
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;main.c: 451: funcao = *ptr_caractere_recebido_serial++;
  2023  0075A8  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2024  0075AC  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2025  0075B0  50DF               	movf	indf2,w,c
  2026  0075B2  6FF5               	movwf	main@funcao& (0+255),b
  2027                           
  2028                           ; BSR set to: 0
  2029  0075B4  4BF7               	infsnz	main@ptr_caractere_recebido_serial& (0+255),f,b
  2030  0075B6  2BF8               	incf	(main@ptr_caractere_recebido_serial+1)& (0+255),f,b
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;main.c: 453: if( (*ptr_caractere_recebido_serial) != '0') {(FLAGS_1 |= (1<<7));}
  2034  0075B8  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2035  0075BC  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2036  0075C0  0E30               	movlw	48
  2037  0075C2  18DE               	xorwf	postinc2,w,c
  2038  0075C4  A4D8               	btfss	status,2,c
  2039                           
  2040                           ; BSR set to: 0
  2041  0075C6  8F70               	bsf	_FLAGS_1& (0+255),7,b
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;main.c: 455: conta = ascii_para_numero('0', *(++ptr_caractere_recebido_serial),*(++ptr_
      +                          caractere_recebido_serial));
  2045  0075C8  4BF7               	infsnz	main@ptr_caractere_recebido_serial& (0+255),f,b
  2046  0075CA  2BF8               	incf	(main@ptr_caractere_recebido_serial+1)& (0+255),f,b
  2047  0075CC  EC11  F03F         	call	PL12	;call to abstracted procedure
  2048  0075D0  0E30               	movlw	48
  2049  0075D2  EC7E  F030         	call	_ascii_para_numero
  2050  0075D6  6FF6               	movwf	main@conta& (0+255),b
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;main.c: 458: if(conta> 16 || !((contas_cadastradas & (1<<conta))) ) (FLAGS_1 |= (1<<2))
      +                          ;
  2054  0075D8  0E11               	movlw	17
  2055  0075DA  61F6               	cpfslt	main@conta& (0+255),b
  2056  0075DC  D007               	goto	l5909
  2057                           
  2058                           ; BSR set to: 0
  2059  0075DE  C0F6  F0E2         	movff	main@conta,??_main
  2060  0075E2  ECF4  F03E         	call	PL2	;call to abstracted procedure
  2061  0075E6  EC44  F03F         	call	PL36	;call to abstracted procedure
  2062  0075EA  B4D8               	btfsc	status,2,c
  2063  0075EC                     l5909:
  2064                           
  2065                           ; BSR set to: 0
  2066  0075EC  8570               	bsf	_FLAGS_1& (0+255),2,b
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;main.c: 460: if( !(senha[conta][16+1] & (1<<ascii_para_numero((0),(0),funcao))) ){
  2070  0075EE  EC2A  F03F         	call	PL20	;call to abstracted procedure
  2071  0075F2  6FE2               	movwf	??_main& (0+255),b
  2072  0075F4  0E00               	movlw	0
  2073  0075F6  6FB8               	movwf	ascii_para_numero@caractere2& (0+255),b
  2074  0075F8  C0F5  F0B9         	movff	main@funcao,ascii_para_numero@caractere1
  2075  0075FC  EC7E  F030         	call	_ascii_para_numero
  2076  007600  6FE3               	movwf	(??_main+1)& (0+255),b
  2077  007602  0E01               	movlw	1
  2078  007604  6FE4               	movwf	(??_main+2)& (0+255),b
  2079  007606  2BE3               	incf	(??_main+1)& (0+255),f,b
  2080  007608  D002               	goto	u6844
  2081  00760A                     u6845:
  2082  00760A  90D8               	bcf	status,0,c
  2083  00760C  37E4               	rlcf	(??_main+2)& (0+255),f,b
  2084  00760E                     u6844:
  2085  00760E  2FE3               	decfsz	(??_main+1)& (0+255),f,b
  2086  007610  D7FC               	goto	u6845
  2087  007612  0100               	movlb	0	; () banked
  2088  007614  51E4               	movf	(??_main+2)& (0+255),w,b
  2089  007616  15E2               	andwf	??_main& (0+255),w,b
  2090  007618  E001 D0DF          	bnz	l6023
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;main.c: 461: (FLAGS_1 |= (1<<3));}
  2094  00761C  8770               	bsf	_FLAGS_1& (0+255),3,b
  2095  00761E  D0DD               	goto	l6023
  2096  007620                     l5915:
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;main.c: 465: else if(etapa == 2){
  2100  007620  0E02               	movlw	2
  2101  007622  19F4               	xorwf	main@etapa& (0+255),w,b
  2102  007624  E113               	bnz	l5927
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 467: if(*ptr_caractere_recebido_serial != senha[conta][ordem]) (FLAGS_1 |= (1<<
      +                          6));
  2106  007626  DBEC               	call	PL10	;call to abstracted procedure
  2107  007628  C0F7  FFE1         	movff	main@ptr_caractere_recebido_serial,fsr1l
  2108  00762C  C0F8  FFE2         	movff	main@ptr_caractere_recebido_serial+1,fsr1h
  2109  007630  50DE               	movf	postinc2,w,c
  2110  007632  18E6               	xorwf	postinc1,w,c
  2111  007634  A4D8               	btfss	status,2,c
  2112                           
  2113                           ; BSR set to: 0
  2114  007636  8D70               	bsf	_FLAGS_1& (0+255),6,b
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;main.c: 470: if(++ordem == 16+1) { (FLAGS_1 |= (1<<7)); numero_para_ascii(ordem);}
  2118  007638  2BF9               	incf	main@ordem& (0+255),f,b
  2119  00763A  0E11               	movlw	17
  2120  00763C  19F9               	xorwf	main@ordem& (0+255),w,b
  2121  00763E  E001 D0CC          	bnz	l6023
  2122                           
  2123                           ; BSR set to: 0
  2124  007642  8F70               	bsf	_FLAGS_1& (0+255),7,b
  2125                           
  2126                           ; BSR set to: 0
  2127  007644  51F9               	movf	main@ordem& (0+255),w,b
  2128  007646  EC5F  F033         	call	_numero_para_ascii
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 472: }
  2132  00764A  D0C7               	goto	l6023
  2133  00764C                     l5927:
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;main.c: 475: else if(etapa == 3){
  2137  00764C  0E03               	movlw	3
  2138  00764E  19F4               	xorwf	main@etapa& (0+255),w,b
  2139  007650  E001 D0A1          	bnz	l6011
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;main.c: 477: if(funcao == '0' || funcao == '2'){
  2143  007654  0E30               	movlw	48
  2144  007656  19F5               	xorwf	main@funcao& (0+255),w,b
  2145  007658  E003               	bz	l5933
  2146                           
  2147                           ; BSR set to: 0
  2148  00765A  0E32               	movlw	50
  2149  00765C  19F5               	xorwf	main@funcao& (0+255),w,b
  2150  00765E  E11C               	bnz	l5941
  2151  007660                     l5933:
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;main.c: 479: if(*ptr_caractere_recebido_serial != ('N'+ordem)) (FLAGS_1 |= (1<<7));
  2155  007660  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2156  007664  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2157  007668  50DF               	movf	indf2,w,c
  2158  00766A  6FE2               	movwf	??_main& (0+255),b
  2159  00766C  6BE3               	clrf	(??_main+1)& (0+255),b
  2160  00766E  51F9               	movf	main@ordem& (0+255),w,b
  2161  007670  6FE4               	movwf	(??_main+2)& (0+255),b
  2162  007672  6BE5               	clrf	(??_main+3)& (0+255),b
  2163  007674  0E4E               	movlw	78
  2164  007676  27E4               	addwf	(??_main+2)& (0+255),f,b
  2165  007678  0E00               	movlw	0
  2166  00767A  23E5               	addwfc	(??_main+3)& (0+255),f,b
  2167  00767C  51E2               	movf	??_main& (0+255),w,b
  2168  00767E  19E4               	xorwf	(??_main+2)& (0+255),w,b
  2169  007680  E103               	bnz	u6920
  2170  007682  51E3               	movf	(??_main+1)& (0+255),w,b
  2171  007684  19E5               	xorwf	(??_main+3)& (0+255),w,b
  2172  007686  A4D8               	btfss	status,2,c
  2173  007688                     u6920:
  2174                           
  2175                           ; BSR set to: 0
  2176  007688  8F70               	bsf	_FLAGS_1& (0+255),7,b
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;main.c: 480: enviar_caractere_serial('N'+ordem);
  2180  00768A  51F9               	movf	main@ordem& (0+255),w,b
  2181  00768C  0F4E               	addlw	78
  2182  00768E  EC99  F02F         	call	_enviar_caractere_serial
  2183                           
  2184                           ;main.c: 481: ordem++;
  2185  007692  0100               	movlb	0	; () banked
  2186  007694  2BF9               	incf	main@ordem& (0+255),f,b
  2187                           
  2188                           ;main.c: 482: }
  2189  007696  D0A1               	goto	l6023
  2190  007698                     l5941:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 484: else if(funcao >= '6'){
  2194  007698  0E35               	movlw	53
  2195  00769A  65F5               	cpfsgt	main@funcao& (0+255),b
  2196  00769C  D026               	goto	l5959
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;main.c: 486: if(!ordem) {
  2200  00769E  51F9               	movf	main@ordem& (0+255),w,b
  2201  0076A0  E114               	bnz	l5953
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;main.c: 487: if(funcao == '7') conta_a_ser_alterada=conta;
  2205  0076A2  0E37               	movlw	55
  2206  0076A4  19F5               	xorwf	main@funcao& (0+255),w,b
  2207  0076A6  E103               	bnz	l5949
  2208                           
  2209                           ; BSR set to: 0
  2210  0076A8  C0F6  F0EB         	movff	main@conta,main@conta_a_ser_alterada
  2211  0076AC  D00E               	goto	l5953
  2212  0076AE                     l5949:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;main.c: 489: else{ conta_a_ser_alterada = ascii_para_numero((0),(0),*ptr_caractere_rece
      +                          bido_serial++);}
  2216  0076AE  0E00               	movlw	0
  2217  0076B0  6FB8               	movwf	ascii_para_numero@caractere2& (0+255),b
  2218  0076B2  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2219  0076B6  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2220  0076BA  50DF               	movf	indf2,w,c
  2221  0076BC  6FB9               	movwf	ascii_para_numero@caractere1& (0+255),b
  2222  0076BE  0E00               	movlw	0
  2223  0076C0  EC7E  F030         	call	_ascii_para_numero
  2224  0076C4  6FEB               	movwf	main@conta_a_ser_alterada& (0+255),b
  2225                           
  2226                           ; BSR set to: 0
  2227  0076C6  4BF7               	infsnz	main@ptr_caractere_recebido_serial& (0+255),f,b
  2228  0076C8  2BF8               	incf	(main@ptr_caractere_recebido_serial+1)& (0+255),f,b
  2229  0076CA                     l5953:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;main.c: 491: }
  2233                           ;main.c: 493: nova_senha[ordem] = *ptr_caractere_recebido_serial;
  2234  0076CA  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2235  0076CE  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2236  0076D2  51F9               	movf	main@ordem& (0+255),w,b
  2237  0076D4  0F60               	addlw	low _nova_senha
  2238  0076D6  6EE1               	movwf	fsr1l,c
  2239  0076D8  6AE2               	clrf	fsr1h,c
  2240  0076DA  CFDF FFE7          	movff	indf2,indf1
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 495: if(++ordem == 16) (FLAGS_1 |= (1<<7));
  2244  0076DE  2BF9               	incf	main@ordem& (0+255),f,b
  2245  0076E0  0E10               	movlw	16
  2246  0076E2  19F9               	xorwf	main@ordem& (0+255),w,b
  2247  0076E4  E101 D75C          	bz	l5891
  2248  0076E8  D078               	goto	l6023
  2249  0076EA                     l5959:
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;main.c: 499: else if(funcao == '4'){
  2253  0076EA  0E34               	movlw	52
  2254  0076EC  19F5               	xorwf	main@funcao& (0+255),w,b
  2255  0076EE  E132               	bnz	l5993
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;main.c: 506: if(!ordem) ptr_data = &data_recebida.ano;
  2259  0076F0  51F9               	movf	main@ordem& (0+255),w,b
  2260  0076F2  E102               	bnz	l5965
  2261                           
  2262                           ; BSR set to: 0
  2263  0076F4  0EB1               	movlw	low _data_recebida
  2264  0076F6  6FEA               	movwf	main@ptr_data& (0+255),b
  2265  0076F8                     l5965:
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;main.c: 509: unsigned char novo_valor = ascii_para_numero((0),*ptr_caractere_recebido_s
      +                          erial, *(++ptr_caractere_recebido_serial));
  2269  0076F8  DB94               	call	PL12	;call to abstracted procedure
  2270  0076FA  0E00               	movlw	0
  2271  0076FC  EC7E  F030         	call	_ascii_para_numero
  2272  007700  6FED               	movwf	main@novo_valor& (0+255),b
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 512: if( ((ordem<4) && novo_valor>60) || ((ordem == 1)&& novo_valor>12) || ((or
      +                          dem == 2) && novo_valor > qtd_max_dias) ) (FLAGS_1 |= (1<<0));
  2276  007702  0E04               	movlw	4
  2277  007704  61F9               	cpfslt	main@ordem& (0+255),b
  2278  007706  D003               	goto	l5971
  2279                           
  2280                           ; BSR set to: 0
  2281  007708  0E3D               	movlw	61
  2282  00770A  61ED               	cpfslt	main@novo_valor& (0+255),b
  2283  00770C  D00B               	goto	l5979
  2284  00770E                     l5971:
  2285                           
  2286                           ; BSR set to: 0
  2287  00770E  05F9               	decf	main@ordem& (0+255),w,b
  2288  007710  E103               	bnz	l5975
  2289                           
  2290                           ; BSR set to: 0
  2291  007712  0E0D               	movlw	13
  2292  007714  61ED               	cpfslt	main@novo_valor& (0+255),b
  2293  007716  D006               	goto	l5979
  2294  007718                     l5975:
  2295                           
  2296                           ; BSR set to: 0
  2297  007718  0E02               	movlw	2
  2298  00771A  19F9               	xorwf	main@ordem& (0+255),w,b
  2299  00771C  E105               	bnz	l5981
  2300                           
  2301                           ; BSR set to: 0
  2302  00771E  51ED               	movf	main@novo_valor& (0+255),w,b
  2303  007720  5C49               	subwf	_qtd_max_dias,w,c
  2304  007722  E202               	bc	l5981
  2305  007724                     l5979:
  2306                           
  2307                           ; BSR set to: 0
  2308  007724  8170               	bsf	_FLAGS_1& (0+255),0,b
  2309  007726  D00F               	goto	l5987
  2310  007728                     l5981:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 514: else {*ptr_data = novo_valor; numero_para_ascii(*(ptr_data+ordem)); numero
      +                          _para_ascii(data_recebida.ano);}
  2314  007728  51EA               	movf	main@ptr_data& (0+255),w,b
  2315  00772A  6ED9               	movwf	fsr2l,c
  2316  00772C  6ADA               	clrf	fsr2h,c
  2317  00772E  C0ED  FFDF         	movff	main@novo_valor,indf2
  2318                           
  2319                           ; BSR set to: 0
  2320  007732  51EA               	movf	main@ptr_data& (0+255),w,b
  2321  007734  25F9               	addwf	main@ordem& (0+255),w,b
  2322  007736  6ED9               	movwf	fsr2l,c
  2323  007738  6ADA               	clrf	fsr2h,c
  2324  00773A  50DF               	movf	indf2,w,c
  2325  00773C  EC5F  F033         	call	_numero_para_ascii
  2326                           
  2327                           ; BSR set to: 0
  2328  007740  51B1               	movf	_data_recebida& (0+255),w,b
  2329  007742  EC5F  F033         	call	_numero_para_ascii
  2330  007746                     l5987:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;main.c: 516: if(++ordem>5+1) (FLAGS_1 |= (1<<7));
  2334  007746  2BF9               	incf	main@ordem& (0+255),f,b
  2335  007748  0E06               	movlw	6
  2336  00774A  65F9               	cpfsgt	main@ordem& (0+255),b
  2337  00774C  D001               	goto	l5991
  2338  00774E  D728               	goto	l5891
  2339  007750                     l5991:
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;main.c: 518: else ptr_data++;
  2343  007750  2BEA               	incf	main@ptr_data& (0+255),f,b
  2344  007752  D043               	goto	l6023
  2345  007754                     l5993:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 524: else if(funcao == '5'){
  2349  007754  0E35               	movlw	53
  2350  007756  19F5               	xorwf	main@funcao& (0+255),w,b
  2351  007758  E140               	bnz	l6023
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;main.c: 525: if(!ordem){
  2355  00775A  51F9               	movf	main@ordem& (0+255),w,b
  2356  00775C  E10D               	bnz	l6003
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;main.c: 526: comando_at = *ptr_caractere_recebido_serial++;
  2360  00775E  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2361  007762  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2362  007766  50DF               	movf	indf2,w,c
  2363  007768  6FE9               	movwf	main@comando_at& (0+255),b
  2364                           
  2365                           ; BSR set to: 0
  2366  00776A  4BF7               	infsnz	main@ptr_caractere_recebido_serial& (0+255),f,b
  2367  00776C  2BF8               	incf	(main@ptr_caractere_recebido_serial+1)& (0+255),f,b
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;main.c: 527: zerar_string(parametro_configuracao_modulo_bt);}
  2371  00776E  0EA0               	movlw	low _parametro_configuracao_modulo_bt
  2372  007770  6FB8               	movwf	zerar_string@string_a_zerar& (0+255),b
  2373  007772  6BB9               	clrf	(zerar_string@string_a_zerar+1)& (0+255),b
  2374  007774  ECE6  F02F         	call	_zerar_string	;wreg free
  2375  007778                     l6003:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 529: parametro_configuracao_modulo_bt[ordem++] = *ptr_caractere_recebido_serial
      +                          ;
  2379  007778  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2380  00777C  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2381  007780  51F9               	movf	main@ordem& (0+255),w,b
  2382  007782  0FA0               	addlw	low _parametro_configuracao_modulo_bt
  2383  007784  6EE1               	movwf	fsr1l,c
  2384  007786  6AE2               	clrf	fsr1h,c
  2385  007788  CFDF FFE7          	movff	indf2,indf1
  2386                           
  2387                           ; BSR set to: 0
  2388  00778C  2BF9               	incf	main@ordem& (0+255),f,b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 531: if(ordem> (16+1)) (FLAGS_1 |= (1<<7));
  2392  00778E  0E11               	movlw	17
  2393  007790  65F9               	cpfsgt	main@ordem& (0+255),b
  2394  007792  D023               	goto	l6023
  2395  007794  D705               	goto	l5891
  2396  007796                     l6011:
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;main.c: 536: else if(etapa == 4){
  2400  007796  0E04               	movlw	4
  2401  007798  19F4               	xorwf	main@etapa& (0+255),w,b
  2402  00779A  E11F               	bnz	l6023
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;main.c: 537: if( (*ptr_caractere_recebido_serial) != 'F') {(FLAGS_1 |= (1<<7));enviar_s
      +                          tring_serial("F-esp");numero_para_ascii((*ptr_caractere_recebido_serial) ); numero_para_
      +                          ascii(*(ptr_caractere_recebido_serial-1));}
  2406  00779C  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2407  0077A0  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2408  0077A4  0E46               	movlw	70
  2409  0077A6  18DE               	xorwf	postinc2,w,c
  2410  0077A8  E01F               	bz	l268
  2411                           
  2412                           ; BSR set to: 0
  2413  0077AA  8F70               	bsf	_FLAGS_1& (0+255),7,b
  2414                           
  2415                           ; BSR set to: 0
  2416  0077AC  0EC3               	movlw	low STR_6
  2417  0077AE  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2418  0077B0  0E7F               	movlw	high STR_6
  2419  0077B2  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2420  0077B4  ECF1  F031         	call	_enviar_string_serial	;wreg free
  2421  0077B8  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  2422  0077BC  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  2423  0077C0  50DF               	movf	indf2,w,c
  2424  0077C2  EC5F  F033         	call	_numero_para_ascii
  2425                           
  2426                           ; BSR set to: 0
  2427  0077C6  EE2F F0FF          	lfsr	2,-1
  2428  0077CA  51F7               	movf	main@ptr_caractere_recebido_serial& (0+255),w,b
  2429  0077CC  26D9               	addwf	fsr2l,f,c
  2430  0077CE  51F8               	movf	(main@ptr_caractere_recebido_serial+1)& (0+255),w,b
  2431  0077D0  22DA               	addwfc	fsr2h,f,c
  2432  0077D2  50DF               	movf	indf2,w,c
  2433  0077D4  EC5F  F033         	call	_numero_para_ascii
  2434  0077D8  D007               	goto	l268
  2435  0077DA                     l6023:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 540: }
  2439                           ;main.c: 543: ptr_caractere_recebido_serial++;
  2440  0077DA  4BF7               	infsnz	main@ptr_caractere_recebido_serial& (0+255),f,b
  2441  0077DC  2BF8               	incf	(main@ptr_caractere_recebido_serial+1)& (0+255),f,b
  2442  0077DE  2BEC               	incf	main@i& (0+255),f,b
  2443  0077E0                     l6025:
  2444                           
  2445                           ; BSR set to: 0
  2446  0077E0  503B               	movf	_qtd_caracteres_recebidos_serial,w,c
  2447  0077E2  5DEC               	subwf	main@i& (0+255),w,b
  2448  0077E4  E201 D698          	bnc	l5855
  2449  0077E8                     l268:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 547: }
  2453                           ;main.c: 550: qtd_caracteres_recebidos_serial=0;
  2454  0077E8  6A3B               	clrf	_qtd_caracteres_recebidos_serial,c
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 551: (FLAGS_2 |= (1<<0));
  2458  0077EA  8037               	bsf	_FLAGS_2,0,c
  2459                           
  2460                           ;main.c: 553: }
  2461  0077EC  D0AA               	goto	l6113
  2462  0077EE                     l263:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;main.c: 555: else if((FLAGS_3 & (1<<3))){
  2466  0077EE  A638               	btfss	_FLAGS_3,3,c
  2467  0077F0  D0A8               	goto	l6113
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;main.c: 557: if((FLAGS_2 & (1<<4))){
  2471  0077F2  A837               	btfss	_FLAGS_2,4,c
  2472  0077F4  D020               	goto	l6047
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 558: resetar_timer1(0xC0,0);
  2476  0077F6  6BB8               	clrf	resetar_timer1@valor_l& (0+255),b
  2477  0077F8  0EC0               	movlw	192
  2478  0077FA  ECA0  F02F         	call	_resetar_timer1
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;main.c: 561: if(qtd_vezes_mesma_tecla_pressionada>0 && ultimo_caractere_recebido >='0' 
      +                          && ultimo_caractere_recebido<='9'){
  2482  0077FE  5177               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2483  007800  E01A               	bz	l6047
  2484                           
  2485                           ; BSR set to: 0
  2486  007802  0E2F               	movlw	47
  2487  007804  65F2               	cpfsgt	main@ultimo_caractere_recebido& (0+255),b
  2488  007806  D017               	goto	l6047
  2489                           
  2490                           ; BSR set to: 0
  2491  007808  0E3A               	movlw	58
  2492  00780A  61F2               	cpfslt	main@ultimo_caractere_recebido& (0+255),b
  2493  00780C  D014               	goto	l6047
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;main.c: 564: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]= ('a' -1) + qtd
      +                          _vezes_mesma_tecla_pressionada + (( ultimo_caractere_recebido - '1') * 3) ;
  2497  00780E  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2498  007810  0F78               	addlw	low _buffer_teclado_matricial
  2499  007812  6ED9               	movwf	fsr2l,c
  2500  007814  6ADA               	clrf	fsr2h,c
  2501  007816  51F2               	movf	main@ultimo_caractere_recebido& (0+255),w,b
  2502  007818  0D03               	mullw	3
  2503  00781A  50F3               	movf	prodl,w,c
  2504  00781C  2577               	addwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2505  00781E  0FCD               	addlw	205
  2506  007820  6EDF               	movwf	indf2,c
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;main.c: 565: qtd_vezes_mesma_tecla_pressionada=0;
  2510  007822  6B77               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 567: if(ultimo_caractere_recebido != caractere_recebido) {
  2514  007824  5173               	movf	_caractere_recebido& (0+255),w,b
  2515  007826  19F2               	xorwf	main@ultimo_caractere_recebido& (0+255),w,b
  2516  007828  E004               	bz	l322
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 568: ultimo_caractere_recebido = caractere_recebido;
  2520  00782A  C073  F0F2         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  2521                           
  2522                           ;main.c: 569: TMR1ON=1;
  2523  00782E  80CD               	bsf	4045,0,c	;volatile
  2524                           
  2525                           ;main.c: 572: }
  2526  007830  D008               	goto	l6051
  2527  007832                     l322:
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;main.c: 573: else ultimo_caractere_recebido=0;
  2531  007832  6BF2               	clrf	main@ultimo_caractere_recebido& (0+255),b
  2532  007834  D006               	goto	l6051
  2533  007836                     l6047:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;main.c: 577: else{
  2537                           ;main.c: 578: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] = caractere_rec
      +                          ebido;
  2538  007836  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2539  007838  0F78               	addlw	low _buffer_teclado_matricial
  2540  00783A  6ED9               	movwf	fsr2l,c
  2541  00783C  6ADA               	clrf	fsr2h,c
  2542  00783E  C073  FFDF         	movff	_caractere_recebido,indf2
  2543  007842                     l6051:
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;main.c: 589: }
  2547                           ;main.c: 593: qtd_vezes_mesma_tecla_pressionada=0;
  2548  007842  6B77               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 594: caractere_recebido=0;
  2552  007844  6B73               	clrf	_caractere_recebido& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 598: printf("\n\n%s",buffer_teclado_matricial);
  2556  007846  0EDD               	movlw	low STR_7
  2557  007848  6FC4               	movwf	printf@f& (0+255),b
  2558  00784A  0E7F               	movlw	high STR_7
  2559  00784C  6FC5               	movwf	(printf@f+1)& (0+255),b
  2560  00784E  0E78               	movlw	low _buffer_teclado_matricial
  2561  007850  6FC6               	movwf	(?_printf+2)& (0+255),b
  2562  007852  EC73  F038         	call	_printf	;wreg free
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 600: if(buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] != 'F'){
  2566  007856  DB11               	call	PL26	;call to abstracted procedure
  2567  007858  E01B               	bz	l6073
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;main.c: 602: if(qtd_caracteres_recebidos_teclado){
  2571  00785A  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2572  00785C  E00D               	bz	l6067
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;main.c: 603: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado);
  2576  00785E  C03C  F0B9         	movff	_qtd_caracteres_recebidos_teclado,lcd_gotoxy@coluna
  2577  007862  0E02               	movlw	2
  2578  007864  EC52  F031         	call	_lcd_gotoxy
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;main.c: 604: printf("*%c",buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]);
  2582  007868  0EEE               	movlw	low STR_8
  2583  00786A  6FC4               	movwf	printf@f& (0+255),b
  2584  00786C  0E7F               	movlw	high STR_8
  2585  00786E  DAFC               	call	PL24	;call to abstracted procedure
  2586  007870  EC73  F038         	call	_printf	;wreg free
  2587  007874                     l6065:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 605: TMR1ON=1;}
  2591  007874  80CD               	bsf	4045,0,c	;volatile
  2592  007876  D00C               	goto	l6073
  2593  007878                     l6067:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 607: else{
  2597                           ;main.c: 608: lcd_gotoxy(2,(qtd_caracteres_recebidos_teclado+1));
  2598  007878  283C               	incf	_qtd_caracteres_recebidos_teclado,w,c
  2599  00787A  6FB9               	movwf	lcd_gotoxy@coluna& (0+255),b
  2600  00787C  0E02               	movlw	2
  2601  00787E  EC52  F031         	call	_lcd_gotoxy
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;main.c: 609: printf("%c",buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]);
  2605  007882  0EEF               	movlw	low (STR_8+1)
  2606  007884  6FC4               	movwf	printf@f& (0+255),b
  2607  007886  0E7F               	movlw	high (STR_8+1)
  2608  007888  DAEF               	call	PL24	;call to abstracted procedure
  2609  00788A  EC73  F038         	call	_printf	;wreg free
  2610  00788E  D7F2               	goto	l6065
  2611  007890                     l6073:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;main.c: 611: }
  2615                           ;main.c: 614: if( buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] == 'F' || +
      +                          +qtd_caracteres_recebidos_teclado==(40-1)){
  2616  007890  DAF4               	call	PL26	;call to abstracted procedure
  2617  007892  E004               	bz	l6077
  2618                           
  2619                           ; BSR set to: 0
  2620  007894  2A3C               	incf	_qtd_caracteres_recebidos_teclado,f,c
  2621  007896  0E27               	movlw	39
  2622  007898  183C               	xorwf	_qtd_caracteres_recebidos_teclado,w,c
  2623  00789A  E153               	bnz	l6113
  2624  00789C                     l6077:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 616: resetar_timer1(0xC0,0);
  2628  00789C  6BB8               	clrf	resetar_timer1@valor_l& (0+255),b
  2629  00789E  0EC0               	movlw	192
  2630  0078A0  ECA0  F02F         	call	_resetar_timer1
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;main.c: 617: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] = 0;
  2634  0078A4  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2635  0078A6  0F78               	addlw	low _buffer_teclado_matricial
  2636  0078A8  6ED9               	movwf	fsr2l,c
  2637  0078AA  6ADA               	clrf	fsr2h,c
  2638  0078AC  6ADF               	clrf	indf2,c
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 620: conta = ( ((buffer_teclado_matricial[0]-'0')*10) + (buffer_teclado_matrici
      +                          al[1]-'0') );
  2642  0078AE  5178               	movf	_buffer_teclado_matricial& (0+255),w,b
  2643  0078B0  0D0A               	mullw	10
  2644  0078B2  50F3               	movf	prodl,w,c
  2645  0078B4  2579               	addwf	(_buffer_teclado_matricial+1)& (0+255),w,b
  2646  0078B6  0FF0               	addlw	240
  2647  0078B8  6FF6               	movwf	main@conta& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;main.c: 621: cont=2;
  2651  0078BA  0E02               	movlw	2
  2652  0078BC  6FF1               	movwf	main@cont& (0+255),b
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 623: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  2656  0078BE  0E0F               	movlw	15
  2657  0078C0  65F6               	cpfsgt	main@conta& (0+255),b
  2658  0078C2  D002               	goto	l6089
  2659  0078C4                     l6087:
  2660                           
  2661                           ; BSR set to: 0
  2662  0078C4  8570               	bsf	_FLAGS_1& (0+255),2,b
  2663  0078C6  D008               	goto	l6095
  2664  0078C8                     l6089:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 628: else if(funcao != '6' && (!(contas_cadastradas & (1<<conta))) ){
  2668  0078C8  0E36               	movlw	54
  2669  0078CA  19F5               	xorwf	main@funcao& (0+255),w,b
  2670  0078CC  E005               	bz	l6095
  2671                           
  2672                           ; BSR set to: 0
  2673  0078CE  C0F6  F0E2         	movff	main@conta,??_main
  2674  0078D2  DA8A               	call	PL2	;call to abstracted procedure
  2675  0078D4  DAD9               	call	PL36	;call to abstracted procedure
  2676  0078D6  E0F6               	bz	l6087
  2677  0078D8                     l6095:
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 635: if(qtd_caracteres_recebidos_teclado<(5+2)){(FLAGS_1 |= (1<<7));}
  2681  0078D8  0E07               	movlw	7
  2682  0078DA  603C               	cpfslt	_qtd_caracteres_recebidos_teclado,c
  2683  0078DC  D001               	goto	l6099
  2684                           
  2685                           ; BSR set to: 0
  2686  0078DE  8F70               	bsf	_FLAGS_1& (0+255),7,b
  2687  0078E0                     l6099:
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 636: limpar_linha(2);
  2691  0078E0  0E02               	movlw	2
  2692  0078E2  EC1B  F030         	call	_limpar_linha
  2693                           
  2694                           ;main.c: 638: while(cont<(16+2) && buffer_teclado_matricial[cont-2] != 0 && FLAGS_1<2){
  2695  0078E6  D020               	goto	l6105
  2696  0078E8                     l6101:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 643: if(buffer_teclado_matricial[cont] != senha[conta][cont-2]){
  2700  0078E8  51F6               	movf	main@conta& (0+255),w,b
  2701  0078EA  0D12               	mullw	18
  2702  0078EC  0EFE               	movlw	254
  2703  0078EE  6FE2               	movwf	??_main& (0+255),b
  2704  0078F0  69E3               	setf	(??_main+1)& (0+255),b
  2705  0078F2  0E50               	movlw	low _senha
  2706  0078F4  6FE4               	movwf	(??_main+2)& (0+255),b
  2707  0078F6  0E01               	movlw	high _senha
  2708  0078F8  6FE5               	movwf	(??_main+3)& (0+255),b
  2709  0078FA  51E2               	movf	??_main& (0+255),w,b
  2710  0078FC  27E4               	addwf	(??_main+2)& (0+255),f,b
  2711  0078FE  51E3               	movf	(??_main+1)& (0+255),w,b
  2712  007900  23E5               	addwfc	(??_main+3)& (0+255),f,b
  2713  007902  50F3               	movf	prodl,w,c
  2714  007904  27E4               	addwf	(??_main+2)& (0+255),f,b
  2715  007906  50F4               	movf	prodh,w,c
  2716  007908  23E5               	addwfc	(??_main+3)& (0+255),f,b
  2717  00790A  51F1               	movf	main@cont& (0+255),w,b
  2718  00790C  25E4               	addwf	(??_main+2)& (0+255),w,b
  2719  00790E  6ED9               	movwf	fsr2l,c
  2720  007910  0E00               	movlw	0
  2721  007912  21E5               	addwfc	(??_main+3)& (0+255),w,b
  2722  007914  6EDA               	movwf	fsr2h,c
  2723  007916  51F1               	movf	main@cont& (0+255),w,b
  2724  007918  0F78               	addlw	low _buffer_teclado_matricial
  2725  00791A  6EE1               	movwf	fsr1l,c
  2726  00791C  6AE2               	clrf	fsr1h,c
  2727  00791E  50DE               	movf	postinc2,w,c
  2728  007920  18E6               	xorwf	postinc1,w,c
  2729  007922  A4D8               	btfss	status,2,c
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;main.c: 644: (FLAGS_1 |= (1<<6));
  2733  007924  8D70               	bsf	_FLAGS_1& (0+255),6,b
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 645: }
  2737                           ;main.c: 647: cont++;
  2738  007926  2BF1               	incf	main@cont& (0+255),f,b
  2739  007928                     l6105:
  2740                           
  2741                           ; BSR set to: 0
  2742  007928  0E12               	movlw	18
  2743  00792A  61F1               	cpfslt	main@cont& (0+255),b
  2744  00792C  D009               	goto	l6111
  2745                           
  2746                           ; BSR set to: 0
  2747  00792E  51F1               	movf	main@cont& (0+255),w,b
  2748  007930  0F76               	addlw	low (_buffer_teclado_matricial+254)
  2749  007932  6ED9               	movwf	fsr2l,c
  2750  007934  6ADA               	clrf	fsr2h,c
  2751  007936  50DF               	movf	indf2,w,c
  2752  007938  E003               	bz	l6111
  2753                           
  2754                           ; BSR set to: 0
  2755  00793A  0E01               	movlw	1
  2756  00793C  6570               	cpfsgt	_FLAGS_1& (0+255),b
  2757  00793E  D7D4               	goto	l6101
  2758  007940                     l6111:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 648: }
  2762                           ;main.c: 650: (FLAGS_2 |= (1<<7));
  2763  007940  8E37               	bsf	_FLAGS_2,7,c
  2764  007942                     l6113:
  2765                           
  2766                           ;main.c: 653: }
  2767                           ;main.c: 654: }
  2768                           ;main.c: 656: }
  2769                           ;main.c: 659: if((FLAGS_2 & (1<<0))){
  2770  007942  A037               	btfss	_FLAGS_2,0,c
  2771  007944  D1BC               	goto	l6311
  2772                           
  2773                           ;main.c: 662: (FLAGS_2 &= ~(1<<0));
  2774  007946  9037               	bcf	_FLAGS_2,0,c
  2775                           
  2776                           ;main.c: 663: qtd_caracteres_recebidos_serial, qtd_caracteres_recebidos_teclado,cont=0;
  2777  007948  0100               	movlb	0	; () banked
  2778  00794A  6BF1               	clrf	main@cont& (0+255),b
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;main.c: 665: zerar_string(buffer_serial);
  2782  00794C  0E00               	movlw	low _buffer_serial
  2783  00794E  6FB8               	movwf	zerar_string@string_a_zerar& (0+255),b
  2784  007950  0E01               	movlw	high _buffer_serial
  2785  007952  6FB9               	movwf	(zerar_string@string_a_zerar+1)& (0+255),b
  2786  007954  ECE6  F02F         	call	_zerar_string	;wreg free
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;main.c: 666: zerar_string(buffer_teclado_matricial);
  2790  007958  0E78               	movlw	low _buffer_teclado_matricial
  2791  00795A  6FB8               	movwf	zerar_string@string_a_zerar& (0+255),b
  2792  00795C  6BB9               	clrf	(zerar_string@string_a_zerar+1)& (0+255),b
  2793  00795E  ECE6  F02F         	call	_zerar_string	;wreg free
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 668: if((FLAGS_3 & (1<<3))){
  2797  007962  A638               	btfss	_FLAGS_3,3,c
  2798  007964  D063               	goto	l343
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 670: if(FLAGS_1<1) {
  2802  007966  5170               	movf	_FLAGS_1& (0+255),w,b
  2803  007968  E143               	bnz	l6161
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;main.c: 673: limpar_linha(3);
  2807  00796A  0E03               	movlw	3
  2808  00796C  EC1B  F030         	call	_limpar_linha
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 674: printf("\n\nDestravando...");
  2812  007970  0E24               	movlw	low STR_10
  2813  007972  6FC4               	movwf	printf@f& (0+255),b
  2814  007974  0E7F               	movlw	high STR_10
  2815  007976  6FC5               	movwf	(printf@f+1)& (0+255),b
  2816  007978  EC73  F038         	call	_printf	;wreg free
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 675: delay_ms(800);
  2820  00797C  0E03               	movlw	3
  2821  00797E  6FB9               	movwf	(delay_ms@delay_total+1)& (0+255),b
  2822  007980  0E20               	movlw	32
  2823  007982  6FB8               	movwf	delay_ms@delay_total& (0+255),b
  2824  007984  EC53  F030         	call	_delay_ms	;wreg free
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 676: char tentativas=0;
  2828  007988  6BE8               	clrf	main@tentativas& (0+255),b
  2829                           
  2830                           ;main.c: 678: while(PORTEbits.RE2==0){
  2831  00798A  D015               	goto	l6147
  2832  00798C                     l6135:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 679: if(++tentativas == 6){
  2836  00798C  2BE8               	incf	main@tentativas& (0+255),f,b
  2837  00798E  0E06               	movlw	6
  2838  007990  19E8               	xorwf	main@tentativas& (0+255),w,b
  2839  007992  E102               	bnz	l347
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;main.c: 680: (FLAGS_1 |= (1<<5));
  2843  007994  8B70               	bsf	_FLAGS_1& (0+255),5,b
  2844                           
  2845                           ;main.c: 681: break;}
  2846  007996  D011               	goto	l6149
  2847  007998                     l347:
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;main.c: 683: LATCbits.LC4=1;
  2851  007998  888B               	bsf	3979,4,c	;volatile
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 684: delay_ms(350);
  2855  00799A  0E01               	movlw	1
  2856  00799C  6FB9               	movwf	(delay_ms@delay_total+1)& (0+255),b
  2857  00799E  0E5E               	movlw	94
  2858  0079A0  6FB8               	movwf	delay_ms@delay_total& (0+255),b
  2859  0079A2  EC53  F030         	call	_delay_ms	;wreg free
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 685: if(PORTEbits.RE2==0) delay_ms(100);
  2863  0079A6  B484               	btfsc	3972,2,c	;volatile
  2864  0079A8  D005               	goto	l6145
  2865                           
  2866                           ; BSR set to: 0
  2867  0079AA  6BB9               	clrf	(delay_ms@delay_total+1)& (0+255),b
  2868  0079AC  0E64               	movlw	100
  2869  0079AE  6FB8               	movwf	delay_ms@delay_total& (0+255),b
  2870  0079B0  EC53  F030         	call	_delay_ms	;wreg free
  2871  0079B4                     l6145:
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;main.c: 686: LATCbits.LC4=0;
  2875  0079B4  988B               	bcf	3979,4,c	;volatile
  2876  0079B6                     l6147:
  2877                           
  2878                           ; BSR set to: 0
  2879  0079B6  A484               	btfss	3972,2,c	;volatile
  2880  0079B8  D7E9               	goto	l6135
  2881  0079BA                     l6149:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 687: }
  2885                           ;main.c: 690: lcd_gotoxy(1,20);
  2886  0079BA  0E14               	movlw	20
  2887  0079BC  6FB9               	movwf	lcd_gotoxy@coluna& (0+255),b
  2888  0079BE  0E01               	movlw	1
  2889  0079C0  EC52  F031         	call	_lcd_gotoxy
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 691: printf("%c",PORTEbits.RE2);
  2893  0079C4  DA3D               	call	PL18	;call to abstracted procedure
  2894  0079C6  EC73  F038         	call	_printf	;wreg free
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;main.c: 693: limpar_linha(3);
  2898  0079CA  0E03               	movlw	3
  2899  0079CC  EC1B  F030         	call	_limpar_linha
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 694: if(PORTEbits.RE2==0){
  2903  0079D0  B484               	btfsc	3972,2,c	;volatile
  2904  0079D2  D007               	goto	l6159
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;main.c: 695: printf("\n\nErro de abertura");}
  2908  0079D4  0EFF               	movlw	low STR_12
  2909  0079D6  6FC4               	movwf	printf@f& (0+255),b
  2910  0079D8  0E7E               	movlw	high STR_12
  2911  0079DA  6FC5               	movwf	(printf@f+1)& (0+255),b
  2912  0079DC  EC73  F038         	call	_printf	;wreg free
  2913  0079E0  D16E               	goto	l6311
  2914  0079E2                     l6159:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;main.c: 697: else{
  2918                           ;main.c: 698: printf("\n\nPorta aberta");}
  2919  0079E2  0E46               	movlw	low STR_13
  2920  0079E4  6FC4               	movwf	printf@f& (0+255),b
  2921  0079E6  0E7F               	movlw	high STR_13
  2922  0079E8  6FC5               	movwf	(printf@f+1)& (0+255),b
  2923  0079EA  EC73  F038         	call	_printf	;wreg free
  2924  0079EE  D167               	goto	l6311
  2925  0079F0                     l6161:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;main.c: 702: else{
  2929                           ;main.c: 703: limpar_linha(3);
  2930  0079F0  0E03               	movlw	3
  2931  0079F2  EC1B  F030         	call	_limpar_linha
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 704: if((FLAGS_1 & (1<<7))) printf("\n\nErro de protocolo");
  2935  0079F6  AF70               	btfss	_FLAGS_1& (0+255),7,b
  2936  0079F8  D007               	goto	l353
  2937                           
  2938                           ; BSR set to: 0
  2939  0079FA  0ED8               	movlw	low STR_14
  2940  0079FC  6FC4               	movwf	printf@f& (0+255),b
  2941  0079FE  0E7E               	movlw	high STR_14
  2942  007A00  6FC5               	movwf	(printf@f+1)& (0+255),b
  2943  007A02  EC73  F038         	call	_printf	;wreg free
  2944  007A06  D15B               	goto	l6311
  2945  007A08                     l353:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 706: else if((FLAGS_1 & (1<<2))) printf("\n\nConta nao existente");
  2949  007A08  A570               	btfss	_FLAGS_1& (0+255),2,b
  2950  007A0A  D007               	goto	l355
  2951                           
  2952                           ; BSR set to: 0
  2953  007A0C  0EC2               	movlw	low STR_15
  2954  007A0E  6FC4               	movwf	printf@f& (0+255),b
  2955  007A10  0E7E               	movlw	high STR_15
  2956  007A12  6FC5               	movwf	(printf@f+1)& (0+255),b
  2957  007A14  EC73  F038         	call	_printf	;wreg free
  2958  007A18  D152               	goto	l6311
  2959  007A1A                     l355:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 708: else if((FLAGS_1 & (1<<6))) printf("\n\nSenha incorreta");}
  2963  007A1A  AD70               	btfss	_FLAGS_1& (0+255),6,b
  2964  007A1C  D150               	goto	l6311
  2965                           
  2966                           ; BSR set to: 0
  2967  007A1E  0E12               	movlw	low STR_16
  2968  007A20  6FC4               	movwf	printf@f& (0+255),b
  2969  007A22  0E7F               	movlw	high STR_16
  2970  007A24  6FC5               	movwf	(printf@f+1)& (0+255),b
  2971  007A26  EC73  F038         	call	_printf	;wreg free
  2972  007A2A  D149               	goto	l6311
  2973  007A2C                     l343:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 716: else if((FLAGS_3 & (1<<2))){
  2977  007A2C  A438               	btfss	_FLAGS_3,2,c
  2978  007A2E  D147               	goto	l6311
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 718: enviar_string_serial("\nI");
  2982  007A30  0EF5               	movlw	low STR_17
  2983  007A32  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2984  007A34  0E7F               	movlw	high STR_17
  2985  007A36  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2986  007A38  ECF1  F031         	call	_enviar_string_serial	;wreg free
  2987                           
  2988                           ;main.c: 720: if(!FLAGS_1 && etapa == 4){
  2989  007A3C  0100               	movlb	0	; () banked
  2990  007A3E  5170               	movf	_FLAGS_1& (0+255),w,b
  2991  007A40  E001 D101          	bnz	l360
  2992                           
  2993                           ; BSR set to: 0
  2994  007A44  0E04               	movlw	4
  2995  007A46  19F4               	xorwf	main@etapa& (0+255),w,b
  2996  007A48  E001 D0FD          	bnz	l360
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;main.c: 721: etapa = 0;
  3000  007A4C  6BF4               	clrf	main@etapa& (0+255),b
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;main.c: 722: LATDbits.LD2^=1;
  3004  007A4E  748C               	btg	3980,2,c	;volatile
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;main.c: 723: enviar_string_serial("OK");
  3008  007A50  0EF8               	movlw	low STR_18
  3009  007A52  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3010  007A54  0E7F               	movlw	high STR_18
  3011  007A56  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3012  007A58  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3013                           
  3014                           ;main.c: 726: if(funcao == '2'){
  3015  007A5C  0E32               	movlw	50
  3016  007A5E  0100               	movlb	0	; () banked
  3017  007A60  19F5               	xorwf	main@funcao& (0+255),w,b
  3018  007A62  E158               	bnz	l6213
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;main.c: 727: enviar_string_serial("\nano:"); numero_para_ascii(data_atual.ano);
  3022  007A64  0EB7               	movlw	low STR_19
  3023  007A66  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3024  007A68  0E7F               	movlw	high STR_19
  3025  007A6A  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3026  007A6C  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3027  007A70  5030               	movf	_data_atual,w,c
  3028  007A72  EC5F  F033         	call	_numero_para_ascii
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;main.c: 728: enviar_string_serial("\nmes:"); numero_para_ascii(data_atual.mes);
  3032  007A76  0EBD               	movlw	low STR_20
  3033  007A78  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3034  007A7A  0E7F               	movlw	high STR_20
  3035  007A7C  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3036  007A7E  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3037  007A82  5031               	movf	_data_atual+1,w,c
  3038  007A84  EC5F  F033         	call	_numero_para_ascii
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;main.c: 729: enviar_string_serial("\ndia_semana:"); numero_para_ascii(data_atual.dia_da
      +                          _semana);
  3042  007A88  0E55               	movlw	low STR_21
  3043  007A8A  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3044  007A8C  0E7F               	movlw	high STR_21
  3045  007A8E  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3046  007A90  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3047  007A94  5036               	movf	_data_atual+6,w,c
  3048  007A96  EC5F  F033         	call	_numero_para_ascii
  3049                           
  3050                           ;main.c: 730: enviar_string_serial("\ndia:"); numero_para_ascii(data_atual.dia);
  3051  007A9A  0EB1               	movlw	low STR_22
  3052  007A9C  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3053  007A9E  0E7F               	movlw	high STR_22
  3054  007AA0  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3055  007AA2  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3056  007AA6  5032               	movf	_data_atual+2,w,c
  3057  007AA8  EC5F  F033         	call	_numero_para_ascii
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;main.c: 731: enviar_string_serial("\nhora:"); numero_para_ascii(data_atual.hora);
  3061  007AAC  0E86               	movlw	low STR_23
  3062  007AAE  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3063  007AB0  0E7F               	movlw	high STR_23
  3064  007AB2  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3065  007AB4  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3066  007AB8  5033               	movf	_data_atual+3,w,c
  3067  007ABA  EC5F  F033         	call	_numero_para_ascii
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;main.c: 732: enviar_string_serial("\nminuto:"); numero_para_ascii(data_atual.minuto);
  3071  007ABE  0E76               	movlw	low STR_24
  3072  007AC0  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3073  007AC2  0E7F               	movlw	high STR_24
  3074  007AC4  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3075  007AC6  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3076  007ACA  5034               	movf	_data_atual+4,w,c
  3077  007ACC  EC5F  F033         	call	_numero_para_ascii
  3078                           
  3079                           ;main.c: 733: enviar_string_serial("\nsegundo:"); numero_para_ascii(data_atual.segundo);
  3080  007AD0  0E6C               	movlw	low STR_25
  3081  007AD2  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3082  007AD4  0E7F               	movlw	high STR_25
  3083  007AD6  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3084  007AD8  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3085  007ADC  5035               	movf	_data_atual+5,w,c
  3086  007ADE  EC5F  F033         	call	_numero_para_ascii
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;main.c: 734: enviar_string_serial("\nqtd_total_contas:"); numero_para_ascii(qtd_total_c
      +                          ontas);
  3090  007AE2  0EEC               	movlw	low STR_26
  3091  007AE4  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3092  007AE6  0E7E               	movlw	high STR_26
  3093  007AE8  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3094  007AEA  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3095  007AEE  0100               	movlb	0	; () banked
  3096  007AF0  51F0               	movf	main@qtd_total_contas& (0+255),w,b
  3097  007AF2  EC5F  F033         	call	_numero_para_ascii
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;main.c: 735: enviar_string_serial("\nqtd_max_contas:"); numero_para_ascii(16);
  3101  007AF6  0E35               	movlw	low STR_27
  3102  007AF8  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3103  007AFA  0E7F               	movlw	high STR_27
  3104  007AFC  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3105  007AFE  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3106  007B02  0E10               	movlw	16
  3107  007B04  EC5F  F033         	call	_numero_para_ascii
  3108  007B08  0E01               	movlw	1
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 736: numero_para_ascii(PORTEbits.RE2);}
  3112  007B0A  A484               	btfss	3972,2,c	;volatile
  3113  007B0C  0E00               	movlw	0
  3114  007B0E  EC5F  F033         	call	_numero_para_ascii
  3115  007B12  D0CF               	goto	l379
  3116  007B14                     l6213:
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 738: else if(funcao == '4'){
  3120  007B14  0E34               	movlw	52
  3121  007B16  19F5               	xorwf	main@funcao& (0+255),w,b
  3122  007B18  E11D               	bnz	l6235
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;main.c: 739: TMR0IE=0;
  3126  007B1A  9AF2               	bcf	intcon,5,c	;volatile
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;main.c: 740: TMR0H=0xC2;
  3130  007B1C  0EC2               	movlw	194
  3131  007B1E  6ED7               	movwf	4055,c	;volatile
  3132                           
  3133                           ;main.c: 741: TMR0L= 0xF7;
  3134  007B20  0EF7               	movlw	247
  3135  007B22  6ED6               	movwf	4054,c	;volatile
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 742: data_atual.ano = data_recebida.ano;
  3139  007B24  C0B1  F030         	movff	_data_recebida,_data_atual
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 743: data_atual.mes = data_recebida.mes;
  3143  007B28  C0B2  F031         	movff	_data_recebida+1,_data_atual+1
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 744: data_atual.dia = data_recebida.dia;
  3147  007B2C  C0B3  F032         	movff	_data_recebida+2,_data_atual+2
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 745: data_atual.hora = data_recebida.hora;
  3151  007B30  C0B4  F033         	movff	_data_recebida+3,_data_atual+3
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 746: data_atual.minuto = data_recebida.minuto;
  3155  007B34  C0B5  F034         	movff	_data_recebida+4,_data_atual+4
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 747: data_atual.segundo = data_recebida.minuto;
  3159  007B38  C0B5  F035         	movff	_data_recebida+4,_data_atual+5
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;main.c: 749: data_atual.dia_da_semana = dia_da_semana(data_atual.ano,data_atual.mes,dat
      +                          a_atual.dia);
  3163  007B3C  C030  F0C4         	movff	_data_atual,dia_da_semana@ano
  3164  007B40  6BC5               	clrf	(dia_da_semana@ano+1)& (0+255),b
  3165  007B42  C031  F0C6         	movff	_data_atual+1,dia_da_semana@mes
  3166  007B46  C032  F0C7         	movff	_data_atual+2,dia_da_semana@dia
  3167  007B4A  ECD7  F034         	call	_dia_da_semana	;wreg free
  3168  007B4E  6E36               	movwf	_data_atual+6,c
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 750: TMR0IE=1;
  3172  007B50  8AF2               	bsf	intcon,5,c	;volatile
  3173                           
  3174                           ;main.c: 753: }
  3175  007B52  D0AF               	goto	l379
  3176  007B54                     l6235:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;main.c: 755: else if(funcao == '5'){
  3180  007B54  0E35               	movlw	53
  3181  007B56  19F5               	xorwf	main@funcao& (0+255),w,b
  3182  007B58  E11B               	bnz	l6243
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 756: (FLAGS_3 |= (1<<(FLAGS_3 & (1<<4))));
  3186  007B5A  C038  F0E2         	movff	_FLAGS_3,??_main
  3187  007B5E  0E10               	movlw	16
  3188  007B60  17E2               	andwf	??_main& (0+255),f,b
  3189  007B62  0E01               	movlw	1
  3190  007B64  6FE3               	movwf	(??_main+1)& (0+255),b
  3191  007B66  2BE2               	incf	??_main& (0+255),f,b
  3192  007B68  D002               	goto	u7494
  3193  007B6A                     u7495:
  3194  007B6A  90D8               	bcf	status,0,c
  3195  007B6C  37E3               	rlcf	(??_main+1)& (0+255),f,b
  3196  007B6E                     u7494:
  3197  007B6E  2FE2               	decfsz	??_main& (0+255),f,b
  3198  007B70  D7FC               	goto	u7495
  3199  007B72  0100               	movlb	0	; () banked
  3200  007B74  51E3               	movf	(??_main+1)& (0+255),w,b
  3201  007B76  1238               	iorwf	_FLAGS_3,f,c
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 757: enviar_string_serial(parametro_configuracao_modulo_bt);
  3205  007B78  0EA0               	movlw	low _parametro_configuracao_modulo_bt
  3206  007B7A  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3207  007B7C  6BB9               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3208  007B7E  ECF1  F031         	call	_enviar_string_serial	;wreg free
  3209                           
  3210                           ;main.c: 758: enviar_comando_at(comando_at,parametro_configuracao_modulo_bt);}
  3211  007B82  0EA0               	movlw	low _parametro_configuracao_modulo_bt
  3212  007B84  0100               	movlb	0	; () banked
  3213  007B86  6FBA               	movwf	enviar_comando_at@parametro& (0+255),b
  3214  007B88  51E9               	movf	main@comando_at& (0+255),w,b
  3215  007B8A  EC47  F035         	call	_enviar_comando_at
  3216  007B8E  D091               	goto	l379
  3217  007B90                     l6243:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;main.c: 761: else if(funcao == '7' || funcao == '6'){
  3221  007B90  0E37               	movlw	55
  3222  007B92  19F5               	xorwf	main@funcao& (0+255),w,b
  3223  007B94  E003               	bz	l6247
  3224                           
  3225                           ; BSR set to: 0
  3226  007B96  0E36               	movlw	54
  3227  007B98  19F5               	xorwf	main@funcao& (0+255),w,b
  3228  007B9A  E149               	bnz	l6263
  3229  007B9C                     l6247:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 763: (contas_cadastradas |= (1<<conta_a_ser_alterada));
  3233  007B9C  C0EB  F0E2         	movff	main@conta_a_ser_alterada,??_main
  3234  007BA0  D923               	call	PL2	;call to abstracted procedure
  3235  007BA2  51E3               	movf	(??_main+1)& (0+255),w,b
  3236  007BA4  13EE               	iorwf	main@contas_cadastradas& (0+255),f,b
  3237  007BA6  51E4               	movf	(??_main+2)& (0+255),w,b
  3238  007BA8  13EF               	iorwf	(main@contas_cadastradas+1)& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 765: char i=0;
  3242  007BAA  6BF3               	clrf	main@i_795& (0+255),b
  3243  007BAC                     l6251:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 767: senha[conta_a_ser_alterada][i] = nova_senha[i];
  3247  007BAC  51F3               	movf	main@i_795& (0+255),w,b
  3248  007BAE  0F60               	addlw	low _nova_senha
  3249  007BB0  6ED9               	movwf	fsr2l,c
  3250  007BB2  6ADA               	clrf	fsr2h,c
  3251  007BB4  51EB               	movf	main@conta_a_ser_alterada& (0+255),w,b
  3252  007BB6  0D12               	mullw	18
  3253  007BB8  0E50               	movlw	low _senha
  3254  007BBA  6FE2               	movwf	??_main& (0+255),b
  3255  007BBC  0E01               	movlw	high _senha
  3256  007BBE  6FE3               	movwf	(??_main+1)& (0+255),b
  3257  007BC0  50F3               	movf	prodl,w,c
  3258  007BC2  27E2               	addwf	??_main& (0+255),f,b
  3259  007BC4  50F4               	movf	prodh,w,c
  3260  007BC6  23E3               	addwfc	(??_main+1)& (0+255),f,b
  3261  007BC8  51F3               	movf	main@i_795& (0+255),w,b
  3262  007BCA  25E2               	addwf	??_main& (0+255),w,b
  3263  007BCC  6EE1               	movwf	fsr1l,c
  3264  007BCE  0E00               	movlw	0
  3265  007BD0  21E3               	addwfc	(??_main+1)& (0+255),w,b
  3266  007BD2  6EE2               	movwf	fsr1h,c
  3267  007BD4  CFDF FFE7          	movff	indf2,indf1
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 768: (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16) + i),nova_senha[i]));
  3271  007BD8  EC7F  F02F         	call	_Busy_eep	;wreg free
  3272  007BDC  0100               	movlb	0	; () banked
  3273  007BDE  51EB               	movf	main@conta_a_ser_alterada& (0+255),w,b
  3274  007BE0  6FE2               	movwf	??_main& (0+255),b
  3275  007BE2  6BE3               	clrf	(??_main+1)& (0+255),b
  3276  007BE4  3BE2               	swapf	??_main& (0+255),f,b
  3277  007BE6  3BE3               	swapf	(??_main+1)& (0+255),f,b
  3278  007BE8  0EF0               	movlw	240
  3279  007BEA  17E3               	andwf	(??_main+1)& (0+255),f,b
  3280  007BEC  51E2               	movf	??_main& (0+255),w,b
  3281  007BEE  0B0F               	andlw	15
  3282  007BF0  13E3               	iorwf	(??_main+1)& (0+255),f,b
  3283  007BF2  0EF0               	movlw	240
  3284  007BF4  17E2               	andwf	??_main& (0+255),f,b
  3285  007BF6  51F3               	movf	main@i_795& (0+255),w,b
  3286  007BF8  25E2               	addwf	??_main& (0+255),w,b
  3287  007BFA  6FB8               	movwf	Write_b_eep@badd& (0+255),b
  3288  007BFC  0E00               	movlw	0
  3289  007BFE  21E3               	addwfc	(??_main+1)& (0+255),w,b
  3290  007C00  6FB9               	movwf	(Write_b_eep@badd+1)& (0+255),b
  3291  007C02  51F3               	movf	main@i_795& (0+255),w,b
  3292  007C04  0F60               	addlw	low _nova_senha
  3293  007C06  6ED9               	movwf	fsr2l,c
  3294  007C08  6ADA               	clrf	fsr2h,c
  3295  007C0A  50DF               	movf	indf2,w,c
  3296  007C0C  6FBA               	movwf	Write_b_eep@bdat& (0+255),b
  3297  007C0E  EC96  F030         	call	_Write_b_eep	;wreg free
  3298  007C12                     l371:
  3299  007C12  B2A6               	btfsc	4006,1,c	;volatile
  3300  007C14  D7FE               	goto	l371
  3301                           
  3302                           ;main.c: 770: i++;} while(nova_senha[i-1] && i<16);
  3303  007C16  0100               	movlb	0	; () banked
  3304  007C18  2BF3               	incf	main@i_795& (0+255),f,b
  3305                           
  3306                           ; BSR set to: 0
  3307  007C1A  51F3               	movf	main@i_795& (0+255),w,b
  3308  007C1C  0F5F               	addlw	low (_nova_senha+255)
  3309  007C1E  6ED9               	movwf	fsr2l,c
  3310  007C20  6ADA               	clrf	fsr2h,c
  3311  007C22  50DF               	movf	indf2,w,c
  3312  007C24  E046               	bz	l379
  3313                           
  3314                           ; BSR set to: 0
  3315  007C26  0E0F               	movlw	15
  3316  007C28  65F3               	cpfsgt	main@i_795& (0+255),b
  3317  007C2A  D7C0               	goto	l6251
  3318  007C2C  D042               	goto	l379
  3319  007C2E                     l6263:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;main.c: 773: else if(funcao == '0'){
  3323  007C2E  0E30               	movlw	48
  3324  007C30  19F5               	xorwf	main@funcao& (0+255),w,b
  3325  007C32  E13F               	bnz	l379
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;main.c: 774: LATCbits.LC4=1;
  3329  007C34  888B               	bsf	3979,4,c	;volatile
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;main.c: 775: delay_ms(400);
  3333  007C36  0E01               	movlw	1
  3334  007C38  6FB9               	movwf	(delay_ms@delay_total+1)& (0+255),b
  3335  007C3A  0E90               	movlw	144
  3336  007C3C  6FB8               	movwf	delay_ms@delay_total& (0+255),b
  3337  007C3E  EC53  F030         	call	_delay_ms	;wreg free
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 776: LATCbits.LC4=0;
  3341  007C42  988B               	bcf	3979,4,c	;volatile
  3342  007C44  D036               	goto	l379
  3343  007C46                     l360:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;main.c: 781: else{
  3347                           ;main.c: 782: etapa=0;
  3348  007C46  6BF4               	clrf	main@etapa& (0+255),b
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 783: enviar_caractere_serial('E');
  3352  007C48  0E45               	movlw	69
  3353  007C4A  EC99  F02F         	call	_enviar_caractere_serial
  3354                           
  3355                           ;main.c: 785: if((FLAGS_1 & (1<<0))){
  3356  007C4E  0100               	movlb	0	; () banked
  3357  007C50  A170               	btfss	_FLAGS_1& (0+255),0,b
  3358  007C52  D003               	goto	l6277
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 786: enviar_caractere_serial('V');}
  3362  007C54  0E56               	movlw	86
  3363  007C56  EC99  F02F         	call	_enviar_caractere_serial
  3364  007C5A                     l6277:
  3365                           
  3366                           ;main.c: 788: if((FLAGS_1 & (1<<1))){
  3367  007C5A  0100               	movlb	0	; () banked
  3368  007C5C  A370               	btfss	_FLAGS_1& (0+255),1,b
  3369  007C5E  D003               	goto	l6281
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 789: enviar_caractere_serial('X');}
  3373  007C60  0E58               	movlw	88
  3374  007C62  EC99  F02F         	call	_enviar_caractere_serial
  3375  007C66                     l6281:
  3376                           
  3377                           ;main.c: 791: if((FLAGS_1 & (1<<5))){
  3378  007C66  0100               	movlb	0	; () banked
  3379  007C68  AB70               	btfss	_FLAGS_1& (0+255),5,b
  3380  007C6A  D003               	goto	l6285
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 792: enviar_caractere_serial('A');}
  3384  007C6C  0E41               	movlw	65
  3385  007C6E  EC99  F02F         	call	_enviar_caractere_serial
  3386  007C72                     l6285:
  3387                           
  3388                           ;main.c: 794: if((FLAGS_1 & (1<<3))){
  3389  007C72  0100               	movlb	0	; () banked
  3390  007C74  A770               	btfss	_FLAGS_1& (0+255),3,b
  3391  007C76  D003               	goto	l6289
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 795: enviar_caractere_serial('N');}
  3395  007C78  0E4E               	movlw	78
  3396  007C7A  EC99  F02F         	call	_enviar_caractere_serial
  3397  007C7E                     l6289:
  3398                           
  3399                           ;main.c: 797: if((FLAGS_1 & (1<<7))){
  3400  007C7E  0100               	movlb	0	; () banked
  3401  007C80  AF70               	btfss	_FLAGS_1& (0+255),7,b
  3402  007C82  D003               	goto	l6293
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 798: enviar_caractere_serial('P');}
  3406  007C84  0E50               	movlw	80
  3407  007C86  EC99  F02F         	call	_enviar_caractere_serial
  3408  007C8A                     l6293:
  3409                           
  3410                           ;main.c: 800: if((FLAGS_1 & (1<<4))){
  3411  007C8A  0100               	movlb	0	; () banked
  3412  007C8C  A970               	btfss	_FLAGS_1& (0+255),4,b
  3413  007C8E  D003               	goto	l6297
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 801: enviar_caractere_serial('C');}
  3417  007C90  0E43               	movlw	67
  3418  007C92  EC99  F02F         	call	_enviar_caractere_serial
  3419  007C96                     l6297:
  3420                           
  3421                           ;main.c: 803: if((FLAGS_1 & (1<<6))){
  3422  007C96  0100               	movlb	0	; () banked
  3423  007C98  AD70               	btfss	_FLAGS_1& (0+255),6,b
  3424  007C9A  D003               	goto	l6301
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 804: enviar_caractere_serial('S');}
  3428  007C9C  0E53               	movlw	83
  3429  007C9E  EC99  F02F         	call	_enviar_caractere_serial
  3430  007CA2                     l6301:
  3431                           
  3432                           ;main.c: 806: if((FLAGS_1 & (1<<2))){
  3433  007CA2  0100               	movlb	0	; () banked
  3434  007CA4  A570               	btfss	_FLAGS_1& (0+255),2,b
  3435  007CA6  D003               	goto	l6305
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;main.c: 807: enviar_caractere_serial('I');}
  3439  007CA8  0E49               	movlw	73
  3440  007CAA  EC99  F02F         	call	_enviar_caractere_serial
  3441  007CAE                     l6305:
  3442                           
  3443                           ;main.c: 809: FLAGS_1=0;}
  3444  007CAE  0100               	movlb	0	; () banked
  3445  007CB0  6B70               	clrf	_FLAGS_1& (0+255),b
  3446  007CB2                     l379:
  3447                           
  3448                           ;main.c: 813: enviar_caractere_serial('F');
  3449  007CB2  0E46               	movlw	70
  3450  007CB4  EC99  F02F         	call	_enviar_caractere_serial
  3451                           
  3452                           ;main.c: 814: PORTB_SR = PORTB;
  3453  007CB8  CF81 F039          	movff	3969,_PORTB_SR	;volatile
  3454                           
  3455                           ;main.c: 815: RBIE=1;
  3456  007CBC  86F2               	bsf	intcon,3,c	;volatile
  3457  007CBE                     l6311:
  3458                           
  3459                           ;main.c: 816: }
  3460                           ;main.c: 818: }
  3461                           ;main.c: 820: if((PORTB&0xF0) == 0xF0 && RBIE==0 && (FLAGS_2 & (1<<3)) && (FLAGS_3 & (1<
      +                          <3))){
  3462  007CBE  5081               	movf	3969,w,c	;volatile
  3463  007CC0  0BF0               	andlw	240
  3464  007CC2  0AF0               	xorlw	240
  3465  007CC4  B4D8               	btfsc	status,2,c
  3466  007CC6  B6F2               	btfsc	intcon,3,c	;volatile
  3467  007CC8  D055               	goto	l388
  3468  007CCA  B637               	btfsc	_FLAGS_2,3,c
  3469  007CCC  A638               	btfss	_FLAGS_3,3,c
  3470  007CCE  D052               	goto	l388
  3471                           
  3472                           ;main.c: 822: delay_ms(100);
  3473  007CD0  0100               	movlb	0	; () banked
  3474  007CD2  6BB9               	clrf	(delay_ms@delay_total+1)& (0+255),b
  3475  007CD4  0E64               	movlw	100
  3476  007CD6  6FB8               	movwf	delay_ms@delay_total& (0+255),b
  3477  007CD8  EC53  F030         	call	_delay_ms	;wreg free
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;main.c: 823: if(caractere_recebido < '0' || caractere_recebido > '9'){
  3481  007CDC  0E2F               	movlw	47
  3482  007CDE  6573               	cpfsgt	_caractere_recebido& (0+255),b
  3483  007CE0  D003               	goto	l6325
  3484                           
  3485                           ; BSR set to: 0
  3486  007CE2  0E39               	movlw	57
  3487  007CE4  6573               	cpfsgt	_caractere_recebido& (0+255),b
  3488  007CE6  D02D               	goto	l389
  3489  007CE8                     l6325:
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;main.c: 826: resetar_timer1(0xC0,0);
  3493  007CE8  6BB8               	clrf	resetar_timer1@valor_l& (0+255),b
  3494  007CEA  0EC0               	movlw	192
  3495  007CEC  ECA0  F02F         	call	_resetar_timer1
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;main.c: 827: ultimo_caractere_recebido = caractere_recebido;
  3499  007CF0  C073  F0F2         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;main.c: 830: if(caractere_recebido == 'F'){
  3503  007CF4  0E46               	movlw	70
  3504  007CF6  1973               	xorwf	_caractere_recebido& (0+255),w,b
  3505  007CF8  E102               	bnz	l6333
  3506  007CFA                     l6331:
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;main.c: 831: (FLAGS_2 |= (1<<1));}
  3510  007CFA  8237               	bsf	_FLAGS_2,1,c
  3511  007CFC  D036               	goto	l412
  3512  007CFE                     l6333:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;main.c: 833: else if(caractere_recebido == 'A'){
  3516  007CFE  0E41               	movlw	65
  3517  007D00  1973               	xorwf	_caractere_recebido& (0+255),w,b
  3518  007D02  E102               	bnz	l6337
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;main.c: 834: (FLAGS_2 ^= (1<<4));}
  3522  007D04  0E10               	movlw	16
  3523  007D06  D004               	goto	L1
  3524  007D08                     l6337:
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;main.c: 836: else if(caractere_recebido == '*'){
  3528  007D08  0E2A               	movlw	42
  3529  007D0A  1973               	xorwf	_caractere_recebido& (0+255),w,b
  3530  007D0C  E103               	bnz	l6341
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;main.c: 837: (FLAGS_2 ^= (1<<5));}
  3534  007D0E  0E20               	movlw	32
  3535  007D10                     L1:
  3536  007D10  1A37               	xorwf	_FLAGS_2,f,c
  3537  007D12  D02B               	goto	l412
  3538  007D14                     l6341:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;main.c: 839: else if(caractere_recebido == 'D'){
  3542  007D14  0E44               	movlw	68
  3543  007D16  1973               	xorwf	_caractere_recebido& (0+255),w,b
  3544  007D18  E128               	bnz	l412
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 841: if(qtd_caracteres_recebidos_teclado) qtd_caracteres_recebidos_teclado--;
  3548  007D1A  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3549  007D1C  A4D8               	btfss	status,2,c
  3550                           
  3551                           ; BSR set to: 0
  3552  007D1E  063C               	decf	_qtd_caracteres_recebidos_teclado,f,c
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;main.c: 842: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]=0;
  3556  007D20  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3557  007D22  0F78               	addlw	low _buffer_teclado_matricial
  3558  007D24  6ED9               	movwf	fsr2l,c
  3559  007D26  6ADA               	clrf	fsr2h,c
  3560  007D28  6ADF               	clrf	indf2,c
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;main.c: 844: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado); printf(" ");
  3564  007D2A  C03C  F0B9         	movff	_qtd_caracteres_recebidos_teclado,lcd_gotoxy@coluna
  3565  007D2E  0E02               	movlw	2
  3566  007D30  EC52  F031         	call	_lcd_gotoxy
  3567                           
  3568                           ; BSR set to: 0
  3569  007D34  0EFB               	movlw	low STR_28
  3570  007D36  6FC4               	movwf	printf@f& (0+255),b
  3571  007D38  0E7F               	movlw	high STR_28
  3572  007D3A  6FC5               	movwf	(printf@f+1)& (0+255),b
  3573  007D3C  EC73  F038         	call	_printf	;wreg free
  3574  007D40  D014               	goto	l412
  3575  007D42                     l389:
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;main.c: 851: else{
  3579                           ;main.c: 852: if((FLAGS_2 & (1<<4))){
  3580  007D42  A837               	btfss	_FLAGS_2,4,c
  3581  007D44  D7DA               	goto	l6331
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;main.c: 853: if(ultimo_caractere_recebido == caractere_recebido){
  3585  007D46  5173               	movf	_caractere_recebido& (0+255),w,b
  3586  007D48  19F2               	xorwf	main@ultimo_caractere_recebido& (0+255),w,b
  3587  007D4A  E10B               	bnz	l6363
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;main.c: 854: if(++qtd_vezes_mesma_tecla_pressionada == 3 || ((qtd_vezes_mesma_tecla_pre
      +                          ssionada==2) && caractere_recebido == '9'))
  3591  007D4C  2B77               	incf	_qtd_vezes_mesma_tecla_pressionada& (0+255),f,b
  3592  007D4E  0E03               	movlw	3
  3593  007D50  1977               	xorwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3594  007D52  E0D3               	bz	l6331
  3595                           
  3596                           ; BSR set to: 0
  3597  007D54  0E02               	movlw	2
  3598  007D56  1977               	xorwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3599  007D58  E108               	bnz	l412
  3600                           
  3601                           ; BSR set to: 0
  3602  007D5A  0E39               	movlw	57
  3603  007D5C  1973               	xorwf	_caractere_recebido& (0+255),w,b
  3604  007D5E  E0CD               	bz	l6331
  3605  007D60  D004               	goto	l412
  3606  007D62                     l6363:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 859: else {
  3610                           ;main.c: 860: if(qtd_vezes_mesma_tecla_pressionada) (FLAGS_2 |= (1<<1));
  3611  007D62  5177               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3612  007D64  E1CA               	bnz	l6331
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;main.c: 862: else ultimo_caractere_recebido = caractere_recebido;
  3616  007D66  C073  F0F2         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  3617  007D6A                     l412:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;main.c: 873: if((FLAGS_2 & (1<<4))) {TMR1ON=1;}
  3621  007D6A  B837               	btfsc	_FLAGS_2,4,c
  3622                           
  3623                           ; BSR set to: 0
  3624  007D6C  80CD               	bsf	4045,0,c	;volatile
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;main.c: 875: PORTB_SR=PORTB;
  3628  007D6E  CF81 F039          	movff	3969,_PORTB_SR	;volatile
  3629                           
  3630                           ;main.c: 876: RBIE=1;
  3631  007D72  86F2               	bsf	intcon,3,c	;volatile
  3632  007D74                     l388:
  3633                           
  3634                           ;main.c: 877: }
  3635                           ;main.c: 880: if((FLAGS_2 & (1<<7))){
  3636  007D74  AE37               	btfss	_FLAGS_2,7,c
  3637  007D76  D029               	goto	l6379
  3638                           
  3639                           ;main.c: 881: (FLAGS_2 &= ~(1<<7));
  3640  007D78  9E37               	bcf	_FLAGS_2,7,c
  3641                           
  3642                           ;main.c: 882: if((FLAGS_3 & (1<<0))){
  3643  007D7A  A038               	btfss	_FLAGS_3,0,c
  3644  007D7C  D026               	goto	l6379
  3645                           
  3646                           ;main.c: 883: printf("\n\n\n%02d:%02d:%02d-%02d.%02d.%02d",data_atual.hora,data_atual.mi
      +                          nuto,data_atual.segundo, data_atual.dia,data_atual.mes,((data_atual.ano+15)%100) );
  3647  007D7E  0EA1               	movlw	low STR_29
  3648  007D80  0100               	movlb	0	; () banked
  3649  007D82  6FC4               	movwf	printf@f& (0+255),b
  3650  007D84  0E7E               	movlw	high STR_29
  3651  007D86  6FC5               	movwf	(printf@f+1)& (0+255),b
  3652  007D88  C033  F0C6         	movff	_data_atual+3,?_printf+2
  3653  007D8C  6BC7               	clrf	(?_printf+3)& (0+255),b
  3654  007D8E  C034  F0C8         	movff	_data_atual+4,?_printf+4
  3655  007D92  6BC9               	clrf	(?_printf+5)& (0+255),b
  3656  007D94  C035  F0CA         	movff	_data_atual+5,?_printf+6
  3657  007D98  6BCB               	clrf	(?_printf+7)& (0+255),b
  3658  007D9A  C032  F0CC         	movff	_data_atual+2,?_printf+8
  3659  007D9E  6BCD               	clrf	(?_printf+9)& (0+255),b
  3660  007DA0  C031  F0CE         	movff	_data_atual+1,?_printf+10
  3661  007DA4  6BCF               	clrf	(?_printf+11)& (0+255),b
  3662  007DA6  0E0F               	movlw	15
  3663  007DA8  2430               	addwf	_data_atual,w,c
  3664  007DAA  6FB8               	movwf	___awmod@dividend& (0+255),b
  3665  007DAC  6BB9               	clrf	(___awmod@dividend+1)& (0+255),b
  3666  007DAE  0E00               	movlw	0
  3667  007DB0  23B9               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3668  007DB2  6BBB               	clrf	(___awmod@divisor+1)& (0+255),b
  3669  007DB4  0E64               	movlw	100
  3670  007DB6  6FBA               	movwf	___awmod@divisor& (0+255),b
  3671  007DB8  EC4D  F032         	call	___awmod	;wreg free
  3672  007DBC  C0B8  F0D0         	movff	?___awmod,?_printf+12
  3673  007DC0  C0B9  F0D1         	movff	?___awmod+1,?_printf+13
  3674  007DC4  EC73  F038         	call	_printf	;wreg free
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;main.c: 884: (FLAGS_3 &= ~(1<<0));
  3678  007DC8  9038               	bcf	_FLAGS_3,0,c
  3679  007DCA                     l6379:
  3680                           
  3681                           ;main.c: 885: }
  3682                           ;main.c: 888: }
  3683                           ;main.c: 890: if( (!(FLAGS_2 & (1<<7)))&& (!(FLAGS_2 & (1<<1))) && (!(FLAGS_2 & (1<<0)))
      +                           && RBIE && RCIE){
  3684  007DCA  AE37               	btfss	_FLAGS_2,7,c
  3685  007DCC  B237               	btfsc	_FLAGS_2,1,c
  3686  007DCE  EF66  F03A         	goto	l5829
  3687  007DD2  A037               	btfss	_FLAGS_2,0,c
  3688  007DD4  A6F2               	btfss	intcon,3,c	;volatile
  3689  007DD6  EF66  F03A         	goto	l5829
  3690  007DDA  AA9D               	btfss	3997,5,c	;volatile
  3691  007DDC  EF66  F03A         	goto	l5829
  3692  007DE0  0003               	sleep		;# 
  3693                           
  3694                           ;main.c: 892: __nop();}
  3695  007DE2  F000               	nop	
  3696  007DE4  EF66  F03A         	goto	l5829
  3697  007DE8                     __end_of_main:
  3698                           	opt stack 0
  3699  007DE8                     PL2:
  3700                           	opt stack 20
  3701  007DE8  0E01               	movlw	1
  3702  007DEA  6FE3               	movwf	(??_main+1)& (0+255),b
  3703  007DEC  6BE4               	clrf	(??_main+2)& (0+255),b
  3704  007DEE  2BE2               	incf	??_main& (0+255),f,b
  3705  007DF0  D003               	goto	u6664
  3706  007DF2                     u6665:
  3707  007DF2  90D8               	bcf	status,0,c
  3708  007DF4  37E3               	rlcf	(??_main+1)& (0+255),f,b
  3709  007DF6  37E4               	rlcf	(??_main+2)& (0+255),f,b
  3710  007DF8                     u6664:
  3711  007DF8  2FE2               	decfsz	??_main& (0+255),f,b
  3712  007DFA  D7FB               	goto	u6665
  3713  007DFC  0100               	movlb	0	; () banked
  3714  007DFE  0012               	return	
  3715  007E00                     __end_ofPL2:
  3716                           	opt stack 0
  3717  007E00                     PL10:
  3718                           	opt stack 20
  3719  007E00  51F6               	movf	main@conta& (0+255),w,b
  3720  007E02  0D12               	mullw	18
  3721  007E04  0E50               	movlw	low _senha
  3722  007E06  6FE2               	movwf	??_main& (0+255),b
  3723  007E08  0E01               	movlw	high _senha
  3724  007E0A  6FE3               	movwf	(??_main+1)& (0+255),b
  3725  007E0C  50F3               	movf	prodl,w,c
  3726  007E0E  27E2               	addwf	??_main& (0+255),f,b
  3727  007E10  50F4               	movf	prodh,w,c
  3728  007E12  23E3               	addwfc	(??_main+1)& (0+255),f,b
  3729  007E14  51F9               	movf	main@ordem& (0+255),w,b
  3730  007E16  25E2               	addwf	??_main& (0+255),w,b
  3731  007E18  6ED9               	movwf	fsr2l,c
  3732  007E1A  0E00               	movlw	0
  3733  007E1C  21E3               	addwfc	(??_main+1)& (0+255),w,b
  3734  007E1E  6EDA               	movwf	fsr2h,c
  3735  007E20  0012               	return	
  3736  007E22                     __end_ofPL10:
  3737                           	opt stack 0
  3738  007E22                     PL12:
  3739                           	opt stack 20
  3740  007E22  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  3741  007E26  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  3742  007E2A  50DF               	movf	indf2,w,c
  3743  007E2C  6FB8               	movwf	ascii_para_numero@caractere2& (0+255),b
  3744  007E2E  4BF7               	infsnz	main@ptr_caractere_recebido_serial& (0+255),f,b
  3745  007E30  2BF8               	incf	(main@ptr_caractere_recebido_serial+1)& (0+255),f,b
  3746  007E32  C0F7  FFD9         	movff	main@ptr_caractere_recebido_serial,fsr2l
  3747  007E36  C0F8  FFDA         	movff	main@ptr_caractere_recebido_serial+1,fsr2h
  3748  007E3A  50DF               	movf	indf2,w,c
  3749  007E3C  6FB9               	movwf	ascii_para_numero@caractere1& (0+255),b
  3750  007E3E  0012               	return	
  3751  007E40                     __end_ofPL12:
  3752                           	opt stack 0
  3753  007E40                     PL18:
  3754                           	opt stack 20
  3755  007E40  0EEF               	movlw	low (STR_8+1)
  3756  007E42  6FC4               	movwf	printf@f& (0+255),b
  3757  007E44  0E7F               	movlw	high (STR_8+1)
  3758  007E46  6FC5               	movwf	(printf@f+1)& (0+255),b
  3759  007E48  0E01               	movlw	1
  3760  007E4A  A484               	btfss	3972,2,c	;volatile
  3761  007E4C  0E00               	movlw	0
  3762  007E4E  6FC6               	movwf	(?_printf+2)& (0+255),b
  3763  007E50  6BC7               	clrf	(?_printf+3)& (0+255),b
  3764  007E52  0012               	return	
  3765  007E54                     __end_ofPL18:
  3766                           	opt stack 0
  3767  007E54                     PL20:
  3768                           	opt stack 20
  3769  007E54  51F6               	movf	main@conta& (0+255),w,b
  3770  007E56  0D12               	mullw	18
  3771  007E58  0E61               	movlw	low (_senha+17)
  3772  007E5A  24F3               	addwf	prodl,w,c
  3773  007E5C  6ED9               	movwf	fsr2l,c
  3774  007E5E  0E01               	movlw	high (_senha+17)
  3775  007E60  20F4               	addwfc	prodh,w,c
  3776  007E62  6EDA               	movwf	fsr2h,c
  3777  007E64  50DF               	movf	indf2,w,c
  3778  007E66  0012               	return	
  3779  007E68                     __end_ofPL20:
  3780                           	opt stack 0
  3781  007E68                     PL24:
  3782                           	opt stack 20
  3783  007E68  6FC5               	movwf	(printf@f+1)& (0+255),b
  3784  007E6A  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3785  007E6C  0F78               	addlw	low _buffer_teclado_matricial
  3786  007E6E  6ED9               	movwf	fsr2l,c
  3787  007E70  6ADA               	clrf	fsr2h,c
  3788  007E72  50DF               	movf	indf2,w,c
  3789  007E74  6FC6               	movwf	(?_printf+2)& (0+255),b
  3790  007E76  6BC7               	clrf	(?_printf+3)& (0+255),b
  3791  007E78  0012               	return	
  3792  007E7A                     __end_ofPL24:
  3793                           	opt stack 0
  3794  007E7A                     PL26:
  3795                           	opt stack 20
  3796  007E7A  503C               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3797  007E7C  0F78               	addlw	low _buffer_teclado_matricial
  3798  007E7E  6ED9               	movwf	fsr2l,c
  3799  007E80  6ADA               	clrf	fsr2h,c
  3800  007E82  0E46               	movlw	70
  3801  007E84  18DE               	xorwf	postinc2,w,c
  3802  007E86  0012               	return	
  3803  007E88                     __end_ofPL26:
  3804                           	opt stack 0
  3805  007E88                     PL36:
  3806                           	opt stack 20
  3807  007E88  51EE               	movf	main@contas_cadastradas& (0+255),w,b
  3808  007E8A  17E3               	andwf	(??_main+1)& (0+255),f,b
  3809  007E8C  51EF               	movf	(main@contas_cadastradas+1)& (0+255),w,b
  3810  007E8E  17E4               	andwf	(??_main+2)& (0+255),f,b
  3811  007E90  51E3               	movf	(??_main+1)& (0+255),w,b
  3812  007E92  11E4               	iorwf	(??_main+2)& (0+255),w,b
  3813  007E94  0012               	return	
  3814  007E96                     __end_ofPL36:
  3815                           	opt stack 0
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           prodh	equ	0xFF4
  3821                           prodl	equ	0xFF3
  3822                           intcon	equ	0xFF2
  3823                           intcon2	equ	0xFF1
  3824                           indf0	equ	0xFEF
  3825                           postinc0	equ	0xFEE
  3826                           plusw0	equ	0xFEB
  3827                           fsr0h	equ	0xFEA
  3828                           fsr0l	equ	0xFE9
  3829                           wreg	equ	0xFE8
  3830                           indf1	equ	0xFE7
  3831                           postinc1	equ	0xFE6
  3832                           postdec1	equ	0xFE5
  3833                           plusw1	equ	0xFE3
  3834                           fsr1h	equ	0xFE2
  3835                           fsr1l	equ	0xFE1
  3836                           indf2	equ	0xFDF
  3837                           postinc2	equ	0xFDE
  3838                           postdec2	equ	0xFDD
  3839                           plusw2	equ	0xFDB
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _zerar_string *****************
  3845 ;; Defined at:
  3846 ;;		line 99 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  string_a_zer    2    0[BANK0 ] PTR unsigned char 
  3849 ;;		 -> buffer_teclado_matricial(40), parametro_configuracao_modulo_bt(17), buffer_serial(80), 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;		None               void
  3854 ;; Registers used:
  3855 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : F/0
  3858 ;;		On exit  : F/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3861 ;;      Params:         0       2       0       0       0       0       0       0       0
  3862 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3864 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3865 ;;Total ram usage:        2 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    6
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text1
  3876  005FCC                     __ptext1:
  3877                           	opt stack 0
  3878  005FCC                     _zerar_string:
  3879                           	opt stack 24
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;main.c: 101: while(*string_a_zerar != (0)){
  3883                           
  3884                           ;incstack = 0
  3885  005FCC  D008               	goto	l5345
  3886  005FCE                     l5341:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;main.c: 102: *string_a_zerar=0;
  3890  005FCE  C0B8  FFD9         	movff	zerar_string@string_a_zerar,fsr2l
  3891  005FD2  C0B9  FFDA         	movff	zerar_string@string_a_zerar+1,fsr2h
  3892  005FD6  0E00               	movlw	0
  3893  005FD8  6EDF               	movwf	indf2,c
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;main.c: 103: string_a_zerar++;}
  3897  005FDA  4BB8               	infsnz	zerar_string@string_a_zerar& (0+255),f,b
  3898  005FDC  2BB9               	incf	(zerar_string@string_a_zerar+1)& (0+255),f,b
  3899  005FDE                     l5345:
  3900                           
  3901                           ; BSR set to: 0
  3902  005FDE  C0B8  FFD9         	movff	zerar_string@string_a_zerar,fsr2l
  3903  005FE2  C0B9  FFDA         	movff	zerar_string@string_a_zerar+1,fsr2h
  3904  005FE6  50DF               	movf	indf2,w,c
  3905  005FE8  B4D8               	btfsc	status,2,c
  3906                           
  3907                           ; BSR set to: 0
  3908  005FEA  0012               	return		;funcret
  3909  005FEC  D7F0               	goto	l5341
  3910  005FEE                     __end_of_zerar_string:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           intcon2	equ	0xFF1
  3920                           indf0	equ	0xFEF
  3921                           postinc0	equ	0xFEE
  3922                           plusw0	equ	0xFEB
  3923                           fsr0h	equ	0xFEA
  3924                           fsr0l	equ	0xFE9
  3925                           wreg	equ	0xFE8
  3926                           indf1	equ	0xFE7
  3927                           postinc1	equ	0xFE6
  3928                           postdec1	equ	0xFE5
  3929                           plusw1	equ	0xFE3
  3930                           fsr1h	equ	0xFE2
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           plusw2	equ	0xFDB
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _verificar_num_contas *****************
  3941 ;; Defined at:
  3942 ;;		line 19 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  contas_cadas    1    wreg     PTR int 
  3945 ;;		 -> main@contas_cadastradas(2), 
  3946 ;;  qtd_contas      1    2[BANK0 ] PTR unsigned char 
  3947 ;;		 -> main@qtd_total_contas(1), 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  contas_cadas    1    6[BANK0 ] PTR int 
  3950 ;;		 -> main@contas_cadastradas(2), 
  3951 ;;  i               1    7[BANK0 ] unsigned char 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;		None               void
  3954 ;; Registers used:
  3955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : F/0
  3958 ;;		On exit  : F/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3961 ;;      Params:         0       1       0       0       0       0       0       0       0
  3962 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3963 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3964 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3965 ;;Total ram usage:        6 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    7
  3968 ;; This function calls:
  3969 ;;		_Read_b_eep
  3970 ;; This function is called by:
  3971 ;;		_main
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text2
  3976  00633C                     __ptext2:
  3977                           	opt stack 0
  3978  00633C                     _verificar_num_contas:
  3979                           	opt stack 23
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;incstack = 0
  3983                           ;verificar_num_contas@contas_cadastradas stored from wreg
  3984  00633C  6FBE               	movwf	verificar_num_contas@contas_cadastradas& (0+255),b
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;eeprom_interna.c: 20: char i;
  3988                           ;eeprom_interna.c: 21: for(i=0;i<16;i++){
  3989  00633E  6BBF               	clrf	verificar_num_contas@i& (0+255),b
  3990  006340                     l5555:
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;eeprom_interna.c: 22: if(Read_b_eep(i*16) != 0xFF) {
  3994  006340  51BF               	movf	verificar_num_contas@i& (0+255),w,b
  3995  006342  0D10               	mullw	16
  3996  006344  CFF3 F0B8          	movff	prodl,Read_b_eep@badd
  3997  006348  CFF4 F0B9          	movff	prodh,Read_b_eep@badd+1
  3998  00634C  ECA7  F02F         	call	_Read_b_eep	;wreg free
  3999  006350  0AFF               	xorlw	255
  4000  006352  E016               	bz	l5561
  4001                           
  4002                           ;eeprom_interna.c: 23: *qtd_contas++;
  4003  006354  0100               	movlb	0	; () banked
  4004  006356  2BBA               	incf	verificar_num_contas@qtd_contas& (0+255),f,b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;eeprom_interna.c: 24: (*contas_cadastradas |= (1<<i));}
  4008  006358  C0BF  F0BB         	movff	verificar_num_contas@i,??_verificar_num_contas
  4009  00635C  0E01               	movlw	1
  4010  00635E  6FBC               	movwf	(??_verificar_num_contas+1)& (0+255),b
  4011  006360  6BBD               	clrf	(??_verificar_num_contas+2)& (0+255),b
  4012  006362  2BBB               	incf	??_verificar_num_contas& (0+255),f,b
  4013  006364  D003               	goto	u6364
  4014  006366                     u6365:
  4015  006366  90D8               	bcf	status,0,c
  4016  006368  37BC               	rlcf	(??_verificar_num_contas+1)& (0+255),f,b
  4017  00636A  37BD               	rlcf	(??_verificar_num_contas+2)& (0+255),f,b
  4018  00636C                     u6364:
  4019  00636C  2FBB               	decfsz	??_verificar_num_contas& (0+255),f,b
  4020  00636E  D7FB               	goto	u6365
  4021  006370  0100               	movlb	0	; () banked
  4022  006372  51BE               	movf	verificar_num_contas@contas_cadastradas& (0+255),w,b
  4023  006374  6ED9               	movwf	fsr2l,c
  4024  006376  6ADA               	clrf	fsr2h,c
  4025  006378  51BC               	movf	(??_verificar_num_contas+1)& (0+255),w,b
  4026  00637A  12DE               	iorwf	postinc2,f,c
  4027  00637C  51BD               	movf	(??_verificar_num_contas+2)& (0+255),w,b
  4028  00637E  12DD               	iorwf	postdec2,f,c
  4029  006380                     l5561:
  4030  006380  0100               	movlb	0	; () banked
  4031  006382  2BBF               	incf	verificar_num_contas@i& (0+255),f,b
  4032                           
  4033                           ; BSR set to: 0
  4034  006384  0E0F               	movlw	15
  4035  006386  65BF               	cpfsgt	verificar_num_contas@i& (0+255),b
  4036  006388  D7DB               	goto	l5555
  4037                           
  4038                           ; BSR set to: 0
  4039  00638A  0C0F               	retlw	15	;funcret
  4040  00638C                     __end_of_verificar_num_contas:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           intcon2	equ	0xFF1
  4050                           indf0	equ	0xFEF
  4051                           postinc0	equ	0xFEE
  4052                           plusw0	equ	0xFEB
  4053                           fsr0h	equ	0xFEA
  4054                           fsr0l	equ	0xFE9
  4055                           wreg	equ	0xFE8
  4056                           indf1	equ	0xFE7
  4057                           postinc1	equ	0xFE6
  4058                           postdec1	equ	0xFE5
  4059                           plusw1	equ	0xFE3
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           plusw2	equ	0xFDB
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function _resetar_timer1 *****************
  4071 ;; Defined at:
  4072 ;;		line 41 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  valor_h         1    wreg     unsigned char 
  4075 ;;  valor_l         1    0[BANK0 ] unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  valor_h         1    1[BANK0 ] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;		None               void
  4080 ;; Registers used:
  4081 ;;		wreg
  4082 ;; Tracked objects:
  4083 ;;		On entry : F/0
  4084 ;;		On exit  : F/0
  4085 ;;		Unchanged: F/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4087 ;;      Params:         0       1       0       0       0       0       0       0       0
  4088 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4090 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    6
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_main
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text3
  4102  005F40                     __ptext3:
  4103                           	opt stack 0
  4104  005F40                     _resetar_timer1:
  4105                           	opt stack 24
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;incstack = 0
  4109                           ;resetar_timer1@valor_h stored from wreg
  4110  005F40  6FB9               	movwf	resetar_timer1@valor_h& (0+255),b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;time.c: 42: TMR1ON=0;
  4114  005F42  90CD               	bcf	4045,0,c	;volatile
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;time.c: 43: TMR1H=valor_h;
  4118  005F44  C0B9  FFCF         	movff	resetar_timer1@valor_h,4047	;volatile
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;time.c: 44: TMR1L=valor_l;
  4122  005F48  C0B8  FFCE         	movff	resetar_timer1@valor_l,4046	;volatile
  4123                           
  4124                           ; BSR set to: 0
  4125  005F4C  0012               	return		;funcret
  4126  005F4E                     __end_of_resetar_timer1:
  4127                           	opt stack 0
  4128                           tblptru	equ	0xFF8
  4129                           tblptrh	equ	0xFF7
  4130                           tblptrl	equ	0xFF6
  4131                           tablat	equ	0xFF5
  4132                           prodh	equ	0xFF4
  4133                           prodl	equ	0xFF3
  4134                           intcon	equ	0xFF2
  4135                           intcon2	equ	0xFF1
  4136                           indf0	equ	0xFEF
  4137                           postinc0	equ	0xFEE
  4138                           plusw0	equ	0xFEB
  4139                           fsr0h	equ	0xFEA
  4140                           fsr0l	equ	0xFE9
  4141                           wreg	equ	0xFE8
  4142                           indf1	equ	0xFE7
  4143                           postinc1	equ	0xFE6
  4144                           postdec1	equ	0xFE5
  4145                           plusw1	equ	0xFE3
  4146                           fsr1h	equ	0xFE2
  4147                           fsr1l	equ	0xFE1
  4148                           indf2	equ	0xFDF
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           plusw2	equ	0xFDB
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _printf *****************
  4157 ;; Defined at:
  4158 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  4161 ;;		 -> STR_29(33), STR_28(2), STR_16(18), STR_15(22), 
  4162 ;;		 -> STR_14(20), STR_13(15), STR_12(19), STR_11(3), 
  4163 ;;		 -> STR_10(17), STR_9(3), STR_8(4), STR_7(5), 
  4164 ;;		 -> STR_2(3), STR_1(2), 
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;  tmpval          4    0        struct .
  4167 ;;  width           2   39[BANK0 ] int 
  4168 ;;  len             2   36[BANK0 ] unsigned int 
  4169 ;;  val             2   34[BANK0 ] unsigned int 
  4170 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
  4171 ;;		 -> STR_42(7), printf@c(1), buffer_teclado_matricial(40), 
  4172 ;;  c               1   41[BANK0 ] char 
  4173 ;;  flag            1   38[BANK0 ] unsigned char 
  4174 ;;  ap              1   33[BANK0 ] PTR void [1]
  4175 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4176 ;;  prec            1   30[BANK0 ] char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  2   12[BANK0 ] int 
  4179 ;; Registers used:
  4180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : F/0
  4183 ;;		On exit  : F/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4186 ;;      Params:         0      14       0       0       0       0       0       0       0
  4187 ;;      Locals:         0      12       0       0       0       0       0       0       0
  4188 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4189 ;;      Totals:         0      30       0       0       0       0       0       0       0
  4190 ;;Total ram usage:       30 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:   10
  4193 ;; This function calls:
  4194 ;;		___lwdiv
  4195 ;;		___lwmod
  4196 ;;		___wmul
  4197 ;;		_isdigit
  4198 ;;		_putch
  4199 ;; This function is called by:
  4200 ;;		_main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text4
  4205  0070E6                     __ptext4:
  4206                           	opt stack 0
  4207  0070E6                     _printf:
  4208                           	opt stack 20
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;doprnt.c: 466: va_list ap;
  4212                           ;doprnt.c: 499: signed char c;
  4213                           ;doprnt.c: 501: int width;
  4214                           ;doprnt.c: 506: signed char prec;
  4215                           ;doprnt.c: 508: unsigned char flag;
  4216                           ;doprnt.c: 523: union {
  4217                           ;doprnt.c: 524: unsigned long vd;
  4218                           ;doprnt.c: 525: double integ;
  4219                           ;doprnt.c: 526: } tmpval;
  4220                           ;doprnt.c: 528: unsigned int val;
  4221                           ;doprnt.c: 529: unsigned len;
  4222                           ;doprnt.c: 530: const char * cp;
  4223                           ;doprnt.c: 533: *ap = __va_start();
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;incstack = 0
  4227  0070E6  0EC6               	movlw	low (?_printf+2)
  4228  0070E8  6FD9               	movwf	printf@ap& (0+255),b
  4229                           
  4230                           ;doprnt.c: 536: while(c = *f++) {
  4231  0070EA  D14D               	goto	l5479
  4232  0070EC                     l5355:
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;doprnt.c: 538: if(c != '%')
  4236  0070EC  0E25               	movlw	37
  4237  0070EE  19E1               	xorwf	printf@c& (0+255),w,b
  4238  0070F0  E004               	bz	l782
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;doprnt.c: 540: {
  4242                           ;doprnt.c: 541: (putch(c) );
  4243  0070F2  51E1               	movf	printf@c& (0+255),w,b
  4244  0070F4  EC86  F02F         	call	_putch
  4245                           
  4246                           ;doprnt.c: 542: continue;
  4247  0070F8  D146               	goto	l5479
  4248  0070FA                     l782:
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;doprnt.c: 543: }
  4252                           ;doprnt.c: 546: width = 0;
  4253  0070FA  6BDF               	clrf	printf@width& (0+255),b
  4254  0070FC  6BE0               	clrf	(printf@width+1)& (0+255),b
  4255                           
  4256                           ;doprnt.c: 548: flag = 0;
  4257  0070FE  6BDE               	clrf	printf@flag& (0+255),b
  4258  007100  D003               	goto	l5363
  4259  007102                     l5359:
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;doprnt.c: 580: flag |= 0x04;
  4263  007102  85DE               	bsf	printf@flag& (0+255),2,b
  4264                           
  4265                           ;doprnt.c: 581: f++;
  4266  007104  4BC4               	infsnz	printf@f& (0+255),f,b
  4267  007106  2BC5               	incf	(printf@f+1)& (0+255),f,b
  4268  007108                     l5363:
  4269                           
  4270                           ; BSR set to: 0
  4271  007108  D947               	call	PL16	;call to abstracted procedure
  4272                           
  4273                           ; Switch size 1, requested type "space"
  4274                           ; Number of cases is 1, Range of values is 48 to 48
  4275                           ; switch strategies available:
  4276                           ; Name         Instructions Cycles
  4277                           ; simple_byte            4     3 (average)
  4278                           ;	Chosen strategy is simple_byte
  4279  00710A  0A30               	xorlw	48	; case 48
  4280  00710C  E0FA               	bz	l5359
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4284  00710E  D944               	call	PL16	;call to abstracted procedure
  4285  007110  ECD8  F02F         	call	_isdigit
  4286  007114  E201 D098          	bnc	l5415
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;doprnt.c: 598: width = 0;
  4290  007118  6BDF               	clrf	printf@width& (0+255),b
  4291  00711A  6BE0               	clrf	(printf@width+1)& (0+255),b
  4292  00711C                     l5369:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;doprnt.c: 600: width *= 10;
  4296  00711C  C0DF  F0B8         	movff	printf@width,___wmul@multiplier
  4297  007120  C0E0  F0B9         	movff	printf@width+1,___wmul@multiplier+1
  4298  007124  6BBB               	clrf	(___wmul@multiplicand+1)& (0+255),b
  4299  007126  0E0A               	movlw	10
  4300  007128  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  4301  00712A  EC40  F030         	call	___wmul	;wreg free
  4302  00712E  C0B8  F0DF         	movff	?___wmul,printf@width
  4303  007132  C0B9  F0E0         	movff	?___wmul+1,printf@width+1
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;doprnt.c: 601: width += *f++ - '0';
  4307  007136  0ED0               	movlw	208
  4308  007138  6FD2               	movwf	??_printf& (0+255),b
  4309  00713A  69D3               	setf	(??_printf+1)& (0+255),b
  4310  00713C  D92D               	call	PL16	;call to abstracted procedure
  4311  00713E  6FD4               	movwf	(??_printf+2)& (0+255),b
  4312  007140  6BD5               	clrf	(??_printf+3)& (0+255),b
  4313  007142  51D2               	movf	??_printf& (0+255),w,b
  4314  007144  27D4               	addwf	(??_printf+2)& (0+255),f,b
  4315  007146  51D3               	movf	(??_printf+1)& (0+255),w,b
  4316  007148  23D5               	addwfc	(??_printf+3)& (0+255),f,b
  4317  00714A  51D4               	movf	(??_printf+2)& (0+255),w,b
  4318  00714C  27DF               	addwf	printf@width& (0+255),f,b
  4319  00714E  51D5               	movf	(??_printf+3)& (0+255),w,b
  4320  007150  23E0               	addwfc	(printf@width+1)& (0+255),f,b
  4321                           
  4322                           ; BSR set to: 0
  4323  007152  4BC4               	infsnz	printf@f& (0+255),f,b
  4324  007154  2BC5               	incf	(printf@f+1)& (0+255),f,b
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4328  007156  D920               	call	PL16	;call to abstracted procedure
  4329  007158  ECD8  F02F         	call	_isdigit
  4330  00715C  E375               	bnc	l5415
  4331  00715E  D7DE               	goto	l5369
  4332  007160                     l5377:
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4336  007160  51D9               	movf	printf@ap& (0+255),w,b
  4337  007162  6ED9               	movwf	fsr2l,c
  4338  007164  6ADA               	clrf	fsr2h,c
  4339  007166  50DF               	movf	indf2,w,c
  4340  007168  6FD2               	movwf	??_printf& (0+255),b
  4341  00716A  C0D2  F0D7         	movff	??_printf,printf@cp
  4342  00716E  6BD8               	clrf	(printf@cp+1)& (0+255),b
  4343                           
  4344                           ; BSR set to: 0
  4345  007170  2BD9               	incf	printf@ap& (0+255),f,b
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;doprnt.c: 740: if(!cp)
  4349  007172  51D7               	movf	printf@cp& (0+255),w,b
  4350  007174  11D8               	iorwf	(printf@cp+1)& (0+255),w,b
  4351  007176  E104               	bnz	l5385
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;doprnt.c: 741: cp = "(null)";
  4355  007178  0E7F               	movlw	low STR_42
  4356  00717A  6FD7               	movwf	printf@cp& (0+255),b
  4357  00717C  0E7F               	movlw	high STR_42
  4358  00717E  6FD8               	movwf	(printf@cp+1)& (0+255),b
  4359  007180                     l5385:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;doprnt.c: 745: len = 0;
  4363  007180  6BDC               	clrf	printf@len& (0+255),b
  4364  007182  6BDD               	clrf	(printf@len+1)& (0+255),b
  4365                           
  4366                           ;doprnt.c: 746: while(cp[len])
  4367  007184  D003               	goto	l5389
  4368  007186                     l5387:
  4369                           
  4370                           ;doprnt.c: 747: len++;
  4371  007186  0100               	movlb	0	; () banked
  4372  007188  4BDC               	infsnz	printf@len& (0+255),f,b
  4373  00718A  2BDD               	incf	(printf@len+1)& (0+255),f,b
  4374  00718C                     l5389:
  4375                           
  4376                           ; BSR set to: 0
  4377  00718C  51DC               	movf	printf@len& (0+255),w,b
  4378  00718E  25D7               	addwf	printf@cp& (0+255),w,b
  4379  007190  6FD2               	movwf	??_printf& (0+255),b
  4380  007192  51DD               	movf	(printf@len+1)& (0+255),w,b
  4381  007194  21D8               	addwfc	(printf@cp+1)& (0+255),w,b
  4382  007196  6FD3               	movwf	(??_printf+1)& (0+255),b
  4383  007198  C0D2  FFF6         	movff	??_printf,tblptrl
  4384  00719C  C0D3  FFF7         	movff	??_printf+1,tblptrh
  4385  0071A0  6AF8               	clrf	tblptru,c
  4386  0071A2  0E07               	movlw	(high __ramtop+-1)
  4387  0071A4  64F7               	cpfsgt	tblptrh,c
  4388  0071A6  D003               	bra	u6137
  4389  0071A8  0008               	tblrd		*
  4390  0071AA  50F5               	movf	tablat,w,c
  4391  0071AC  D005               	bra	u6130
  4392  0071AE                     u6137:
  4393  0071AE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4394  0071B2  CFF7 FFEA          	movff	tblptrh,fsr0h
  4395  0071B6  50EF               	movf	indf0,w,c
  4396  0071B8                     u6130:
  4397  0071B8  0900               	iorlw	0
  4398  0071BA  E1E5               	bnz	l5387
  4399  0071BC                     l5391:
  4400                           
  4401                           ;doprnt.c: 757: if(width > len)
  4402  0071BC  0100               	movlb	0	; () banked
  4403  0071BE  51DF               	movf	printf@width& (0+255),w,b
  4404  0071C0  5DDC               	subwf	printf@len& (0+255),w,b
  4405  0071C2  51E0               	movf	(printf@width+1)& (0+255),w,b
  4406  0071C4  59DD               	subwfb	(printf@len+1)& (0+255),w,b
  4407  0071C6  E205               	bc	l804
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;doprnt.c: 758: width -= len;
  4411  0071C8  51DC               	movf	printf@len& (0+255),w,b
  4412  0071CA  5FDF               	subwf	printf@width& (0+255),f,b
  4413  0071CC  51DD               	movf	(printf@len+1)& (0+255),w,b
  4414  0071CE  5BE0               	subwfb	(printf@width+1)& (0+255),f,b
  4415  0071D0  D006               	goto	l5397
  4416  0071D2                     l804:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 759: else
  4420                           ;doprnt.c: 760: width = 0;
  4421  0071D2  6BDF               	clrf	printf@width& (0+255),b
  4422  0071D4  6BE0               	clrf	(printf@width+1)& (0+255),b
  4423  0071D6  D003               	goto	l5397
  4424  0071D8                     l5395:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;doprnt.c: 765: (putch(' ') );
  4428  0071D8  0E20               	movlw	32
  4429  0071DA  EC86  F02F         	call	_putch
  4430  0071DE                     l5397:
  4431  0071DE  0100               	movlb	0	; () banked
  4432  0071E0  07DF               	decf	printf@width& (0+255),f,b
  4433  0071E2  A0D8               	btfss	status,0,c
  4434  0071E4  07E0               	decf	(printf@width+1)& (0+255),f,b
  4435  0071E6  29DF               	incf	printf@width& (0+255),w,b
  4436  0071E8  E1F7               	bnz	l5395
  4437  0071EA  29E0               	incf	(printf@width+1)& (0+255),w,b
  4438  0071EC  E016               	bz	l5403
  4439  0071EE  D7F4               	goto	l5395
  4440  0071F0                     l5399:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;doprnt.c: 768: (putch(*cp++) );
  4444  0071F0  C0D7  FFF6         	movff	printf@cp,tblptrl
  4445  0071F4  C0D8  FFF7         	movff	printf@cp+1,tblptrh
  4446  0071F8  6AF8               	clrf	tblptru,c
  4447  0071FA  0E07               	movlw	(high __ramtop+-1)
  4448  0071FC  64F7               	cpfsgt	tblptrh,c
  4449  0071FE  D003               	bra	u6177
  4450  007200  0008               	tblrd		*
  4451  007202  50F5               	movf	tablat,w,c
  4452  007204  D005               	bra	u6170
  4453  007206                     u6177:
  4454  007206  CFF6 FFE9          	movff	tblptrl,fsr0l
  4455  00720A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4456  00720E  50EF               	movf	indf0,w,c
  4457  007210                     u6170:
  4458  007210  EC86  F02F         	call	_putch
  4459  007214  0100               	movlb	0	; () banked
  4460  007216  4BD7               	infsnz	printf@cp& (0+255),f,b
  4461  007218  2BD8               	incf	(printf@cp+1)& (0+255),f,b
  4462  00721A                     l5403:
  4463                           
  4464                           ; BSR set to: 0
  4465  00721A  07DC               	decf	printf@len& (0+255),f,b
  4466  00721C  A0D8               	btfss	status,0,c
  4467  00721E  07DD               	decf	(printf@len+1)& (0+255),f,b
  4468  007220  29DC               	incf	printf@len& (0+255),w,b
  4469  007222  E1E6               	bnz	l5399
  4470  007224  29DD               	incf	(printf@len+1)& (0+255),w,b
  4471  007226  E101 D0AE          	bz	l5479
  4472  00722A  D7E2               	goto	l5399
  4473  00722C                     l5405:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4477  00722C  51D9               	movf	printf@ap& (0+255),w,b
  4478  00722E  6ED9               	movwf	fsr2l,c
  4479  007230  6ADA               	clrf	fsr2h,c
  4480  007232  50DF               	movf	indf2,w,c
  4481  007234  6FE1               	movwf	printf@c& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484  007236  0E02               	movlw	2
  4485  007238  27D9               	addwf	printf@ap& (0+255),f,b
  4486  00723A                     l5409:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;doprnt.c: 805: cp = (char *)&c;
  4490  00723A  0EE1               	movlw	low printf@c
  4491  00723C  6FD7               	movwf	printf@cp& (0+255),b
  4492  00723E  6BD8               	clrf	(printf@cp+1)& (0+255),b
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;doprnt.c: 806: len = 1;
  4496  007240  6BDD               	clrf	(printf@len+1)& (0+255),b
  4497  007242  0E01               	movlw	1
  4498  007244  6FDC               	movwf	printf@len& (0+255),b
  4499                           
  4500                           ;doprnt.c: 807: goto dostring;
  4501  007246  D7BA               	goto	l5391
  4502  007248                     l5415:
  4503                           
  4504                           ; BSR set to: 0
  4505  007248  C0C4  FFF6         	movff	printf@f,tblptrl
  4506  00724C  C0C5  FFF7         	movff	printf@f+1,tblptrh
  4507  007250  D8AA               	call	PL32	;call to abstracted procedure
  4508                           
  4509                           ; Switch size 1, requested type "space"
  4510                           ; Number of cases is 5, Range of values is 0 to 115
  4511                           ; switch strategies available:
  4512                           ; Name         Instructions Cycles
  4513                           ; simple_byte           16     9 (average)
  4514                           ;	Chosen strategy is simple_byte
  4515  007252  E101 D0A0          	bz	l835
  4516  007256  0A63               	xorlw	99	; case 99
  4517  007258  E0E9               	bz	l5405
  4518  00725A  0A07               	xorlw	7	; case 100
  4519  00725C  E006               	bz	l5417
  4520  00725E  0A0D               	xorlw	13	; case 105
  4521  007260  E004               	bz	l5417
  4522  007262  0A1A               	xorlw	26	; case 115
  4523  007264  E101 D77C          	bz	l5377
  4524  007268  D7E8               	goto	l5409
  4525  00726A                     l5417:
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;doprnt.c: 1253: {
  4529                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4530  00726A  51D9               	movf	printf@ap& (0+255),w,b
  4531  00726C  6ED9               	movwf	fsr2l,c
  4532  00726E  6ADA               	clrf	fsr2h,c
  4533  007270  CFDE F0DA          	movff	postinc2,printf@val
  4534  007274  CFDD F0DB          	movff	postdec2,printf@val+1
  4535                           
  4536                           ; BSR set to: 0
  4537  007278  0E02               	movlw	2
  4538  00727A  27D9               	addwf	printf@ap& (0+255),f,b
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;doprnt.c: 1261: if((int)val < 0) {
  4542  00727C  AFDB               	btfss	(printf@val+1)& (0+255),7,b
  4543  00727E  D006               	goto	l5427
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;doprnt.c: 1262: flag |= 0x03;
  4547  007280  0E03               	movlw	3
  4548  007282  13DE               	iorwf	printf@flag& (0+255),f,b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;doprnt.c: 1263: val = -val;
  4552  007284  6DDA               	negf	printf@val& (0+255),b
  4553  007286  1FDB               	comf	(printf@val+1)& (0+255),f,b
  4554  007288  B0D8               	btfsc	status,0,c
  4555  00728A  2BDB               	incf	(printf@val+1)& (0+255),f,b
  4556  00728C                     l5427:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;doprnt.c: 1264: }
  4560                           ;doprnt.c: 1266: }
  4561                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4562  00728C  0E01               	movlw	1
  4563  00728E  6FE1               	movwf	printf@c& (0+255),b
  4564  007290                     l5429:
  4565                           
  4566                           ; BSR set to: 0
  4567  007290  0E05               	movlw	5
  4568  007292  19E1               	xorwf	printf@c& (0+255),w,b
  4569  007294  E00B               	bz	l5441
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;doprnt.c: 1306: if(val < dpowers[c])
  4573  007296  51E1               	movf	printf@c& (0+255),w,b
  4574  007298  EC5A  F038         	call	PL6	;call to abstracted procedure
  4575  00729C  50F5               	movf	tablat,w,c
  4576  00729E  5DDA               	subwf	printf@val& (0+255),w,b
  4577  0072A0  0009               	tblrd		*+
  4578  0072A2  50F5               	movf	tablat,w,c
  4579  0072A4  59DB               	subwfb	(printf@val+1)& (0+255),w,b
  4580  0072A6  E302               	bnc	l5441
  4581                           
  4582                           ; BSR set to: 0
  4583  0072A8  2BE1               	incf	printf@c& (0+255),f,b
  4584  0072AA  D7F2               	goto	l5429
  4585  0072AC                     l5441:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4589  0072AC  51DF               	movf	printf@width& (0+255),w,b
  4590  0072AE  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  4591  0072B0  E008               	bz	l5447
  4592                           
  4593                           ; BSR set to: 0
  4594  0072B2  C0DE  F0D2         	movff	printf@flag,??_printf
  4595  0072B6  0E03               	movlw	3
  4596  0072B8  17D2               	andwf	??_printf& (0+255),f,b
  4597  0072BA  E003               	bz	l5447
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;doprnt.c: 1346: width--;
  4601  0072BC  07DF               	decf	printf@width& (0+255),f,b
  4602  0072BE  A0D8               	btfss	status,0,c
  4603  0072C0  07E0               	decf	(printf@width+1)& (0+255),f,b
  4604  0072C2                     l5447:
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;doprnt.c: 1381: if(width > c)
  4608  0072C2  0E80               	movlw	128
  4609  0072C4  BFE1               	btfsc	printf@c& (0+255),7,b
  4610  0072C6  0E7F               	movlw	127
  4611  0072C8  6FD2               	movwf	??_printf& (0+255),b
  4612  0072CA  51DF               	movf	printf@width& (0+255),w,b
  4613  0072CC  5DE1               	subwf	printf@c& (0+255),w,b
  4614  0072CE  51E0               	movf	(printf@width+1)& (0+255),w,b
  4615  0072D0  0A80               	xorlw	128
  4616  0072D2  59D2               	subwfb	??_printf& (0+255),w,b
  4617  0072D4  E207               	bc	l819
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;doprnt.c: 1382: width -= c;
  4621  0072D6  51E1               	movf	printf@c& (0+255),w,b
  4622  0072D8  5FDF               	subwf	printf@width& (0+255),f,b
  4623  0072DA  0E00               	movlw	0
  4624  0072DC  BFE1               	btfsc	printf@c& (0+255),7,b
  4625  0072DE  0EFF               	movlw	255
  4626  0072E0  5BE0               	subwfb	(printf@width+1)& (0+255),f,b
  4627  0072E2  D002               	goto	l820
  4628  0072E4                     l819:
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;doprnt.c: 1383: else
  4632                           ;doprnt.c: 1384: width = 0;
  4633  0072E4  6BDF               	clrf	printf@width& (0+255),b
  4634  0072E6  6BE0               	clrf	(printf@width+1)& (0+255),b
  4635  0072E8                     l820:
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;doprnt.c: 1387: if(flag & 0x04) {
  4639  0072E8  A5DE               	btfss	printf@flag& (0+255),2,b
  4640  0072EA  D014               	goto	l5461
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;doprnt.c: 1392: if(flag & 0x03)
  4644  0072EC  C0DE  F0D2         	movff	printf@flag,??_printf
  4645  0072F0  0E03               	movlw	3
  4646  0072F2  17D2               	andwf	??_printf& (0+255),f,b
  4647  0072F4  E003               	bz	l5455
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;doprnt.c: 1393: (putch('-') );
  4651  0072F6  0E2D               	movlw	45
  4652  0072F8  EC86  F02F         	call	_putch
  4653  0072FC                     l5455:
  4654                           
  4655                           ;doprnt.c: 1415: if(width)
  4656  0072FC  0100               	movlb	0	; () banked
  4657  0072FE  51DF               	movf	printf@width& (0+255),w,b
  4658  007300  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  4659  007302  E01D               	bz	l5471
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;doprnt.c: 1417: (putch('0') );
  4663  007304  0E30               	movlw	48
  4664  007306  EC86  F02F         	call	_putch
  4665                           
  4666                           ;doprnt.c: 1418: while(--width);
  4667  00730A  0100               	movlb	0	; () banked
  4668  00730C  07DF               	decf	printf@width& (0+255),f,b
  4669  00730E  A0D8               	btfss	status,0,c
  4670  007310  07E0               	decf	(printf@width+1)& (0+255),f,b
  4671  007312  D7F5               	goto	L2
  4672  007314                     l5461:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 1422: {
  4676                           ;doprnt.c: 1424: if(width
  4677                           ;doprnt.c: 1428: )
  4678  007314  51DF               	movf	printf@width& (0+255),w,b
  4679  007316  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  4680  007318  E00A               	bz	l5467
  4681  00731A                     l5463:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;doprnt.c: 1430: (putch(' ') );
  4685  00731A  0E20               	movlw	32
  4686  00731C  EC86  F02F         	call	_putch
  4687                           
  4688                           ;doprnt.c: 1431: while(--width);
  4689  007320  0100               	movlb	0	; () banked
  4690  007322  07DF               	decf	printf@width& (0+255),f,b
  4691  007324  A0D8               	btfss	status,0,c
  4692  007326  07E0               	decf	(printf@width+1)& (0+255),f,b
  4693  007328  51DF               	movf	printf@width& (0+255),w,b
  4694  00732A  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  4695  00732C  E1F6               	bnz	l5463
  4696  00732E                     l5467:
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;doprnt.c: 1438: if(flag & 0x03)
  4700  00732E  C0DE  F0D2         	movff	printf@flag,??_printf
  4701  007332  0E03               	movlw	3
  4702  007334  17D2               	andwf	??_printf& (0+255),f,b
  4703  007336  E003               	bz	l5471
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;doprnt.c: 1439: (putch('-') );
  4707  007338  0E2D               	movlw	45
  4708  00733A  EC86  F02F         	call	_putch
  4709  00733E                     l5471:
  4710                           
  4711                           ;doprnt.c: 1469: }
  4712                           ;doprnt.c: 1472: prec = c;
  4713  00733E  C0E1  F0D6         	movff	printf@c,printf@prec
  4714                           
  4715                           ;doprnt.c: 1474: while(prec--) {
  4716  007342  D01D               	goto	l5477
  4717  007344                     l5473:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;doprnt.c: 1478: {
  4721                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4722  007344  51D6               	movf	printf@prec& (0+255),w,b
  4723  007346  EC5A  F038         	call	PL6	;call to abstracted procedure
  4724  00734A  CFF5 F0BA          	movff	tablat,___lwdiv@divisor
  4725  00734E  000A               	tblrd		*-
  4726  007350  CFF5 F0BB          	movff	tablat,___lwdiv@divisor+1
  4727  007354  C0DA  F0B8         	movff	printf@val,___lwdiv@dividend
  4728  007358  C0DB  F0B9         	movff	printf@val+1,___lwdiv@dividend+1
  4729  00735C  EC2D  F031         	call	___lwdiv	;wreg free
  4730  007360  C0B8  F0BF         	movff	?___lwdiv,___lwmod@dividend
  4731  007364  C0B9  F0C0         	movff	?___lwdiv+1,___lwmod@dividend+1
  4732  007368  6BC2               	clrf	(___lwmod@divisor+1)& (0+255),b
  4733  00736A  0E0A               	movlw	10
  4734  00736C  6FC1               	movwf	___lwmod@divisor& (0+255),b
  4735  00736E  ECE9  F030         	call	___lwmod	;wreg free
  4736  007372  51BF               	movf	?___lwmod& (0+255),w,b
  4737  007374  0F30               	addlw	48
  4738  007376  6FE1               	movwf	printf@c& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;doprnt.c: 1523: }
  4742                           ;doprnt.c: 1524: (putch(c) );
  4743  007378  51E1               	movf	printf@c& (0+255),w,b
  4744  00737A  EC86  F02F         	call	_putch
  4745  00737E                     l5477:
  4746  00737E  0100               	movlb	0	; () banked
  4747  007380  07D6               	decf	printf@prec& (0+255),f,b
  4748  007382  29D6               	incf	printf@prec& (0+255),w,b
  4749  007384  E1DF               	bnz	l5473
  4750  007386                     l5479:
  4751  007386  C0C4  FFF6         	movff	printf@f,tblptrl
  4752  00738A  C0C5  FFF7         	movff	printf@f+1,tblptrh
  4753  00738E  0100               	movlb	0	; () banked
  4754  007390  D80A               	call	PL32	;call to abstracted procedure
  4755  007392  E001 D6AB          	bnz	l5355
  4756  007396                     l835:
  4757                           
  4758                           ; BSR set to: 0
  4759  007396  0012               	return		;funcret
  4760  007398                     __end_of_printf:
  4761                           	opt stack 0
  4762  007398                     PL16:
  4763                           	opt stack 20
  4764  007398  C0C4  FFF6         	movff	printf@f,tblptrl
  4765  00739C  C0C5  FFF7         	movff	printf@f+1,tblptrh
  4766  0073A0                     	if	0	;tblptru may be non-zero
  4767  0073A0                     	endif
  4768  0073A0                     	if	0	;tblptru may be non-zero
  4769  0073A0                     	endif
  4770  0073A0  0008               	tblrd		*
  4771  0073A2  50F5               	movf	tablat,w,c
  4772  0073A4  0012               	return	
  4773  0073A6                     __end_ofPL16:
  4774                           	opt stack 0
  4775  0073A6                     PL32:
  4776                           	opt stack 20
  4777  0073A6  4BC4               	infsnz	printf@f& (0+255),f,b
  4778  0073A8  2BC5               	incf	(printf@f+1)& (0+255),f,b
  4779  0073AA                     	if	0	;tblptru may be non-zero
  4780  0073AA                     	endif
  4781  0073AA                     	if	0	;tblptru may be non-zero
  4782  0073AA                     	endif
  4783  0073AA  0008               	tblrd		*
  4784  0073AC  CFF5 F0E1          	movff	tablat,printf@c
  4785  0073B0  51E1               	movf	printf@c& (0+255),w,b
  4786  0073B2  0012               	return	
  4787  0073B4                     __end_ofPL32:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           intcon2	equ	0xFF1
  4797                           indf0	equ	0xFEF
  4798                           postinc0	equ	0xFEE
  4799                           plusw0	equ	0xFEB
  4800                           fsr0h	equ	0xFEA
  4801                           fsr0l	equ	0xFE9
  4802                           wreg	equ	0xFE8
  4803                           indf1	equ	0xFE7
  4804                           postinc1	equ	0xFE6
  4805                           postdec1	equ	0xFE5
  4806                           plusw1	equ	0xFE3
  4807                           fsr1h	equ	0xFE2
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           plusw2	equ	0xFDB
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function _putch *****************
  4818 ;; Defined at:
  4819 ;;		line 244 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  c               1    wreg     unsigned char 
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;  c               1    5[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;		None               void
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4833 ;;      Params:         0       0       0       0       0       0       0       0       0
  4834 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4836 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4837 ;;Total ram usage:        1 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    9
  4840 ;; This function calls:
  4841 ;;		_lcd_putc
  4842 ;; This function is called by:
  4843 ;;		_printf
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text5
  4848  005F0C                     __ptext5:
  4849                           	opt stack 0
  4850  005F0C                     _putch:
  4851                           	opt stack 20
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;incstack = 0
  4855                           ;putch@c stored from wreg
  4856  005F0C  0100               	movlb	0	; () banked
  4857  005F0E  6FBD               	movwf	putch@c& (0+255),b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;LCD_ModSauer.c: 246: lcd_putc(c);
  4861  005F10  51BD               	movf	putch@c& (0+255),w,b
  4862  005F12  EF81  F032         	goto	_lcd_putc
  4863  005F16                     __end_of_putch:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           intcon	equ	0xFF2
  4872                           intcon2	equ	0xFF1
  4873                           indf0	equ	0xFEF
  4874                           postinc0	equ	0xFEE
  4875                           plusw0	equ	0xFEB
  4876                           fsr0h	equ	0xFEA
  4877                           fsr0l	equ	0xFE9
  4878                           wreg	equ	0xFE8
  4879                           indf1	equ	0xFE7
  4880                           postinc1	equ	0xFE6
  4881                           postdec1	equ	0xFE5
  4882                           plusw1	equ	0xFE3
  4883                           fsr1h	equ	0xFE2
  4884                           fsr1l	equ	0xFE1
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _lcd_putc *****************
  4894 ;; Defined at:
  4895 ;;		line 151 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  c               1    wreg     unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  c               1    4[BANK0 ] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;		None               void
  4902 ;; Registers used:
  4903 ;;		wreg, status,2, status,0, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : F/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0
  4910 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4912 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4913 ;;Total ram usage:        1 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    8
  4916 ;; This function calls:
  4917 ;;		_lcd_clear
  4918 ;;		_lcd_gotoxy
  4919 ;;		_lcd_write
  4920 ;; This function is called by:
  4921 ;;		_putch
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text6
  4926  006502                     __ptext6:
  4927                           	opt stack 0
  4928  006502                     _lcd_putc:
  4929                           	opt stack 20
  4930                           
  4931                           ;incstack = 0
  4932                           ;lcd_putc@c stored from wreg
  4933  006502  6FBC               	movwf	lcd_putc@c& (0+255),b
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;LCD_ModSauer.c: 153: switch (c) {
  4937  006504  D029               	goto	l5149
  4938  006506                     l5121:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;LCD_ModSauer.c: 157: lcd_clear();
  4942  006506  ECBD  F02F         	call	_lcd_clear	;wreg free
  4943                           
  4944                           ;LCD_ModSauer.c: 158: break;
  4945  00650A  D02E               	goto	l746
  4946  00650C                     l5123:
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;LCD_ModSauer.c: 164: case 1:
  4950                           ;LCD_ModSauer.c: 165: if(++linha_lcd>4) linha_lcd=1;
  4951  00650C  2B75               	incf	_linha_lcd& (0+255),f,b
  4952  00650E  0E04               	movlw	4
  4953  006510  6575               	cpfsgt	_linha_lcd& (0+255),b
  4954  006512  D00E               	goto	l5135
  4955                           
  4956                           ; BSR set to: 0
  4957  006514  0E01               	movlw	1
  4958  006516  6F75               	movwf	_linha_lcd& (0+255),b
  4959  006518  D00B               	goto	l5135
  4960  00651A                     l5127:
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;LCD_ModSauer.c: 169: case 0:
  4964                           ;LCD_ModSauer.c: 170: if(++linha_lcd>2) linha_lcd=1;
  4965  00651A  2B75               	incf	_linha_lcd& (0+255),f,b
  4966  00651C  0E02               	movlw	2
  4967  00651E  D7F8               	goto	L3
  4968  006520                     l5133:
  4969                           
  4970                           ; BSR set to: 0
  4971  006520  5174               	movf	_lcd_type& (0+255),w,b
  4972                           
  4973                           ; Switch size 1, requested type "space"
  4974                           ; Number of cases is 4, Range of values is 0 to 3
  4975                           ; switch strategies available:
  4976                           ; Name         Instructions Cycles
  4977                           ; simple_byte           13     7 (average)
  4978                           ;	Chosen strategy is simple_byte
  4979  006522  E0FB               	bz	l5127
  4980  006524  0A01               	xorlw	1	; case 1
  4981  006526  E0F2               	bz	l5123
  4982  006528  0A03               	xorlw	3	; case 2
  4983  00652A  E0F7               	bz	l5127
  4984  00652C  0A01               	xorlw	1	; case 3
  4985  00652E  E0EE               	bz	l5123
  4986  006530                     l5135:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;LCD_ModSauer.c: 174: lcd_gotoxy(linha_lcd,1);
  4990  006530  0E01               	movlw	1
  4991  006532  6FB9               	movwf	lcd_gotoxy@coluna& (0+255),b
  4992  006534  5175               	movf	_linha_lcd& (0+255),w,b
  4993  006536  EC52  F031         	call	_lcd_gotoxy
  4994                           
  4995                           ;LCD_ModSauer.c: 175: break;
  4996  00653A  D016               	goto	l746
  4997  00653C                     l5137:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;LCD_ModSauer.c: 177: linha_lcd=1;
  5001  00653C  0E01               	movlw	1
  5002  00653E  6F75               	movwf	_linha_lcd& (0+255),b
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;LCD_ModSauer.c: 178: LATEbits.LE0 = 0;
  5006  006540  908D               	bcf	3981,0,c	;volatile
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;LCD_ModSauer.c: 179: lcd_write(0x80);
  5010  006542  0E80               	movlw	128
  5011  006544  EC09  F030         	call	_lcd_write
  5012                           
  5013                           ;LCD_ModSauer.c: 180: break;
  5014  006548  D00F               	goto	l746
  5015  00654A                     l745:
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;LCD_ModSauer.c: 183: coluna_lcd++;
  5019  00654A  808D               	bsf	3981,0,c	;volatile
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;LCD_ModSauer.c: 184: linha_lcd=1;
  5023  00654C  0E01               	movlw	1
  5024  00654E  6F75               	movwf	_linha_lcd& (0+255),b
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;LCD_ModSauer.c: 185: lcd_write( c );
  5028  006550  51BC               	movf	lcd_putc@c& (0+255),w,b
  5029  006552  EC09  F030         	call	_lcd_write
  5030                           
  5031                           ;LCD_ModSauer.c: 188: break;
  5032  006556  D008               	goto	l746
  5033  006558                     l5149:
  5034                           
  5035                           ; BSR set to: 0
  5036  006558  51BC               	movf	lcd_putc@c& (0+255),w,b
  5037                           
  5038                           ; Switch size 1, requested type "space"
  5039                           ; Number of cases is 3, Range of values is 10 to 13
  5040                           ; switch strategies available:
  5041                           ; Name         Instructions Cycles
  5042                           ; simple_byte           10     6 (average)
  5043                           ;	Chosen strategy is simple_byte
  5044  00655A  0A0A               	xorlw	10	; case 10
  5045  00655C  E0E1               	bz	l5133
  5046  00655E  0A06               	xorlw	6	; case 12
  5047  006560  E0D2               	bz	l5121
  5048  006562  0A01               	xorlw	1	; case 13
  5049  006564  E0EB               	bz	l5137
  5050  006566  D7F1               	goto	l745
  5051  006568                     l746:
  5052  006568  0012               	return		;funcret
  5053  00656A                     __end_of_lcd_putc:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           intcon2	equ	0xFF1
  5063                           indf0	equ	0xFEF
  5064                           postinc0	equ	0xFEE
  5065                           plusw0	equ	0xFEB
  5066                           fsr0h	equ	0xFEA
  5067                           fsr0l	equ	0xFE9
  5068                           wreg	equ	0xFE8
  5069                           indf1	equ	0xFE7
  5070                           postinc1	equ	0xFE6
  5071                           postdec1	equ	0xFE5
  5072                           plusw1	equ	0xFE3
  5073                           fsr1h	equ	0xFE2
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           plusw2	equ	0xFDB
  5079                           fsr2h	equ	0xFDA
  5080                           fsr2l	equ	0xFD9
  5081                           status	equ	0xFD8
  5082                           
  5083 ;; *************** function _isdigit *****************
  5084 ;; Defined at:
  5085 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  c               1    wreg     unsigned char 
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  c               1    2[BANK0 ] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;		None               void
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0
  5094 ;; Tracked objects:
  5095 ;;		On entry : F/0
  5096 ;;		On exit  : F/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5099 ;;      Params:         0       0       0       0       0       0       0       0       0
  5100 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5101 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5102 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5103 ;;Total ram usage:        3 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    6
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_printf
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text7
  5114  005FB0                     __ptext7:
  5115                           	opt stack 0
  5116  005FB0                     _isdigit:
  5117                           	opt stack 23
  5118                           
  5119                           ;incstack = 0
  5120                           ;isdigit@c stored from wreg
  5121  005FB0  6FBA               	movwf	isdigit@c& (0+255),b
  5122                           
  5123                           ; BSR set to: 0
  5124  005FB2  6BB9               	clrf	_isdigit$1543& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127  005FB4  0E3A               	movlw	58
  5128  005FB6  61BA               	cpfslt	isdigit@c& (0+255),b
  5129  005FB8  D005               	goto	l5265
  5130                           
  5131                           ; BSR set to: 0
  5132  005FBA  0E2F               	movlw	47
  5133  005FBC  65BA               	cpfsgt	isdigit@c& (0+255),b
  5134  005FBE  D002               	goto	l5265
  5135                           
  5136                           ; BSR set to: 0
  5137  005FC0  0E01               	movlw	1
  5138  005FC2  6FB9               	movwf	_isdigit$1543& (0+255),b
  5139  005FC4                     l5265:
  5140                           
  5141                           ; BSR set to: 0
  5142  005FC4  C0B9  F0B8         	movff	_isdigit$1543,??_isdigit
  5143  005FC8  31B8               	rrcf	??_isdigit& (0+255),w,b
  5144                           
  5145                           ; BSR set to: 0
  5146  005FCA  0012               	return		;funcret
  5147  005FCC                     __end_of_isdigit:
  5148                           	opt stack 0
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           indf0	equ	0xFEF
  5158                           postinc0	equ	0xFEE
  5159                           plusw0	equ	0xFEB
  5160                           fsr0h	equ	0xFEA
  5161                           fsr0l	equ	0xFE9
  5162                           wreg	equ	0xFE8
  5163                           indf1	equ	0xFE7
  5164                           postinc1	equ	0xFE6
  5165                           postdec1	equ	0xFE5
  5166                           plusw1	equ	0xFE3
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _numero_para_ascii *****************
  5178 ;; Defined at:
  5179 ;;		line 93 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  numero          1    wreg     unsigned char 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  numero          1   17[BANK0 ] unsigned char 
  5184 ;;  temp1           2   18[BANK0 ] int 
  5185 ;;  temp2           2   15[BANK0 ] int 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;		None               void
  5188 ;; Registers used:
  5189 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : F/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5195 ;;      Params:         0       0       0       0       0       0       0       0       0
  5196 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5197 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5198 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5199 ;;Total ram usage:        6 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    7
  5202 ;; This function calls:
  5203 ;;		___awdiv
  5204 ;;		___lbdiv
  5205 ;;		___wmul
  5206 ;; This function is called by:
  5207 ;;		_main
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text8
  5212  0066BE                     __ptext8:
  5213                           	opt stack 0
  5214  0066BE                     _numero_para_ascii:
  5215                           	opt stack 23
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;incstack = 0
  5219                           ;numero_para_ascii@numero stored from wreg
  5220  0066BE  0100               	movlb	0	; () banked
  5221  0066C0  6FC9               	movwf	numero_para_ascii@numero& (0+255),b
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;ascii.c: 94: int temp1;
  5225                           ;ascii.c: 95: int temp2;
  5226                           ;ascii.c: 97: TXREG = '+';
  5227  0066C2  0E2B               	movlw	43
  5228  0066C4  6EAD               	movwf	4013,c	;volatile
  5229  0066C6                     l447:
  5230  0066C6  A2AC               	btfss	4012,1,c	;volatile
  5231  0066C8  D7FE               	goto	l447
  5232                           
  5233                           ;ascii.c: 100: temp1 = numero/100;
  5234  0066CA  0E64               	movlw	100
  5235  0066CC  0100               	movlb	0	; () banked
  5236  0066CE  6FB8               	movwf	___lbdiv@divisor& (0+255),b
  5237  0066D0  51C9               	movf	numero_para_ascii@numero& (0+255),w,b
  5238  0066D2  ECB0  F030         	call	___lbdiv
  5239  0066D6  6FCA               	movwf	numero_para_ascii@temp1& (0+255),b
  5240  0066D8  6BCB               	clrf	(numero_para_ascii@temp1+1)& (0+255),b
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;ascii.c: 101: TXREG = '0'+ temp1;
  5244  0066DA  51CA               	movf	numero_para_ascii@temp1& (0+255),w,b
  5245  0066DC  0F30               	addlw	48
  5246  0066DE  6EAD               	movwf	4013,c	;volatile
  5247  0066E0                     l450:
  5248                           
  5249                           ; BSR set to: 0
  5250  0066E0  A2AC               	btfss	4012,1,c	;volatile
  5251  0066E2  D7FE               	goto	l450
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;ascii.c: 104: temp2 = ((numero - temp1*100)/10);
  5255  0066E4  C0CA  F0B8         	movff	numero_para_ascii@temp1,___wmul@multiplier
  5256  0066E8  C0CB  F0B9         	movff	numero_para_ascii@temp1+1,___wmul@multiplier+1
  5257  0066EC  69BB               	setf	(___wmul@multiplicand+1)& (0+255),b
  5258  0066EE  0E9C               	movlw	156
  5259  0066F0  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  5260  0066F2  EC40  F030         	call	___wmul	;wreg free
  5261  0066F6  51C9               	movf	numero_para_ascii@numero& (0+255),w,b
  5262  0066F8  25B8               	addwf	?___wmul& (0+255),w,b
  5263  0066FA  6FBE               	movwf	___awdiv@dividend& (0+255),b
  5264  0066FC  0E00               	movlw	0
  5265  0066FE  21B9               	addwfc	(?___wmul+1)& (0+255),w,b
  5266  006700  6FBF               	movwf	(___awdiv@dividend+1)& (0+255),b
  5267  006702  6BC1               	clrf	(___awdiv@divisor+1)& (0+255),b
  5268  006704  0E0A               	movlw	10
  5269  006706  6FC0               	movwf	___awdiv@divisor& (0+255),b
  5270  006708  EC23  F033         	call	___awdiv	;wreg free
  5271  00670C  C0BE  F0C7         	movff	?___awdiv,numero_para_ascii@temp2
  5272  006710  C0BF  F0C8         	movff	?___awdiv+1,numero_para_ascii@temp2+1
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;ascii.c: 105: TXREG = '0'+ temp2;
  5276  006714  51C7               	movf	numero_para_ascii@temp2& (0+255),w,b
  5277  006716  0F30               	addlw	48
  5278  006718  6EAD               	movwf	4013,c	;volatile
  5279  00671A                     l453:
  5280                           
  5281                           ; BSR set to: 0
  5282  00671A  A2AC               	btfss	4012,1,c	;volatile
  5283  00671C  D7FE               	goto	l453
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;ascii.c: 108: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  5287  00671E  51CA               	movf	numero_para_ascii@temp1& (0+255),w,b
  5288  006720  0D9C               	mullw	156
  5289  006722  CFF3 F0C6          	movff	prodl,??_numero_para_ascii
  5290  006726  51C7               	movf	numero_para_ascii@temp2& (0+255),w,b
  5291  006728  0DF6               	mullw	246
  5292  00672A  50F3               	movf	prodl,w,c
  5293  00672C  25C6               	addwf	??_numero_para_ascii& (0+255),w,b
  5294  00672E  25C9               	addwf	numero_para_ascii@numero& (0+255),w,b
  5295  006730  0F30               	addlw	48
  5296  006732  6EAD               	movwf	4013,c	;volatile
  5297  006734                     l456:
  5298                           
  5299                           ; BSR set to: 0
  5300  006734  A2AC               	btfss	4012,1,c	;volatile
  5301  006736  D7FE               	goto	l456
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;ascii.c: 111: TXREG = '+';
  5305  006738  0E2B               	movlw	43
  5306  00673A  6EAD               	movwf	4013,c	;volatile
  5307  00673C                     l459:
  5308                           
  5309                           ; BSR set to: 0
  5310  00673C  B2AC               	btfsc	4012,1,c	;volatile
  5311                           
  5312                           ; BSR set to: 0
  5313  00673E  0012               	return		;funcret
  5314  006740  D7FD               	goto	l459
  5315  006742                     __end_of_numero_para_ascii:
  5316                           	opt stack 0
  5317                           tblptru	equ	0xFF8
  5318                           tblptrh	equ	0xFF7
  5319                           tblptrl	equ	0xFF6
  5320                           tablat	equ	0xFF5
  5321                           prodh	equ	0xFF4
  5322                           prodl	equ	0xFF3
  5323                           intcon	equ	0xFF2
  5324                           intcon2	equ	0xFF1
  5325                           indf0	equ	0xFEF
  5326                           postinc0	equ	0xFEE
  5327                           plusw0	equ	0xFEB
  5328                           fsr0h	equ	0xFEA
  5329                           fsr0l	equ	0xFE9
  5330                           wreg	equ	0xFE8
  5331                           indf1	equ	0xFE7
  5332                           postinc1	equ	0xFE6
  5333                           postdec1	equ	0xFE5
  5334                           plusw1	equ	0xFE3
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           plusw2	equ	0xFDB
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function ___lbdiv *****************
  5346 ;; Defined at:
  5347 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  dividend        1    wreg     unsigned char 
  5350 ;;  divisor         1    0[BANK0 ] unsigned char 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  dividend        1    1[BANK0 ] unsigned char 
  5353 ;;  quotient        1    3[BANK0 ] unsigned char 
  5354 ;;  counter         1    2[BANK0 ] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  1    wreg      unsigned char 
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0
  5359 ;; Tracked objects:
  5360 ;;		On entry : F/0
  5361 ;;		On exit  : F/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5364 ;;      Params:         0       1       0       0       0       0       0       0       0
  5365 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5367 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5368 ;;Total ram usage:        4 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    6
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_numero_para_ascii
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text9
  5379  006160                     __ptext9:
  5380                           	opt stack 0
  5381  006160                     ___lbdiv:
  5382                           	opt stack 23
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;incstack = 0
  5386                           ;___lbdiv@dividend stored from wreg
  5387  006160  6FB9               	movwf	___lbdiv@dividend& (0+255),b
  5388                           
  5389                           ; BSR set to: 0
  5390  006162  6BBB               	clrf	___lbdiv@quotient& (0+255),b
  5391                           
  5392                           ; BSR set to: 0
  5393  006164  51B8               	movf	___lbdiv@divisor& (0+255),w,b
  5394  006166  E014               	bz	l5335
  5395                           
  5396                           ; BSR set to: 0
  5397  006168  0E01               	movlw	1
  5398  00616A  6FBA               	movwf	___lbdiv@counter& (0+255),b
  5399  00616C  D003               	goto	l5323
  5400  00616E                     l5319:
  5401                           
  5402                           ; BSR set to: 0
  5403  00616E  90D8               	bcf	status,0,c
  5404  006170  37B8               	rlcf	___lbdiv@divisor& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407  006172  2BBA               	incf	___lbdiv@counter& (0+255),f,b
  5408  006174                     l5323:
  5409                           
  5410                           ; BSR set to: 0
  5411  006174  AFB8               	btfss	___lbdiv@divisor& (0+255),7,b
  5412  006176  D7FB               	goto	l5319
  5413  006178                     l5325:
  5414                           
  5415                           ; BSR set to: 0
  5416  006178  90D8               	bcf	status,0,c
  5417  00617A  37BB               	rlcf	___lbdiv@quotient& (0+255),f,b
  5418  00617C  51B8               	movf	___lbdiv@divisor& (0+255),w,b
  5419  00617E  5DB9               	subwf	___lbdiv@dividend& (0+255),w,b
  5420  006180  E303               	bnc	l5331
  5421                           
  5422                           ; BSR set to: 0
  5423  006182  51B8               	movf	___lbdiv@divisor& (0+255),w,b
  5424  006184  5FB9               	subwf	___lbdiv@dividend& (0+255),f,b
  5425                           
  5426                           ; BSR set to: 0
  5427  006186  81BB               	bsf	___lbdiv@quotient& (0+255),0,b
  5428  006188                     l5331:
  5429                           
  5430                           ; BSR set to: 0
  5431  006188  90D8               	bcf	status,0,c
  5432  00618A  33B8               	rrcf	___lbdiv@divisor& (0+255),f,b
  5433                           
  5434                           ; BSR set to: 0
  5435  00618C  2FBA               	decfsz	___lbdiv@counter& (0+255),f,b
  5436  00618E  D7F4               	goto	l5325
  5437  006190                     l5335:
  5438                           
  5439                           ; BSR set to: 0
  5440  006190  51BB               	movf	___lbdiv@quotient& (0+255),w,b
  5441                           
  5442                           ; BSR set to: 0
  5443  006192  0012               	return		;funcret
  5444  006194                     __end_of___lbdiv:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon2	equ	0xFF1
  5454                           indf0	equ	0xFEF
  5455                           postinc0	equ	0xFEE
  5456                           plusw0	equ	0xFEB
  5457                           fsr0h	equ	0xFEA
  5458                           fsr0l	equ	0xFE9
  5459                           wreg	equ	0xFE8
  5460                           indf1	equ	0xFE7
  5461                           postinc1	equ	0xFE6
  5462                           postdec1	equ	0xFE5
  5463                           plusw1	equ	0xFE3
  5464                           fsr1h	equ	0xFE2
  5465                           fsr1l	equ	0xFE1
  5466                           indf2	equ	0xFDF
  5467                           postinc2	equ	0xFDE
  5468                           postdec2	equ	0xFDD
  5469                           plusw2	equ	0xFDB
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function ___awdiv *****************
  5475 ;; Defined at:
  5476 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  dividend        2    6[BANK0 ] int 
  5479 ;;  divisor         2    8[BANK0 ] int 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  quotient        2   12[BANK0 ] int 
  5482 ;;  sign            1   11[BANK0 ] unsigned char 
  5483 ;;  counter         1   10[BANK0 ] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  2    6[BANK0 ] int 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0
  5488 ;; Tracked objects:
  5489 ;;		On entry : F/0
  5490 ;;		On exit  : F/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5493 ;;      Params:         0       4       0       0       0       0       0       0       0
  5494 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5496 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5497 ;;Total ram usage:        8 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    6
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_numero_para_ascii
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text10
  5508  006646                     __ptext10:
  5509                           	opt stack 0
  5510  006646                     ___awdiv:
  5511                           	opt stack 23
  5512                           
  5513                           ; BSR set to: 0
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;incstack = 0
  5517  006646  6BC3               	clrf	___awdiv@sign& (0+255),b
  5518                           
  5519                           ; BSR set to: 0
  5520  006648  AFC1               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5521  00664A  D006               	goto	l5277
  5522                           
  5523                           ; BSR set to: 0
  5524  00664C  6DC0               	negf	___awdiv@divisor& (0+255),b
  5525  00664E  1FC1               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5526  006650  B0D8               	btfsc	status,0,c
  5527  006652  2BC1               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5528                           
  5529                           ; BSR set to: 0
  5530  006654  0E01               	movlw	1
  5531  006656  6FC3               	movwf	___awdiv@sign& (0+255),b
  5532  006658                     l5277:
  5533                           
  5534                           ; BSR set to: 0
  5535  006658  AFBF               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5536  00665A  D006               	goto	l5283
  5537                           
  5538                           ; BSR set to: 0
  5539  00665C  6DBE               	negf	___awdiv@dividend& (0+255),b
  5540  00665E  1FBF               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5541  006660  B0D8               	btfsc	status,0,c
  5542  006662  2BBF               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5543                           
  5544                           ; BSR set to: 0
  5545  006664  0E01               	movlw	1
  5546  006666  1BC3               	xorwf	___awdiv@sign& (0+255),f,b
  5547  006668                     l5283:
  5548                           
  5549                           ; BSR set to: 0
  5550  006668  6BC4               	clrf	___awdiv@quotient& (0+255),b
  5551  00666A  6BC5               	clrf	(___awdiv@quotient+1)& (0+255),b
  5552                           
  5553                           ; BSR set to: 0
  5554  00666C  51C0               	movf	___awdiv@divisor& (0+255),w,b
  5555  00666E  11C1               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5556  006670  E01B               	bz	l5305
  5557                           
  5558                           ; BSR set to: 0
  5559  006672  0E01               	movlw	1
  5560  006674  6FC2               	movwf	___awdiv@counter& (0+255),b
  5561  006676  D004               	goto	l5291
  5562  006678                     l5289:
  5563                           
  5564                           ; BSR set to: 0
  5565  006678  90D8               	bcf	status,0,c
  5566  00667A  37C0               	rlcf	___awdiv@divisor& (0+255),f,b
  5567  00667C  37C1               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5568  00667E  2BC2               	incf	___awdiv@counter& (0+255),f,b
  5569  006680                     l5291:
  5570                           
  5571                           ; BSR set to: 0
  5572  006680  AFC1               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5573  006682  D7FA               	goto	l5289
  5574  006684                     l5293:
  5575                           
  5576                           ; BSR set to: 0
  5577  006684  90D8               	bcf	status,0,c
  5578  006686  37C4               	rlcf	___awdiv@quotient& (0+255),f,b
  5579  006688  37C5               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5580                           
  5581                           ; BSR set to: 0
  5582  00668A  51C0               	movf	___awdiv@divisor& (0+255),w,b
  5583  00668C  5DBE               	subwf	___awdiv@dividend& (0+255),w,b
  5584  00668E  51C1               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5585  006690  59BF               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5586  006692  E305               	bnc	l5301
  5587                           
  5588                           ; BSR set to: 0
  5589  006694  51C0               	movf	___awdiv@divisor& (0+255),w,b
  5590  006696  5FBE               	subwf	___awdiv@dividend& (0+255),f,b
  5591  006698  51C1               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5592  00669A  5BBF               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5593                           
  5594                           ; BSR set to: 0
  5595  00669C  81C4               	bsf	___awdiv@quotient& (0+255),0,b
  5596  00669E                     l5301:
  5597                           
  5598                           ; BSR set to: 0
  5599  00669E  90D8               	bcf	status,0,c
  5600  0066A0  33C1               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5601  0066A2  33C0               	rrcf	___awdiv@divisor& (0+255),f,b
  5602                           
  5603                           ; BSR set to: 0
  5604  0066A4  2FC2               	decfsz	___awdiv@counter& (0+255),f,b
  5605  0066A6  D7EE               	goto	l5293
  5606  0066A8                     l5305:
  5607                           
  5608                           ; BSR set to: 0
  5609  0066A8  51C3               	movf	___awdiv@sign& (0+255),w,b
  5610  0066AA  E004               	bz	l5309
  5611                           
  5612                           ; BSR set to: 0
  5613  0066AC  6DC4               	negf	___awdiv@quotient& (0+255),b
  5614  0066AE  1FC5               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5615  0066B0  B0D8               	btfsc	status,0,c
  5616  0066B2  2BC5               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5617  0066B4                     l5309:
  5618                           
  5619                           ; BSR set to: 0
  5620  0066B4  C0C4  F0BE         	movff	___awdiv@quotient,?___awdiv
  5621  0066B8  C0C5  F0BF         	movff	___awdiv@quotient+1,?___awdiv+1
  5622                           
  5623                           ; BSR set to: 0
  5624  0066BC  0012               	return		;funcret
  5625  0066BE                     __end_of___awdiv:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           intcon2	equ	0xFF1
  5635                           indf0	equ	0xFEF
  5636                           postinc0	equ	0xFEE
  5637                           plusw0	equ	0xFEB
  5638                           fsr0h	equ	0xFEA
  5639                           fsr0l	equ	0xFE9
  5640                           wreg	equ	0xFE8
  5641                           indf1	equ	0xFE7
  5642                           postinc1	equ	0xFE6
  5643                           postdec1	equ	0xFE5
  5644                           plusw1	equ	0xFE3
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           plusw2	equ	0xFDB
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _limpar_linha *****************
  5656 ;; Defined at:
  5657 ;;		line 22 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  linha           1    wreg     unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  linha           1    4[BANK0 ] unsigned char 
  5662 ;;  coluna_atual    1    5[BANK0 ] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;		None               void
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : F/0
  5669 ;;		On exit  : F/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5672 ;;      Params:         0       0       0       0       0       0       0       0       0
  5673 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5675 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5676 ;;Total ram usage:        2 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    8
  5679 ;; This function calls:
  5680 ;;		_lcd_gotoxy
  5681 ;;		_lcd_write
  5682 ;; This function is called by:
  5683 ;;		_main
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text11
  5688  006036                     __ptext11:
  5689                           	opt stack 0
  5690  006036                     _limpar_linha:
  5691                           	opt stack 22
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;incstack = 0
  5695                           ;limpar_linha@linha stored from wreg
  5696  006036  6FBC               	movwf	limpar_linha@linha& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;LCD_ModSauer.c: 23: unsigned char coluna_atual=1;
  5700  006038  0E01               	movlw	1
  5701  00603A  6FBD               	movwf	limpar_linha@coluna_atual& (0+255),b
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;LCD_ModSauer.c: 24: lcd_gotoxy(linha,coluna_atual);
  5705  00603C  6FB9               	movwf	lcd_gotoxy@coluna& (0+255),b
  5706  00603E  51BC               	movf	limpar_linha@linha& (0+255),w,b
  5707  006040  EC52  F031         	call	_lcd_gotoxy
  5708                           
  5709                           ;LCD_ModSauer.c: 26: while(coluna_atual<qtd_max_colunas_lcd){
  5710  006044  D005               	goto	l5677
  5711  006046                     l706:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;LCD_ModSauer.c: 27: LATEbits.LE0=1;
  5715  006046  808D               	bsf	3981,0,c	;volatile
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;LCD_ModSauer.c: 28: lcd_write(0x10);
  5719  006048  0E10               	movlw	16
  5720  00604A  EC09  F030         	call	_lcd_write
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;LCD_ModSauer.c: 29: coluna_atual++;}
  5724  00604E  2BBD               	incf	limpar_linha@coluna_atual& (0+255),f,b
  5725  006050                     l5677:
  5726                           
  5727                           ; BSR set to: 0
  5728  006050  5176               	movf	_qtd_max_colunas_lcd& (0+255),w,b
  5729  006052  5DBD               	subwf	limpar_linha@coluna_atual& (0+255),w,b
  5730  006054  B0D8               	btfsc	status,0,c
  5731                           
  5732                           ; BSR set to: 0
  5733  006056  0012               	return		;funcret
  5734  006058  D7F6               	goto	l706
  5735  00605A                     __end_of_limpar_linha:
  5736                           	opt stack 0
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           intcon2	equ	0xFF1
  5745                           indf0	equ	0xFEF
  5746                           postinc0	equ	0xFEE
  5747                           plusw0	equ	0xFEB
  5748                           fsr0h	equ	0xFEA
  5749                           fsr0l	equ	0xFE9
  5750                           wreg	equ	0xFE8
  5751                           indf1	equ	0xFE7
  5752                           postinc1	equ	0xFE6
  5753                           postdec1	equ	0xFE5
  5754                           plusw1	equ	0xFE3
  5755                           fsr1h	equ	0xFE2
  5756                           fsr1l	equ	0xFE1
  5757                           indf2	equ	0xFDF
  5758                           postinc2	equ	0xFDE
  5759                           postdec2	equ	0xFDD
  5760                           plusw2	equ	0xFDB
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _lcd_gotoxy *****************
  5766 ;; Defined at:
  5767 ;;		line 218 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  linha           1    wreg     unsigned char 
  5770 ;;  coluna          1    1[BANK0 ] unsigned char 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  linha           1    3[BANK0 ] unsigned char 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;		None               void
  5775 ;; Registers used:
  5776 ;;		wreg, status,2, status,0, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : F/0
  5779 ;;		On exit  : F/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5782 ;;      Params:         0       1       0       0       0       0       0       0       0
  5783 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5784 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5785 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5786 ;;Total ram usage:        3 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    7
  5789 ;; This function calls:
  5790 ;;		_lcd_write
  5791 ;; This function is called by:
  5792 ;;		_main
  5793 ;;		_limpar_linha
  5794 ;;		_lcd_putc
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           	psect	text12
  5799  0062A4                     __ptext12:
  5800                           	opt stack 0
  5801  0062A4                     _lcd_gotoxy:
  5802                           	opt stack 20
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;incstack = 0
  5806                           ;lcd_gotoxy@linha stored from wreg
  5807  0062A4  6FBB               	movwf	lcd_gotoxy@linha& (0+255),b
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;LCD_ModSauer.c: 222: linha_lcd_aux_posicao = linha;
  5811  0062A6  908D               	bcf	3981,0,c	;volatile
  5812                           
  5813                           ;LCD_ModSauer.c: 223: switch(linha){
  5814  0062A8  D018               	goto	l5111
  5815  0062AA                     l5101:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;LCD_ModSauer.c: 225: lcd_write(0x80+(coluna-1));
  5819  0062AA  51B9               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5820  0062AC  0F7F               	addlw	127
  5821  0062AE  EC09  F030         	call	_lcd_write
  5822                           
  5823                           ;LCD_ModSauer.c: 226: break;
  5824  0062B2  D01C               	goto	l764
  5825  0062B4                     l5103:
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;LCD_ModSauer.c: 229: lcd_write(0xC0+(coluna-1));
  5829  0062B4  51B9               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5830  0062B6  0FBF               	addlw	191
  5831  0062B8  EC09  F030         	call	_lcd_write
  5832                           
  5833                           ;LCD_ModSauer.c: 230: break;
  5834  0062BC  D017               	goto	l764
  5835  0062BE                     l5105:
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;LCD_ModSauer.c: 233: lcd_write(Linha_3+(coluna-1));
  5839  0062BE  51B9               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5840  0062C0  2571               	addwf	_Linha_3& (0+255),w,b
  5841  0062C2  6FBA               	movwf	??_lcd_gotoxy& (0+255),b
  5842  0062C4  05BA               	decf	??_lcd_gotoxy& (0+255),w,b
  5843  0062C6  EC09  F030         	call	_lcd_write
  5844                           
  5845                           ;LCD_ModSauer.c: 234: break;
  5846  0062CA  D010               	goto	l764
  5847  0062CC                     l5107:
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;LCD_ModSauer.c: 237: lcd_write(Linha_4+(coluna-1));
  5851  0062CC  51B9               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5852  0062CE  2572               	addwf	_Linha_4& (0+255),w,b
  5853  0062D0  6FBA               	movwf	??_lcd_gotoxy& (0+255),b
  5854  0062D2  05BA               	decf	??_lcd_gotoxy& (0+255),w,b
  5855  0062D4  EC09  F030         	call	_lcd_write
  5856                           
  5857                           ;LCD_ModSauer.c: 238: break;
  5858  0062D8  D009               	goto	l764
  5859  0062DA                     l5111:
  5860                           
  5861                           ; BSR set to: 0
  5862  0062DA  51BB               	movf	lcd_gotoxy@linha& (0+255),w,b
  5863                           
  5864                           ; Switch size 1, requested type "space"
  5865                           ; Number of cases is 4, Range of values is 1 to 4
  5866                           ; switch strategies available:
  5867                           ; Name         Instructions Cycles
  5868                           ; simple_byte           13     7 (average)
  5869                           ;	Chosen strategy is simple_byte
  5870  0062DC  0A01               	xorlw	1	; case 1
  5871  0062DE  E0E5               	bz	l5101
  5872  0062E0  0A03               	xorlw	3	; case 2
  5873  0062E2  E0E8               	bz	l5103
  5874  0062E4  0A01               	xorlw	1	; case 3
  5875  0062E6  E0EB               	bz	l5105
  5876  0062E8  0A07               	xorlw	7	; case 4
  5877  0062EA  E0F0               	bz	l5107
  5878  0062EC                     l764:
  5879                           
  5880                           ; BSR set to: 0
  5881  0062EC  0012               	return		;funcret
  5882  0062EE                     __end_of_lcd_gotoxy:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           intcon	equ	0xFF2
  5891                           intcon2	equ	0xFF1
  5892                           indf0	equ	0xFEF
  5893                           postinc0	equ	0xFEE
  5894                           plusw0	equ	0xFEB
  5895                           fsr0h	equ	0xFEA
  5896                           fsr0l	equ	0xFE9
  5897                           wreg	equ	0xFE8
  5898                           indf1	equ	0xFE7
  5899                           postinc1	equ	0xFE6
  5900                           postdec1	equ	0xFE5
  5901                           plusw1	equ	0xFE3
  5902                           fsr1h	equ	0xFE2
  5903                           fsr1l	equ	0xFE1
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           plusw2	equ	0xFDB
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _lcd_init *****************
  5913 ;; Defined at:
  5914 ;;		line 35 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  definir_tipo    1    wreg     unsigned char 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  definir_tipo    1    3[BANK0 ] unsigned char 
  5919 ;;  init_value      1    0        unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;		None               void
  5922 ;; Registers used:
  5923 ;;		wreg, status,2, status,0, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : F/0
  5926 ;;		On exit  : F/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0
  5930 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5931 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5932 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5933 ;;Total ram usage:        3 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    8
  5936 ;; This function calls:
  5937 ;;		_escrever_simbolo_fechadura
  5938 ;;		_lcd_clear
  5939 ;;		_lcd_write
  5940 ;; This function is called by:
  5941 ;;		_main
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text13
  5946  006906                     __ptext13:
  5947                           	opt stack 0
  5948  006906                     _lcd_init:
  5949                           	opt stack 22
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;incstack = 0
  5953                           ;lcd_init@definir_tipo_lcd stored from wreg
  5954  006906  6FBB               	movwf	lcd_init@definir_tipo_lcd& (0+255),b
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;LCD_ModSauer.c: 37: char init_value;
  5958                           ;LCD_ModSauer.c: 38: linha_lcd=1;
  5959  006908  0E01               	movlw	1
  5960  00690A  6F75               	movwf	_linha_lcd& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;LCD_ModSauer.c: 40: lcd_type = definir_tipo_lcd;
  5964  00690C  C0BB  F074         	movff	lcd_init@definir_tipo_lcd,_lcd_type
  5965                           
  5966                           ;LCD_ModSauer.c: 42: switch(lcd_type){
  5967  006910  D012               	goto	l5619
  5968  006912                     l5609:
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;LCD_ModSauer.c: 44: qtd_max_colunas_lcd=20;
  5972  006912  0E14               	movlw	20
  5973  006914  D001               	goto	L4
  5974  006916                     l5611:
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;LCD_ModSauer.c: 48: qtd_max_colunas_lcd=16;
  5978  006916  0E10               	movlw	16
  5979  006918                     L4:
  5980  006918  6F76               	movwf	_qtd_max_colunas_lcd& (0+255),b
  5981                           
  5982                           ;LCD_ModSauer.c: 49: break;
  5983  00691A  D015               	goto	l713
  5984  00691C                     l5613:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;LCD_ModSauer.c: 52: qtd_max_colunas_lcd=20;
  5988  00691C  0E14               	movlw	20
  5989  00691E  6F76               	movwf	_qtd_max_colunas_lcd& (0+255),b
  5990                           
  5991                           ;LCD_ModSauer.c: 53: Linha_3 = 0x94;
  5992  006920  0E94               	movlw	148
  5993  006922  6F71               	movwf	_Linha_3& (0+255),b
  5994                           
  5995                           ;LCD_ModSauer.c: 54: Linha_4 = 0xD4;
  5996  006924  0ED4               	movlw	212
  5997  006926  D005               	goto	L5
  5998  006928                     l5615:
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;LCD_ModSauer.c: 58: qtd_max_colunas_lcd=16;
  6002  006928  0E10               	movlw	16
  6003  00692A  6F76               	movwf	_qtd_max_colunas_lcd& (0+255),b
  6004                           
  6005                           ;LCD_ModSauer.c: 59: Linha_3 = 0x90;
  6006  00692C  0E90               	movlw	144
  6007  00692E  6F71               	movwf	_Linha_3& (0+255),b
  6008                           
  6009                           ;LCD_ModSauer.c: 60: Linha_4 = 0xD0;
  6010  006930  0ED0               	movlw	208
  6011  006932                     L5:
  6012  006932  6F72               	movwf	_Linha_4& (0+255),b
  6013                           
  6014                           ;LCD_ModSauer.c: 61: break;
  6015  006934  D008               	goto	l713
  6016  006936                     l5619:
  6017                           
  6018                           ; BSR set to: 0
  6019  006936  5174               	movf	_lcd_type& (0+255),w,b
  6020                           
  6021                           ; Switch size 1, requested type "space"
  6022                           ; Number of cases is 4, Range of values is 0 to 3
  6023                           ; switch strategies available:
  6024                           ; Name         Instructions Cycles
  6025                           ; simple_byte           13     7 (average)
  6026                           ;	Chosen strategy is simple_byte
  6027  006938  E0EE               	bz	l5611
  6028  00693A  0A01               	xorlw	1	; case 1
  6029  00693C  E0F5               	bz	l5615
  6030  00693E  0A03               	xorlw	3	; case 2
  6031  006940  E0E8               	bz	l5609
  6032  006942  0A01               	xorlw	1	; case 3
  6033  006944  E0EB               	bz	l5613
  6034  006946                     l713:
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;LCD_ModSauer.c: 63: LATEbits.LE0 = 0;
  6038  006946  908D               	bcf	3981,0,c	;volatile
  6039                           
  6040                           ;LCD_ModSauer.c: 64: LATEbits.LE1 = 0;
  6041  006948  928D               	bcf	3981,1,c	;volatile
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;LCD_ModSauer.c: 67: _delay((unsigned long)((15)*(16000000/4000.0)));
  6045  00694A  0E4E               	movlw	78
  6046  00694C  6FBA               	movwf	??_lcd_init& (0+255),b
  6047  00694E  0EEB               	movlw	235
  6048  006950                     u7907:
  6049  006950  2EE8               	decfsz	wreg,f,c
  6050  006952  D7FE               	goto	u7907
  6051  006954  2FBA               	decfsz	??_lcd_init& (0+255),f,b
  6052  006956  D7FC               	goto	u7907
  6053  006958  F000               	nop	
  6054                           
  6055                           ;LCD_ModSauer.c: 68: LATA = init_value;
  6056  00695A  0E03               	movlw	3
  6057  00695C  6E89               	movwf	3977,c	;volatile
  6058                           
  6059                           ;LCD_ModSauer.c: 69: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6060  00695E  828D               	bsf	3981,1,c	;volatile
  6061  006960  928D               	bcf	3981,1,c	;volatile
  6062                           
  6063                           ;LCD_ModSauer.c: 70: _delay((unsigned long)((5)*(16000000/4000.0)));
  6064  006962  0E1A               	movlw	26
  6065  006964  0100               	movlb	0	; () banked
  6066  006966  6FBA               	movwf	??_lcd_init& (0+255),b
  6067  006968  0EF8               	movlw	248
  6068  00696A                     u7917:
  6069  00696A  2EE8               	decfsz	wreg,f,c
  6070  00696C  D7FE               	goto	u7917
  6071  00696E  2FBA               	decfsz	??_lcd_init& (0+255),f,b
  6072  006970  D7FC               	goto	u7917
  6073  006972  D000               	nop2	
  6074                           
  6075                           ;LCD_ModSauer.c: 71: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6076  006974  828D               	bsf	3981,1,c	;volatile
  6077  006976  928D               	bcf	3981,1,c	;volatile
  6078                           
  6079                           ;LCD_ModSauer.c: 72: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6080  006978  0EC8               	movlw	200
  6081  00697A                     u7927:
  6082  00697A  F000               	nop	
  6083  00697C  2EE8               	decfsz	wreg,f,c
  6084  00697E  D7FD               	goto	u7927
  6085                           
  6086                           ;LCD_ModSauer.c: 73: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6087  006980  828D               	bsf	3981,1,c	;volatile
  6088  006982  928D               	bcf	3981,1,c	;volatile
  6089                           
  6090                           ;LCD_ModSauer.c: 74: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6091  006984  0EC8               	movlw	200
  6092  006986                     u7937:
  6093  006986  F000               	nop	
  6094  006988  2EE8               	decfsz	wreg,f,c
  6095  00698A  D7FD               	goto	u7937
  6096                           
  6097                           ;LCD_ModSauer.c: 75: LATA = 2;
  6098  00698C  0E02               	movlw	2
  6099  00698E  6E89               	movwf	3977,c	;volatile
  6100                           
  6101                           ;LCD_ModSauer.c: 76: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6102  006990  828D               	bsf	3981,1,c	;volatile
  6103  006992  928D               	bcf	3981,1,c	;volatile
  6104                           
  6105                           ;LCD_ModSauer.c: 78: lcd_write(0x28);
  6106  006994  0E28               	movlw	40
  6107  006996  EC09  F030         	call	_lcd_write
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;LCD_ModSauer.c: 79: lcd_write(0x0C);
  6111  00699A  0E0C               	movlw	12
  6112  00699C  EC09  F030         	call	_lcd_write
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;LCD_ModSauer.c: 80: lcd_clear();
  6116  0069A0  ECBD  F02F         	call	_lcd_clear	;wreg free
  6117                           
  6118                           ;LCD_ModSauer.c: 81: lcd_write(0x6);
  6119  0069A4  0E06               	movlw	6
  6120  0069A6  EC09  F030         	call	_lcd_write
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;LCD_ModSauer.c: 83: escrever_simbolo_fechadura();
  6124  0069AA  EFEC  F032         	goto	_escrever_simbolo_fechadura	;wreg free
  6125  0069AE                     __end_of_lcd_init:
  6126                           	opt stack 0
  6127                           tblptru	equ	0xFF8
  6128                           tblptrh	equ	0xFF7
  6129                           tblptrl	equ	0xFF6
  6130                           tablat	equ	0xFF5
  6131                           prodh	equ	0xFF4
  6132                           prodl	equ	0xFF3
  6133                           intcon	equ	0xFF2
  6134                           intcon2	equ	0xFF1
  6135                           indf0	equ	0xFEF
  6136                           postinc0	equ	0xFEE
  6137                           plusw0	equ	0xFEB
  6138                           fsr0h	equ	0xFEA
  6139                           fsr0l	equ	0xFE9
  6140                           wreg	equ	0xFE8
  6141                           indf1	equ	0xFE7
  6142                           postinc1	equ	0xFE6
  6143                           postdec1	equ	0xFE5
  6144                           plusw1	equ	0xFE3
  6145                           fsr1h	equ	0xFE2
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           plusw2	equ	0xFDB
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _lcd_clear *****************
  6156 ;; Defined at:
  6157 ;;		line 140 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;		None               void
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : F/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6171 ;;      Params:         0       0       0       0       0       0       0       0       0
  6172 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6173 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6174 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6175 ;;Total ram usage:        1 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    7
  6178 ;; This function calls:
  6179 ;;		_lcd_write
  6180 ;; This function is called by:
  6181 ;;		_lcd_init
  6182 ;;		_lcd_putc
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text14
  6187  005F7A                     __ptext14:
  6188                           	opt stack 0
  6189  005F7A                     _lcd_clear:
  6190                           	opt stack 20
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;LCD_ModSauer.c: 142: LATEbits.LE0 = 0;
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;incstack = 0
  6197  005F7A  908D               	bcf	3981,0,c	;volatile
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;LCD_ModSauer.c: 143: lcd_write(0x1);
  6201  005F7C  0E01               	movlw	1
  6202  005F7E  EC09  F030         	call	_lcd_write
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;LCD_ModSauer.c: 144: _delay((unsigned long)((2)*(16000000/4000.0)));
  6206  005F82  0E0B               	movlw	11
  6207  005F84  6FB9               	movwf	??_lcd_clear& (0+255),b
  6208  005F86  0E62               	movlw	98
  6209  005F88                     u7947:
  6210  005F88  2EE8               	decfsz	wreg,f,c
  6211  005F8A  D7FE               	goto	u7947
  6212  005F8C  2FB9               	decfsz	??_lcd_clear& (0+255),f,b
  6213  005F8E  D7FC               	goto	u7947
  6214  005F90  D000               	nop2	
  6215  005F92  0012               	return		;funcret
  6216  005F94                     __end_of_lcd_clear:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           intcon2	equ	0xFF1
  6226                           indf0	equ	0xFEF
  6227                           postinc0	equ	0xFEE
  6228                           plusw0	equ	0xFEB
  6229                           fsr0h	equ	0xFEA
  6230                           fsr0l	equ	0xFE9
  6231                           wreg	equ	0xFE8
  6232                           indf1	equ	0xFE7
  6233                           postinc1	equ	0xFE6
  6234                           postdec1	equ	0xFE5
  6235                           plusw1	equ	0xFE3
  6236                           fsr1h	equ	0xFE2
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           plusw2	equ	0xFDB
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _escrever_simbolo_fechadura *****************
  6247 ;; Defined at:
  6248 ;;		line 87 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;		None
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : F/0
  6259 ;;		On exit  : F/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6265 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6266 ;;Total ram usage:        0 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    7
  6269 ;; This function calls:
  6270 ;;		_lcd_write
  6271 ;; This function is called by:
  6272 ;;		_lcd_init
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text15
  6277  0065D8                     __ptext15:
  6278                           	opt stack 0
  6279  0065D8                     _escrever_simbolo_fechadura:
  6280                           	opt stack 22
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;LCD_ModSauer.c: 88: LATEbits.LE0=0;
  6284                           
  6285                           ;incstack = 0
  6286  0065D8  908D               	bcf	3981,0,c	;volatile
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;LCD_ModSauer.c: 89: lcd_write(0x40);
  6290  0065DA  0E40               	movlw	64
  6291  0065DC  EC09  F030         	call	_lcd_write
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;LCD_ModSauer.c: 90: LATEbits.LE0=1;
  6295  0065E0  808D               	bsf	3981,0,c	;volatile
  6296                           
  6297                           ;LCD_ModSauer.c: 92: lcd_write(0x0E);
  6298  0065E2  0E0E               	movlw	14
  6299  0065E4  EC09  F030         	call	_lcd_write
  6300                           
  6301                           ;LCD_ModSauer.c: 93: lcd_write(0x0A);
  6302  0065E8  0E0A               	movlw	10
  6303  0065EA  EC09  F030         	call	_lcd_write
  6304                           
  6305                           ;LCD_ModSauer.c: 94: lcd_write(0x0A);
  6306  0065EE  0E0A               	movlw	10
  6307  0065F0  EC09  F030         	call	_lcd_write
  6308                           
  6309                           ;LCD_ModSauer.c: 95: lcd_write(0x0A);
  6310  0065F4  0E0A               	movlw	10
  6311  0065F6  EC09  F030         	call	_lcd_write
  6312                           
  6313                           ;LCD_ModSauer.c: 96: lcd_write(0x1F);
  6314  0065FA  0E1F               	movlw	31
  6315  0065FC  EC09  F030         	call	_lcd_write
  6316                           
  6317                           ;LCD_ModSauer.c: 97: lcd_write(0x1B);
  6318  006600  0E1B               	movlw	27
  6319  006602  EC09  F030         	call	_lcd_write
  6320                           
  6321                           ;LCD_ModSauer.c: 98: lcd_write(0x1B);
  6322  006606  0E1B               	movlw	27
  6323  006608  EC09  F030         	call	_lcd_write
  6324                           
  6325                           ;LCD_ModSauer.c: 99: lcd_write(0x1F);
  6326  00660C  0E1F               	movlw	31
  6327  00660E  EC09  F030         	call	_lcd_write
  6328                           
  6329                           ;LCD_ModSauer.c: 102: lcd_write(0x03);
  6330  006612  0E03               	movlw	3
  6331  006614  EC09  F030         	call	_lcd_write
  6332                           
  6333                           ;LCD_ModSauer.c: 103: lcd_write(0x02);
  6334  006618  0E02               	movlw	2
  6335  00661A  EC09  F030         	call	_lcd_write
  6336                           
  6337                           ;LCD_ModSauer.c: 104: lcd_write(0x02);
  6338  00661E  0E02               	movlw	2
  6339  006620  EC09  F030         	call	_lcd_write
  6340                           
  6341                           ;LCD_ModSauer.c: 105: lcd_write(0x02);
  6342  006624  0E02               	movlw	2
  6343  006626  EC09  F030         	call	_lcd_write
  6344                           
  6345                           ;LCD_ModSauer.c: 106: lcd_write(0x1F);
  6346  00662A  0E1F               	movlw	31
  6347  00662C  EC09  F030         	call	_lcd_write
  6348                           
  6349                           ;LCD_ModSauer.c: 107: lcd_write(0x1B);
  6350  006630  0E1B               	movlw	27
  6351  006632  EC09  F030         	call	_lcd_write
  6352                           
  6353                           ;LCD_ModSauer.c: 108: lcd_write(0x1B);
  6354  006636  0E1B               	movlw	27
  6355  006638  EC09  F030         	call	_lcd_write
  6356                           
  6357                           ;LCD_ModSauer.c: 109: lcd_write(0x1F);
  6358  00663C  0E1F               	movlw	31
  6359  00663E  EC09  F030         	call	_lcd_write
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;LCD_ModSauer.c: 111: LATEbits.LE0=0;
  6363  006642  908D               	bcf	3981,0,c	;volatile
  6364                           
  6365                           ; BSR set to: 0
  6366  006644  0012               	return		;funcret
  6367  006646                     __end_of_escrever_simbolo_fechadura:
  6368                           	opt stack 0
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           intcon2	equ	0xFF1
  6377                           indf0	equ	0xFEF
  6378                           postinc0	equ	0xFEE
  6379                           plusw0	equ	0xFEB
  6380                           fsr0h	equ	0xFEA
  6381                           fsr0l	equ	0xFE9
  6382                           wreg	equ	0xFE8
  6383                           indf1	equ	0xFE7
  6384                           postinc1	equ	0xFE6
  6385                           postdec1	equ	0xFE5
  6386                           plusw1	equ	0xFE3
  6387                           fsr1h	equ	0xFE2
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           postdec2	equ	0xFDD
  6392                           plusw2	equ	0xFDB
  6393                           fsr2h	equ	0xFDA
  6394                           fsr2l	equ	0xFD9
  6395                           status	equ	0xFD8
  6396                           
  6397 ;; *************** function _lcd_write *****************
  6398 ;; Defined at:
  6399 ;;		line 124 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  c               1    wreg     unsigned char 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  c               1    0[BANK0 ] unsigned char 
  6404 ;; Return value:  Size  Location     Type
  6405 ;;		None               void
  6406 ;; Registers used:
  6407 ;;		wreg, status,2, status,0, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : F/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6413 ;;      Params:         0       0       0       0       0       0       0       0       0
  6414 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6416 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6417 ;;Total ram usage:        1 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    6
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_limpar_linha
  6424 ;;		_lcd_init
  6425 ;;		_escrever_simbolo_fechadura
  6426 ;;		_lcd_clear
  6427 ;;		_lcd_putc
  6428 ;;		_lcd_gotoxy
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text16
  6433  006012                     __ptext16:
  6434                           	opt stack 0
  6435  006012                     _lcd_write:
  6436                           	opt stack 21
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;incstack = 0
  6440                           ;lcd_write@c stored from wreg
  6441  006012  0100               	movlb	0	; () banked
  6442  006014  6FB8               	movwf	lcd_write@c& (0+255),b
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;LCD_ModSauer.c: 126: _delay((unsigned long)((40)*(16000000/4000000.0)));
  6446  006016  0E35               	movlw	53
  6447  006018                     u7957:
  6448  006018  2EE8               	decfsz	wreg,f,c
  6449  00601A  D7FE               	goto	u7957
  6450  00601C  F000               	nop	
  6451                           
  6452                           ;LCD_ModSauer.c: 127: LATA &= 0xF0;
  6453  00601E  0EF0               	movlw	240
  6454  006020  1689               	andwf	3977,f,c	;volatile
  6455                           
  6456                           ;LCD_ModSauer.c: 128: LATA |= ( ( c >> 4 ) & 0x0F );
  6457  006022  0100               	movlb	0	; () banked
  6458  006024  39B8               	swapf	lcd_write@c& (0+255),w,b
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;LCD_ModSauer.c: 129: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6462                           
  6463                           ; BSR set to: 0
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;LCD_ModSauer.c: 130: LATA &=0xF0;
  6467  006026  EC77  F030         	call	PL34	;call to abstracted procedure
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;LCD_ModSauer.c: 131: LATA |= ( c & 0x0F );
  6471  00602A  51B8               	movf	lcd_write@c& (0+255),w,b
  6472  00602C  0B0F               	andlw	15
  6473  00602E  1289               	iorwf	3977,f,c	;volatile
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;LCD_ModSauer.c: 132: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6477  006030  828D               	bsf	3981,1,c	;volatile
  6478                           
  6479                           ; BSR set to: 0
  6480  006032  928D               	bcf	3981,1,c	;volatile
  6481                           
  6482                           ; BSR set to: 0
  6483  006034  0012               	return		;funcret
  6484  006036                     __end_of_lcd_write:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           intcon	equ	0xFF2
  6493                           intcon2	equ	0xFF1
  6494                           indf0	equ	0xFEF
  6495                           postinc0	equ	0xFEE
  6496                           plusw0	equ	0xFEB
  6497                           fsr0h	equ	0xFEA
  6498                           fsr0l	equ	0xFE9
  6499                           wreg	equ	0xFE8
  6500                           indf1	equ	0xFE7
  6501                           postinc1	equ	0xFE6
  6502                           postdec1	equ	0xFE5
  6503                           plusw1	equ	0xFE3
  6504                           fsr1h	equ	0xFE2
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           postdec2	equ	0xFDD
  6509                           plusw2	equ	0xFDB
  6510                           fsr2h	equ	0xFDA
  6511                           fsr2l	equ	0xFD9
  6512                           status	equ	0xFD8
  6513                           
  6514 ;; *************** function _enviar_comando_at *****************
  6515 ;; Defined at:
  6516 ;;		line 68 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  comando         1    wreg     unsigned char 
  6519 ;;  parametro       1    2[BANK0 ] PTR unsigned char 
  6520 ;;		 -> parametro_configuracao_modulo_bt(17), 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  comando         1    3[BANK0 ] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : F/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6532 ;;      Params:         0       1       0       0       0       0       0       0       0
  6533 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6535 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6536 ;;Total ram usage:        2 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    7
  6539 ;; This function calls:
  6540 ;;		_enviar_caractere_serial
  6541 ;;		_enviar_string_serial
  6542 ;; This function is called by:
  6543 ;;		_main
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text17
  6548  006A8E                     __ptext17:
  6549                           	opt stack 0
  6550  006A8E                     _enviar_comando_at:
  6551                           	opt stack 23
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;incstack = 0
  6555                           ;enviar_comando_at@comando stored from wreg
  6556  006A8E  6FBB               	movwf	enviar_comando_at@comando& (0+255),b
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;serial.c: 69: enviar_string_serial("AT+");
  6560  006A90  0EE2               	movlw	low STR_31
  6561  006A92  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6562  006A94  0E7F               	movlw	high STR_31
  6563  006A96  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6564  006A98  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6565                           
  6566                           ;serial.c: 71: if(comando=='a') {
  6567  006A9C  0E61               	movlw	97
  6568  006A9E  0100               	movlb	0	; () banked
  6569  006AA0  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6570  006AA2  E10D               	bnz	l5691
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;serial.c: 72: enviar_string_serial("NAME");
  6574  006AA4  0ED3               	movlw	low STR_32
  6575  006AA6  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6576  006AA8  0E7F               	movlw	high STR_32
  6577  006AAA  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6578  006AAC  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6579                           
  6580                           ;serial.c: 73: enviar_string_serial(parametro);
  6581  006AB0  C0BA  F0B8         	movff	enviar_comando_at@parametro,enviar_string_serial@string_a_enviar
  6582  006AB4  0100               	movlb	0	; () banked
  6583  006AB6  6BB9               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6584  006AB8  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6585                           
  6586                           ;serial.c: 74: }
  6587  006ABC  D06E               	goto	l671
  6588  006ABE                     l5691:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;serial.c: 76: else if(comando=='b'){
  6592  006ABE  0E62               	movlw	98
  6593  006AC0  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6594  006AC2  E10D               	bnz	l5695
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;serial.c: 77: enviar_string_serial("BAUD");
  6598  006AC4  0EC9               	movlw	low STR_33
  6599  006AC6  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6600  006AC8  0E7F               	movlw	high STR_33
  6601  006ACA  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6602  006ACC  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6603                           
  6604                           ;serial.c: 78: enviar_string_serial(parametro);
  6605  006AD0  C0BA  F0B8         	movff	enviar_comando_at@parametro,enviar_string_serial@string_a_enviar
  6606  006AD4  0100               	movlb	0	; () banked
  6607  006AD6  6BB9               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6608  006AD8  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6609                           
  6610                           ;serial.c: 79: }
  6611  006ADC  D05E               	goto	l671
  6612  006ADE                     l5695:
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;serial.c: 81: else if(comando=='c'){
  6616  006ADE  0E63               	movlw	99
  6617  006AE0  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6618  006AE2  E110               	bnz	l5701
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;serial.c: 82: enviar_string_serial("ROLE");
  6622  006AE4  0ECE               	movlw	low STR_34
  6623  006AE6  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6624  006AE8  0E7F               	movlw	high STR_34
  6625  006AEA  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6626  006AEC  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6627                           
  6628                           ;serial.c: 83: enviar_string_serial(parametro);
  6629  006AF0  C0BA  F0B8         	movff	enviar_comando_at@parametro,enviar_string_serial@string_a_enviar
  6630  006AF4  0100               	movlb	0	; () banked
  6631  006AF6  6BB9               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6632  006AF8  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6633                           
  6634                           ;serial.c: 84: enviar_caractere_serial('?');
  6635  006AFC  0E3F               	movlw	63
  6636  006AFE  EC99  F02F         	call	_enviar_caractere_serial
  6637                           
  6638                           ;serial.c: 85: }
  6639  006B02  D04B               	goto	l671
  6640  006B04                     l5701:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;serial.c: 87: else if(comando == 'd'){
  6644  006B04  0E64               	movlw	100
  6645  006B06  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6646  006B08  E107               	bnz	l5705
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;serial.c: 88: enviar_string_serial("ADDR?");
  6650  006B0A  0E99               	movlw	low STR_35
  6651  006B0C  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6652  006B0E  0E7F               	movlw	high STR_35
  6653  006B10  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6654  006B12  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6655                           
  6656                           ;serial.c: 89: }
  6657  006B16  D041               	goto	l671
  6658  006B18                     l5705:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;serial.c: 91: else if( comando=='e' ){
  6662  006B18  0E65               	movlw	101
  6663  006B1A  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6664  006B1C  E107               	bnz	l5709
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;serial.c: 92: enviar_string_serial("DISC?");}
  6668  006B1E  0E8D               	movlw	low STR_36
  6669  006B20  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6670  006B22  0E7F               	movlw	high STR_36
  6671  006B24  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6672  006B26  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6673  006B2A  D037               	goto	l671
  6674  006B2C                     l5709:
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;serial.c: 94: else if(comando=='f'){
  6678  006B2C  0E66               	movlw	102
  6679  006B2E  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6680  006B30  E107               	bnz	l5713
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;serial.c: 95: enviar_string_serial("RESET");}
  6684  006B32  0EA5               	movlw	low STR_37
  6685  006B34  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6686  006B36  0E7F               	movlw	high STR_37
  6687  006B38  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6688  006B3A  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6689  006B3E  D02D               	goto	l671
  6690  006B40                     l5713:
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;serial.c: 97: else if(comando=='g'){
  6694  006B40  0E67               	movlw	103
  6695  006B42  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6696  006B44  E107               	bnz	l5717
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;serial.c: 98: enviar_string_serial("START");}
  6700  006B46  0EAB               	movlw	low STR_38
  6701  006B48  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6702  006B4A  0E7F               	movlw	high STR_38
  6703  006B4C  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6704  006B4E  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6705  006B52  D023               	goto	l671
  6706  006B54                     l5717:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;serial.c: 100: else if( comando == 'h' ){
  6710  006B54  0E68               	movlw	104
  6711  006B56  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6712  006B58  E107               	bnz	l5721
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;serial.c: 101: enviar_string_serial("RADD?");}
  6716  006B5A  0E93               	movlw	low STR_39
  6717  006B5C  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6718  006B5E  0E7F               	movlw	high STR_39
  6719  006B60  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6720  006B62  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6721  006B66  D019               	goto	l671
  6722  006B68                     l5721:
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;serial.c: 103: else if( comando=='i' ){
  6726  006B68  0E69               	movlw	105
  6727  006B6A  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6728  006B6C  E107               	bnz	l5725
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;serial.c: 104: enviar_string_serial("SLEEP");}
  6732  006B6E  0E9F               	movlw	low STR_40
  6733  006B70  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6734  006B72  0E7F               	movlw	high STR_40
  6735  006B74  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6736  006B76  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6737  006B7A  D00F               	goto	l671
  6738  006B7C                     l5725:
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;serial.c: 106: else if(comando == 'k'){
  6742  006B7C  0E6B               	movlw	107
  6743  006B7E  19BB               	xorwf	enviar_comando_at@comando& (0+255),w,b
  6744  006B80  E10C               	bnz	l671
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;serial.c: 107: enviar_string_serial("CON");
  6748  006B82  0EE6               	movlw	low STR_41
  6749  006B84  6FB8               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  6750  006B86  0E7F               	movlw	high STR_41
  6751  006B88  6FB9               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6752  006B8A  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6753                           
  6754                           ;serial.c: 108: enviar_string_serial(parametro);}
  6755  006B8E  C0BA  F0B8         	movff	enviar_comando_at@parametro,enviar_string_serial@string_a_enviar
  6756  006B92  0100               	movlb	0	; () banked
  6757  006B94  6BB9               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  6758  006B96  ECF1  F031         	call	_enviar_string_serial	;wreg free
  6759  006B9A                     l671:
  6760  006B9A  0012               	return		;funcret
  6761  006B9C                     __end_of_enviar_comando_at:
  6762                           	opt stack 0
  6763                           tblptru	equ	0xFF8
  6764                           tblptrh	equ	0xFF7
  6765                           tblptrl	equ	0xFF6
  6766                           tablat	equ	0xFF5
  6767                           prodh	equ	0xFF4
  6768                           prodl	equ	0xFF3
  6769                           intcon	equ	0xFF2
  6770                           intcon2	equ	0xFF1
  6771                           indf0	equ	0xFEF
  6772                           postinc0	equ	0xFEE
  6773                           plusw0	equ	0xFEB
  6774                           fsr0h	equ	0xFEA
  6775                           fsr0l	equ	0xFE9
  6776                           wreg	equ	0xFE8
  6777                           indf1	equ	0xFE7
  6778                           postinc1	equ	0xFE6
  6779                           postdec1	equ	0xFE5
  6780                           plusw1	equ	0xFE3
  6781                           fsr1h	equ	0xFE2
  6782                           fsr1l	equ	0xFE1
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           plusw2	equ	0xFDB
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _enviar_string_serial *****************
  6792 ;; Defined at:
  6793 ;;		line 54 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  string_a_env    2    0[BANK0 ] PTR const unsigned char 
  6796 ;;		 -> STR_41(4), STR_40(6), STR_39(6), STR_38(6), 
  6797 ;;		 -> STR_37(6), STR_36(6), STR_35(6), STR_34(5), 
  6798 ;;		 -> STR_33(5), STR_32(5), STR_31(4), STR_30(3), 
  6799 ;;		 -> STR_27(17), STR_26(19), STR_25(10), STR_24(9), 
  6800 ;;		 -> STR_23(7), STR_22(6), STR_21(13), STR_20(6), 
  6801 ;;		 -> STR_19(6), STR_18(3), STR_17(3), STR_6(6), 
  6802 ;;		 -> parametro_configuracao_modulo_bt(17), STR_5(10), STR_4(4), STR_3(5), 
  6803 ;;		 -> senha(288), buffer_serial(80), 
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;		None
  6806 ;; Return value:  Size  Location     Type
  6807 ;;		None               void
  6808 ;; Registers used:
  6809 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  6810 ;; Tracked objects:
  6811 ;;		On entry : F/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6815 ;;      Params:         0       2       0       0       0       0       0       0       0
  6816 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6818 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6819 ;;Total ram usage:        2 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    6
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_main
  6826 ;;		_enviar_comando_at
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text18
  6831  0063E2                     __ptext18:
  6832                           	opt stack 0
  6833  0063E2                     _enviar_string_serial:
  6834                           	opt stack 24
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;serial.c: 55: while(*string_a_enviar != (0)){
  6838                           
  6839                           ;incstack = 0
  6840  0063E2  D016               	goto	l5209
  6841  0063E4                     l5205:
  6842                           
  6843                           ;serial.c: 56: TXREG = *string_a_enviar;
  6844  0063E4  C0B8  FFF6         	movff	enviar_string_serial@string_a_enviar,tblptrl
  6845  0063E8  C0B9  FFF7         	movff	enviar_string_serial@string_a_enviar+1,tblptrh
  6846  0063EC  6AF8               	clrf	tblptru,c
  6847  0063EE  0E07               	movlw	(high __ramtop+-1)
  6848  0063F0  64F7               	cpfsgt	tblptrh,c
  6849  0063F2  D003               	bra	u5867
  6850  0063F4  0008               	tblrd		*
  6851  0063F6  50F5               	movf	tablat,w,c
  6852  0063F8  D005               	bra	u5860
  6853  0063FA                     u5867:
  6854  0063FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  6855  0063FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  6856  006402  50EF               	movf	indf0,w,c
  6857  006404                     u5860:
  6858  006404  6EAD               	movwf	4013,c	;volatile
  6859  006406                     l642:
  6860  006406  A2AC               	btfss	4012,1,c	;volatile
  6861  006408  D7FE               	goto	l642
  6862                           
  6863                           ;serial.c: 58: string_a_enviar++;}
  6864  00640A  0100               	movlb	0	; () banked
  6865  00640C  4BB8               	infsnz	enviar_string_serial@string_a_enviar& (0+255),f,b
  6866  00640E  2BB9               	incf	(enviar_string_serial@string_a_enviar+1)& (0+255),f,b
  6867  006410                     l5209:
  6868                           
  6869                           ; BSR set to: 0
  6870  006410  C0B8  FFF6         	movff	enviar_string_serial@string_a_enviar,tblptrl
  6871  006414  C0B9  FFF7         	movff	enviar_string_serial@string_a_enviar+1,tblptrh
  6872  006418  6AF8               	clrf	tblptru,c
  6873  00641A  0E07               	movlw	(high __ramtop+-1)
  6874  00641C  64F7               	cpfsgt	tblptrh,c
  6875  00641E  D003               	bra	u5887
  6876  006420  0008               	tblrd		*
  6877  006422  50F5               	movf	tablat,w,c
  6878  006424  D005               	bra	u5880
  6879  006426                     u5887:
  6880  006426  CFF6 FFE9          	movff	tblptrl,fsr0l
  6881  00642A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6882  00642E  50EF               	movf	indf0,w,c
  6883  006430                     u5880:
  6884  006430  0900               	iorlw	0
  6885  006432  B4D8               	btfsc	status,2,c
  6886  006434  0012               	return		;funcret
  6887  006436  D7D6               	goto	l5205
  6888  006438                     __end_of_enviar_string_serial:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon2	equ	0xFF1
  6898                           indf0	equ	0xFEF
  6899                           postinc0	equ	0xFEE
  6900                           plusw0	equ	0xFEB
  6901                           fsr0h	equ	0xFEA
  6902                           fsr0l	equ	0xFE9
  6903                           wreg	equ	0xFE8
  6904                           indf1	equ	0xFE7
  6905                           postinc1	equ	0xFE6
  6906                           postdec1	equ	0xFE5
  6907                           plusw1	equ	0xFE3
  6908                           fsr1h	equ	0xFE2
  6909                           fsr1l	equ	0xFE1
  6910                           indf2	equ	0xFDF
  6911                           postinc2	equ	0xFDE
  6912                           postdec2	equ	0xFDD
  6913                           plusw2	equ	0xFDB
  6914                           fsr2h	equ	0xFDA
  6915                           fsr2l	equ	0xFD9
  6916                           status	equ	0xFD8
  6917                           
  6918 ;; *************** function _enviar_caractere_serial *****************
  6919 ;; Defined at:
  6920 ;;		line 49 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  carater_a_en    1    wreg     unsigned char 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  carater_a_en    1    0[BANK0 ] unsigned char 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;		None               void
  6927 ;; Registers used:
  6928 ;;		wreg
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0
  6935 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6937 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6938 ;;Total ram usage:        1 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:    6
  6941 ;; This function calls:
  6942 ;;		Nothing
  6943 ;; This function is called by:
  6944 ;;		_main
  6945 ;;		_enviar_comando_at
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text19
  6950  005F32                     __ptext19:
  6951                           	opt stack 0
  6952  005F32                     _enviar_caractere_serial:
  6953                           	opt stack 23
  6954                           
  6955                           ;incstack = 0
  6956                           ;enviar_caractere_serial@carater_a_enviar stored from wreg
  6957  005F32  0100               	movlb	0	; () banked
  6958  005F34  6FB8               	movwf	enviar_caractere_serial@carater_a_enviar& (0+255),b
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;serial.c: 50: TXREG = carater_a_enviar;
  6962  005F36  C0B8  FFAD         	movff	enviar_caractere_serial@carater_a_enviar,4013	;volatile
  6963  005F3A                     l634:
  6964  005F3A  B2AC               	btfsc	4012,1,c	;volatile
  6965  005F3C  0012               	return		;funcret
  6966  005F3E  D7FD               	goto	l634
  6967  005F40                     __end_of_enviar_caractere_serial:
  6968                           	opt stack 0
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon	equ	0xFF2
  6976                           intcon2	equ	0xFF1
  6977                           indf0	equ	0xFEF
  6978                           postinc0	equ	0xFEE
  6979                           plusw0	equ	0xFEB
  6980                           fsr0h	equ	0xFEA
  6981                           fsr0l	equ	0xFE9
  6982                           wreg	equ	0xFE8
  6983                           indf1	equ	0xFE7
  6984                           postinc1	equ	0xFE6
  6985                           postdec1	equ	0xFE5
  6986                           plusw1	equ	0xFE3
  6987                           fsr1h	equ	0xFE2
  6988                           fsr1l	equ	0xFE1
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           plusw2	equ	0xFDB
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _eeprom_config_inicial *****************
  6998 ;; Defined at:
  6999 ;;		line 29 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  i               1    4[BANK0 ] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0
  7014 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7016 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7017 ;;Total ram usage:        1 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    7
  7020 ;; This function calls:
  7021 ;;		_Busy_eep
  7022 ;;		_Write_b_eep
  7023 ;; This function is called by:
  7024 ;;		_main
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text20
  7029  006742                     __ptext20:
  7030                           	opt stack 0
  7031  006742                     _eeprom_config_inicial:
  7032                           	opt stack 23
  7033                           
  7034                           ;eeprom_interna.c: 30: unsigned char i;
  7035                           ;eeprom_interna.c: 32: for(i=0;i<10;i++){
  7036                           
  7037                           ;incstack = 0
  7038  006742  0100               	movlb	0	; () banked
  7039  006744  6BBC               	clrf	eeprom_config_inicial@i& (0+255),b
  7040  006746                     l5487:
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;eeprom_interna.c: 33: (Busy_eep(), Write_b_eep(i,('0'+i)));
  7044  006746  EC7F  F02F         	call	_Busy_eep	;wreg free
  7045  00674A  C0BC  F0B8         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  7046  00674E  0100               	movlb	0	; () banked
  7047  006750  6BB9               	clrf	(Write_b_eep@badd+1)& (0+255),b
  7048  006752  51BC               	movf	eeprom_config_inicial@i& (0+255),w,b
  7049  006754  0F30               	addlw	48
  7050  006756  6FBA               	movwf	Write_b_eep@bdat& (0+255),b
  7051  006758  EC96  F030         	call	_Write_b_eep	;wreg free
  7052                           
  7053                           ;eeprom_interna.c: 34: (Busy_eep(), Write_b_eep(16+i,('a'+i)));
  7054  00675C  EC7F  F02F         	call	_Busy_eep	;wreg free
  7055  006760  D82C               	call	PL30	;call to abstracted procedure
  7056  006762  51BC               	movf	eeprom_config_inicial@i& (0+255),w,b
  7057  006764  0F61               	addlw	97
  7058  006766  6FBA               	movwf	Write_b_eep@bdat& (0+255),b
  7059  006768  EC96  F030         	call	_Write_b_eep	;wreg free
  7060  00676C  0100               	movlb	0	; () banked
  7061  00676E  2BBC               	incf	eeprom_config_inicial@i& (0+255),f,b
  7062                           
  7063                           ; BSR set to: 0
  7064  006770  0E09               	movlw	9
  7065  006772  65BC               	cpfsgt	eeprom_config_inicial@i& (0+255),b
  7066  006774  D7E8               	goto	l5487
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;eeprom_interna.c: 36: }
  7070                           ;eeprom_interna.c: 37: (Busy_eep(), Write_b_eep(i,0));
  7071  006776  EC7F  F02F         	call	_Busy_eep	;wreg free
  7072  00677A  C0BC  F0B8         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  7073  00677E  0100               	movlb	0	; () banked
  7074  006780  6BB9               	clrf	(Write_b_eep@badd+1)& (0+255),b
  7075  006782  6BBA               	clrf	Write_b_eep@bdat& (0+255),b
  7076  006784  EC96  F030         	call	_Write_b_eep	;wreg free
  7077                           
  7078                           ;eeprom_interna.c: 38: (Busy_eep(), Write_b_eep(16+i,0));
  7079  006788  EC7F  F02F         	call	_Busy_eep	;wreg free
  7080  00678C  D816               	call	PL30	;call to abstracted procedure
  7081  00678E  6BBA               	clrf	Write_b_eep@bdat& (0+255),b
  7082  006790  EC96  F030         	call	_Write_b_eep	;wreg free
  7083                           
  7084                           ;eeprom_interna.c: 40: (Busy_eep(), Write_b_eep(16-1,255));
  7085  006794  EC7F  F02F         	call	_Busy_eep	;wreg free
  7086  006798  0100               	movlb	0	; () banked
  7087  00679A  6BB9               	clrf	(Write_b_eep@badd+1)& (0+255),b
  7088  00679C  0E0F               	movlw	15
  7089  00679E  6FB8               	movwf	Write_b_eep@badd& (0+255),b
  7090  0067A0  69BA               	setf	Write_b_eep@bdat& (0+255),b
  7091  0067A2  EC96  F030         	call	_Write_b_eep	;wreg free
  7092                           
  7093                           ;eeprom_interna.c: 41: (Busy_eep(), Write_b_eep(((16*2)-1),0b11111100));
  7094  0067A6  EC7F  F02F         	call	_Busy_eep	;wreg free
  7095  0067AA  0100               	movlb	0	; () banked
  7096  0067AC  6BB9               	clrf	(Write_b_eep@badd+1)& (0+255),b
  7097  0067AE  0E1F               	movlw	31
  7098  0067B0  6FB8               	movwf	Write_b_eep@badd& (0+255),b
  7099  0067B2  0EFC               	movlw	252
  7100  0067B4  6FBA               	movwf	Write_b_eep@bdat& (0+255),b
  7101  0067B6  EF96  F030         	goto	_Write_b_eep	;wreg free
  7102  0067BA                     __end_of_eeprom_config_inicial:
  7103                           	opt stack 0
  7104  0067BA                     PL30:
  7105                           	opt stack 23
  7106  0067BA  0E10               	movlw	16
  7107  0067BC  0100               	movlb	0	; () banked
  7108  0067BE  25BC               	addwf	eeprom_config_inicial@i& (0+255),w,b
  7109  0067C0  6FB8               	movwf	Write_b_eep@badd& (0+255),b
  7110  0067C2  6BB9               	clrf	(Write_b_eep@badd+1)& (0+255),b
  7111  0067C4  0E00               	movlw	0
  7112  0067C6  23B9               	addwfc	(Write_b_eep@badd+1)& (0+255),f,b
  7113  0067C8  0C00               	retlw	0
  7114  0067CA                     __end_ofPL30:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           intcon2	equ	0xFF1
  7124                           indf0	equ	0xFEF
  7125                           postinc0	equ	0xFEE
  7126                           plusw0	equ	0xFEB
  7127                           fsr0h	equ	0xFEA
  7128                           fsr0l	equ	0xFE9
  7129                           wreg	equ	0xFE8
  7130                           indf1	equ	0xFE7
  7131                           postinc1	equ	0xFE6
  7132                           postdec1	equ	0xFE5
  7133                           plusw1	equ	0xFE3
  7134                           fsr1h	equ	0xFE2
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           plusw2	equ	0xFDB
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function _Write_b_eep *****************
  7145 ;; Defined at:
  7146 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\write_B.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  badd            2    0[BANK0 ] unsigned int 
  7149 ;;  bdat            1    2[BANK0 ] unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;		None               void
  7154 ;; Registers used:
  7155 ;;		wreg, status,2
  7156 ;; Tracked objects:
  7157 ;;		On entry : F/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7161 ;;      Params:         0       3       0       0       0       0       0       0       0
  7162 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7164 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7165 ;;Total ram usage:        4 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    6
  7168 ;; This function calls:
  7169 ;;		Nothing
  7170 ;; This function is called by:
  7171 ;;		_main
  7172 ;;		_eeprom_config_inicial
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           	psect	text21
  7177  00612C                     __ptext21:
  7178                           	opt stack 0
  7179  00612C                     _Write_b_eep:
  7180                           	opt stack 23
  7181                           
  7182                           ; BSR set to: 0
  7183                           
  7184                           ;incstack = 0
  7185  00612C  C0B8  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  7186  006130  C0BA  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  7187  006134  9EA6               	bcf	4006,7,c	;volatile
  7188  006136  9CA6               	bcf	4006,6,c	;volatile
  7189  006138  84A6               	bsf	4006,2,c	;volatile
  7190                           
  7191                           ; BSR set to: 0
  7192  00613A  0E00               	movlw	0
  7193  00613C  BEF2               	btfsc	intcon,7,c	;volatile
  7194  00613E  0E01               	movlw	1
  7195  006140  6FBB               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
  7196                           
  7197                           ; BSR set to: 0
  7198  006142  9EF2               	bcf	intcon,7,c	;volatile
  7199                           
  7200                           ; BSR set to: 0
  7201  006144  0E55               	movlw	85
  7202  006146  6EA7               	movwf	4007,c	;volatile
  7203                           
  7204                           ; BSR set to: 0
  7205  006148  0EAA               	movlw	170
  7206  00614A  6EA7               	movwf	4007,c	;volatile
  7207                           
  7208                           ; BSR set to: 0
  7209  00614C  82A6               	bsf	4006,1,c	;volatile
  7210  00614E                     l867:
  7211                           
  7212                           ; BSR set to: 0
  7213  00614E  B2A6               	btfsc	4006,1,c	;volatile
  7214  006150  D7FE               	goto	l867
  7215                           
  7216                           ; BSR set to: 0
  7217  006152  B1BB               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
  7218  006154  D002               	bra	u5965
  7219  006156  9EF2               	bcf	intcon,7,c	;volatile
  7220  006158  D001               	bra	u5966
  7221  00615A                     u5965:
  7222  00615A  8EF2               	bsf	intcon,7,c	;volatile
  7223  00615C                     u5966:
  7224  00615C  94A6               	bcf	4006,2,c	;volatile
  7225  00615E  0012               	return		;funcret
  7226  006160                     __end_of_Write_b_eep:
  7227                           	opt stack 0
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           intcon2	equ	0xFF1
  7236                           indf0	equ	0xFEF
  7237                           postinc0	equ	0xFEE
  7238                           plusw0	equ	0xFEB
  7239                           fsr0h	equ	0xFEA
  7240                           fsr0l	equ	0xFE9
  7241                           wreg	equ	0xFE8
  7242                           indf1	equ	0xFE7
  7243                           postinc1	equ	0xFE6
  7244                           postdec1	equ	0xFE5
  7245                           plusw1	equ	0xFE3
  7246                           fsr1h	equ	0xFE2
  7247                           fsr1l	equ	0xFE1
  7248                           indf2	equ	0xFDF
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           plusw2	equ	0xFDB
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           
  7256 ;; *************** function _Busy_eep *****************
  7257 ;; Defined at:
  7258 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\busy_eep.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;		None               void
  7265 ;; Registers used:
  7266 ;;		None
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7272 ;;      Params:         0       0       0       0       0       0       0       0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7275 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7276 ;;Total ram usage:        0 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    6
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		_main
  7283 ;;		_eeprom_config_inicial
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text22
  7288  005EFE                     __ptext22:
  7289                           	opt stack 0
  7290  005EFE                     _Busy_eep:
  7291                           	opt stack 23
  7292  005EFE                     l840:
  7293  005EFE  A2A6               	btfss	4006,1,c	;volatile
  7294  005F00  0012               	return		;funcret
  7295  005F02  D7FD               	goto	l840
  7296  005F04                     __end_of_Busy_eep:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           intcon	equ	0xFF2
  7305                           intcon2	equ	0xFF1
  7306                           indf0	equ	0xFEF
  7307                           postinc0	equ	0xFEE
  7308                           plusw0	equ	0xFEB
  7309                           fsr0h	equ	0xFEA
  7310                           fsr0l	equ	0xFE9
  7311                           wreg	equ	0xFE8
  7312                           indf1	equ	0xFE7
  7313                           postinc1	equ	0xFE6
  7314                           postdec1	equ	0xFE5
  7315                           plusw1	equ	0xFE3
  7316                           fsr1h	equ	0xFE2
  7317                           fsr1l	equ	0xFE1
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           plusw2	equ	0xFDB
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function _delay_ms *****************
  7327 ;; Defined at:
  7328 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  delay_total     2    0[BANK0 ] unsigned int 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  temp            2    3[BANK0 ] unsigned int 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;		None               void
  7335 ;; Registers used:
  7336 ;;		wreg, status,2, status,0
  7337 ;; Tracked objects:
  7338 ;;		On entry : F/0
  7339 ;;		On exit  : F/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7342 ;;      Params:         0       2       0       0       0       0       0       0       0
  7343 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7344 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7345 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7346 ;;Total ram usage:        5 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    6
  7349 ;; This function calls:
  7350 ;;		Nothing
  7351 ;; This function is called by:
  7352 ;;		_main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           	psect	text23
  7357  0060A6                     __ptext23:
  7358                           	opt stack 0
  7359  0060A6                     _delay_ms:
  7360                           	opt stack 24
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;time.c: 7: unsigned int temp = 0;
  7364                           
  7365                           ;incstack = 0
  7366  0060A6  6BBB               	clrf	delay_ms@temp& (0+255),b
  7367  0060A8  6BBC               	clrf	(delay_ms@temp+1)& (0+255),b
  7368                           
  7369                           ;time.c: 8: while(temp < delay_total){
  7370  0060AA  D00B               	goto	l551
  7371  0060AC                     l5681:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;time.c: 9: _delay((unsigned long)((1)*(16000000/4000.0)));
  7375  0060AC  0E06               	movlw	6
  7376  0060AE  6FBA               	movwf	??_delay_ms& (0+255),b
  7377  0060B0  0E30               	movlw	48
  7378  0060B2                     u7967:
  7379  0060B2  2EE8               	decfsz	wreg,f,c
  7380  0060B4  D7FE               	goto	u7967
  7381  0060B6  2FBA               	decfsz	??_delay_ms& (0+255),f,b
  7382  0060B8  D7FC               	goto	u7967
  7383  0060BA  D000               	nop2	
  7384                           
  7385                           ;time.c: 10: temp++;}
  7386  0060BC  0100               	movlb	0	; () banked
  7387  0060BE  4BBB               	infsnz	delay_ms@temp& (0+255),f,b
  7388  0060C0  2BBC               	incf	(delay_ms@temp+1)& (0+255),f,b
  7389  0060C2                     l551:
  7390                           
  7391                           ; BSR set to: 0
  7392  0060C2  51B8               	movf	delay_ms@delay_total& (0+255),w,b
  7393  0060C4  5DBB               	subwf	delay_ms@temp& (0+255),w,b
  7394  0060C6  51B9               	movf	(delay_ms@delay_total+1)& (0+255),w,b
  7395  0060C8  59BC               	subwfb	(delay_ms@temp+1)& (0+255),w,b
  7396  0060CA  B0D8               	btfsc	status,0,c
  7397                           
  7398                           ; BSR set to: 0
  7399  0060CC  0012               	return		;funcret
  7400  0060CE  D7EE               	goto	l5681
  7401  0060D0                     __end_of_delay_ms:
  7402                           	opt stack 0
  7403                           tblptru	equ	0xFF8
  7404                           tblptrh	equ	0xFF7
  7405                           tblptrl	equ	0xFF6
  7406                           tablat	equ	0xFF5
  7407                           prodh	equ	0xFF4
  7408                           prodl	equ	0xFF3
  7409                           intcon	equ	0xFF2
  7410                           intcon2	equ	0xFF1
  7411                           indf0	equ	0xFEF
  7412                           postinc0	equ	0xFEE
  7413                           plusw0	equ	0xFEB
  7414                           fsr0h	equ	0xFEA
  7415                           fsr0l	equ	0xFE9
  7416                           wreg	equ	0xFE8
  7417                           indf1	equ	0xFE7
  7418                           postinc1	equ	0xFE6
  7419                           postdec1	equ	0xFE5
  7420                           plusw1	equ	0xFE3
  7421                           fsr1h	equ	0xFE2
  7422                           fsr1l	equ	0xFE1
  7423                           indf2	equ	0xFDF
  7424                           postinc2	equ	0xFDE
  7425                           postdec2	equ	0xFDD
  7426                           plusw2	equ	0xFDB
  7427                           fsr2h	equ	0xFDA
  7428                           fsr2l	equ	0xFD9
  7429                           status	equ	0xFD8
  7430                           
  7431 ;; *************** function _configurar_data_inicial *****************
  7432 ;; Defined at:
  7433 ;;		line 31 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;  data_inicial    7   34[BANK0 ] struct .
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;		None
  7438 ;; Return value:  Size  Location     Type
  7439 ;;		None               void
  7440 ;; Registers used:
  7441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : F/0
  7444 ;;		On exit  : F/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7447 ;;      Params:         0       7       0       0       0       0       0       0       0
  7448 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7450 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7451 ;;Total ram usage:        7 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    8
  7454 ;; This function calls:
  7455 ;;		_dia_da_semana
  7456 ;; This function is called by:
  7457 ;;		_main
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text24
  7462  005FEE                     __ptext24:
  7463                           	opt stack 0
  7464  005FEE                     _configurar_data_inicial:
  7465                           	opt stack 22
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;time.c: 32: data_inicial.ano=0;
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;incstack = 0
  7472  005FEE  6BDA               	clrf	configurar_data_inicial@data_inicial& (0+255),b
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;time.c: 33: data_inicial.mes= 1;
  7476  005FF0  0E01               	movlw	1
  7477  005FF2  6FDB               	movwf	(configurar_data_inicial@data_inicial+1)& (0+255),b
  7478                           
  7479                           ;time.c: 34: data_inicial.dia=1;
  7480  005FF4  6FDC               	movwf	(configurar_data_inicial@data_inicial+2)& (0+255),b
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;time.c: 35: data_inicial.dia_da_semana= dia_da_semana( data_inicial.ano, data_inicial.m
      +                          es, data_inicial.dia);
  7484  005FF6  C0DA  F0C4         	movff	configurar_data_inicial@data_inicial,dia_da_semana@ano
  7485  005FFA  6BC5               	clrf	(dia_da_semana@ano+1)& (0+255),b
  7486  005FFC  C0DB  F0C6         	movff	configurar_data_inicial@data_inicial+1,dia_da_semana@mes
  7487  006000  C0DC  F0C7         	movff	configurar_data_inicial@data_inicial+2,dia_da_semana@dia
  7488  006004  ECD7  F034         	call	_dia_da_semana	;wreg free
  7489  006008  6FE0               	movwf	(configurar_data_inicial@data_inicial+6)& (0+255),b
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;time.c: 36: data_inicial.hora=0;
  7493  00600A  6BDD               	clrf	(configurar_data_inicial@data_inicial+3)& (0+255),b
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;time.c: 37: data_inicial.minuto=0;
  7497  00600C  6BDE               	clrf	(configurar_data_inicial@data_inicial+4)& (0+255),b
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;time.c: 38: data_inicial.segundo=0;}
  7501  00600E  6BDF               	clrf	(configurar_data_inicial@data_inicial+5)& (0+255),b
  7502                           
  7503                           ; BSR set to: 0
  7504  006010  0012               	return		;funcret
  7505  006012                     __end_of_configurar_data_inicial:
  7506                           	opt stack 0
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           indf0	equ	0xFEF
  7516                           postinc0	equ	0xFEE
  7517                           plusw0	equ	0xFEB
  7518                           fsr0h	equ	0xFEA
  7519                           fsr0l	equ	0xFE9
  7520                           wreg	equ	0xFE8
  7521                           indf1	equ	0xFE7
  7522                           postinc1	equ	0xFE6
  7523                           postdec1	equ	0xFE5
  7524                           plusw1	equ	0xFE3
  7525                           fsr1h	equ	0xFE2
  7526                           fsr1l	equ	0xFE1
  7527                           indf2	equ	0xFDF
  7528                           postinc2	equ	0xFDE
  7529                           postdec2	equ	0xFDD
  7530                           plusw2	equ	0xFDB
  7531                           fsr2h	equ	0xFDA
  7532                           fsr2l	equ	0xFD9
  7533                           status	equ	0xFD8
  7534                           
  7535 ;; *************** function _dia_da_semana *****************
  7536 ;; Defined at:
  7537 ;;		line 13 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  ano             2   12[BANK0 ] unsigned int 
  7540 ;;  mes             1   14[BANK0 ] unsigned char 
  7541 ;;  dia             1   15[BANK0 ] unsigned char 
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;  tabela_mes     12   21[BANK0 ] unsigned char [12]
  7544 ;;  seculo          1   33[BANK0 ] unsigned char 
  7545 ;; Return value:  Size  Location     Type
  7546 ;;                  1    wreg      unsigned char 
  7547 ;; Registers used:
  7548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7549 ;; Tracked objects:
  7550 ;;		On entry : F/0
  7551 ;;		On exit  : F/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7554 ;;      Params:         0       4       0       0       0       0       0       0       0
  7555 ;;      Locals:         0      13       0       0       0       0       0       0       0
  7556 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7557 ;;      Totals:         0      22       0       0       0       0       0       0       0
  7558 ;;Total ram usage:       22 bytes
  7559 ;; Hardware stack levels used:    1
  7560 ;; Hardware stack levels required when called:    7
  7561 ;; This function calls:
  7562 ;;		___lwdiv
  7563 ;;		___lwmod
  7564 ;;		___wmul
  7565 ;; This function is called by:
  7566 ;;		_main
  7567 ;;		_configurar_data_inicial
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text25
  7572  0069AE                     __ptext25:
  7573                           	opt stack 0
  7574  0069AE                     _dia_da_semana:
  7575                           	opt stack 23
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;time.c: 15: char tabela_mes[]= {0,3,3,6,1,4,6,2,5,0,3,5};
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;incstack = 0
  7582  0069AE  EE20  F03D         	lfsr	2,dia_da_semana@F5283
  7583  0069B2  EE10  F0CD         	lfsr	1,dia_da_semana@tabela_mes
  7584  0069B6  0E0B               	movlw	11
  7585  0069B8                     u5901:
  7586  0069B8  CFDB FFE3          	movff	plusw2,plusw1
  7587  0069BC  06E8               	decf	wreg,f,c
  7588  0069BE  E2FC               	bc	u5901
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;time.c: 16: unsigned char seculo;
  7592                           ;time.c: 18: ano+=15;
  7593  0069C0  0E0F               	movlw	15
  7594  0069C2  27C4               	addwf	dia_da_semana@ano& (0+255),f,b
  7595  0069C4  0E00               	movlw	0
  7596  0069C6  23C5               	addwfc	(dia_da_semana@ano+1)& (0+255),f,b
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;time.c: 19: seculo = ano/100;
  7600  0069C8  C0C4  F0B8         	movff	dia_da_semana@ano,___lwdiv@dividend
  7601  0069CC  C0C5  F0B9         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  7602  0069D0  6BBB               	clrf	(___lwdiv@divisor+1)& (0+255),b
  7603  0069D2  0E64               	movlw	100
  7604  0069D4  6FBA               	movwf	___lwdiv@divisor& (0+255),b
  7605  0069D6  EC2D  F031         	call	___lwdiv	;wreg free
  7606  0069DA  51B8               	movf	?___lwdiv& (0+255),w,b
  7607  0069DC  6FD9               	movwf	dia_da_semana@seculo& (0+255),b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;time.c: 20: ano-= (seculo*100);
  7611  0069DE  51D9               	movf	dia_da_semana@seculo& (0+255),w,b
  7612  0069E0  0D64               	mullw	100
  7613  0069E2  50F3               	movf	prodl,w,c
  7614  0069E4  5FC4               	subwf	dia_da_semana@ano& (0+255),f,b
  7615  0069E6  50F4               	movf	prodh,w,c
  7616  0069E8  5BC5               	subwfb	(dia_da_semana@ano+1)& (0+255),f,b
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;time.c: 22: if(! ((ano+3)%4) ){
  7620  0069EA  C0C4  F0C8         	movff	dia_da_semana@ano,??_dia_da_semana
  7621  0069EE  0E03               	movlw	3
  7622  0069F0  27C8               	addwf	??_dia_da_semana& (0+255),f,b
  7623  0069F2  17C8               	andwf	??_dia_da_semana& (0+255),f,b
  7624  0069F4  E10B               	bnz	l5229
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;time.c: 23: if (mes==1) tabela_mes[mes-1]=6;
  7628  0069F6  05C6               	decf	dia_da_semana@mes& (0+255),w,b
  7629  0069F8  E103               	bnz	l5225
  7630                           
  7631                           ; BSR set to: 0
  7632  0069FA  D841               	call	PL28	;call to abstracted procedure
  7633  0069FC  0E06               	movlw	6
  7634  0069FE  D005               	goto	L6
  7635  006A00                     l5225:
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;time.c: 24: else if(mes==2) tabela_mes[mes-1]=2;}
  7639  006A00  0E02               	movlw	2
  7640  006A02  19C6               	xorwf	dia_da_semana@mes& (0+255),w,b
  7641  006A04  E103               	bnz	l5229
  7642                           
  7643                           ; BSR set to: 0
  7644  006A06  D83B               	call	PL28	;call to abstracted procedure
  7645  006A08  0E02               	movlw	2
  7646  006A0A                     L6:
  7647  006A0A  6EDF               	movwf	indf2,c
  7648  006A0C                     l5229:
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;time.c: 26: return (( (6 - seculo*2) + dia + tabela_mes[mes-1] + ano + (ano/4))%7);
  7652  006A0C  C0D9  F0B8         	movff	dia_da_semana@seculo,___wmul@multiplier
  7653  006A10  6BB9               	clrf	(___wmul@multiplier+1)& (0+255),b
  7654  006A12  69BB               	setf	(___wmul@multiplicand+1)& (0+255),b
  7655  006A14  0EFE               	movlw	254
  7656  006A16  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  7657  006A18  EC40  F030         	call	___wmul	;wreg free
  7658  006A1C  C0C4  F0C8         	movff	dia_da_semana@ano,??_dia_da_semana
  7659  006A20  C0C5  F0C9         	movff	dia_da_semana@ano+1,??_dia_da_semana+1
  7660  006A24  90D8               	bcf	status,0,c
  7661  006A26  33C9               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  7662  006A28  33C8               	rrcf	??_dia_da_semana& (0+255),f,b
  7663  006A2A  90D8               	bcf	status,0,c
  7664  006A2C  33C9               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  7665  006A2E  33C8               	rrcf	??_dia_da_semana& (0+255),f,b
  7666  006A30  C0C6  F0CA         	movff	dia_da_semana@mes,??_dia_da_semana+2
  7667  006A34  07CA               	decf	(??_dia_da_semana+2)& (0+255),f,b
  7668  006A36  51CA               	movf	(??_dia_da_semana+2)& (0+255),w,b
  7669  006A38  0FCD               	addlw	low dia_da_semana@tabela_mes
  7670  006A3A  6ED9               	movwf	fsr2l,c
  7671  006A3C  6ADA               	clrf	fsr2h,c
  7672  006A3E  50DF               	movf	indf2,w,c
  7673  006A40  C0C7  F0CB         	movff	dia_da_semana@dia,??_dia_da_semana+3
  7674  006A44  6BCC               	clrf	(??_dia_da_semana+4)& (0+255),b
  7675  006A46  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  7676  006A48  0E00               	movlw	0
  7677  006A4A  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  7678  006A4C  51C8               	movf	??_dia_da_semana& (0+255),w,b
  7679  006A4E  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  7680  006A50  51C9               	movf	(??_dia_da_semana+1)& (0+255),w,b
  7681  006A52  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  7682  006A54  51B8               	movf	?___wmul& (0+255),w,b
  7683  006A56  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  7684  006A58  51B9               	movf	(?___wmul+1)& (0+255),w,b
  7685  006A5A  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  7686  006A5C  51C4               	movf	dia_da_semana@ano& (0+255),w,b
  7687  006A5E  27CB               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  7688  006A60  51C5               	movf	(dia_da_semana@ano+1)& (0+255),w,b
  7689  006A62  23CC               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  7690  006A64  0E06               	movlw	6
  7691  006A66  25CB               	addwf	(??_dia_da_semana+3)& (0+255),w,b
  7692  006A68  6FBF               	movwf	___lwmod@dividend& (0+255),b
  7693  006A6A  0E00               	movlw	0
  7694  006A6C  21CC               	addwfc	(??_dia_da_semana+4)& (0+255),w,b
  7695  006A6E  6FC0               	movwf	(___lwmod@dividend+1)& (0+255),b
  7696  006A70  6BC2               	clrf	(___lwmod@divisor+1)& (0+255),b
  7697  006A72  0E07               	movlw	7
  7698  006A74  6FC1               	movwf	___lwmod@divisor& (0+255),b
  7699  006A76  ECE9  F030         	call	___lwmod	;wreg free
  7700  006A7A  51BF               	movf	?___lwmod& (0+255),w,b
  7701                           
  7702                           ; BSR set to: 0
  7703  006A7C  0012               	return		;funcret
  7704  006A7E                     __end_of_dia_da_semana:
  7705                           	opt stack 0
  7706  006A7E                     PL28:
  7707                           	opt stack 23
  7708  006A7E  C0C6  F0C8         	movff	dia_da_semana@mes,??_dia_da_semana
  7709  006A82  07C8               	decf	??_dia_da_semana& (0+255),f,b
  7710  006A84  51C8               	movf	??_dia_da_semana& (0+255),w,b
  7711  006A86  0FCD               	addlw	low dia_da_semana@tabela_mes
  7712  006A88  6ED9               	movwf	fsr2l,c
  7713  006A8A  6ADA               	clrf	fsr2h,c
  7714  006A8C  0012               	return	
  7715  006A8E                     __end_ofPL28:
  7716                           	opt stack 0
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           intcon	equ	0xFF2
  7724                           intcon2	equ	0xFF1
  7725                           indf0	equ	0xFEF
  7726                           postinc0	equ	0xFEE
  7727                           plusw0	equ	0xFEB
  7728                           fsr0h	equ	0xFEA
  7729                           fsr0l	equ	0xFE9
  7730                           wreg	equ	0xFE8
  7731                           indf1	equ	0xFE7
  7732                           postinc1	equ	0xFE6
  7733                           postdec1	equ	0xFE5
  7734                           plusw1	equ	0xFE3
  7735                           fsr1h	equ	0xFE2
  7736                           fsr1l	equ	0xFE1
  7737                           indf2	equ	0xFDF
  7738                           postinc2	equ	0xFDE
  7739                           postdec2	equ	0xFDD
  7740                           plusw2	equ	0xFDB
  7741                           fsr2h	equ	0xFDA
  7742                           fsr2l	equ	0xFD9
  7743                           status	equ	0xFD8
  7744                           
  7745 ;; *************** function ___wmul *****************
  7746 ;; Defined at:
  7747 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7750 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  product         2    4[BANK0 ] unsigned int 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  2    0[BANK0 ] unsigned int 
  7755 ;; Registers used:
  7756 ;;		wreg, status,2, status,0, prodl, prodh
  7757 ;; Tracked objects:
  7758 ;;		On entry : F/0
  7759 ;;		On exit  : F/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7762 ;;      Params:         0       4       0       0       0       0       0       0       0
  7763 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7765 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7766 ;;Total ram usage:        6 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    6
  7769 ;; This function calls:
  7770 ;;		Nothing
  7771 ;; This function is called by:
  7772 ;;		_numero_para_ascii
  7773 ;;		_dia_da_semana
  7774 ;;		_printf
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text26
  7779  006080                     __ptext26:
  7780                           	opt stack 0
  7781  006080                     ___wmul:
  7782                           	opt stack 23
  7783                           
  7784                           ; BSR set to: 0
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;incstack = 0
  7788  006080  51B8               	movf	___wmul@multiplier& (0+255),w,b
  7789  006082  03BA               	mulwf	___wmul@multiplicand& (0+255),b
  7790  006084  CFF3 F0BC          	movff	prodl,___wmul@product
  7791  006088  CFF4 F0BD          	movff	prodh,___wmul@product+1
  7792  00608C  51B8               	movf	___wmul@multiplier& (0+255),w,b
  7793  00608E  03BB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7794  006090  50F3               	movf	prodl,w,c
  7795  006092  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
  7796  006094  51B9               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7797  006096  03BA               	mulwf	___wmul@multiplicand& (0+255),b
  7798  006098  50F3               	movf	prodl,w,c
  7799  00609A  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
  7800                           
  7801                           ; BSR set to: 0
  7802  00609C  C0BC  F0B8         	movff	___wmul@product,?___wmul
  7803  0060A0  C0BD  F0B9         	movff	___wmul@product+1,?___wmul+1
  7804                           
  7805                           ; BSR set to: 0
  7806  0060A4  0012               	return		;funcret
  7807  0060A6                     __end_of___wmul:
  7808                           	opt stack 0
  7809                           tblptru	equ	0xFF8
  7810                           tblptrh	equ	0xFF7
  7811                           tblptrl	equ	0xFF6
  7812                           tablat	equ	0xFF5
  7813                           prodh	equ	0xFF4
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           intcon2	equ	0xFF1
  7817                           indf0	equ	0xFEF
  7818                           postinc0	equ	0xFEE
  7819                           plusw0	equ	0xFEB
  7820                           fsr0h	equ	0xFEA
  7821                           fsr0l	equ	0xFE9
  7822                           wreg	equ	0xFE8
  7823                           indf1	equ	0xFE7
  7824                           postinc1	equ	0xFE6
  7825                           postdec1	equ	0xFE5
  7826                           plusw1	equ	0xFE3
  7827                           fsr1h	equ	0xFE2
  7828                           fsr1l	equ	0xFE1
  7829                           indf2	equ	0xFDF
  7830                           postinc2	equ	0xFDE
  7831                           postdec2	equ	0xFDD
  7832                           plusw2	equ	0xFDB
  7833                           fsr2h	equ	0xFDA
  7834                           fsr2l	equ	0xFD9
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function ___lwmod *****************
  7838 ;; Defined at:
  7839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  dividend        2    7[BANK0 ] unsigned int 
  7842 ;;  divisor         2    9[BANK0 ] unsigned int 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  counter         1   11[BANK0 ] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  2    7[BANK0 ] unsigned int 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : F/0
  7851 ;;		On exit  : F/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7854 ;;      Params:         0       4       0       0       0       0       0       0       0
  7855 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7856 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7857 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7858 ;;Total ram usage:        5 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    6
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_dia_da_semana
  7865 ;;		_printf
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text27
  7870  0061D2                     __ptext27:
  7871                           	opt stack 0
  7872  0061D2                     ___lwmod:
  7873                           	opt stack 23
  7874                           
  7875                           ; BSR set to: 0
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;incstack = 0
  7879  0061D2  51C1               	movf	___lwmod@divisor& (0+255),w,b
  7880  0061D4  11C2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7881  0061D6  E017               	bz	l1406
  7882                           
  7883                           ; BSR set to: 0
  7884  0061D8  0E01               	movlw	1
  7885  0061DA  6FC3               	movwf	___lwmod@counter& (0+255),b
  7886  0061DC  D004               	goto	l5185
  7887  0061DE                     l5183:
  7888                           
  7889                           ; BSR set to: 0
  7890  0061DE  90D8               	bcf	status,0,c
  7891  0061E0  37C1               	rlcf	___lwmod@divisor& (0+255),f,b
  7892  0061E2  37C2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7893  0061E4  2BC3               	incf	___lwmod@counter& (0+255),f,b
  7894  0061E6                     l5185:
  7895                           
  7896                           ; BSR set to: 0
  7897  0061E6  AFC2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7898  0061E8  D7FA               	goto	l5183
  7899  0061EA                     l5187:
  7900                           
  7901                           ; BSR set to: 0
  7902  0061EA  51C1               	movf	___lwmod@divisor& (0+255),w,b
  7903  0061EC  5DBF               	subwf	___lwmod@dividend& (0+255),w,b
  7904  0061EE  51C2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7905  0061F0  59C0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7906  0061F2  E304               	bnc	l5191
  7907                           
  7908                           ; BSR set to: 0
  7909  0061F4  51C1               	movf	___lwmod@divisor& (0+255),w,b
  7910  0061F6  5FBF               	subwf	___lwmod@dividend& (0+255),f,b
  7911  0061F8  51C2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7912  0061FA  5BC0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7913  0061FC                     l5191:
  7914                           
  7915                           ; BSR set to: 0
  7916  0061FC  90D8               	bcf	status,0,c
  7917  0061FE  33C2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7918  006200  33C1               	rrcf	___lwmod@divisor& (0+255),f,b
  7919                           
  7920                           ; BSR set to: 0
  7921  006202  2FC3               	decfsz	___lwmod@counter& (0+255),f,b
  7922  006204  D7F2               	goto	l5187
  7923  006206                     l1406:
  7924                           
  7925                           ; BSR set to: 0
  7926  006206  C0BF  F0BF         	movff	___lwmod@dividend,?___lwmod
  7927  00620A  C0C0  F0C0         	movff	___lwmod@dividend+1,?___lwmod+1
  7928                           
  7929                           ; BSR set to: 0
  7930  00620E  0012               	return		;funcret
  7931  006210                     __end_of___lwmod:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           intcon2	equ	0xFF1
  7941                           indf0	equ	0xFEF
  7942                           postinc0	equ	0xFEE
  7943                           plusw0	equ	0xFEB
  7944                           fsr0h	equ	0xFEA
  7945                           fsr0l	equ	0xFE9
  7946                           wreg	equ	0xFE8
  7947                           indf1	equ	0xFE7
  7948                           postinc1	equ	0xFE6
  7949                           postdec1	equ	0xFE5
  7950                           plusw1	equ	0xFE3
  7951                           fsr1h	equ	0xFE2
  7952                           fsr1l	equ	0xFE1
  7953                           indf2	equ	0xFDF
  7954                           postinc2	equ	0xFDE
  7955                           postdec2	equ	0xFDD
  7956                           plusw2	equ	0xFDB
  7957                           fsr2h	equ	0xFDA
  7958                           fsr2l	equ	0xFD9
  7959                           status	equ	0xFD8
  7960                           
  7961 ;; *************** function ___lwdiv *****************
  7962 ;; Defined at:
  7963 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  dividend        2    0[BANK0 ] unsigned int 
  7966 ;;  divisor         2    2[BANK0 ] unsigned int 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  quotient        2    5[BANK0 ] unsigned int 
  7969 ;;  counter         1    4[BANK0 ] unsigned char 
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  2    0[BANK0 ] unsigned int 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0
  7974 ;; Tracked objects:
  7975 ;;		On entry : F/0
  7976 ;;		On exit  : F/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7979 ;;      Params:         0       4       0       0       0       0       0       0       0
  7980 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7982 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7983 ;;Total ram usage:        7 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; Hardware stack levels required when called:    6
  7986 ;; This function calls:
  7987 ;;		Nothing
  7988 ;; This function is called by:
  7989 ;;		_dia_da_semana
  7990 ;;		_printf
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           	psect	text28
  7995  00625A                     __ptext28:
  7996                           	opt stack 0
  7997  00625A                     ___lwdiv:
  7998                           	opt stack 23
  7999                           
  8000                           ; BSR set to: 0
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;incstack = 0
  8004  00625A  6BBD               	clrf	___lwdiv@quotient& (0+255),b
  8005  00625C  6BBE               	clrf	(___lwdiv@quotient+1)& (0+255),b
  8006                           
  8007                           ; BSR set to: 0
  8008  00625E  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  8009  006260  11BB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8010  006262  E01B               	bz	l1396
  8011                           
  8012                           ; BSR set to: 0
  8013  006264  0E01               	movlw	1
  8014  006266  6FBC               	movwf	___lwdiv@counter& (0+255),b
  8015  006268  D004               	goto	l5165
  8016  00626A                     l5163:
  8017                           
  8018                           ; BSR set to: 0
  8019  00626A  90D8               	bcf	status,0,c
  8020  00626C  37BA               	rlcf	___lwdiv@divisor& (0+255),f,b
  8021  00626E  37BB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8022  006270  2BBC               	incf	___lwdiv@counter& (0+255),f,b
  8023  006272                     l5165:
  8024                           
  8025                           ; BSR set to: 0
  8026  006272  AFBB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8027  006274  D7FA               	goto	l5163
  8028  006276                     l5167:
  8029                           
  8030                           ; BSR set to: 0
  8031  006276  90D8               	bcf	status,0,c
  8032  006278  37BD               	rlcf	___lwdiv@quotient& (0+255),f,b
  8033  00627A  37BE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8034                           
  8035                           ; BSR set to: 0
  8036  00627C  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  8037  00627E  5DB8               	subwf	___lwdiv@dividend& (0+255),w,b
  8038  006280  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8039  006282  59B9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8040  006284  E305               	bnc	l5175
  8041                           
  8042                           ; BSR set to: 0
  8043  006286  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  8044  006288  5FB8               	subwf	___lwdiv@dividend& (0+255),f,b
  8045  00628A  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8046  00628C  5BB9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8047                           
  8048                           ; BSR set to: 0
  8049  00628E  81BD               	bsf	___lwdiv@quotient& (0+255),0,b
  8050  006290                     l5175:
  8051                           
  8052                           ; BSR set to: 0
  8053  006290  90D8               	bcf	status,0,c
  8054  006292  33BB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8055  006294  33BA               	rrcf	___lwdiv@divisor& (0+255),f,b
  8056                           
  8057                           ; BSR set to: 0
  8058  006296  2FBC               	decfsz	___lwdiv@counter& (0+255),f,b
  8059  006298  D7EE               	goto	l5167
  8060  00629A                     l1396:
  8061                           
  8062                           ; BSR set to: 0
  8063  00629A  C0BD  F0B8         	movff	___lwdiv@quotient,?___lwdiv
  8064  00629E  C0BE  F0B9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8065                           
  8066                           ; BSR set to: 0
  8067  0062A2  0012               	return		;funcret
  8068  0062A4                     __end_of___lwdiv:
  8069                           	opt stack 0
  8070                           tblptru	equ	0xFF8
  8071                           tblptrh	equ	0xFF7
  8072                           tblptrl	equ	0xFF6
  8073                           tablat	equ	0xFF5
  8074                           prodh	equ	0xFF4
  8075                           prodl	equ	0xFF3
  8076                           intcon	equ	0xFF2
  8077                           intcon2	equ	0xFF1
  8078                           indf0	equ	0xFEF
  8079                           postinc0	equ	0xFEE
  8080                           plusw0	equ	0xFEB
  8081                           fsr0h	equ	0xFEA
  8082                           fsr0l	equ	0xFE9
  8083                           wreg	equ	0xFE8
  8084                           indf1	equ	0xFE7
  8085                           postinc1	equ	0xFE6
  8086                           postdec1	equ	0xFE5
  8087                           plusw1	equ	0xFE3
  8088                           fsr1h	equ	0xFE2
  8089                           fsr1l	equ	0xFE1
  8090                           indf2	equ	0xFDF
  8091                           postinc2	equ	0xFDE
  8092                           postdec2	equ	0xFDD
  8093                           plusw2	equ	0xFDB
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function _config_serial *****************
  8099 ;; Defined at:
  8100 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  baud            1    wreg     unsigned char 
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  baud            1    0[BANK0 ] unsigned char 
  8105 ;; Return value:  Size  Location     Type
  8106 ;;		None               void
  8107 ;; Registers used:
  8108 ;;		wreg, status,2, status,0
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : F/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8114 ;;      Params:         0       0       0       0       0       0       0       0       0
  8115 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8116 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8117 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8118 ;;Total ram usage:        1 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    6
  8121 ;; This function calls:
  8122 ;;		Nothing
  8123 ;; This function is called by:
  8124 ;;		_main
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           	psect	text29
  8129  00638C                     __ptext29:
  8130                           	opt stack 0
  8131  00638C                     _config_serial:
  8132                           	opt stack 24
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;incstack = 0
  8136                           ;config_serial@baud stored from wreg
  8137  00638C  0100               	movlb	0	; () banked
  8138  00638E  6FB8               	movwf	config_serial@baud& (0+255),b
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;serial.c: 8: SYNC=0;
  8142  006390  98AC               	bcf	4012,4,c	;volatile
  8143                           
  8144                           ;serial.c: 9: BRGH=1;
  8145  006392  84AC               	bsf	4012,2,c	;volatile
  8146                           
  8147                           ;serial.c: 10: switch(baud){
  8148  006394  D00F               	goto	l5527
  8149  006396                     l625:
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;serial.c: 12: BRG16=1;
  8153  006396  86B8               	bsf	4024,3,c	;volatile
  8154                           
  8155                           ; BSR set to: 0
  8156                           ;serial.c: 13: SPBRG =34;
  8157  006398  0E22               	movlw	34
  8158  00639A  D008               	goto	L9
  8159  00639C                     l627:
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;serial.c: 17: BRG16=1;
  8163  00639C  86B8               	bsf	4024,3,c	;volatile
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;serial.c: 18: SPBRG =69;
  8167  00639E  0E45               	movlw	69
  8168  0063A0  D005               	goto	L9
  8169  0063A2                     l628:
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;serial.c: 22: BRG16=1;
  8173  0063A2  86B8               	bsf	4024,3,c	;volatile
  8174  0063A4                     l5519:
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;serial.c: 23: SPBRG =103;
  8178  0063A4  0E67               	movlw	103
  8179  0063A6  D002               	goto	L9
  8180  0063A8                     l629:
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;serial.c: 27: BRG16=1;
  8184  0063A8  86B8               	bsf	4024,3,c	;volatile
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;serial.c: 28: SPBRG =207;
  8188  0063AA  0ECF               	movlw	207
  8189  0063AC                     L9:
  8190  0063AC  6EAF               	movwf	4015,c	;volatile
  8191                           
  8192                           ;serial.c: 29: break;
  8193  0063AE  D00C               	goto	l626
  8194  0063B0                     l630:
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;serial.c: 32: BRG16=0;
  8198  0063B0  96B8               	bcf	4024,3,c	;volatile
  8199  0063B2  D7F8               	goto	l5519
  8200  0063B4                     l5527:
  8201                           
  8202                           ; BSR set to: 0
  8203  0063B4  51B8               	movf	config_serial@baud& (0+255),w,b
  8204                           
  8205                           ; Switch size 1, requested type "space"
  8206                           ; Number of cases is 5, Range of values is 0 to 4
  8207                           ; switch strategies available:
  8208                           ; Name         Instructions Cycles
  8209                           ; simple_byte           16     9 (average)
  8210                           ;	Chosen strategy is simple_byte
  8211  0063B6  E0FC               	bz	l630
  8212  0063B8  0A01               	xorlw	1	; case 1
  8213  0063BA  E0F6               	bz	l629
  8214  0063BC  0A03               	xorlw	3	; case 2
  8215  0063BE  E0F1               	bz	l628
  8216  0063C0  0A01               	xorlw	1	; case 3
  8217  0063C2  E0EC               	bz	l627
  8218  0063C4  0A07               	xorlw	7	; case 4
  8219  0063C6  E0E7               	bz	l625
  8220  0063C8                     l626:
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;serial.c: 36: BRG16=1;
  8224  0063C8  86B8               	bsf	4024,3,c	;volatile
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;serial.c: 37: SPBRG =34;
  8228  0063CA  0E22               	movlw	34
  8229  0063CC  6EAF               	movwf	4015,c	;volatile
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;serial.c: 38: TX9=0;
  8233  0063CE  9CAC               	bcf	4012,6,c	;volatile
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;serial.c: 39: RX9=0;
  8237  0063D0  9CAB               	bcf	4011,6,c	;volatile
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;serial.c: 40: TXEN=1;
  8241  0063D2  8AAC               	bsf	4012,5,c	;volatile
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;serial.c: 41: RCIE=1;
  8245  0063D4  8A9D               	bsf	3997,5,c	;volatile
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;serial.c: 42: CREN=1;
  8249  0063D6  88AB               	bsf	4011,4,c	;volatile
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;serial.c: 43: SPEN=1;
  8253  0063D8  8EAB               	bsf	4011,7,c	;volatile
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;serial.c: 44: TXCKP = 0;
  8257  0063DA  98B8               	bcf	4024,4,c	;volatile
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;serial.c: 45: TXIE = 0;
  8261  0063DC  989D               	bcf	3997,4,c	;volatile
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;serial.c: 46: TX9 = 0;
  8265  0063DE  9CAC               	bcf	4012,6,c	;volatile
  8266                           
  8267                           ; BSR set to: 0
  8268  0063E0  0C22               	retlw	34	;funcret
  8269  0063E2                     __end_of_config_serial:
  8270                           	opt stack 0
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           intcon	equ	0xFF2
  8278                           intcon2	equ	0xFF1
  8279                           indf0	equ	0xFEF
  8280                           postinc0	equ	0xFEE
  8281                           plusw0	equ	0xFEB
  8282                           fsr0h	equ	0xFEA
  8283                           fsr0l	equ	0xFE9
  8284                           wreg	equ	0xFE8
  8285                           indf1	equ	0xFE7
  8286                           postinc1	equ	0xFE6
  8287                           postdec1	equ	0xFE5
  8288                           plusw1	equ	0xFE3
  8289                           fsr1h	equ	0xFE2
  8290                           fsr1l	equ	0xFE1
  8291                           indf2	equ	0xFDF
  8292                           postinc2	equ	0xFDE
  8293                           postdec2	equ	0xFDD
  8294                           plusw2	equ	0xFDB
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function _carregar_senha *****************
  8300 ;; Defined at:
  8301 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  conta           1    wreg     unsigned char 
  8304 ;;  senha_a_carr    2    2[BANK0 ] PTR unsigned char [18]
  8305 ;;		 -> senha(288), 
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;  conta           1    9[BANK0 ] unsigned char 
  8308 ;;  i               1    8[BANK0 ] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;		None               void
  8311 ;; Registers used:
  8312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : F/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8318 ;;      Params:         0       2       0       0       0       0       0       0       0
  8319 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8320 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8321 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8322 ;;Total ram usage:        8 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    7
  8325 ;; This function calls:
  8326 ;;		_Read_b_eep
  8327 ;; This function is called by:
  8328 ;;		_main
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text30
  8333  006862                     __ptext30:
  8334                           	opt stack 0
  8335  006862                     _carregar_senha:
  8336                           	opt stack 23
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;incstack = 0
  8340                           ;carregar_senha@conta stored from wreg
  8341  006862  6FC1               	movwf	carregar_senha@conta& (0+255),b
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;eeprom_interna.c: 8: char i = 0;
  8345  006864  6BC0               	clrf	carregar_senha@i& (0+255),b
  8346  006866                     l5581:
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;eeprom_interna.c: 11: senha_a_carregar[conta][i] = Read_b_eep((conta*16) + i);
  8350  006866  D832               	call	PL4	;call to abstracted procedure
  8351  006868  51C0               	movf	carregar_senha@i& (0+255),w,b
  8352  00686A  D83B               	call	PL8	;call to abstracted procedure
  8353  00686C  51C0               	movf	carregar_senha@i& (0+255),w,b
  8354  00686E  25BE               	addwf	(??_carregar_senha+2)& (0+255),w,b
  8355  006870  6FB8               	movwf	Read_b_eep@badd& (0+255),b
  8356  006872  0E00               	movlw	0
  8357  006874  21BF               	addwfc	(??_carregar_senha+3)& (0+255),w,b
  8358  006876  6FB9               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8359  006878  ECA7  F02F         	call	_Read_b_eep	;wreg free
  8360  00687C  6EDF               	movwf	indf2,c
  8361                           
  8362                           ;eeprom_interna.c: 12: i++;} while( senha_a_carregar[conta][i-1] && i<(16-1));
  8363  00687E  0100               	movlb	0	; () banked
  8364  006880  2BC0               	incf	carregar_senha@i& (0+255),f,b
  8365                           
  8366                           ; BSR set to: 0
  8367  006882  D824               	call	PL4	;call to abstracted procedure
  8368  006884  51C0               	movf	carregar_senha@i& (0+255),w,b
  8369  006886  27BC               	addwf	??_carregar_senha& (0+255),f,b
  8370  006888  0E00               	movlw	0
  8371  00688A  23BD               	addwfc	(??_carregar_senha+1)& (0+255),f,b
  8372  00688C  0EFF               	movlw	255
  8373  00688E  25BC               	addwf	??_carregar_senha& (0+255),w,b
  8374  006890  6ED9               	movwf	fsr2l,c
  8375  006892  0EFF               	movlw	255
  8376  006894  21BD               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  8377  006896  6EDA               	movwf	fsr2h,c
  8378  006898  50DF               	movf	indf2,w,c
  8379  00689A  E003               	bz	l5589
  8380                           
  8381                           ; BSR set to: 0
  8382  00689C  0E0E               	movlw	14
  8383  00689E  65C0               	cpfsgt	carregar_senha@i& (0+255),b
  8384  0068A0  D7E2               	goto	l5581
  8385  0068A2                     l5589:
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;eeprom_interna.c: 15: senha_a_carregar[conta][16] = 0;
  8389  0068A2  D814               	call	PL4	;call to abstracted procedure
  8390  0068A4  0E10               	movlw	16
  8391  0068A6  25BC               	addwf	??_carregar_senha& (0+255),w,b
  8392  0068A8  6ED9               	movwf	fsr2l,c
  8393  0068AA  0E00               	movlw	0
  8394  0068AC  21BD               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  8395  0068AE  6EDA               	movwf	fsr2h,c
  8396  0068B0  6ADF               	clrf	indf2,c
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;eeprom_interna.c: 16: senha_a_carregar[conta][16+1] = Read_b_eep((16*(conta+1))-1);
  8400  0068B2  D80C               	call	PL4	;call to abstracted procedure
  8401  0068B4  0E11               	movlw	17
  8402  0068B6  D815               	call	PL8	;call to abstracted procedure
  8403  0068B8  0E0F               	movlw	15
  8404  0068BA  25BE               	addwf	(??_carregar_senha+2)& (0+255),w,b
  8405  0068BC  6FB8               	movwf	Read_b_eep@badd& (0+255),b
  8406  0068BE  0E00               	movlw	0
  8407  0068C0  21BF               	addwfc	(??_carregar_senha+3)& (0+255),w,b
  8408  0068C2  6FB9               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8409  0068C4  ECA7  F02F         	call	_Read_b_eep	;wreg free
  8410  0068C8  6EDF               	movwf	indf2,c
  8411  0068CA  0012               	return		;funcret
  8412  0068CC                     __end_of_carregar_senha:
  8413                           	opt stack 0
  8414  0068CC                     PL4:
  8415                           	opt stack 23
  8416  0068CC  51C1               	movf	carregar_senha@conta& (0+255),w,b
  8417  0068CE  0D12               	mullw	18
  8418  0068D0  C0BA  F0BC         	movff	carregar_senha@senha_a_carregar,??_carregar_senha
  8419  0068D4  C0BB  F0BD         	movff	carregar_senha@senha_a_carregar+1,??_carregar_senha+1
  8420  0068D8  50F3               	movf	prodl,w,c
  8421  0068DA  27BC               	addwf	??_carregar_senha& (0+255),f,b
  8422  0068DC  50F4               	movf	prodh,w,c
  8423  0068DE  23BD               	addwfc	(??_carregar_senha+1)& (0+255),f,b
  8424  0068E0  0012               	return	
  8425  0068E2                     __end_ofPL4:
  8426                           	opt stack 0
  8427  0068E2                     PL8:
  8428                           	opt stack 23
  8429  0068E2  25BC               	addwf	??_carregar_senha& (0+255),w,b
  8430  0068E4  6ED9               	movwf	fsr2l,c
  8431  0068E6  0E00               	movlw	0
  8432  0068E8  21BD               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  8433  0068EA  6EDA               	movwf	fsr2h,c
  8434  0068EC  51C1               	movf	carregar_senha@conta& (0+255),w,b
  8435  0068EE  6FBE               	movwf	(??_carregar_senha+2)& (0+255),b
  8436  0068F0  6BBF               	clrf	(??_carregar_senha+3)& (0+255),b
  8437  0068F2  3BBE               	swapf	(??_carregar_senha+2)& (0+255),f,b
  8438  0068F4  3BBF               	swapf	(??_carregar_senha+3)& (0+255),f,b
  8439  0068F6  0EF0               	movlw	240
  8440  0068F8  17BF               	andwf	(??_carregar_senha+3)& (0+255),f,b
  8441  0068FA  51BE               	movf	(??_carregar_senha+2)& (0+255),w,b
  8442  0068FC  0B0F               	andlw	15
  8443  0068FE  13BF               	iorwf	(??_carregar_senha+3)& (0+255),f,b
  8444  006900  0EF0               	movlw	240
  8445  006902  17BE               	andwf	(??_carregar_senha+2)& (0+255),f,b
  8446  006904  0CF0               	retlw	240
  8447  006906                     __end_ofPL8:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           intcon2	equ	0xFF1
  8457                           indf0	equ	0xFEF
  8458                           postinc0	equ	0xFEE
  8459                           plusw0	equ	0xFEB
  8460                           fsr0h	equ	0xFEA
  8461                           fsr0l	equ	0xFE9
  8462                           wreg	equ	0xFE8
  8463                           indf1	equ	0xFE7
  8464                           postinc1	equ	0xFE6
  8465                           postdec1	equ	0xFE5
  8466                           plusw1	equ	0xFE3
  8467                           fsr1h	equ	0xFE2
  8468                           fsr1l	equ	0xFE1
  8469                           indf2	equ	0xFDF
  8470                           postinc2	equ	0xFDE
  8471                           postdec2	equ	0xFDD
  8472                           plusw2	equ	0xFDB
  8473                           fsr2h	equ	0xFDA
  8474                           fsr2l	equ	0xFD9
  8475                           status	equ	0xFD8
  8476                           
  8477 ;; *************** function _Read_b_eep *****************
  8478 ;; Defined at:
  8479 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\read_B.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;  badd            2    0[BANK0 ] unsigned int 
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;		None
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  1    wreg      unsigned char 
  8486 ;; Registers used:
  8487 ;;		wreg, status,2
  8488 ;; Tracked objects:
  8489 ;;		On entry : F/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8493 ;;      Params:         0       2       0       0       0       0       0       0       0
  8494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8496 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8497 ;;Total ram usage:        2 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; Hardware stack levels required when called:    6
  8500 ;; This function calls:
  8501 ;;		Nothing
  8502 ;; This function is called by:
  8503 ;;		_main
  8504 ;;		_carregar_senha
  8505 ;;		_verificar_num_contas
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text31
  8510  005F4E                     __ptext31:
  8511                           	opt stack 0
  8512  005F4E                     _Read_b_eep:
  8513                           	opt stack 23
  8514                           
  8515                           ; BSR set to: 0
  8516                           
  8517                           ;incstack = 0
  8518  005F4E  C0B8  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  8519  005F52  9CA6               	bcf	4006,6,c	;volatile
  8520  005F54  9EA6               	bcf	4006,7,c	;volatile
  8521  005F56  80A6               	bsf	4006,0,c	;volatile
  8522  005F58  F000               	nop	
  8523  005F5A  F000               	nop	
  8524  005F5C  50A8               	movf	4008,w,c	;volatile
  8525  005F5E  0012               	return		;funcret
  8526  005F60                     __end_of_Read_b_eep:
  8527                           	opt stack 0
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon2	equ	0xFF1
  8536                           indf0	equ	0xFEF
  8537                           postinc0	equ	0xFEE
  8538                           plusw0	equ	0xFEB
  8539                           fsr0h	equ	0xFEA
  8540                           fsr0l	equ	0xFE9
  8541                           wreg	equ	0xFE8
  8542                           indf1	equ	0xFE7
  8543                           postinc1	equ	0xFE6
  8544                           postdec1	equ	0xFE5
  8545                           plusw1	equ	0xFE3
  8546                           fsr1h	equ	0xFE2
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           plusw2	equ	0xFDB
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _ascii_para_numero *****************
  8557 ;; Defined at:
  8558 ;;		line 115 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  caractere3      1    wreg     unsigned char 
  8561 ;;  caractere2      1    0[BANK0 ] unsigned char 
  8562 ;;  caractere1      1    1[BANK0 ] unsigned char 
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  caractere3      1    3[BANK0 ] unsigned char 
  8565 ;;  numero          1    2[BANK0 ] unsigned char 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      unsigned char 
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0, prodl, prodh
  8570 ;; Tracked objects:
  8571 ;;		On entry : F/0
  8572 ;;		On exit  : F/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8575 ;;      Params:         0       2       0       0       0       0       0       0       0
  8576 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8578 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8579 ;;Total ram usage:        4 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    6
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_main
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text32
  8590  0060FC                     __ptext32:
  8591                           	opt stack 0
  8592  0060FC                     _ascii_para_numero:
  8593                           	opt stack 24
  8594                           
  8595                           ;incstack = 0
  8596                           ;ascii_para_numero@caractere3 stored from wreg
  8597  0060FC  6FBB               	movwf	ascii_para_numero@caractere3& (0+255),b
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;ascii.c: 117: if(caractere3 == (0)) caractere3 = '0';
  8601  0060FE  51BB               	movf	ascii_para_numero@caractere3& (0+255),w,b
  8602  006100  E102               	bnz	l465
  8603                           
  8604                           ; BSR set to: 0
  8605  006102  0E30               	movlw	48
  8606  006104  6FBB               	movwf	ascii_para_numero@caractere3& (0+255),b
  8607  006106                     l465:
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;ascii.c: 118: if(caractere2 == (0)) caractere2 = '0';
  8611  006106  51B8               	movf	ascii_para_numero@caractere2& (0+255),w,b
  8612  006108  E102               	bnz	l5659
  8613                           
  8614                           ; BSR set to: 0
  8615  00610A  0E30               	movlw	48
  8616  00610C  6FB8               	movwf	ascii_para_numero@caractere2& (0+255),b
  8617  00610E                     l5659:
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;ascii.c: 120: char numero;
  8621                           ;ascii.c: 121: numero=((caractere3 - '0')*100);
  8622  00610E  51BB               	movf	ascii_para_numero@caractere3& (0+255),w,b
  8623  006110  0FD0               	addlw	208
  8624  006112  0D64               	mullw	100
  8625  006114  CFF3 F0BA          	movff	prodl,ascii_para_numero@numero
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;ascii.c: 122: numero+=((caractere2 - '0')*10);
  8629  006118  51B8               	movf	ascii_para_numero@caractere2& (0+255),w,b
  8630  00611A  0FD0               	addlw	208
  8631  00611C  0D0A               	mullw	10
  8632  00611E  50F3               	movf	prodl,w,c
  8633  006120  27BA               	addwf	ascii_para_numero@numero& (0+255),f,b
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;ascii.c: 123: numero+=(caractere1 - '0');
  8637  006122  51B9               	movf	ascii_para_numero@caractere1& (0+255),w,b
  8638  006124  0FD0               	addlw	208
  8639  006126  27BA               	addwf	ascii_para_numero@numero& (0+255),f,b
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;ascii.c: 124: return numero;}
  8643  006128  51BA               	movf	ascii_para_numero@numero& (0+255),w,b
  8644                           
  8645                           ; BSR set to: 0
  8646  00612A  0012               	return		;funcret
  8647  00612C                     __end_of_ascii_para_numero:
  8648                           	opt stack 0
  8649                           tblptru	equ	0xFF8
  8650                           tblptrh	equ	0xFF7
  8651                           tblptrl	equ	0xFF6
  8652                           tablat	equ	0xFF5
  8653                           prodh	equ	0xFF4
  8654                           prodl	equ	0xFF3
  8655                           intcon	equ	0xFF2
  8656                           intcon2	equ	0xFF1
  8657                           indf0	equ	0xFEF
  8658                           postinc0	equ	0xFEE
  8659                           plusw0	equ	0xFEB
  8660                           fsr0h	equ	0xFEA
  8661                           fsr0l	equ	0xFE9
  8662                           wreg	equ	0xFE8
  8663                           indf1	equ	0xFE7
  8664                           postinc1	equ	0xFE6
  8665                           postdec1	equ	0xFE5
  8666                           plusw1	equ	0xFE3
  8667                           fsr1h	equ	0xFE2
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           postdec2	equ	0xFDD
  8672                           plusw2	equ	0xFDB
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function ___awmod *****************
  8678 ;; Defined at:
  8679 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  dividend        2    0[BANK0 ] int 
  8682 ;;  divisor         2    2[BANK0 ] int 
  8683 ;; Auto vars:     Size  Location     Type
  8684 ;;  sign            1    5[BANK0 ] unsigned char 
  8685 ;;  counter         1    4[BANK0 ] unsigned char 
  8686 ;; Return value:  Size  Location     Type
  8687 ;;                  2    0[BANK0 ] int 
  8688 ;; Registers used:
  8689 ;;		wreg, status,2, status,0
  8690 ;; Tracked objects:
  8691 ;;		On entry : F/0
  8692 ;;		On exit  : F/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8695 ;;      Params:         0       4       0       0       0       0       0       0       0
  8696 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8698 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8699 ;;Total ram usage:        6 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    6
  8702 ;; This function calls:
  8703 ;;		Nothing
  8704 ;; This function is called by:
  8705 ;;		_main
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           	psect	text33
  8710  00649A                     __ptext33:
  8711                           	opt stack 0
  8712  00649A                     ___awmod:
  8713                           	opt stack 24
  8714                           
  8715                           ; BSR set to: 0
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;incstack = 0
  8719  00649A  6BBD               	clrf	___awmod@sign& (0+255),b
  8720                           
  8721                           ; BSR set to: 0
  8722  00649C  AFB9               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8723  00649E  D006               	goto	l5737
  8724                           
  8725                           ; BSR set to: 0
  8726  0064A0  6DB8               	negf	___awmod@dividend& (0+255),b
  8727  0064A2  1FB9               	comf	(___awmod@dividend+1)& (0+255),f,b
  8728  0064A4  B0D8               	btfsc	status,0,c
  8729  0064A6  2BB9               	incf	(___awmod@dividend+1)& (0+255),f,b
  8730                           
  8731                           ; BSR set to: 0
  8732  0064A8  0E01               	movlw	1
  8733  0064AA  6FBD               	movwf	___awmod@sign& (0+255),b
  8734  0064AC                     l5737:
  8735                           
  8736                           ; BSR set to: 0
  8737  0064AC  AFBB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8738  0064AE  D004               	goto	l5741
  8739                           
  8740                           ; BSR set to: 0
  8741  0064B0  6DBA               	negf	___awmod@divisor& (0+255),b
  8742  0064B2  1FBB               	comf	(___awmod@divisor+1)& (0+255),f,b
  8743  0064B4  B0D8               	btfsc	status,0,c
  8744  0064B6  2BBB               	incf	(___awmod@divisor+1)& (0+255),f,b
  8745  0064B8                     l5741:
  8746                           
  8747                           ; BSR set to: 0
  8748  0064B8  51BA               	movf	___awmod@divisor& (0+255),w,b
  8749  0064BA  11BB               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8750  0064BC  E017               	bz	l5757
  8751                           
  8752                           ; BSR set to: 0
  8753  0064BE  0E01               	movlw	1
  8754  0064C0  6FBC               	movwf	___awmod@counter& (0+255),b
  8755  0064C2  D004               	goto	l5747
  8756  0064C4                     l5745:
  8757                           
  8758                           ; BSR set to: 0
  8759  0064C4  90D8               	bcf	status,0,c
  8760  0064C6  37BA               	rlcf	___awmod@divisor& (0+255),f,b
  8761  0064C8  37BB               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8762  0064CA  2BBC               	incf	___awmod@counter& (0+255),f,b
  8763  0064CC                     l5747:
  8764                           
  8765                           ; BSR set to: 0
  8766  0064CC  AFBB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8767  0064CE  D7FA               	goto	l5745
  8768  0064D0                     l5749:
  8769                           
  8770                           ; BSR set to: 0
  8771  0064D0  51BA               	movf	___awmod@divisor& (0+255),w,b
  8772  0064D2  5DB8               	subwf	___awmod@dividend& (0+255),w,b
  8773  0064D4  51BB               	movf	(___awmod@divisor+1)& (0+255),w,b
  8774  0064D6  59B9               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8775  0064D8  E304               	bnc	l5753
  8776                           
  8777                           ; BSR set to: 0
  8778  0064DA  51BA               	movf	___awmod@divisor& (0+255),w,b
  8779  0064DC  5FB8               	subwf	___awmod@dividend& (0+255),f,b
  8780  0064DE  51BB               	movf	(___awmod@divisor+1)& (0+255),w,b
  8781  0064E0  5BB9               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8782  0064E2                     l5753:
  8783                           
  8784                           ; BSR set to: 0
  8785  0064E2  90D8               	bcf	status,0,c
  8786  0064E4  33BB               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8787  0064E6  33BA               	rrcf	___awmod@divisor& (0+255),f,b
  8788                           
  8789                           ; BSR set to: 0
  8790  0064E8  2FBC               	decfsz	___awmod@counter& (0+255),f,b
  8791  0064EA  D7F2               	goto	l5749
  8792  0064EC                     l5757:
  8793                           
  8794                           ; BSR set to: 0
  8795  0064EC  51BD               	movf	___awmod@sign& (0+255),w,b
  8796  0064EE  E004               	bz	l5761
  8797                           
  8798                           ; BSR set to: 0
  8799  0064F0  6DB8               	negf	___awmod@dividend& (0+255),b
  8800  0064F2  1FB9               	comf	(___awmod@dividend+1)& (0+255),f,b
  8801  0064F4  B0D8               	btfsc	status,0,c
  8802  0064F6  2BB9               	incf	(___awmod@dividend+1)& (0+255),f,b
  8803  0064F8                     l5761:
  8804                           
  8805                           ; BSR set to: 0
  8806  0064F8  C0B8  F0B8         	movff	___awmod@dividend,?___awmod
  8807  0064FC  C0B9  F0B9         	movff	___awmod@dividend+1,?___awmod+1
  8808                           
  8809                           ; BSR set to: 0
  8810  006500  0012               	return		;funcret
  8811  006502                     __end_of___awmod:
  8812                           	opt stack 0
  8813                           tblptru	equ	0xFF8
  8814                           tblptrh	equ	0xFF7
  8815                           tblptrl	equ	0xFF6
  8816                           tablat	equ	0xFF5
  8817                           prodh	equ	0xFF4
  8818                           prodl	equ	0xFF3
  8819                           intcon	equ	0xFF2
  8820                           intcon2	equ	0xFF1
  8821                           indf0	equ	0xFEF
  8822                           postinc0	equ	0xFEE
  8823                           plusw0	equ	0xFEB
  8824                           fsr0h	equ	0xFEA
  8825                           fsr0l	equ	0xFE9
  8826                           wreg	equ	0xFE8
  8827                           indf1	equ	0xFE7
  8828                           postinc1	equ	0xFE6
  8829                           postdec1	equ	0xFE5
  8830                           plusw1	equ	0xFE3
  8831                           fsr1h	equ	0xFE2
  8832                           fsr1l	equ	0xFE1
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           plusw2	equ	0xFDB
  8837                           fsr2h	equ	0xFDA
  8838                           fsr2l	equ	0xFD9
  8839                           status	equ	0xFD8
  8840                           
  8841 ;; *************** function _aux *****************
  8842 ;; Defined at:
  8843 ;;		line 107 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;		None
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  RCREG_temp      1   44[COMRAM] unsigned char 
  8848 ;;  temp            1    0        unsigned char 
  8849 ;;  temp            1    0        unsigned char 
  8850 ;;  linha           1   46[COMRAM] unsigned char 
  8851 ;;  coluna          1   45[COMRAM] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;		None               void
  8854 ;; Registers used:
  8855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8861 ;;      Params:         0       0       0       0       0       0       0       0       0
  8862 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8863 ;;      Temps:         12       0       0       0       0       0       0       0       0
  8864 ;;      Totals:        17       0       0       0       0       0       0       0       0
  8865 ;;Total ram usage:       17 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    5
  8868 ;; This function calls:
  8869 ;;		_teclado_matricial
  8870 ;;		i2_lcd_gotoxy
  8871 ;;		i2_printf
  8872 ;;		i2_resetar_timer1
  8873 ;; This function is called by:
  8874 ;;		Interrupt level 2
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           	psect	intcode
  8879  001008                     __pintcode:
  8880                           	opt stack 0
  8881  001008                     _aux:
  8882                           	opt stack 20
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;incstack = 0
  8886  001008  CFE9 F021          	movff	fsr0l,??_aux+2
  8887  00100C  CFEA F022          	movff	fsr0h,??_aux+3
  8888  001010  CFD9 F023          	movff	fsr2l,??_aux+4
  8889  001014  EDCE  F035         	call	int_func,f	;refresh shadow registers
  8890                           tblptru	equ	0xFF8
  8891                           tblptrh	equ	0xFF7
  8892                           tblptrl	equ	0xFF6
  8893                           tablat	equ	0xFF5
  8894                           prodh	equ	0xFF4
  8895                           prodl	equ	0xFF3
  8896                           intcon	equ	0xFF2
  8897                           intcon2	equ	0xFF1
  8898                           indf0	equ	0xFEF
  8899                           postinc0	equ	0xFEE
  8900                           plusw0	equ	0xFEB
  8901                           fsr0h	equ	0xFEA
  8902                           fsr0l	equ	0xFE9
  8903                           wreg	equ	0xFE8
  8904                           indf1	equ	0xFE7
  8905                           postinc1	equ	0xFE6
  8906                           postdec1	equ	0xFE5
  8907                           plusw1	equ	0xFE3
  8908                           fsr1h	equ	0xFE2
  8909                           fsr1l	equ	0xFE1
  8910                           indf2	equ	0xFDF
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           plusw2	equ	0xFDB
  8914                           fsr2h	equ	0xFDA
  8915                           fsr2l	equ	0xFD9
  8916                           status	equ	0xFD8
  8917                           
  8918                           	psect	intcode_body
  8919  006B9C                     __pintcode_body:
  8920                           	opt stack 20
  8921  006B9C                     int_func:
  8922                           	opt stack 20
  8923  006B9C  0006               	pop		; remove dummy address from shadow register refresh
  8924  006B9E  CFDA F024          	movff	fsr2h,??_aux+5
  8925  006BA2  CFF3 F025          	movff	prodl,??_aux+6
  8926  006BA6  CFF4 F026          	movff	prodh,??_aux+7
  8927  006BAA  CFF6 F027          	movff	tblptrl,??_aux+8
  8928  006BAE  CFF7 F028          	movff	tblptrh,??_aux+9
  8929  006BB2  CFF8 F029          	movff	tblptru,??_aux+10
  8930  006BB6  CFF5 F02A          	movff	tablat,??_aux+11
  8931                           
  8932                           ;main.c: 109: if(TMR1IE && TMR1IF){
  8933  006BBA  B09D               	btfsc	3997,0,c	;volatile
  8934  006BBC  A09E               	btfss	3998,0,c	;volatile
  8935  006BBE  D032               	goto	i2l4295
  8936                           
  8937                           ;main.c: 110: TMR1IF=0;
  8938  006BC0  909E               	bcf	3998,0,c	;volatile
  8939                           
  8940                           ;main.c: 111: resetar_timer1(0xC0,0);
  8941  006BC2  6A01               	clrf	i2resetar_timer1@valor_l,c
  8942  006BC4  0EC0               	movlw	192
  8943  006BC6  EC92  F02F         	call	i2_resetar_timer1
  8944                           
  8945                           ;main.c: 113: if((FLAGS_3 & (1<<2))){
  8946  006BCA  A438               	btfss	_FLAGS_3,2,c
  8947  006BCC  D005               	goto	i2l180
  8948                           
  8949                           ;main.c: 114: qtd_caracteres_recebidos_serial=0;
  8950  006BCE  6A3B               	clrf	_qtd_caracteres_recebidos_serial,c
  8951                           
  8952                           ;main.c: 115: (FLAGS_1 |= (1<<1));
  8953  006BD0  0100               	movlb	0	; () banked
  8954  006BD2  8370               	bsf	_FLAGS_1& (0+255),1,b
  8955                           
  8956                           ;main.c: 116: (FLAGS_2 |= (1<<0));
  8957  006BD4  8037               	bsf	_FLAGS_2,0,c
  8958                           
  8959                           ;main.c: 117: }
  8960  006BD6  D026               	goto	i2l4295
  8961  006BD8                     i2l180:
  8962                           
  8963                           ;main.c: 119: else if((FLAGS_3 & (1<<4))){
  8964  006BD8  A838               	btfss	_FLAGS_3,4,c
  8965  006BDA  D010               	goto	i2l182
  8966                           
  8967                           ;main.c: 120: (FLAGS_3 &= ~(1<<(FLAGS_3 & (1<<4))));
  8968  006BDC  C038  F01F         	movff	_FLAGS_3,??_aux
  8969  006BE0  0E10               	movlw	16
  8970  006BE2  161F               	andwf	??_aux,f,c
  8971  006BE4  0E01               	movlw	1
  8972  006BE6  6E20               	movwf	(??_aux+1)& (0+255),c
  8973  006BE8  2A1F               	incf	??_aux,f,c
  8974  006BEA  D002               	goto	i2u416_44
  8975  006BEC                     i2u416_45:
  8976  006BEC  90D8               	bcf	status,0,c
  8977  006BEE  3620               	rlcf	??_aux+1,f,c
  8978  006BF0                     i2u416_44:
  8979  006BF0  2E1F               	decfsz	??_aux,f,c
  8980  006BF2  D7FC               	goto	i2u416_45
  8981  006BF4  1C20               	comf	??_aux+1,w,c
  8982  006BF6  1638               	andwf	_FLAGS_3,f,c
  8983                           
  8984                           ;main.c: 121: qtd_caracteres_recebidos_serial=0;}
  8985  006BF8  6A3B               	clrf	_qtd_caracteres_recebidos_serial,c
  8986  006BFA  D014               	goto	i2l4295
  8987  006BFC                     i2l182:
  8988                           
  8989                           ;main.c: 123: else if((FLAGS_3 & (1<<3)) && ++num_interrupt_timer1==5){
  8990  006BFC  A638               	btfss	_FLAGS_3,3,c
  8991  006BFE  D012               	goto	i2l4295
  8992  006C00  2A3A               	incf	_num_interrupt_timer1,f,c
  8993  006C02  0E05               	movlw	5
  8994  006C04  183A               	xorwf	_num_interrupt_timer1,w,c
  8995  006C06  E10E               	bnz	i2l4295
  8996                           
  8997                           ;main.c: 124: if((FLAGS_2 & (1<<4))){(FLAGS_2 |= (1<<1));}
  8998  006C08  B837               	btfsc	_FLAGS_2,4,c
  8999  006C0A  8237               	bsf	_FLAGS_2,1,c
  9000                           
  9001                           ;main.c: 125: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado);
  9002  006C0C  C03C  F002         	movff	_qtd_caracteres_recebidos_teclado,i2lcd_gotoxy@coluna
  9003  006C10  0E02               	movlw	2
  9004  006C12  EC77  F031         	call	i2_lcd_gotoxy
  9005                           
  9006                           ;main.c: 126: printf("*");
  9007  006C16  0EFD               	movlw	low STR_1
  9008  006C18  6E0D               	movwf	i2printf@f,c
  9009  006C1A  0E7F               	movlw	high STR_1
  9010  006C1C  6E0E               	movwf	i2printf@f+1,c
  9011  006C1E  EC11  F037         	call	i2_printf	;wreg free
  9012                           
  9013                           ;main.c: 127: num_interrupt_timer1=0;}
  9014  006C22  6A3A               	clrf	_num_interrupt_timer1,c
  9015  006C24                     i2l4295:
  9016                           
  9017                           ;main.c: 129: }
  9018                           ;main.c: 131: if(TMR0IE && TMR0IF){
  9019  006C24  BAF2               	btfsc	intcon,5,c	;volatile
  9020  006C26  A4F2               	btfss	intcon,2,c	;volatile
  9021  006C28  D051               	goto	i2l186
  9022                           
  9023                           ;main.c: 133: (FLAGS_2 |= (1<<7));
  9024  006C2A  8E37               	bsf	_FLAGS_2,7,c
  9025                           
  9026                           ;main.c: 134: (FLAGS_3 |= (1<<0));
  9027  006C2C  8038               	bsf	_FLAGS_3,0,c
  9028                           
  9029                           ;main.c: 135: TMR0H = 0xC2;
  9030  006C2E  0EC2               	movlw	194
  9031  006C30  6ED7               	movwf	4055,c	;volatile
  9032                           
  9033                           ;main.c: 136: TMR0L+=0xF7;
  9034  006C32  0EF7               	movlw	247
  9035  006C34  26D6               	addwf	4054,f,c	;volatile
  9036                           
  9037                           ;main.c: 137: TMR0IF=0;
  9038  006C36  94F2               	bcf	intcon,2,c	;volatile
  9039                           
  9040                           ;main.c: 138: LATDbits.LD1^=1;
  9041  006C38  728C               	btg	3980,1,c	;volatile
  9042                           
  9043                           ;main.c: 139: if(++data_atual.segundo>59){
  9044  006C3A  2A35               	incf	_data_atual+5,f,c
  9045  006C3C  0E3B               	movlw	59
  9046  006C3E  6435               	cpfsgt	_data_atual+5,c
  9047  006C40  D045               	goto	i2l186
  9048                           
  9049                           ;main.c: 140: data_atual.segundo=0;
  9050  006C42  6A35               	clrf	_data_atual+5,c
  9051                           
  9052                           ;main.c: 141: if(++data_atual.minuto>59){
  9053  006C44  2A34               	incf	_data_atual+4,f,c
  9054  006C46  0E3B               	movlw	59
  9055  006C48  6434               	cpfsgt	_data_atual+4,c
  9056  006C4A  D040               	goto	i2l186
  9057                           
  9058                           ;main.c: 143: data_atual.minuto=0;
  9059  006C4C  6A34               	clrf	_data_atual+4,c
  9060                           
  9061                           ;main.c: 145: if(++data_atual.hora>23){
  9062  006C4E  2A33               	incf	_data_atual+3,f,c
  9063  006C50  0E17               	movlw	23
  9064  006C52  6433               	cpfsgt	_data_atual+3,c
  9065  006C54  D03B               	goto	i2l186
  9066                           
  9067                           ;main.c: 147: data_atual.hora=0;
  9068  006C56  6A33               	clrf	_data_atual+3,c
  9069                           
  9070                           ;main.c: 148: if(++data_atual.dia_da_semana > 6) data_atual.dia_da_semana = 1;
  9071  006C58  2A36               	incf	_data_atual+6,f,c
  9072  006C5A  0E06               	movlw	6
  9073  006C5C  6436               	cpfsgt	_data_atual+6,c
  9074  006C5E  D002               	goto	i2l4325
  9075  006C60  0E01               	movlw	1
  9076  006C62  6E36               	movwf	_data_atual+6,c
  9077  006C64                     i2l4325:
  9078                           
  9079                           ;main.c: 150: if(++data_atual.dia >= qtd_max_dias) {
  9080  006C64  2A32               	incf	_data_atual+2,f,c
  9081  006C66  5049               	movf	_qtd_max_dias,w,c
  9082  006C68  5C32               	subwf	_data_atual+2,w,c
  9083  006C6A  E330               	bnc	i2l186
  9084                           
  9085                           ;main.c: 151: data_atual.dia=1;
  9086  006C6C  0E01               	movlw	1
  9087  006C6E  6E32               	movwf	_data_atual+2,c
  9088                           
  9089                           ;main.c: 153: switch(++data_atual.mes){
  9090  006C70  D012               	goto	i2l4345
  9091  006C72                     i2l4329:
  9092                           
  9093                           ;main.c: 155: case 3:
  9094                           ;main.c: 156: case 5:
  9095                           ;main.c: 157: case 7:
  9096                           ;main.c: 158: case 8:
  9097                           ;main.c: 159: case 10:
  9098                           ;main.c: 160: case 12:
  9099                           ;main.c: 161: qtd_max_dias=31;
  9100  006C72  0E1F               	movlw	31
  9101  006C74  D00B               	goto	L12
  9102  006C76                     i2l4331:
  9103                           
  9104                           ;main.c: 165: if(!((data_atual.ano+3)%4)) qtd_max_dias=29;
  9105  006C76  C030  F01F         	movff	_data_atual,??_aux
  9106  006C7A  0E03               	movlw	3
  9107  006C7C  261F               	addwf	??_aux,f,c
  9108  006C7E  161F               	andwf	??_aux,f,c
  9109  006C80  E102               	bnz	i2l4335
  9110  006C82  0E1D               	movlw	29
  9111  006C84  D003               	goto	L12
  9112  006C86                     i2l4335:
  9113                           
  9114                           ;main.c: 166: else qtd_max_dias=28;
  9115  006C86  0E1C               	movlw	28
  9116  006C88  D001               	goto	L12
  9117  006C8A                     i2l4337:
  9118                           
  9119                           ;main.c: 170: case 6:
  9120                           ;main.c: 171: case 9:
  9121                           ;main.c: 172: case 11:
  9122                           ;main.c: 173: qtd_max_dias=30;
  9123  006C8A  0E1E               	movlw	30
  9124  006C8C                     L12:
  9125  006C8C  6E49               	movwf	_qtd_max_dias,c
  9126                           
  9127                           ;main.c: 174: break;
  9128  006C8E  D01E               	goto	i2l186
  9129  006C90                     i2l4339:
  9130                           
  9131                           ;main.c: 177: data_atual.ano++;
  9132  006C90  2A30               	incf	_data_atual,f,c
  9133                           
  9134                           ;main.c: 178: data_atual.mes=0;
  9135  006C92  6A31               	clrf	_data_atual+1,c
  9136                           
  9137                           ;main.c: 179: break;}
  9138  006C94  D01B               	goto	i2l186
  9139  006C96                     i2l4345:
  9140  006C96  2A31               	incf	_data_atual+1,f,c
  9141  006C98  5031               	movf	_data_atual+1,w,c
  9142                           
  9143                           ; Switch size 1, requested type "space"
  9144                           ; Number of cases is 12, Range of values is 1 to 12
  9145                           ; switch strategies available:
  9146                           ; Name         Instructions Cycles
  9147                           ; simple_byte           37    19 (average)
  9148                           ;	Chosen strategy is simple_byte
  9149  006C9A  0A01               	xorlw	1	; case 1
  9150  006C9C  E0EA               	bz	i2l4329
  9151  006C9E  0A03               	xorlw	3	; case 2
  9152  006CA0  E0EA               	bz	i2l4331
  9153  006CA2  0A01               	xorlw	1	; case 3
  9154  006CA4  E0E6               	bz	i2l4329
  9155  006CA6  0A07               	xorlw	7	; case 4
  9156  006CA8  E0F0               	bz	i2l4337
  9157  006CAA  0A01               	xorlw	1	; case 5
  9158  006CAC  E0E2               	bz	i2l4329
  9159  006CAE  0A03               	xorlw	3	; case 6
  9160  006CB0  E0EC               	bz	i2l4337
  9161  006CB2  0A01               	xorlw	1	; case 7
  9162  006CB4  E0DE               	bz	i2l4329
  9163  006CB6  0A0F               	xorlw	15	; case 8
  9164  006CB8  E0DC               	bz	i2l4329
  9165  006CBA  0A01               	xorlw	1	; case 9
  9166  006CBC  E0E6               	bz	i2l4337
  9167  006CBE  0A03               	xorlw	3	; case 10
  9168  006CC0  E0D8               	bz	i2l4329
  9169  006CC2  0A01               	xorlw	1	; case 11
  9170  006CC4  E0E2               	bz	i2l4337
  9171  006CC6  0A07               	xorlw	7	; case 12
  9172  006CC8  E0D4               	bz	i2l4329
  9173  006CCA  D7E2               	goto	i2l4339
  9174  006CCC                     i2l186:
  9175                           
  9176                           ;main.c: 180: }
  9177                           ;main.c: 181: }
  9178                           ;main.c: 182: }
  9179                           ;main.c: 183: }
  9180                           ;main.c: 184: }
  9181                           ;main.c: 186: if(RBIE && RBIF){
  9182  006CCC  B6F2               	btfsc	intcon,3,c	;volatile
  9183  006CCE  A0F2               	btfss	intcon,0,c	;volatile
  9184  006CD0  D056               	goto	i2l4405
  9185                           
  9186                           ;main.c: 188: PORTB_SR=(PORTB&0xF0);
  9187  006CD2  5081               	movf	3969,w,c	;volatile
  9188  006CD4  0BF0               	andlw	240
  9189  006CD6  6E39               	movwf	_PORTB_SR,c
  9190                           
  9191                           ;main.c: 189: RBIF=0;
  9192  006CD8  90F2               	bcf	intcon,0,c	;volatile
  9193                           
  9194                           ;main.c: 190: if(PORTB_SR != 0xF0) {
  9195  006CDA  0EF0               	movlw	240
  9196  006CDC  1839               	xorwf	_PORTB_SR,w,c
  9197  006CDE  E04C               	bz	i2l4403
  9198                           
  9199                           ;main.c: 191: RBIE=0;
  9200  006CE0  96F2               	bcf	intcon,3,c	;volatile
  9201                           
  9202                           ;main.c: 192: (FLAGS_2 |= (1<<3));
  9203  006CE2  8637               	bsf	_FLAGS_2,3,c
  9204                           
  9205                           ;main.c: 193: (FLAGS_3 |= (1<<3));;
  9206  006CE4  8638               	bsf	_FLAGS_3,3,c
  9207                           
  9208                           ;main.c: 194: LATDbits.LD0^=1;
  9209  006CE6  708C               	btg	3980,0,c	;volatile
  9210                           
  9211                           ;main.c: 197: if(PORTBbits.RB7==0){coluna=1;}
  9212  006CE8  BE81               	btfsc	3969,7,c	;volatile
  9213  006CEA  D002               	goto	i2l211
  9214  006CEC  0E01               	movlw	1
  9215  006CEE  D00B               	goto	L15
  9216  006CF0                     i2l211:
  9217                           
  9218                           ;main.c: 199: else if(PORTBbits.RB6==0){coluna=2;}
  9219  006CF0  BC81               	btfsc	3969,6,c	;volatile
  9220  006CF2  D002               	goto	i2l213
  9221  006CF4  0E02               	movlw	2
  9222  006CF6  D007               	goto	L15
  9223  006CF8                     i2l213:
  9224                           
  9225                           ;main.c: 201: else if(PORTBbits.RB5==0){coluna=3;}
  9226  006CF8  BA81               	btfsc	3969,5,c	;volatile
  9227  006CFA  D002               	goto	i2l215
  9228  006CFC  0E03               	movlw	3
  9229  006CFE  D003               	goto	L15
  9230  006D00                     i2l215:
  9231                           
  9232                           ;main.c: 203: else if(PORTBbits.RB4==0){coluna=4;}
  9233  006D00  B881               	btfsc	3969,4,c	;volatile
  9234  006D02  D003               	goto	i2l217
  9235  006D04  0E04               	movlw	4
  9236  006D06                     L15:
  9237  006D06  6E2E               	movwf	aux@coluna,c
  9238  006D08  D001               	goto	i2l4371
  9239  006D0A                     i2l217:
  9240                           
  9241                           ;main.c: 205: else{coluna=0;}
  9242  006D0A  6A2E               	clrf	aux@coluna,c
  9243  006D0C                     i2l4371:
  9244                           
  9245                           ;main.c: 208: TRISB&=0x0F;
  9246  006D0C  0E0F               	movlw	15
  9247  006D0E  1693               	andwf	3987,f,c	;volatile
  9248                           
  9249                           ;main.c: 209: LATB|=0xF0;
  9250  006D10  0EF0               	movlw	240
  9251  006D12  128A               	iorwf	3978,f,c	;volatile
  9252  006D14                     i2l4373:
  9253  006D14  CF83 F01F          	movff	3971,??_aux	;volatile
  9254  006D18  0EF0               	movlw	240
  9255  006D1A  161F               	andwf	??_aux,f,c
  9256  006D1C  E1FB               	bnz	i2l4373
  9257                           
  9258                           ;main.c: 215: TRISD|=0xF0;
  9259  006D1E  1295               	iorwf	3989,f,c	;volatile
  9260                           
  9261                           ;main.c: 219: if(PORTDbits.RD4==1){linha=1;}
  9262  006D20  A883               	btfss	3971,4,c	;volatile
  9263  006D22  D002               	goto	i2l225
  9264  006D24  0E01               	movlw	1
  9265  006D26  D00B               	goto	L18
  9266  006D28                     i2l225:
  9267                           
  9268                           ;main.c: 221: else if(PORTDbits.RD5==1){linha=2;}
  9269  006D28  AA83               	btfss	3971,5,c	;volatile
  9270  006D2A  D002               	goto	i2l227
  9271  006D2C  0E02               	movlw	2
  9272  006D2E  D007               	goto	L18
  9273  006D30                     i2l227:
  9274                           
  9275                           ;main.c: 223: else if(PORTDbits.RD6==1){linha=3;}
  9276  006D30  AC83               	btfss	3971,6,c	;volatile
  9277  006D32  D002               	goto	i2l229
  9278  006D34  0E03               	movlw	3
  9279  006D36  D003               	goto	L18
  9280  006D38                     i2l229:
  9281                           
  9282                           ;main.c: 225: else if(PORTDbits.RD7==1){linha=4;}
  9283  006D38  AE83               	btfss	3971,7,c	;volatile
  9284  006D3A  D003               	goto	i2l231
  9285  006D3C  0E04               	movlw	4
  9286  006D3E                     L18:
  9287  006D3E  6E2F               	movwf	aux@linha,c
  9288  006D40  D001               	goto	i2l4387
  9289  006D42                     i2l231:
  9290                           
  9291                           ;main.c: 227: else{linha=0;}
  9292  006D42  6A2F               	clrf	aux@linha,c
  9293  006D44                     i2l4387:
  9294                           
  9295                           ;main.c: 229: if(linha && coluna){
  9296  006D44  502F               	movf	aux@linha,w,c
  9297  006D46  E009               	bz	i2l4393
  9298  006D48  502E               	movf	aux@coluna,w,c
  9299  006D4A  E007               	bz	i2l4393
  9300                           
  9301                           ;main.c: 231: caractere_recebido = teclado_matricial(coluna,linha);
  9302  006D4C  C02F  F001         	movff	aux@linha,teclado_matricial@linha
  9303  006D50  502E               	movf	aux@coluna,w,c
  9304  006D52  ECE5  F033         	call	_teclado_matricial
  9305  006D56  0100               	movlb	0	; () banked
  9306  006D58  6F73               	movwf	_caractere_recebido& (0+255),b
  9307  006D5A                     i2l4393:
  9308                           
  9309                           ;main.c: 233: }
  9310                           ;main.c: 235: TRISB|=0xF0;
  9311  006D5A  0EF0               	movlw	240
  9312  006D5C  1293               	iorwf	3987,f,c	;volatile
  9313                           
  9314                           ;main.c: 236: LATD&=0x0F;
  9315  006D5E  0E0F               	movlw	15
  9316  006D60  168C               	andwf	3980,f,c	;volatile
  9317                           
  9318                           ;main.c: 237: TRISD&=0X0F;
  9319  006D62  0E0F               	movlw	15
  9320  006D64  1695               	andwf	3989,f,c	;volatile
  9321  006D66                     i2l4399:
  9322  006D66  CF83 F01F          	movff	3971,??_aux	;volatile
  9323  006D6A  0EF0               	movlw	240
  9324  006D6C  161F               	andwf	??_aux,f,c
  9325  006D6E  E1FB               	bnz	i2l4399
  9326  006D70                     i2l4401:
  9327  006D70  5081               	movf	3969,w,c	;volatile
  9328  006D72  0BF0               	andlw	240
  9329  006D74  0AF0               	xorlw	240
  9330  006D76  E1FC               	bnz	i2l4401
  9331  006D78                     i2l4403:
  9332                           
  9333                           ;main.c: 242: }
  9334                           ;main.c: 244: PORTB_SR=(PORTB&0xF0);}
  9335  006D78  5081               	movf	3969,w,c	;volatile
  9336  006D7A  0BF0               	andlw	240
  9337  006D7C  6E39               	movwf	_PORTB_SR,c
  9338  006D7E                     i2l4405:
  9339                           
  9340                           ;main.c: 246: if(RCIE && RCIF){
  9341  006D7E  BA9D               	btfsc	3997,5,c	;volatile
  9342  006D80  AA9E               	btfss	3998,5,c	;volatile
  9343  006D82  D03A               	goto	i2l254
  9344                           
  9345                           ;main.c: 247: (FLAGS_3 |= (1<<2));(FLAGS_3 &= ~(1<<3));
  9346  006D84  8438               	bsf	_FLAGS_3,2,c
  9347  006D86  9638               	bcf	_FLAGS_3,3,c
  9348                           
  9349                           ;main.c: 249: if(OERR==1){
  9350  006D88  A2AB               	btfss	4011,1,c	;volatile
  9351  006D8A  D00A               	goto	i2l241
  9352                           
  9353                           ;main.c: 250: (FLAGS_1 |= (1<<4));
  9354  006D8C  0100               	movlb	0	; () banked
  9355  006D8E  8970               	bsf	_FLAGS_1& (0+255),4,b
  9356  006D90                     i2l4415:
  9357  006D90  50AE               	movf	4014,w,c	;volatile
  9358                           
  9359                           ;main.c: 254: CREN = 0;
  9360  006D92  98AB               	bcf	4011,4,c	;volatile
  9361                           
  9362                           ;main.c: 255: CREN = 1;
  9363  006D94  88AB               	bsf	4011,4,c	;volatile
  9364                           
  9365                           ;main.c: 258: }while(OERR);
  9366  006D96  B2AB               	btfsc	4011,1,c	;volatile
  9367  006D98  D7FB               	goto	i2l4415
  9368  006D9A                     i2l4423:
  9369                           
  9370                           ;main.c: 260: (FLAGS_2 |= (1<<0));
  9371  006D9A  8037               	bsf	_FLAGS_2,0,c
  9372                           
  9373                           ;main.c: 261: (FLAGS_2 &= ~(1<<1));
  9374  006D9C  9237               	bcf	_FLAGS_2,1,c
  9375                           
  9376                           ;main.c: 263: }
  9377  006D9E  D02B               	goto	i2l4453
  9378  006DA0                     i2l241:
  9379                           
  9380                           ;main.c: 265: else if(FERR==1){
  9381  006DA0  A4AB               	btfss	4011,2,c	;volatile
  9382  006DA2  D008               	goto	i2l4437
  9383                           
  9384                           ;main.c: 266: (FLAGS_1 |= (1<<4));
  9385  006DA4  0100               	movlb	0	; () banked
  9386  006DA6  8970               	bsf	_FLAGS_1& (0+255),4,b
  9387  006DA8                     i2l4427:
  9388  006DA8  50AE               	movf	4014,w,c	;volatile
  9389                           
  9390                           ;main.c: 270: SPEN=0;
  9391  006DAA  9EAB               	bcf	4011,7,c	;volatile
  9392                           
  9393                           ;main.c: 271: SPEN=1;
  9394  006DAC  8EAB               	bsf	4011,7,c	;volatile
  9395                           
  9396                           ;main.c: 273: }while(FERR);
  9397  006DAE  A4AB               	btfss	4011,2,c	;volatile
  9398  006DB0  D7F4               	goto	i2l4423
  9399  006DB2  D7FA               	goto	i2l4427
  9400  006DB4                     i2l4437:
  9401                           
  9402                           ;main.c: 278: else{
  9403                           ;main.c: 279: resetar_timer1(0xC0,0);
  9404  006DB4  6A01               	clrf	i2resetar_timer1@valor_l,c
  9405  006DB6  0EC0               	movlw	192
  9406  006DB8  EC92  F02F         	call	i2_resetar_timer1
  9407                           
  9408                           ;main.c: 280: char RCREG_temp;
  9409                           ;main.c: 281: RCREG_temp = RCREG;
  9410  006DBC  CFAE F02D          	movff	4014,aux@RCREG_temp	;volatile
  9411                           
  9412                           ;main.c: 296: buffer_serial[qtd_caracteres_recebidos_serial] = RCREG_temp;
  9413  006DC0  0E00               	movlw	low _buffer_serial
  9414  006DC2  243B               	addwf	_qtd_caracteres_recebidos_serial,w,c
  9415  006DC4  6ED9               	movwf	fsr2l,c
  9416  006DC6  6ADA               	clrf	fsr2h,c
  9417  006DC8  0E01               	movlw	high _buffer_serial
  9418  006DCA  22DA               	addwfc	fsr2h,f,c
  9419  006DCC  C02D  FFDF         	movff	aux@RCREG_temp,indf2
  9420                           
  9421                           ;main.c: 297: TMR1ON=1;
  9422  006DD0  80CD               	bsf	4045,0,c	;volatile
  9423                           
  9424                           ;main.c: 299: if(++qtd_caracteres_recebidos_serial == 80 || buffer_serial[qtd_caracteres
      +                          _recebidos_serial-1] == 'F'){
  9425  006DD2  2A3B               	incf	_qtd_caracteres_recebidos_serial,f,c
  9426  006DD4  0E50               	movlw	80
  9427  006DD6  183B               	xorwf	_qtd_caracteres_recebidos_serial,w,c
  9428  006DD8  E009               	bz	i2l4449
  9429  006DDA  0EFF               	movlw	low (_buffer_serial+65535)
  9430  006DDC  243B               	addwf	_qtd_caracteres_recebidos_serial,w,c
  9431  006DDE  6ED9               	movwf	fsr2l,c
  9432  006DE0  6ADA               	clrf	fsr2h,c
  9433  006DE2  0E00               	movlw	high (_buffer_serial+65535)
  9434  006DE4  22DA               	addwfc	fsr2h,f,c
  9435  006DE6  0E46               	movlw	70
  9436  006DE8  18DE               	xorwf	postinc2,w,c
  9437  006DEA  E105               	bnz	i2l4453
  9438  006DEC                     i2l4449:
  9439                           
  9440                           ;main.c: 300: (FLAGS_2 |= (1<<1));
  9441  006DEC  8237               	bsf	_FLAGS_2,1,c
  9442                           
  9443                           ;main.c: 301: resetar_timer1(0xC0,0);
  9444  006DEE  6A01               	clrf	i2resetar_timer1@valor_l,c
  9445  006DF0  0EC0               	movlw	192
  9446  006DF2  EC92  F02F         	call	i2_resetar_timer1
  9447  006DF6                     i2l4453:
  9448                           
  9449                           ;main.c: 302: }
  9450                           ;main.c: 306: }
  9451                           ;main.c: 308: RCIF=0;}
  9452  006DF6  9A9E               	bcf	3998,5,c	;volatile
  9453  006DF8                     i2l254:
  9454  006DF8  C02A  FFF5         	movff	??_aux+11,tablat
  9455  006DFC  C029  FFF8         	movff	??_aux+10,tblptru
  9456  006E00  C028  FFF7         	movff	??_aux+9,tblptrh
  9457  006E04  C027  FFF6         	movff	??_aux+8,tblptrl
  9458  006E08  C026  FFF4         	movff	??_aux+7,prodh
  9459  006E0C  C025  FFF3         	movff	??_aux+6,prodl
  9460  006E10  C024  FFDA         	movff	??_aux+5,fsr2h
  9461  006E14  C023  FFD9         	movff	??_aux+4,fsr2l
  9462  006E18  C022  FFEA         	movff	??_aux+3,fsr0h
  9463  006E1C  C021  FFE9         	movff	??_aux+2,fsr0l
  9464  006E20  0011               	retfie		f
  9465  006E22                     __end_of_aux:
  9466                           	opt stack 0
  9467                           tblptru	equ	0xFF8
  9468                           tblptrh	equ	0xFF7
  9469                           tblptrl	equ	0xFF6
  9470                           tablat	equ	0xFF5
  9471                           prodh	equ	0xFF4
  9472                           prodl	equ	0xFF3
  9473                           intcon	equ	0xFF2
  9474                           intcon2	equ	0xFF1
  9475                           indf0	equ	0xFEF
  9476                           postinc0	equ	0xFEE
  9477                           plusw0	equ	0xFEB
  9478                           fsr0h	equ	0xFEA
  9479                           fsr0l	equ	0xFE9
  9480                           wreg	equ	0xFE8
  9481                           indf1	equ	0xFE7
  9482                           postinc1	equ	0xFE6
  9483                           postdec1	equ	0xFE5
  9484                           plusw1	equ	0xFE3
  9485                           fsr1h	equ	0xFE2
  9486                           fsr1l	equ	0xFE1
  9487                           indf2	equ	0xFDF
  9488                           postinc2	equ	0xFDE
  9489                           postdec2	equ	0xFDD
  9490                           plusw2	equ	0xFDB
  9491                           fsr2h	equ	0xFDA
  9492                           fsr2l	equ	0xFD9
  9493                           status	equ	0xFD8
  9494                           
  9495 ;; *************** function i2_resetar_timer1 *****************
  9496 ;; Defined at:
  9497 ;;		line 41 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;  valor_h         1    wreg     unsigned char 
  9500 ;;  valor_l         1    0[COMRAM] unsigned char 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  valor_h         1    1[COMRAM] unsigned char 
  9503 ;; Return value:  Size  Location     Type
  9504 ;;		None               void
  9505 ;; Registers used:
  9506 ;;		wreg
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9512 ;;      Params:         1       0       0       0       0       0       0       0       0
  9513 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9515 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9516 ;;Total ram usage:        2 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; This function calls:
  9519 ;;		Nothing
  9520 ;; This function is called by:
  9521 ;;		_aux
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525                           	psect	text35
  9526  005F24                     __ptext35:
  9527                           	opt stack 0
  9528  005F24                     i2_resetar_timer1:
  9529                           	opt stack 24
  9530                           
  9531                           ;incstack = 0
  9532                           ;i2resetar_timer1@valor_h stored from wreg
  9533  005F24  6E02               	movwf	i2resetar_timer1@valor_h,c
  9534                           
  9535                           ;time.c: 42: TMR1ON=0;
  9536  005F26  90CD               	bcf	4045,0,c	;volatile
  9537                           
  9538                           ;time.c: 43: TMR1H=valor_h;
  9539  005F28  C002  FFCF         	movff	i2resetar_timer1@valor_h,4047	;volatile
  9540                           
  9541                           ;time.c: 44: TMR1L=valor_l;
  9542  005F2C  C001  FFCE         	movff	i2resetar_timer1@valor_l,4046	;volatile
  9543  005F30  0012               	return		;funcret
  9544  005F32                     __end_ofi2_resetar_timer1:
  9545                           	opt stack 0
  9546                           tblptru	equ	0xFF8
  9547                           tblptrh	equ	0xFF7
  9548                           tblptrl	equ	0xFF6
  9549                           tablat	equ	0xFF5
  9550                           prodh	equ	0xFF4
  9551                           prodl	equ	0xFF3
  9552                           intcon	equ	0xFF2
  9553                           intcon2	equ	0xFF1
  9554                           indf0	equ	0xFEF
  9555                           postinc0	equ	0xFEE
  9556                           plusw0	equ	0xFEB
  9557                           fsr0h	equ	0xFEA
  9558                           fsr0l	equ	0xFE9
  9559                           wreg	equ	0xFE8
  9560                           indf1	equ	0xFE7
  9561                           postinc1	equ	0xFE6
  9562                           postdec1	equ	0xFE5
  9563                           plusw1	equ	0xFE3
  9564                           fsr1h	equ	0xFE2
  9565                           fsr1l	equ	0xFE1
  9566                           indf2	equ	0xFDF
  9567                           postinc2	equ	0xFDE
  9568                           postdec2	equ	0xFDD
  9569                           plusw2	equ	0xFDB
  9570                           fsr2h	equ	0xFDA
  9571                           fsr2l	equ	0xFD9
  9572                           status	equ	0xFD8
  9573                           
  9574 ;; *************** function i2_printf *****************
  9575 ;; Defined at:
  9576 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9579 ;;		 -> STR_29(33), STR_28(2), STR_16(18), STR_15(22), 
  9580 ;;		 -> STR_14(20), STR_13(15), STR_12(19), STR_11(3), 
  9581 ;;		 -> STR_10(17), STR_9(3), STR_8(4), STR_7(5), 
  9582 ;;		 -> STR_2(3), STR_1(2), 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  printf          4    0        struct .
  9585 ;;  printf          2   27[COMRAM] int 
  9586 ;;  printf          2   24[COMRAM] unsigned int 
  9587 ;;  printf          2   22[COMRAM] unsigned int 
  9588 ;;  printf          2   19[COMRAM] PTR const unsigned char 
  9589 ;;		 -> STR_42(7), printf@c(1), buffer_teclado_matricial(40), 
  9590 ;;  printf          1   29[COMRAM] char 
  9591 ;;  printf          1   26[COMRAM] unsigned char 
  9592 ;;  printf          1   21[COMRAM] PTR void [1]
  9593 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9594 ;;  printf          1   18[COMRAM] char 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  2   12[COMRAM] int 
  9597 ;; Registers used:
  9598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9604 ;;      Params:         2       0       0       0       0       0       0       0       0
  9605 ;;      Locals:        12       0       0       0       0       0       0       0       0
  9606 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9607 ;;      Totals:        18       0       0       0       0       0       0       0       0
  9608 ;;Total ram usage:       18 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    4
  9611 ;; This function calls:
  9612 ;;		i2___lwdiv
  9613 ;;		i2___lwmod
  9614 ;;		i2___wmul
  9615 ;;		i2_isdigit
  9616 ;;		i2_putch
  9617 ;; This function is called by:
  9618 ;;		_aux
  9619 ;; This function uses a non-reentrant model
  9620 ;;
  9621                           
  9622                           	psect	text36
  9623  006E22                     __ptext36:
  9624                           	opt stack 0
  9625  006E22                     i2_printf:
  9626                           	opt stack 20
  9627                           
  9628                           ;doprnt.c: 466: va_list ap;
  9629                           ;doprnt.c: 499: signed char c;
  9630                           ;doprnt.c: 501: int width;
  9631                           ;doprnt.c: 506: signed char prec;
  9632                           ;doprnt.c: 508: unsigned char flag;
  9633                           ;doprnt.c: 523: union {
  9634                           ;doprnt.c: 524: unsigned long vd;
  9635                           ;doprnt.c: 525: double integ;
  9636                           ;doprnt.c: 526: } tmpval;
  9637                           ;doprnt.c: 528: unsigned int val;
  9638                           ;doprnt.c: 529: unsigned len;
  9639                           ;doprnt.c: 530: const char * cp;
  9640                           ;doprnt.c: 533: *ap = __va_start();
  9641                           
  9642                           ;incstack = 0
  9643  006E22  0E0F               	movlw	low (?i2_printf+2)
  9644  006E24  6E16               	movwf	i2printf@ap,c
  9645                           
  9646                           ;doprnt.c: 536: while(c = *f++) {
  9647  006E26  D140               	goto	i2l4263
  9648  006E28                     i2l4139:
  9649                           
  9650                           ;doprnt.c: 538: if(c != '%')
  9651  006E28  0E25               	movlw	37
  9652  006E2A  181E               	xorwf	i2printf@c,w,c
  9653  006E2C  E004               	bz	i2l782
  9654                           
  9655                           ;doprnt.c: 540: {
  9656                           ;doprnt.c: 541: (putch(c) );
  9657  006E2E  501E               	movf	i2printf@c,w,c
  9658  006E30  EC82  F02F         	call	i2_putch
  9659                           
  9660                           ;doprnt.c: 542: continue;
  9661  006E34  D139               	goto	i2l4263
  9662  006E36                     i2l782:
  9663                           
  9664                           ;doprnt.c: 543: }
  9665                           ;doprnt.c: 546: width = 0;
  9666  006E36  6A1C               	clrf	i2printf@width,c
  9667  006E38  6A1D               	clrf	i2printf@width+1,c
  9668                           
  9669                           ;doprnt.c: 548: flag = 0;
  9670  006E3A  6A1B               	clrf	i2printf@flag,c
  9671  006E3C  D003               	goto	i2l4147
  9672  006E3E                     i2l4143:
  9673                           
  9674                           ;doprnt.c: 580: flag |= 0x04;
  9675  006E3E  841B               	bsf	i2printf@flag,2,c
  9676                           
  9677                           ;doprnt.c: 581: f++;
  9678  006E40  4A0D               	infsnz	i2printf@f,f,c
  9679  006E42  2A0E               	incf	i2printf@f+1,f,c
  9680  006E44                     i2l4147:
  9681  006E44  D940               	call	PL14	;call to abstracted procedure
  9682                           
  9683                           ; Switch size 1, requested type "space"
  9684                           ; Number of cases is 1, Range of values is 48 to 48
  9685                           ; switch strategies available:
  9686                           ; Name         Instructions Cycles
  9687                           ; simple_byte            4     3 (average)
  9688                           ;	Chosen strategy is simple_byte
  9689  006E46  0A30               	xorlw	48	; case 48
  9690  006E48  E0FA               	bz	i2l4143
  9691                           
  9692                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9693  006E4A  D93D               	call	PL14	;call to abstracted procedure
  9694  006E4C  ECCA  F02F         	call	i2_isdigit
  9695  006E50  E201 D094          	bnc	i2l4199
  9696                           
  9697                           ;doprnt.c: 598: width = 0;
  9698  006E54  6A1C               	clrf	i2printf@width,c
  9699  006E56  6A1D               	clrf	i2printf@width+1,c
  9700  006E58                     i2l4153:
  9701                           
  9702                           ;doprnt.c: 600: width *= 10;
  9703  006E58  C01C  F001         	movff	i2printf@width,i2___wmul@multiplier
  9704  006E5C  C01D  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9705  006E60  6A04               	clrf	i2___wmul@multiplicand+1,c
  9706  006E62  0E0A               	movlw	10
  9707  006E64  6E03               	movwf	i2___wmul@multiplicand,c
  9708  006E66  EC2D  F030         	call	i2___wmul	;wreg free
  9709  006E6A  C001  F01C         	movff	?i2___wmul,i2printf@width
  9710  006E6E  C002  F01D         	movff	?i2___wmul+1,i2printf@width+1
  9711                           
  9712                           ;doprnt.c: 601: width += *f++ - '0';
  9713  006E72  0ED0               	movlw	208
  9714  006E74  6E0F               	movwf	??i2_printf& (0+255),c
  9715  006E76  6810               	setf	(??i2_printf+1)& (0+255),c
  9716  006E78  D926               	call	PL14	;call to abstracted procedure
  9717  006E7A  6E11               	movwf	(??i2_printf+2)& (0+255),c
  9718  006E7C  6A12               	clrf	(??i2_printf+3)& (0+255),c
  9719  006E7E  500F               	movf	??i2_printf,w,c
  9720  006E80  2611               	addwf	??i2_printf+2,f,c
  9721  006E82  5010               	movf	??i2_printf+1,w,c
  9722  006E84  2212               	addwfc	??i2_printf+3,f,c
  9723  006E86  5011               	movf	??i2_printf+2,w,c
  9724  006E88  261C               	addwf	i2printf@width,f,c
  9725  006E8A  5012               	movf	??i2_printf+3,w,c
  9726  006E8C  221D               	addwfc	i2printf@width+1,f,c
  9727  006E8E  4A0D               	infsnz	i2printf@f,f,c
  9728  006E90  2A0E               	incf	i2printf@f+1,f,c
  9729                           
  9730                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9731  006E92  D919               	call	PL14	;call to abstracted procedure
  9732  006E94  ECCA  F02F         	call	i2_isdigit
  9733  006E98  E371               	bnc	i2l4199
  9734  006E9A  D7DE               	goto	i2l4153
  9735  006E9C                     i2l4161:
  9736                           
  9737                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9738  006E9C  5016               	movf	i2printf@ap,w,c
  9739  006E9E  6ED9               	movwf	fsr2l,c
  9740  006EA0  6ADA               	clrf	fsr2h,c
  9741  006EA2  50DF               	movf	indf2,w,c
  9742  006EA4  6E0F               	movwf	??i2_printf& (0+255),c
  9743  006EA6  C00F  F014         	movff	??i2_printf,i2printf@cp
  9744  006EAA  6A15               	clrf	i2printf@cp+1,c
  9745  006EAC  2A16               	incf	i2printf@ap,f,c
  9746                           
  9747                           ;doprnt.c: 740: if(!cp)
  9748  006EAE  5014               	movf	i2printf@cp,w,c
  9749  006EB0  1015               	iorwf	i2printf@cp+1,w,c
  9750  006EB2  E104               	bnz	i2l4169
  9751                           
  9752                           ;doprnt.c: 741: cp = "(null)";
  9753  006EB4  0E7F               	movlw	low STR_42
  9754  006EB6  6E14               	movwf	i2printf@cp,c
  9755  006EB8  0E7F               	movlw	high STR_42
  9756  006EBA  6E15               	movwf	i2printf@cp+1,c
  9757  006EBC                     i2l4169:
  9758                           
  9759                           ;doprnt.c: 745: len = 0;
  9760  006EBC  6A19               	clrf	i2printf@len,c
  9761  006EBE  6A1A               	clrf	i2printf@len+1,c
  9762                           
  9763                           ;doprnt.c: 746: while(cp[len])
  9764  006EC0  D002               	goto	i2l4173
  9765  006EC2                     i2l4171:
  9766                           
  9767                           ;doprnt.c: 747: len++;
  9768  006EC2  4A19               	infsnz	i2printf@len,f,c
  9769  006EC4  2A1A               	incf	i2printf@len+1,f,c
  9770  006EC6                     i2l4173:
  9771  006EC6  5019               	movf	i2printf@len,w,c
  9772  006EC8  2414               	addwf	i2printf@cp,w,c
  9773  006ECA  6E0F               	movwf	??i2_printf& (0+255),c
  9774  006ECC  501A               	movf	i2printf@len+1,w,c
  9775  006ECE  2015               	addwfc	i2printf@cp+1,w,c
  9776  006ED0  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9777  006ED2  C00F  FFF6         	movff	??i2_printf,tblptrl
  9778  006ED6  C010  FFF7         	movff	??i2_printf+1,tblptrh
  9779  006EDA  6AF8               	clrf	tblptru,c
  9780  006EDC  0E07               	movlw	(high __ramtop+-1)
  9781  006EDE  64F7               	cpfsgt	tblptrh,c
  9782  006EE0  D003               	bra	i2u391_47
  9783  006EE2  0008               	tblrd		*
  9784  006EE4  50F5               	movf	tablat,w,c
  9785  006EE6  D005               	bra	i2u391_40
  9786  006EE8                     i2u391_47:
  9787  006EE8  CFF6 FFE9          	movff	tblptrl,fsr0l
  9788  006EEC  CFF7 FFEA          	movff	tblptrh,fsr0h
  9789  006EF0  50EF               	movf	indf0,w,c
  9790  006EF2                     i2u391_40:
  9791  006EF2  0900               	iorlw	0
  9792  006EF4  E1E6               	bnz	i2l4171
  9793  006EF6                     i2l4175:
  9794                           
  9795                           ;doprnt.c: 757: if(width > len)
  9796  006EF6  501C               	movf	i2printf@width,w,c
  9797  006EF8  5C19               	subwf	i2printf@len,w,c
  9798  006EFA  501D               	movf	i2printf@width+1,w,c
  9799  006EFC  581A               	subwfb	i2printf@len+1,w,c
  9800  006EFE  E205               	bc	i2l804
  9801                           
  9802                           ;doprnt.c: 758: width -= len;
  9803  006F00  5019               	movf	i2printf@len,w,c
  9804  006F02  5E1C               	subwf	i2printf@width,f,c
  9805  006F04  501A               	movf	i2printf@len+1,w,c
  9806  006F06  5A1D               	subwfb	i2printf@width+1,f,c
  9807  006F08  D006               	goto	i2l4181
  9808  006F0A                     i2l804:
  9809                           
  9810                           ;doprnt.c: 759: else
  9811                           ;doprnt.c: 760: width = 0;
  9812  006F0A  6A1C               	clrf	i2printf@width,c
  9813  006F0C  6A1D               	clrf	i2printf@width+1,c
  9814  006F0E  D003               	goto	i2l4181
  9815  006F10                     i2l4179:
  9816                           
  9817                           ;doprnt.c: 765: (putch(' ') );
  9818  006F10  0E20               	movlw	32
  9819  006F12  EC82  F02F         	call	i2_putch
  9820  006F16                     i2l4181:
  9821  006F16  061C               	decf	i2printf@width,f,c
  9822  006F18  A0D8               	btfss	status,0,c
  9823  006F1A  061D               	decf	i2printf@width+1,f,c
  9824  006F1C  281C               	incf	i2printf@width,w,c
  9825  006F1E  E1F8               	bnz	i2l4179
  9826  006F20  281D               	incf	i2printf@width+1,w,c
  9827  006F22  E015               	bz	i2l4187
  9828  006F24  D7F5               	goto	i2l4179
  9829  006F26                     i2l4183:
  9830                           
  9831                           ;doprnt.c: 768: (putch(*cp++) );
  9832  006F26  C014  FFF6         	movff	i2printf@cp,tblptrl
  9833  006F2A  C015  FFF7         	movff	i2printf@cp+1,tblptrh
  9834  006F2E  6AF8               	clrf	tblptru,c
  9835  006F30  0E07               	movlw	(high __ramtop+-1)
  9836  006F32  64F7               	cpfsgt	tblptrh,c
  9837  006F34  D003               	bra	i2u395_47
  9838  006F36  0008               	tblrd		*
  9839  006F38  50F5               	movf	tablat,w,c
  9840  006F3A  D005               	bra	i2u395_40
  9841  006F3C                     i2u395_47:
  9842  006F3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9843  006F40  CFF7 FFEA          	movff	tblptrh,fsr0h
  9844  006F44  50EF               	movf	indf0,w,c
  9845  006F46                     i2u395_40:
  9846  006F46  EC82  F02F         	call	i2_putch
  9847  006F4A  4A14               	infsnz	i2printf@cp,f,c
  9848  006F4C  2A15               	incf	i2printf@cp+1,f,c
  9849  006F4E                     i2l4187:
  9850  006F4E  0619               	decf	i2printf@len,f,c
  9851  006F50  A0D8               	btfss	status,0,c
  9852  006F52  061A               	decf	i2printf@len+1,f,c
  9853  006F54  2819               	incf	i2printf@len,w,c
  9854  006F56  E1E7               	bnz	i2l4183
  9855  006F58  281A               	incf	i2printf@len+1,w,c
  9856  006F5A  E101 D0A5          	bz	i2l4263
  9857  006F5E  D7E3               	goto	i2l4183
  9858  006F60                     i2l4189:
  9859                           
  9860                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  9861  006F60  5016               	movf	i2printf@ap,w,c
  9862  006F62  6ED9               	movwf	fsr2l,c
  9863  006F64  6ADA               	clrf	fsr2h,c
  9864  006F66  50DF               	movf	indf2,w,c
  9865  006F68  6E1E               	movwf	i2printf@c,c
  9866  006F6A  0E02               	movlw	2
  9867  006F6C  2616               	addwf	i2printf@ap,f,c
  9868  006F6E                     i2l4193:
  9869                           
  9870                           ;doprnt.c: 805: cp = (char *)&c;
  9871  006F6E  0E1E               	movlw	low i2printf@c
  9872  006F70  6E14               	movwf	i2printf@cp,c
  9873  006F72  6A15               	clrf	i2printf@cp+1,c
  9874                           
  9875                           ;doprnt.c: 806: len = 1;
  9876  006F74  6A1A               	clrf	i2printf@len+1,c
  9877  006F76  0E01               	movlw	1
  9878  006F78  6E19               	movwf	i2printf@len,c
  9879                           
  9880                           ;doprnt.c: 807: goto dostring;
  9881  006F7A  D7BD               	goto	i2l4175
  9882  006F7C                     i2l4199:
  9883  006F7C  C00D  FFF6         	movff	i2printf@f,tblptrl
  9884  006F80  D8A9               	call	PL22	;call to abstracted procedure
  9885                           
  9886                           ; Switch size 1, requested type "space"
  9887                           ; Number of cases is 5, Range of values is 0 to 115
  9888                           ; switch strategies available:
  9889                           ; Name         Instructions Cycles
  9890                           ; simple_byte           16     9 (average)
  9891                           ;	Chosen strategy is simple_byte
  9892  006F82  E101 D096          	bz	i2l835
  9893  006F86  0A63               	xorlw	99	; case 99
  9894  006F88  E0EB               	bz	i2l4189
  9895  006F8A  0A07               	xorlw	7	; case 100
  9896  006F8C  E005               	bz	i2l4201
  9897  006F8E  0A0D               	xorlw	13	; case 105
  9898  006F90  E003               	bz	i2l4201
  9899  006F92  0A1A               	xorlw	26	; case 115
  9900  006F94  E083               	bz	i2l4161
  9901  006F96  D7EB               	goto	i2l4193
  9902  006F98                     i2l4201:
  9903                           
  9904                           ;doprnt.c: 1253: {
  9905                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9906  006F98  5016               	movf	i2printf@ap,w,c
  9907  006F9A  6ED9               	movwf	fsr2l,c
  9908  006F9C  6ADA               	clrf	fsr2h,c
  9909  006F9E  CFDE F017          	movff	postinc2,i2printf@val
  9910  006FA2  CFDD F018          	movff	postdec2,i2printf@val+1
  9911  006FA6  0E02               	movlw	2
  9912  006FA8  2616               	addwf	i2printf@ap,f,c
  9913                           
  9914                           ;doprnt.c: 1261: if((int)val < 0) {
  9915  006FAA  AE18               	btfss	i2printf@val+1,7,c
  9916  006FAC  D006               	goto	i2l4211
  9917                           
  9918                           ;doprnt.c: 1262: flag |= 0x03;
  9919  006FAE  0E03               	movlw	3
  9920  006FB0  121B               	iorwf	i2printf@flag,f,c
  9921                           
  9922                           ;doprnt.c: 1263: val = -val;
  9923  006FB2  6C17               	negf	i2printf@val,c
  9924  006FB4  1E18               	comf	i2printf@val+1,f,c
  9925  006FB6  B0D8               	btfsc	status,0,c
  9926  006FB8  2A18               	incf	i2printf@val+1,f,c
  9927  006FBA                     i2l4211:
  9928                           
  9929                           ;doprnt.c: 1264: }
  9930                           ;doprnt.c: 1266: }
  9931                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9932  006FBA  0E01               	movlw	1
  9933  006FBC  6E1E               	movwf	i2printf@c,c
  9934  006FBE                     i2l4213:
  9935  006FBE  0E05               	movlw	5
  9936  006FC0  181E               	xorwf	i2printf@c,w,c
  9937  006FC2  E00A               	bz	i2l4225
  9938                           
  9939                           ;doprnt.c: 1306: if(val < dpowers[c])
  9940  006FC4  501E               	movf	i2printf@c,w,c
  9941  006FC6  D876               	call	PL6	;call to abstracted procedure
  9942  006FC8  50F5               	movf	tablat,w,c
  9943  006FCA  5C17               	subwf	i2printf@val,w,c
  9944  006FCC  0009               	tblrd		*+
  9945  006FCE  50F5               	movf	tablat,w,c
  9946  006FD0  5818               	subwfb	i2printf@val+1,w,c
  9947  006FD2  E302               	bnc	i2l4225
  9948  006FD4  2A1E               	incf	i2printf@c,f,c
  9949  006FD6  D7F3               	goto	i2l4213
  9950  006FD8                     i2l4225:
  9951                           
  9952                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9953  006FD8  501C               	movf	i2printf@width,w,c
  9954  006FDA  101D               	iorwf	i2printf@width+1,w,c
  9955  006FDC  E008               	bz	i2l4231
  9956  006FDE  C01B  F00F         	movff	i2printf@flag,??i2_printf
  9957  006FE2  0E03               	movlw	3
  9958  006FE4  160F               	andwf	??i2_printf,f,c
  9959  006FE6  E003               	bz	i2l4231
  9960                           
  9961                           ;doprnt.c: 1346: width--;
  9962  006FE8  061C               	decf	i2printf@width,f,c
  9963  006FEA  A0D8               	btfss	status,0,c
  9964  006FEC  061D               	decf	i2printf@width+1,f,c
  9965  006FEE                     i2l4231:
  9966                           
  9967                           ;doprnt.c: 1381: if(width > c)
  9968  006FEE  0E80               	movlw	128
  9969  006FF0  BE1E               	btfsc	i2printf@c,7,c
  9970  006FF2  0E7F               	movlw	127
  9971  006FF4  6E0F               	movwf	??i2_printf& (0+255),c
  9972  006FF6  501C               	movf	i2printf@width,w,c
  9973  006FF8  5C1E               	subwf	i2printf@c,w,c
  9974  006FFA  501D               	movf	i2printf@width+1,w,c
  9975  006FFC  0A80               	xorlw	128
  9976  006FFE  580F               	subwfb	??i2_printf& (0+255),w,c
  9977  007000  E207               	bc	i2l819
  9978                           
  9979                           ;doprnt.c: 1382: width -= c;
  9980  007002  501E               	movf	i2printf@c,w,c
  9981  007004  5E1C               	subwf	i2printf@width,f,c
  9982  007006  0E00               	movlw	0
  9983  007008  BE1E               	btfsc	i2printf@c,7,c
  9984  00700A  0EFF               	movlw	255
  9985  00700C  5A1D               	subwfb	i2printf@width+1,f,c
  9986  00700E  D002               	goto	i2l820
  9987  007010                     i2l819:
  9988                           
  9989                           ;doprnt.c: 1383: else
  9990                           ;doprnt.c: 1384: width = 0;
  9991  007010  6A1C               	clrf	i2printf@width,c
  9992  007012  6A1D               	clrf	i2printf@width+1,c
  9993  007014                     i2l820:
  9994                           
  9995                           ;doprnt.c: 1387: if(flag & 0x04) {
  9996  007014  A41B               	btfss	i2printf@flag,2,c
  9997  007016  D012               	goto	i2l4245
  9998                           
  9999                           ;doprnt.c: 1392: if(flag & 0x03)
 10000  007018  C01B  F00F         	movff	i2printf@flag,??i2_printf
 10001  00701C  0E03               	movlw	3
 10002  00701E  160F               	andwf	??i2_printf,f,c
 10003  007020  E003               	bz	i2l4239
 10004                           
 10005                           ;doprnt.c: 1393: (putch('-') );
 10006  007022  0E2D               	movlw	45
 10007  007024  EC82  F02F         	call	i2_putch
 10008  007028                     i2l4239:
 10009                           
 10010                           ;doprnt.c: 1415: if(width)
 10011  007028  501C               	movf	i2printf@width,w,c
 10012  00702A  101D               	iorwf	i2printf@width+1,w,c
 10013  00702C  E01B               	bz	i2l4255
 10014                           
 10015                           ;doprnt.c: 1417: (putch('0') );
 10016  00702E  0E30               	movlw	48
 10017  007030  EC82  F02F         	call	i2_putch
 10018                           
 10019                           ;doprnt.c: 1418: while(--width);
 10020  007034  061C               	decf	i2printf@width,f,c
 10021  007036  A0D8               	btfss	status,0,c
 10022  007038  061D               	decf	i2printf@width+1,f,c
 10023  00703A  D7F6               	goto	i2l4239
 10024  00703C                     i2l4245:
 10025                           
 10026                           ;doprnt.c: 1422: {
 10027                           ;doprnt.c: 1424: if(width
 10028                           ;doprnt.c: 1428: )
 10029  00703C  501C               	movf	i2printf@width,w,c
 10030  00703E  101D               	iorwf	i2printf@width+1,w,c
 10031  007040  E009               	bz	i2l4251
 10032  007042                     i2l4247:
 10033                           
 10034                           ;doprnt.c: 1430: (putch(' ') );
 10035  007042  0E20               	movlw	32
 10036  007044  EC82  F02F         	call	i2_putch
 10037                           
 10038                           ;doprnt.c: 1431: while(--width);
 10039  007048  061C               	decf	i2printf@width,f,c
 10040  00704A  A0D8               	btfss	status,0,c
 10041  00704C  061D               	decf	i2printf@width+1,f,c
 10042  00704E  501C               	movf	i2printf@width,w,c
 10043  007050  101D               	iorwf	i2printf@width+1,w,c
 10044  007052  E1F7               	bnz	i2l4247
 10045  007054                     i2l4251:
 10046                           
 10047                           ;doprnt.c: 1438: if(flag & 0x03)
 10048  007054  C01B  F00F         	movff	i2printf@flag,??i2_printf
 10049  007058  0E03               	movlw	3
 10050  00705A  160F               	andwf	??i2_printf,f,c
 10051  00705C  E003               	bz	i2l4255
 10052                           
 10053                           ;doprnt.c: 1439: (putch('-') );
 10054  00705E  0E2D               	movlw	45
 10055  007060  EC82  F02F         	call	i2_putch
 10056  007064                     i2l4255:
 10057                           
 10058                           ;doprnt.c: 1469: }
 10059                           ;doprnt.c: 1472: prec = c;
 10060  007064  C01E  F013         	movff	i2printf@c,i2printf@prec
 10061                           
 10062                           ;doprnt.c: 1474: while(prec--) {
 10063  007068  D01C               	goto	i2l4261
 10064  00706A                     i2l4257:
 10065                           
 10066                           ;doprnt.c: 1478: {
 10067                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10068  00706A  5013               	movf	i2printf@prec,w,c
 10069  00706C  D823               	call	PL6	;call to abstracted procedure
 10070  00706E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10071  007072  000A               	tblrd		*-
 10072  007074  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10073  007078  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10074  00707C  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10075  007080  EC08  F031         	call	i2___lwdiv	;wreg free
 10076  007084  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10077  007088  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10078  00708C  6A0B               	clrf	i2___lwmod@divisor+1,c
 10079  00708E  0E0A               	movlw	10
 10080  007090  6E0A               	movwf	i2___lwmod@divisor,c
 10081  007092  ECCA  F030         	call	i2___lwmod	;wreg free
 10082  007096  5008               	movf	?i2___lwmod,w,c
 10083  007098  0F30               	addlw	48
 10084  00709A  6E1E               	movwf	i2printf@c,c
 10085                           
 10086                           ;doprnt.c: 1523: }
 10087                           ;doprnt.c: 1524: (putch(c) );
 10088  00709C  501E               	movf	i2printf@c,w,c
 10089  00709E  EC82  F02F         	call	i2_putch
 10090  0070A2                     i2l4261:
 10091  0070A2  0613               	decf	i2printf@prec,f,c
 10092  0070A4  2813               	incf	i2printf@prec,w,c
 10093  0070A6  E1E1               	bnz	i2l4257
 10094  0070A8                     i2l4263:
 10095  0070A8  C00D  FFF6         	movff	i2printf@f,tblptrl
 10096  0070AC  D813               	call	PL22	;call to abstracted procedure
 10097  0070AE  E001 D6BB          	bnz	i2l4139
 10098  0070B2                     i2l835:
 10099  0070B2  0012               	return		;funcret
 10100  0070B4                     __end_ofi2_printf:
 10101                           	opt stack 0
 10102  0070B4                     PL6:
 10103                           	opt stack 20
 10104  0070B4  0D02               	mullw	2
 10105  0070B6  0E97               	movlw	low _dpowers
 10106  0070B8  24F3               	addwf	prodl,w,c
 10107  0070BA  6EF6               	movwf	tblptrl,c
 10108  0070BC  0E7E               	movlw	high _dpowers
 10109  0070BE  20F4               	addwfc	prodh,w,c
 10110  0070C0  6EF7               	movwf	tblptrh,c
 10111  0070C2                     	if	0	;There are less than 3 active tblptr bytes
 10112  0070C2                     	endif
 10113  0070C2  0009               	tblrd		*+
 10114  0070C4  0012               	return	
 10115  0070C6                     __end_ofPL6:
 10116                           	opt stack 0
 10117  0070C6                     PL14:
 10118                           	opt stack 20
 10119  0070C6  C00D  FFF6         	movff	i2printf@f,tblptrl
 10120  0070CA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10121  0070CE                     	if	0	;tblptru may be non-zero
 10122  0070CE                     	endif
 10123  0070CE                     	if	0	;tblptru may be non-zero
 10124  0070CE                     	endif
 10125  0070CE  0008               	tblrd		*
 10126  0070D0  50F5               	movf	tablat,w,c
 10127  0070D2  0012               	return	
 10128  0070D4                     __end_ofPL14:
 10129                           	opt stack 0
 10130  0070D4                     PL22:
 10131                           	opt stack 20
 10132  0070D4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10133  0070D8  4A0D               	infsnz	i2printf@f,f,c
 10134  0070DA  2A0E               	incf	i2printf@f+1,f,c
 10135  0070DC                     	if	0	;tblptru may be non-zero
 10136  0070DC                     	endif
 10137  0070DC                     	if	0	;tblptru may be non-zero
 10138  0070DC                     	endif
 10139  0070DC  0008               	tblrd		*
 10140  0070DE  CFF5 F01E          	movff	tablat,i2printf@c
 10141  0070E2  501E               	movf	i2printf@c,w,c
 10142  0070E4  0012               	return	
 10143  0070E6                     __end_ofPL22:
 10144                           	opt stack 0
 10145                           tblptru	equ	0xFF8
 10146                           tblptrh	equ	0xFF7
 10147                           tblptrl	equ	0xFF6
 10148                           tablat	equ	0xFF5
 10149                           prodh	equ	0xFF4
 10150                           prodl	equ	0xFF3
 10151                           intcon	equ	0xFF2
 10152                           intcon2	equ	0xFF1
 10153                           indf0	equ	0xFEF
 10154                           postinc0	equ	0xFEE
 10155                           plusw0	equ	0xFEB
 10156                           fsr0h	equ	0xFEA
 10157                           fsr0l	equ	0xFE9
 10158                           wreg	equ	0xFE8
 10159                           indf1	equ	0xFE7
 10160                           postinc1	equ	0xFE6
 10161                           postdec1	equ	0xFE5
 10162                           plusw1	equ	0xFE3
 10163                           fsr1h	equ	0xFE2
 10164                           fsr1l	equ	0xFE1
 10165                           indf2	equ	0xFDF
 10166                           postinc2	equ	0xFDE
 10167                           postdec2	equ	0xFDD
 10168                           plusw2	equ	0xFDB
 10169                           fsr2h	equ	0xFDA
 10170                           fsr2l	equ	0xFD9
 10171                           status	equ	0xFD8
 10172                           
 10173 ;; *************** function i2_putch *****************
 10174 ;; Defined at:
 10175 ;;		line 244 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;  c               1    wreg     unsigned char 
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;  c               1    5[COMRAM] unsigned char 
 10180 ;; Return value:  Size  Location     Type
 10181 ;;		None               void
 10182 ;; Registers used:
 10183 ;;		wreg, status,2, status,0, cstack
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10189 ;;      Params:         0       0       0       0       0       0       0       0       0
 10190 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10191 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10192 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10193 ;;Total ram usage:        1 bytes
 10194 ;; Hardware stack levels used:    1
 10195 ;; Hardware stack levels required when called:    3
 10196 ;; This function calls:
 10197 ;;		i2_lcd_putc
 10198 ;; This function is called by:
 10199 ;;		i2_printf
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text37
 10204  005F04                     __ptext37:
 10205                           	opt stack 0
 10206  005F04                     i2_putch:
 10207                           	opt stack 20
 10208                           
 10209                           ;incstack = 0
 10210                           ;i2putch@c stored from wreg
 10211  005F04  6E06               	movwf	i2putch@c,c
 10212                           
 10213                           ;LCD_ModSauer.c: 246: lcd_putc(c);
 10214  005F06  5006               	movf	i2putch@c,w,c
 10215  005F08  EFB5  F032         	goto	i2_lcd_putc
 10216  005F0C                     __end_ofi2_putch:
 10217                           	opt stack 0
 10218                           tblptru	equ	0xFF8
 10219                           tblptrh	equ	0xFF7
 10220                           tblptrl	equ	0xFF6
 10221                           tablat	equ	0xFF5
 10222                           prodh	equ	0xFF4
 10223                           prodl	equ	0xFF3
 10224                           intcon	equ	0xFF2
 10225                           intcon2	equ	0xFF1
 10226                           indf0	equ	0xFEF
 10227                           postinc0	equ	0xFEE
 10228                           plusw0	equ	0xFEB
 10229                           fsr0h	equ	0xFEA
 10230                           fsr0l	equ	0xFE9
 10231                           wreg	equ	0xFE8
 10232                           indf1	equ	0xFE7
 10233                           postinc1	equ	0xFE6
 10234                           postdec1	equ	0xFE5
 10235                           plusw1	equ	0xFE3
 10236                           fsr1h	equ	0xFE2
 10237                           fsr1l	equ	0xFE1
 10238                           indf2	equ	0xFDF
 10239                           postinc2	equ	0xFDE
 10240                           postdec2	equ	0xFDD
 10241                           plusw2	equ	0xFDB
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function i2_lcd_putc *****************
 10247 ;; Defined at:
 10248 ;;		line 151 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  c               1    wreg     unsigned char 
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;  c               1    4[COMRAM] unsigned char 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;		None               void
 10255 ;; Registers used:
 10256 ;;		wreg, status,2, status,0, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10262 ;;      Params:         0       0       0       0       0       0       0       0       0
 10263 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10264 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10265 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10266 ;;Total ram usage:        1 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; Hardware stack levels required when called:    2
 10269 ;; This function calls:
 10270 ;;		i2_lcd_clear
 10271 ;;		i2_lcd_gotoxy
 10272 ;;		i2_lcd_write
 10273 ;; This function is called by:
 10274 ;;		i2_putch
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text38
 10279  00656A                     __ptext38:
 10280                           	opt stack 0
 10281  00656A                     i2_lcd_putc:
 10282                           	opt stack 20
 10283                           
 10284                           ;incstack = 0
 10285                           ;i2lcd_putc@c stored from wreg
 10286  00656A  6E05               	movwf	i2lcd_putc@c,c
 10287                           
 10288                           ;LCD_ModSauer.c: 153: switch (c) {
 10289  00656C  D02C               	goto	i2l3459
 10290  00656E                     i2l3431:
 10291                           
 10292                           ;LCD_ModSauer.c: 157: lcd_clear();
 10293  00656E  ECB0  F02F         	call	i2_lcd_clear	;wreg free
 10294                           
 10295                           ;LCD_ModSauer.c: 158: break;
 10296  006572  D031               	goto	i2l746
 10297  006574                     i2l3433:
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;LCD_ModSauer.c: 164: case 1:
 10301                           ;LCD_ModSauer.c: 165: if(++linha_lcd>4) linha_lcd=1;
 10302  006574  2B75               	incf	_linha_lcd& (0+255),f,b
 10303  006576  0E04               	movlw	4
 10304  006578  6575               	cpfsgt	_linha_lcd& (0+255),b
 10305  00657A  D00F               	goto	i2l3445
 10306                           
 10307                           ; BSR set to: 0
 10308  00657C  0E01               	movlw	1
 10309  00657E  6F75               	movwf	_linha_lcd& (0+255),b
 10310  006580  D00C               	goto	i2l3445
 10311  006582                     i2l3437:
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;LCD_ModSauer.c: 169: case 0:
 10315                           ;LCD_ModSauer.c: 170: if(++linha_lcd>2) linha_lcd=1;
 10316  006582  2B75               	incf	_linha_lcd& (0+255),f,b
 10317  006584  0E02               	movlw	2
 10318  006586  D7F8               	goto	L19
 10319  006588                     i2l3443:
 10320  006588  0100               	movlb	0	; () banked
 10321  00658A  5174               	movf	_lcd_type& (0+255),w,b
 10322                           
 10323                           ; Switch size 1, requested type "space"
 10324                           ; Number of cases is 4, Range of values is 0 to 3
 10325                           ; switch strategies available:
 10326                           ; Name         Instructions Cycles
 10327                           ; simple_byte           13     7 (average)
 10328                           ;	Chosen strategy is simple_byte
 10329  00658C  E0FA               	bz	i2l3437
 10330  00658E  0A01               	xorlw	1	; case 1
 10331  006590  E0F1               	bz	i2l3433
 10332  006592  0A03               	xorlw	3	; case 2
 10333  006594  E0F6               	bz	i2l3437
 10334  006596  0A01               	xorlw	1	; case 3
 10335  006598  E0ED               	bz	i2l3433
 10336  00659A                     i2l3445:
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;LCD_ModSauer.c: 174: lcd_gotoxy(linha_lcd,1);
 10340  00659A  0E01               	movlw	1
 10341  00659C  6E02               	movwf	i2lcd_gotoxy@coluna,c
 10342  00659E  5175               	movf	_linha_lcd& (0+255),w,b
 10343  0065A0  EC77  F031         	call	i2_lcd_gotoxy
 10344                           
 10345                           ;LCD_ModSauer.c: 175: break;
 10346  0065A4  D018               	goto	i2l746
 10347  0065A6                     i2l3447:
 10348                           
 10349                           ;LCD_ModSauer.c: 177: linha_lcd=1;
 10350  0065A6  0E01               	movlw	1
 10351  0065A8  0100               	movlb	0	; () banked
 10352  0065AA  6F75               	movwf	_linha_lcd& (0+255),b
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;LCD_ModSauer.c: 178: LATEbits.LE0 = 0;
 10356  0065AC  908D               	bcf	3981,0,c	;volatile
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;LCD_ModSauer.c: 179: lcd_write(0x80);
 10360  0065AE  0E80               	movlw	128
 10361  0065B0  EC68  F030         	call	i2_lcd_write
 10362                           
 10363                           ;LCD_ModSauer.c: 180: break;
 10364  0065B4  D010               	goto	i2l746
 10365  0065B6                     i2l745:
 10366                           
 10367                           ;LCD_ModSauer.c: 183: coluna_lcd++;
 10368  0065B6  808D               	bsf	3981,0,c	;volatile
 10369                           
 10370                           ;LCD_ModSauer.c: 184: linha_lcd=1;
 10371  0065B8  0E01               	movlw	1
 10372  0065BA  0100               	movlb	0	; () banked
 10373  0065BC  6F75               	movwf	_linha_lcd& (0+255),b
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;LCD_ModSauer.c: 185: lcd_write( c );
 10377  0065BE  5005               	movf	i2lcd_putc@c,w,c
 10378  0065C0  EC68  F030         	call	i2_lcd_write
 10379                           
 10380                           ;LCD_ModSauer.c: 188: break;
 10381  0065C4  D008               	goto	i2l746
 10382  0065C6                     i2l3459:
 10383  0065C6  5005               	movf	i2lcd_putc@c,w,c
 10384                           
 10385                           ; Switch size 1, requested type "space"
 10386                           ; Number of cases is 3, Range of values is 10 to 13
 10387                           ; switch strategies available:
 10388                           ; Name         Instructions Cycles
 10389                           ; simple_byte           10     6 (average)
 10390                           ;	Chosen strategy is simple_byte
 10391  0065C8  0A0A               	xorlw	10	; case 10
 10392  0065CA  E0DE               	bz	i2l3443
 10393  0065CC  0A06               	xorlw	6	; case 12
 10394  0065CE  E0CF               	bz	i2l3431
 10395  0065D0  0A01               	xorlw	1	; case 13
 10396  0065D2  E0E9               	bz	i2l3447
 10397  0065D4  D7F0               	goto	i2l745
 10398  0065D6                     i2l746:
 10399  0065D6  0012               	return		;funcret
 10400  0065D8                     __end_ofi2_lcd_putc:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           intcon	equ	0xFF2
 10409                           intcon2	equ	0xFF1
 10410                           indf0	equ	0xFEF
 10411                           postinc0	equ	0xFEE
 10412                           plusw0	equ	0xFEB
 10413                           fsr0h	equ	0xFEA
 10414                           fsr0l	equ	0xFE9
 10415                           wreg	equ	0xFE8
 10416                           indf1	equ	0xFE7
 10417                           postinc1	equ	0xFE6
 10418                           postdec1	equ	0xFE5
 10419                           plusw1	equ	0xFE3
 10420                           fsr1h	equ	0xFE2
 10421                           fsr1l	equ	0xFE1
 10422                           indf2	equ	0xFDF
 10423                           postinc2	equ	0xFDE
 10424                           postdec2	equ	0xFDD
 10425                           plusw2	equ	0xFDB
 10426                           fsr2h	equ	0xFDA
 10427                           fsr2l	equ	0xFD9
 10428                           status	equ	0xFD8
 10429                           
 10430 ;; *************** function i2_lcd_gotoxy *****************
 10431 ;; Defined at:
 10432 ;;		line 218 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;  linha           1    wreg     unsigned char 
 10435 ;;  coluna          1    1[COMRAM] unsigned char 
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  linha           1    3[COMRAM] unsigned char 
 10438 ;; Return value:  Size  Location     Type
 10439 ;;		None               void
 10440 ;; Registers used:
 10441 ;;		wreg, status,2, status,0, cstack
 10442 ;; Tracked objects:
 10443 ;;		On entry : 0/0
 10444 ;;		On exit  : 0/0
 10445 ;;		Unchanged: 0/0
 10446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10447 ;;      Params:         1       0       0       0       0       0       0       0       0
 10448 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10449 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10450 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10451 ;;Total ram usage:        3 bytes
 10452 ;; Hardware stack levels used:    1
 10453 ;; Hardware stack levels required when called:    1
 10454 ;; This function calls:
 10455 ;;		i2_lcd_write
 10456 ;; This function is called by:
 10457 ;;		_aux
 10458 ;;		i2_lcd_putc
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text39
 10463  0062EE                     __ptext39:
 10464                           	opt stack 0
 10465  0062EE                     i2_lcd_gotoxy:
 10466                           	opt stack 20
 10467                           
 10468                           ;incstack = 0
 10469                           ;i2lcd_gotoxy@linha stored from wreg
 10470  0062EE  6E04               	movwf	i2lcd_gotoxy@linha,c
 10471                           
 10472                           ;LCD_ModSauer.c: 222: linha_lcd_aux_posicao = linha;
 10473  0062F0  908D               	bcf	3981,0,c	;volatile
 10474                           
 10475                           ;LCD_ModSauer.c: 223: switch(linha){
 10476  0062F2  D01A               	goto	i2l3351
 10477  0062F4                     i2l3341:
 10478                           
 10479                           ;LCD_ModSauer.c: 225: lcd_write(0x80+(coluna-1));
 10480  0062F4  5002               	movf	i2lcd_gotoxy@coluna,w,c
 10481  0062F6  0F7F               	addlw	127
 10482  0062F8  EC68  F030         	call	i2_lcd_write
 10483                           
 10484                           ;LCD_ModSauer.c: 226: break;
 10485  0062FC  D01E               	goto	i2l764
 10486  0062FE                     i2l3343:
 10487                           
 10488                           ;LCD_ModSauer.c: 229: lcd_write(0xC0+(coluna-1));
 10489  0062FE  5002               	movf	i2lcd_gotoxy@coluna,w,c
 10490  006300  0FBF               	addlw	191
 10491  006302  EC68  F030         	call	i2_lcd_write
 10492                           
 10493                           ;LCD_ModSauer.c: 230: break;
 10494  006306  D019               	goto	i2l764
 10495  006308                     i2l3345:
 10496                           
 10497                           ;LCD_ModSauer.c: 233: lcd_write(Linha_3+(coluna-1));
 10498  006308  5002               	movf	i2lcd_gotoxy@coluna,w,c
 10499  00630A  0100               	movlb	0	; () banked
 10500  00630C  2571               	addwf	_Linha_3& (0+255),w,b
 10501  00630E  6E03               	movwf	??i2_lcd_gotoxy& (0+255),c
 10502  006310  0403               	decf	??i2_lcd_gotoxy,w,c
 10503  006312  EC68  F030         	call	i2_lcd_write
 10504                           
 10505                           ;LCD_ModSauer.c: 234: break;
 10506  006316  D011               	goto	i2l764
 10507  006318                     i2l3347:
 10508                           
 10509                           ;LCD_ModSauer.c: 237: lcd_write(Linha_4+(coluna-1));
 10510  006318  5002               	movf	i2lcd_gotoxy@coluna,w,c
 10511  00631A  0100               	movlb	0	; () banked
 10512  00631C  2572               	addwf	_Linha_4& (0+255),w,b
 10513  00631E  6E03               	movwf	??i2_lcd_gotoxy& (0+255),c
 10514  006320  0403               	decf	??i2_lcd_gotoxy,w,c
 10515  006322  EC68  F030         	call	i2_lcd_write
 10516                           
 10517                           ;LCD_ModSauer.c: 238: break;
 10518  006326  D009               	goto	i2l764
 10519  006328                     i2l3351:
 10520  006328  5004               	movf	i2lcd_gotoxy@linha,w,c
 10521                           
 10522                           ; Switch size 1, requested type "space"
 10523                           ; Number of cases is 4, Range of values is 1 to 4
 10524                           ; switch strategies available:
 10525                           ; Name         Instructions Cycles
 10526                           ; simple_byte           13     7 (average)
 10527                           ;	Chosen strategy is simple_byte
 10528  00632A  0A01               	xorlw	1	; case 1
 10529  00632C  E0E3               	bz	i2l3341
 10530  00632E  0A03               	xorlw	3	; case 2
 10531  006330  E0E6               	bz	i2l3343
 10532  006332  0A01               	xorlw	1	; case 3
 10533  006334  E0E9               	bz	i2l3345
 10534  006336  0A07               	xorlw	7	; case 4
 10535  006338  E0EF               	bz	i2l3347
 10536  00633A                     i2l764:
 10537  00633A  0012               	return		;funcret
 10538  00633C                     __end_ofi2_lcd_gotoxy:
 10539                           	opt stack 0
 10540                           tblptru	equ	0xFF8
 10541                           tblptrh	equ	0xFF7
 10542                           tblptrl	equ	0xFF6
 10543                           tablat	equ	0xFF5
 10544                           prodh	equ	0xFF4
 10545                           prodl	equ	0xFF3
 10546                           intcon	equ	0xFF2
 10547                           intcon2	equ	0xFF1
 10548                           indf0	equ	0xFEF
 10549                           postinc0	equ	0xFEE
 10550                           plusw0	equ	0xFEB
 10551                           fsr0h	equ	0xFEA
 10552                           fsr0l	equ	0xFE9
 10553                           wreg	equ	0xFE8
 10554                           indf1	equ	0xFE7
 10555                           postinc1	equ	0xFE6
 10556                           postdec1	equ	0xFE5
 10557                           plusw1	equ	0xFE3
 10558                           fsr1h	equ	0xFE2
 10559                           fsr1l	equ	0xFE1
 10560                           indf2	equ	0xFDF
 10561                           postinc2	equ	0xFDE
 10562                           postdec2	equ	0xFDD
 10563                           plusw2	equ	0xFDB
 10564                           fsr2h	equ	0xFDA
 10565                           fsr2l	equ	0xFD9
 10566                           status	equ	0xFD8
 10567                           
 10568 ;; *************** function i2_lcd_clear *****************
 10569 ;; Defined at:
 10570 ;;		line 140 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg, status,2, status,0, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10586 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10587 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10588 ;;Total ram usage:        1 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    1
 10591 ;; This function calls:
 10592 ;;		i2_lcd_write
 10593 ;; This function is called by:
 10594 ;;		i2_lcd_putc
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text40
 10599  005F60                     __ptext40:
 10600                           	opt stack 0
 10601  005F60                     i2_lcd_clear:
 10602                           	opt stack 20
 10603                           
 10604                           ;LCD_ModSauer.c: 142: LATEbits.LE0 = 0;
 10605                           
 10606                           ;incstack = 0
 10607  005F60  908D               	bcf	3981,0,c	;volatile
 10608                           
 10609                           ;LCD_ModSauer.c: 143: lcd_write(0x1);
 10610  005F62  0E01               	movlw	1
 10611  005F64  EC68  F030         	call	i2_lcd_write
 10612                           
 10613                           ;LCD_ModSauer.c: 144: _delay((unsigned long)((2)*(16000000/4000.0)));
 10614  005F68  0E0B               	movlw	11
 10615  005F6A  6E02               	movwf	??i2_lcd_clear& (0+255),c
 10616  005F6C  0E62               	movlw	98
 10617  005F6E                     i2u797_47:
 10618  005F6E  2EE8               	decfsz	wreg,f,c
 10619  005F70  D7FE               	goto	i2u797_47
 10620  005F72  2E02               	decfsz	??i2_lcd_clear& (0+255),f,c
 10621  005F74  D7FC               	goto	i2u797_47
 10622  005F76  D000               	nop2	
 10623  005F78  0012               	return		;funcret
 10624  005F7A                     __end_ofi2_lcd_clear:
 10625                           	opt stack 0
 10626                           tblptru	equ	0xFF8
 10627                           tblptrh	equ	0xFF7
 10628                           tblptrl	equ	0xFF6
 10629                           tablat	equ	0xFF5
 10630                           prodh	equ	0xFF4
 10631                           prodl	equ	0xFF3
 10632                           intcon	equ	0xFF2
 10633                           intcon2	equ	0xFF1
 10634                           indf0	equ	0xFEF
 10635                           postinc0	equ	0xFEE
 10636                           plusw0	equ	0xFEB
 10637                           fsr0h	equ	0xFEA
 10638                           fsr0l	equ	0xFE9
 10639                           wreg	equ	0xFE8
 10640                           indf1	equ	0xFE7
 10641                           postinc1	equ	0xFE6
 10642                           postdec1	equ	0xFE5
 10643                           plusw1	equ	0xFE3
 10644                           fsr1h	equ	0xFE2
 10645                           fsr1l	equ	0xFE1
 10646                           indf2	equ	0xFDF
 10647                           postinc2	equ	0xFDE
 10648                           postdec2	equ	0xFDD
 10649                           plusw2	equ	0xFDB
 10650                           fsr2h	equ	0xFDA
 10651                           fsr2l	equ	0xFD9
 10652                           status	equ	0xFD8
 10653                           
 10654 ;; *************** function i2_lcd_write *****************
 10655 ;; Defined at:
 10656 ;;		line 124 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
 10657 ;; Parameters:    Size  Location     Type
 10658 ;;  c               1    wreg     unsigned char 
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;  c               1    0[COMRAM] unsigned char 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;		None               void
 10663 ;; Registers used:
 10664 ;;		wreg, status,2, status,0, cstack
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10670 ;;      Params:         0       0       0       0       0       0       0       0       0
 10671 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10673 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10674 ;;Total ram usage:        1 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		i2_lcd_clear
 10680 ;;		i2_lcd_putc
 10681 ;;		i2_lcd_gotoxy
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           	psect	text41
 10686  0060D0                     __ptext41:
 10687                           	opt stack 0
 10688  0060D0                     i2_lcd_write:
 10689                           	opt stack 21
 10690                           
 10691                           ;incstack = 0
 10692                           ;i2lcd_write@c stored from wreg
 10693  0060D0  6E01               	movwf	i2lcd_write@c,c
 10694                           
 10695                           ;LCD_ModSauer.c: 126: _delay((unsigned long)((40)*(16000000/4000000.0)));
 10696  0060D2  0E35               	movlw	53
 10697  0060D4                     i2u798_47:
 10698  0060D4  2EE8               	decfsz	wreg,f,c
 10699  0060D6  D7FE               	goto	i2u798_47
 10700  0060D8  F000               	nop	
 10701                           
 10702                           ;LCD_ModSauer.c: 127: LATA &= 0xF0;
 10703  0060DA  0EF0               	movlw	240
 10704  0060DC  1689               	andwf	3977,f,c	;volatile
 10705                           
 10706                           ;LCD_ModSauer.c: 128: LATA |= ( ( c >> 4 ) & 0x0F );
 10707  0060DE  3801               	swapf	i2lcd_write@c,w,c
 10708                           
 10709                           ;LCD_ModSauer.c: 129: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
 10710                           
 10711                           ;LCD_ModSauer.c: 130: LATA &=0xF0;
 10712  0060E0  D806               	call	PL34	;call to abstracted procedure
 10713                           
 10714                           ;LCD_ModSauer.c: 131: LATA |= ( c & 0x0F );
 10715  0060E2  5001               	movf	i2lcd_write@c,w,c
 10716  0060E4  0B0F               	andlw	15
 10717  0060E6  1289               	iorwf	3977,f,c	;volatile
 10718                           
 10719                           ;LCD_ModSauer.c: 132: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
 10720  0060E8  828D               	bsf	3981,1,c	;volatile
 10721  0060EA  928D               	bcf	3981,1,c	;volatile
 10722  0060EC  0012               	return		;funcret
 10723  0060EE                     __end_ofi2_lcd_write:
 10724                           	opt stack 0
 10725  0060EE                     PL34:
 10726                           	opt stack 21
 10727  0060EE  0B0F               	andlw	15
 10728  0060F0  1289               	iorwf	3977,f,c	;volatile
 10729  0060F2  828D               	bsf	3981,1,c	;volatile
 10730  0060F4  928D               	bcf	3981,1,c	;volatile
 10731  0060F6  0EF0               	movlw	240
 10732  0060F8  1689               	andwf	3977,f,c	;volatile
 10733  0060FA  0CF0               	retlw	240
 10734  0060FC                     __end_ofPL34:
 10735                           	opt stack 0
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           intcon2	equ	0xFF1
 10744                           indf0	equ	0xFEF
 10745                           postinc0	equ	0xFEE
 10746                           plusw0	equ	0xFEB
 10747                           fsr0h	equ	0xFEA
 10748                           fsr0l	equ	0xFE9
 10749                           wreg	equ	0xFE8
 10750                           indf1	equ	0xFE7
 10751                           postinc1	equ	0xFE6
 10752                           postdec1	equ	0xFE5
 10753                           plusw1	equ	0xFE3
 10754                           fsr1h	equ	0xFE2
 10755                           fsr1l	equ	0xFE1
 10756                           indf2	equ	0xFDF
 10757                           postinc2	equ	0xFDE
 10758                           postdec2	equ	0xFDD
 10759                           plusw2	equ	0xFDB
 10760                           fsr2h	equ	0xFDA
 10761                           fsr2l	equ	0xFD9
 10762                           status	equ	0xFD8
 10763                           
 10764 ;; *************** function i2_isdigit *****************
 10765 ;; Defined at:
 10766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  c               1    wreg     unsigned char 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  c               1    2[COMRAM] unsigned char 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;		None               void
 10773 ;; Registers used:
 10774 ;;		wreg, status,2, status,0
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10780 ;;      Params:         0       0       0       0       0       0       0       0       0
 10781 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10782 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10783 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10784 ;;Total ram usage:        3 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; This function calls:
 10787 ;;		Nothing
 10788 ;; This function is called by:
 10789 ;;		i2_printf
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793                           	psect	text42
 10794  005F94                     __ptext42:
 10795                           	opt stack 0
 10796  005F94                     i2_isdigit:
 10797                           	opt stack 23
 10798                           
 10799                           ;incstack = 0
 10800                           ;i2isdigit@c stored from wreg
 10801  005F94  6E03               	movwf	i2isdigit@c,c
 10802  005F96  6A02               	clrf	i2_isdigit$1543,c
 10803  005F98  0E3A               	movlw	58
 10804  005F9A  6003               	cpfslt	i2isdigit@c,c
 10805  005F9C  D005               	goto	i2l3621
 10806  005F9E  0E2F               	movlw	47
 10807  005FA0  6403               	cpfsgt	i2isdigit@c,c
 10808  005FA2  D002               	goto	i2l3621
 10809  005FA4  0E01               	movlw	1
 10810  005FA6  6E02               	movwf	i2_isdigit$1543,c
 10811  005FA8                     i2l3621:
 10812  005FA8  C002  F001         	movff	i2_isdigit$1543,??i2_isdigit
 10813  005FAC  3001               	rrcf	??i2_isdigit,w,c
 10814  005FAE  0012               	return		;funcret
 10815  005FB0                     __end_ofi2_isdigit:
 10816                           	opt stack 0
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           intcon2	equ	0xFF1
 10825                           indf0	equ	0xFEF
 10826                           postinc0	equ	0xFEE
 10827                           plusw0	equ	0xFEB
 10828                           fsr0h	equ	0xFEA
 10829                           fsr0l	equ	0xFE9
 10830                           wreg	equ	0xFE8
 10831                           indf1	equ	0xFE7
 10832                           postinc1	equ	0xFE6
 10833                           postdec1	equ	0xFE5
 10834                           plusw1	equ	0xFE3
 10835                           fsr1h	equ	0xFE2
 10836                           fsr1l	equ	0xFE1
 10837                           indf2	equ	0xFDF
 10838                           postinc2	equ	0xFDE
 10839                           postdec2	equ	0xFDD
 10840                           plusw2	equ	0xFDB
 10841                           fsr2h	equ	0xFDA
 10842                           fsr2l	equ	0xFD9
 10843                           status	equ	0xFD8
 10844                           
 10845 ;; *************** function i2___wmul *****************
 10846 ;; Defined at:
 10847 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;  multiplier      2    0[COMRAM] unsigned int 
 10850 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;  __wmul          2    4[COMRAM] unsigned int 
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  2    0[COMRAM] unsigned int 
 10855 ;; Registers used:
 10856 ;;		wreg, status,2, status,0, prodl, prodh
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10862 ;;      Params:         4       0       0       0       0       0       0       0       0
 10863 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10864 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10865 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10866 ;;Total ram usage:        6 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; This function calls:
 10869 ;;		Nothing
 10870 ;; This function is called by:
 10871 ;;		i2_printf
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text43
 10876  00605A                     __ptext43:
 10877                           	opt stack 0
 10878  00605A                     i2___wmul:
 10879                           	opt stack 23
 10880                           
 10881                           ;incstack = 0
 10882  00605A  5001               	movf	i2___wmul@multiplier,w,c
 10883  00605C  0203               	mulwf	i2___wmul@multiplicand,c
 10884  00605E  CFF3 F005          	movff	prodl,i2___wmul@product
 10885  006062  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10886  006066  5001               	movf	i2___wmul@multiplier,w,c
 10887  006068  0204               	mulwf	i2___wmul@multiplicand+1,c
 10888  00606A  50F3               	movf	prodl,w,c
 10889  00606C  2606               	addwf	i2___wmul@product+1,f,c
 10890  00606E  5002               	movf	i2___wmul@multiplier+1,w,c
 10891  006070  0203               	mulwf	i2___wmul@multiplicand,c
 10892  006072  50F3               	movf	prodl,w,c
 10893  006074  2606               	addwf	i2___wmul@product+1,f,c
 10894  006076  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10895  00607A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10896  00607E  0012               	return		;funcret
 10897  006080                     __end_ofi2___wmul:
 10898                           	opt stack 0
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           intcon2	equ	0xFF1
 10907                           indf0	equ	0xFEF
 10908                           postinc0	equ	0xFEE
 10909                           plusw0	equ	0xFEB
 10910                           fsr0h	equ	0xFEA
 10911                           fsr0l	equ	0xFE9
 10912                           wreg	equ	0xFE8
 10913                           indf1	equ	0xFE7
 10914                           postinc1	equ	0xFE6
 10915                           postdec1	equ	0xFE5
 10916                           plusw1	equ	0xFE3
 10917                           fsr1h	equ	0xFE2
 10918                           fsr1l	equ	0xFE1
 10919                           indf2	equ	0xFDF
 10920                           postinc2	equ	0xFDE
 10921                           postdec2	equ	0xFDD
 10922                           plusw2	equ	0xFDB
 10923                           fsr2h	equ	0xFDA
 10924                           fsr2l	equ	0xFD9
 10925                           status	equ	0xFD8
 10926                           
 10927 ;; *************** function i2___lwmod *****************
 10928 ;; Defined at:
 10929 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  dividend        2    7[COMRAM] unsigned int 
 10932 ;;  divisor         2    9[COMRAM] unsigned int 
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  2    7[COMRAM] unsigned int 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10944 ;;      Params:         4       0       0       0       0       0       0       0       0
 10945 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10947 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10948 ;;Total ram usage:        5 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; This function calls:
 10951 ;;		Nothing
 10952 ;; This function is called by:
 10953 ;;		i2_printf
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text44
 10958  006194                     __ptext44:
 10959                           	opt stack 0
 10960  006194                     i2___lwmod:
 10961                           	opt stack 23
 10962                           
 10963                           ;incstack = 0
 10964  006194  500A               	movf	i2___lwmod@divisor,w,c
 10965  006196  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10966  006198  E017               	bz	i2l1406
 10967  00619A  0E01               	movlw	1
 10968  00619C  6E0C               	movwf	i2___lwmod@counter,c
 10969  00619E  D004               	goto	i2l3653
 10970  0061A0                     i2l3651:
 10971  0061A0  90D8               	bcf	status,0,c
 10972  0061A2  360A               	rlcf	i2___lwmod@divisor,f,c
 10973  0061A4  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10974  0061A6  2A0C               	incf	i2___lwmod@counter,f,c
 10975  0061A8                     i2l3653:
 10976  0061A8  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10977  0061AA  D7FA               	goto	i2l3651
 10978  0061AC                     i2l3655:
 10979  0061AC  500A               	movf	i2___lwmod@divisor,w,c
 10980  0061AE  5C08               	subwf	i2___lwmod@dividend,w,c
 10981  0061B0  500B               	movf	i2___lwmod@divisor+1,w,c
 10982  0061B2  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10983  0061B4  E304               	bnc	i2l3659
 10984  0061B6  500A               	movf	i2___lwmod@divisor,w,c
 10985  0061B8  5E08               	subwf	i2___lwmod@dividend,f,c
 10986  0061BA  500B               	movf	i2___lwmod@divisor+1,w,c
 10987  0061BC  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10988  0061BE                     i2l3659:
 10989  0061BE  90D8               	bcf	status,0,c
 10990  0061C0  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10991  0061C2  320A               	rrcf	i2___lwmod@divisor,f,c
 10992  0061C4  2E0C               	decfsz	i2___lwmod@counter,f,c
 10993  0061C6  D7F2               	goto	i2l3655
 10994  0061C8                     i2l1406:
 10995  0061C8  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10996  0061CC  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10997  0061D0  0012               	return		;funcret
 10998  0061D2                     __end_ofi2___lwmod:
 10999                           	opt stack 0
 11000                           tblptru	equ	0xFF8
 11001                           tblptrh	equ	0xFF7
 11002                           tblptrl	equ	0xFF6
 11003                           tablat	equ	0xFF5
 11004                           prodh	equ	0xFF4
 11005                           prodl	equ	0xFF3
 11006                           intcon	equ	0xFF2
 11007                           intcon2	equ	0xFF1
 11008                           indf0	equ	0xFEF
 11009                           postinc0	equ	0xFEE
 11010                           plusw0	equ	0xFEB
 11011                           fsr0h	equ	0xFEA
 11012                           fsr0l	equ	0xFE9
 11013                           wreg	equ	0xFE8
 11014                           indf1	equ	0xFE7
 11015                           postinc1	equ	0xFE6
 11016                           postdec1	equ	0xFE5
 11017                           plusw1	equ	0xFE3
 11018                           fsr1h	equ	0xFE2
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           postdec2	equ	0xFDD
 11023                           plusw2	equ	0xFDB
 11024                           fsr2h	equ	0xFDA
 11025                           fsr2l	equ	0xFD9
 11026                           status	equ	0xFD8
 11027                           
 11028 ;; *************** function i2___lwdiv *****************
 11029 ;; Defined at:
 11030 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;  dividend        2    0[COMRAM] unsigned int 
 11033 ;;  divisor         2    2[COMRAM] unsigned int 
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11036 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  2    0[COMRAM] unsigned int 
 11039 ;; Registers used:
 11040 ;;		wreg, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11046 ;;      Params:         4       0       0       0       0       0       0       0       0
 11047 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11049 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11050 ;;Total ram usage:        7 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		i2_printf
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           	psect	text45
 11060  006210                     __ptext45:
 11061                           	opt stack 0
 11062  006210                     i2___lwdiv:
 11063                           	opt stack 23
 11064                           
 11065                           ;incstack = 0
 11066  006210  6A05               	clrf	i2___lwdiv@quotient,c
 11067  006212  6A06               	clrf	i2___lwdiv@quotient+1,c
 11068  006214  5003               	movf	i2___lwdiv@divisor,w,c
 11069  006216  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 11070  006218  E01B               	bz	i2l1396
 11071  00621A  0E01               	movlw	1
 11072  00621C  6E07               	movwf	i2___lwdiv@counter,c
 11073  00621E  D004               	goto	i2l3633
 11074  006220                     i2l3631:
 11075  006220  90D8               	bcf	status,0,c
 11076  006222  3603               	rlcf	i2___lwdiv@divisor,f,c
 11077  006224  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 11078  006226  2A07               	incf	i2___lwdiv@counter,f,c
 11079  006228                     i2l3633:
 11080  006228  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 11081  00622A  D7FA               	goto	i2l3631
 11082  00622C                     i2l3635:
 11083  00622C  90D8               	bcf	status,0,c
 11084  00622E  3605               	rlcf	i2___lwdiv@quotient,f,c
 11085  006230  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 11086  006232  5003               	movf	i2___lwdiv@divisor,w,c
 11087  006234  5C01               	subwf	i2___lwdiv@dividend,w,c
 11088  006236  5004               	movf	i2___lwdiv@divisor+1,w,c
 11089  006238  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 11090  00623A  E305               	bnc	i2l3643
 11091  00623C  5003               	movf	i2___lwdiv@divisor,w,c
 11092  00623E  5E01               	subwf	i2___lwdiv@dividend,f,c
 11093  006240  5004               	movf	i2___lwdiv@divisor+1,w,c
 11094  006242  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 11095  006244  8005               	bsf	i2___lwdiv@quotient,0,c
 11096  006246                     i2l3643:
 11097  006246  90D8               	bcf	status,0,c
 11098  006248  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11099  00624A  3203               	rrcf	i2___lwdiv@divisor,f,c
 11100  00624C  2E07               	decfsz	i2___lwdiv@counter,f,c
 11101  00624E  D7EE               	goto	i2l3635
 11102  006250                     i2l1396:
 11103  006250  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11104  006254  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11105  006258  0012               	return		;funcret
 11106  00625A                     __end_ofi2___lwdiv:
 11107                           	opt stack 0
 11108                           tblptru	equ	0xFF8
 11109                           tblptrh	equ	0xFF7
 11110                           tblptrl	equ	0xFF6
 11111                           tablat	equ	0xFF5
 11112                           prodh	equ	0xFF4
 11113                           prodl	equ	0xFF3
 11114                           intcon	equ	0xFF2
 11115                           intcon2	equ	0xFF1
 11116                           indf0	equ	0xFEF
 11117                           postinc0	equ	0xFEE
 11118                           plusw0	equ	0xFEB
 11119                           fsr0h	equ	0xFEA
 11120                           fsr0l	equ	0xFE9
 11121                           wreg	equ	0xFE8
 11122                           indf1	equ	0xFE7
 11123                           postinc1	equ	0xFE6
 11124                           postdec1	equ	0xFE5
 11125                           plusw1	equ	0xFE3
 11126                           fsr1h	equ	0xFE2
 11127                           fsr1l	equ	0xFE1
 11128                           indf2	equ	0xFDF
 11129                           postinc2	equ	0xFDE
 11130                           postdec2	equ	0xFDD
 11131                           plusw2	equ	0xFDB
 11132                           fsr2h	equ	0xFDA
 11133                           fsr2l	equ	0xFD9
 11134                           status	equ	0xFD8
 11135                           
 11136 ;; *************** function _teclado_matricial *****************
 11137 ;; Defined at:
 11138 ;;		line 19 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;  coluna          1    wreg     unsigned char 
 11141 ;;  linha           1    0[COMRAM] unsigned char 
 11142 ;; Auto vars:     Size  Location     Type
 11143 ;;  coluna          1    1[COMRAM] unsigned char 
 11144 ;;  caractere       1    3[COMRAM] unsigned char 
 11145 ;;  temp            1    2[COMRAM] unsigned char 
 11146 ;; Return value:  Size  Location     Type
 11147 ;;                  1    wreg      unsigned char 
 11148 ;; Registers used:
 11149 ;;		wreg, status,2, status,0, prodl, prodh
 11150 ;; Tracked objects:
 11151 ;;		On entry : 0/0
 11152 ;;		On exit  : 0/0
 11153 ;;		Unchanged: 0/0
 11154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11155 ;;      Params:         1       0       0       0       0       0       0       0       0
 11156 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11157 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11158 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11159 ;;Total ram usage:        4 bytes
 11160 ;; Hardware stack levels used:    1
 11161 ;; This function calls:
 11162 ;;		Nothing
 11163 ;; This function is called by:
 11164 ;;		_aux
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           	psect	text46
 11169  0067CA                     __ptext46:
 11170                           	opt stack 0
 11171  0067CA                     _teclado_matricial:
 11172                           	opt stack 24
 11173                           
 11174                           ;incstack = 0
 11175                           ;teclado_matricial@coluna stored from wreg
 11176  0067CA  6E02               	movwf	teclado_matricial@coluna,c
 11177                           
 11178                           ;ascii.c: 21: char temp = ((linha-1)*4) + coluna;
 11179  0067CC  5001               	movf	teclado_matricial@linha,w,c
 11180  0067CE  0D04               	mullw	4
 11181  0067D0  50F3               	movf	prodl,w,c
 11182  0067D2  2402               	addwf	teclado_matricial@coluna,w,c
 11183  0067D4  0FFC               	addlw	252
 11184  0067D6  6E03               	movwf	teclado_matricial@temp,c
 11185                           
 11186                           ;ascii.c: 22: char caractere;
 11187                           ;ascii.c: 24: switch(temp){
 11188  0067D8  D021               	goto	i2l3841
 11189  0067DA                     i2l3807:
 11190                           
 11191                           ;ascii.c: 26: caractere = '*';
 11192  0067DA  0E2A               	movlw	42
 11193  0067DC  D01D               	goto	L34
 11194  0067DE                     i2l3809:
 11195                           
 11196                           ;ascii.c: 30: caractere = '0';
 11197  0067DE  0E30               	movlw	48
 11198  0067E0  D01B               	goto	L34
 11199  0067E2                     i2l3811:
 11200                           
 11201                           ;ascii.c: 34: caractere = 'F';
 11202  0067E2  0E46               	movlw	70
 11203  0067E4  D019               	goto	L34
 11204  0067E6                     i2l3813:
 11205                           
 11206                           ;ascii.c: 38: caractere = 'D';
 11207  0067E6  0E44               	movlw	68
 11208  0067E8  D017               	goto	L34
 11209  0067EA                     i2l3815:
 11210                           
 11211                           ;ascii.c: 42: caractere = '7';
 11212  0067EA  0E37               	movlw	55
 11213  0067EC  D015               	goto	L34
 11214  0067EE                     i2l3817:
 11215                           
 11216                           ;ascii.c: 46: caractere = '8';
 11217  0067EE  0E38               	movlw	56
 11218  0067F0  D013               	goto	L34
 11219  0067F2                     i2l3819:
 11220                           
 11221                           ;ascii.c: 50: caractere = '9';
 11222  0067F2  0E39               	movlw	57
 11223  0067F4  D011               	goto	L34
 11224  0067F6                     i2l3821:
 11225                           
 11226                           ;ascii.c: 54: caractere = 'C';
 11227  0067F6  0E43               	movlw	67
 11228  0067F8  D00F               	goto	L34
 11229  0067FA                     i2l3823:
 11230                           
 11231                           ;ascii.c: 58: caractere = '4';
 11232  0067FA  0E34               	movlw	52
 11233  0067FC  D00D               	goto	L34
 11234  0067FE                     i2l3825:
 11235                           
 11236                           ;ascii.c: 62: caractere = '5';
 11237  0067FE  0E35               	movlw	53
 11238  006800  D00B               	goto	L34
 11239  006802                     i2l3827:
 11240                           
 11241                           ;ascii.c: 66: caractere = '6';
 11242  006802  0E36               	movlw	54
 11243  006804  D009               	goto	L34
 11244  006806                     i2l3829:
 11245                           
 11246                           ;ascii.c: 70: caractere = 'B';
 11247  006806  0E42               	movlw	66
 11248  006808  D007               	goto	L34
 11249  00680A                     i2l3831:
 11250                           
 11251                           ;ascii.c: 74: caractere = '1';
 11252  00680A  0E31               	movlw	49
 11253  00680C  D005               	goto	L34
 11254  00680E                     i2l3833:
 11255                           
 11256                           ;ascii.c: 78: caractere = '2';
 11257  00680E  0E32               	movlw	50
 11258  006810  D003               	goto	L34
 11259  006812                     i2l3835:
 11260                           
 11261                           ;ascii.c: 82: caractere = '3';
 11262  006812  0E33               	movlw	51
 11263  006814  D001               	goto	L34
 11264  006816                     i2l3837:
 11265                           
 11266                           ;ascii.c: 86: caractere = 'A';
 11267  006816  0E41               	movlw	65
 11268  006818                     L34:
 11269  006818  6E04               	movwf	teclado_matricial@caractere,c
 11270                           
 11271                           ;ascii.c: 87: break;}
 11272  00681A  D021               	goto	i2l3843
 11273  00681C                     i2l3841:
 11274  00681C  5003               	movf	teclado_matricial@temp,w,c
 11275                           
 11276                           ; Switch size 1, requested type "space"
 11277                           ; Number of cases is 16, Range of values is 1 to 16
 11278                           ; switch strategies available:
 11279                           ; Name         Instructions Cycles
 11280                           ; simple_byte           49    25 (average)
 11281                           ;	Chosen strategy is simple_byte
 11282  00681E  0A01               	xorlw	1	; case 1
 11283  006820  E0DC               	bz	i2l3807
 11284  006822  0A03               	xorlw	3	; case 2
 11285  006824  E0DC               	bz	i2l3809
 11286  006826  0A01               	xorlw	1	; case 3
 11287  006828  E0DC               	bz	i2l3811
 11288  00682A  0A07               	xorlw	7	; case 4
 11289  00682C  E0DC               	bz	i2l3813
 11290  00682E  0A01               	xorlw	1	; case 5
 11291  006830  E0DC               	bz	i2l3815
 11292  006832  0A03               	xorlw	3	; case 6
 11293  006834  E0DC               	bz	i2l3817
 11294  006836  0A01               	xorlw	1	; case 7
 11295  006838  E0DC               	bz	i2l3819
 11296  00683A  0A0F               	xorlw	15	; case 8
 11297  00683C  E0DC               	bz	i2l3821
 11298  00683E  0A01               	xorlw	1	; case 9
 11299  006840  E0DC               	bz	i2l3823
 11300  006842  0A03               	xorlw	3	; case 10
 11301  006844  E0DC               	bz	i2l3825
 11302  006846  0A01               	xorlw	1	; case 11
 11303  006848  E0DC               	bz	i2l3827
 11304  00684A  0A07               	xorlw	7	; case 12
 11305  00684C  E0DC               	bz	i2l3829
 11306  00684E  0A01               	xorlw	1	; case 13
 11307  006850  E0DC               	bz	i2l3831
 11308  006852  0A03               	xorlw	3	; case 14
 11309  006854  E0DC               	bz	i2l3833
 11310  006856  0A01               	xorlw	1	; case 15
 11311  006858  E0DC               	bz	i2l3835
 11312  00685A  0A1F               	xorlw	31	; case 16
 11313  00685C  E0DC               	bz	i2l3837
 11314  00685E                     i2l3843:
 11315                           
 11316                           ;ascii.c: 89: return caractere;
 11317  00685E  5004               	movf	teclado_matricial@caractere,w,c
 11318  006860  0012               	return		;funcret
 11319  006862                     __end_of_teclado_matricial:
 11320                           	opt stack 0
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon2	equ	0xFF1
 11329                           indf0	equ	0xFEF
 11330                           postinc0	equ	0xFEE
 11331                           plusw0	equ	0xFEB
 11332                           fsr0h	equ	0xFEA
 11333                           fsr0l	equ	0xFE9
 11334                           wreg	equ	0xFE8
 11335                           indf1	equ	0xFE7
 11336                           postinc1	equ	0xFE6
 11337                           postdec1	equ	0xFE5
 11338                           plusw1	equ	0xFE3
 11339                           fsr1h	equ	0xFE2
 11340                           fsr1l	equ	0xFE1
 11341                           indf2	equ	0xFDF
 11342                           postinc2	equ	0xFDE
 11343                           postdec2	equ	0xFDD
 11344                           plusw2	equ	0xFDB
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           intcon	equ	0xFF2
 11355                           intcon2	equ	0xFF1
 11356                           indf0	equ	0xFEF
 11357                           postinc0	equ	0xFEE
 11358                           plusw0	equ	0xFEB
 11359                           fsr0h	equ	0xFEA
 11360                           fsr0l	equ	0xFE9
 11361                           wreg	equ	0xFE8
 11362                           indf1	equ	0xFE7
 11363                           postinc1	equ	0xFE6
 11364                           postdec1	equ	0xFE5
 11365                           plusw1	equ	0xFE3
 11366                           fsr1h	equ	0xFE2
 11367                           fsr1l	equ	0xFE1
 11368                           indf2	equ	0xFDF
 11369                           postinc2	equ	0xFDE
 11370                           postdec2	equ	0xFDD
 11371                           plusw2	equ	0xFDB
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376                           	psect	rparam
 11377  0000                     tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           intcon2	equ	0xFF1
 11385                           indf0	equ	0xFEF
 11386                           postinc0	equ	0xFEE
 11387                           plusw0	equ	0xFEB
 11388                           fsr0h	equ	0xFEA
 11389                           fsr0l	equ	0xFE9
 11390                           wreg	equ	0xFE8
 11391                           indf1	equ	0xFE7
 11392                           postinc1	equ	0xFE6
 11393                           postdec1	equ	0xFE5
 11394                           plusw1	equ	0xFE3
 11395                           fsr1h	equ	0xFE2
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           plusw2	equ	0xFDB
 11401                           fsr2h	equ	0xFDA
 11402                           fsr2l	equ	0xFD9
 11403                           status	equ	0xFD8
 11404                           tblptru	equ	0xFF8
 11405                           tblptrh	equ	0xFF7
 11406                           tblptrl	equ	0xFF6
 11407                           tablat	equ	0xFF5
 11408                           prodh	equ	0xFF4
 11409                           prodl	equ	0xFF3
 11410                           intcon	equ	0xFF2
 11411                           intcon2	equ	0xFF1
 11412                           indf0	equ	0xFEF
 11413                           postinc0	equ	0xFEE
 11414                           plusw0	equ	0xFEB
 11415                           fsr0h	equ	0xFEA
 11416                           fsr0l	equ	0xFE9
 11417                           wreg	equ	0xFE8
 11418                           indf1	equ	0xFE7
 11419                           postinc1	equ	0xFE6
 11420                           postdec1	equ	0xFE5
 11421                           plusw1	equ	0xFE3
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           plusw2	equ	0xFDB
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8


Data Sizes:
    Strings     350
    Constant    10
    Data        13
    BSS         469
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      73
    BANK0           160     66     154
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_42(CODE[7]), printf@c(BANK0[1]), buffer_teclado_matricial(BANK0[40]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_29(CODE[33]), STR_28(CODE[2]), STR_16(CODE[18]), STR_15(CODE[22]), 
		 -> STR_14(CODE[20]), STR_13(CODE[15]), STR_12(CODE[19]), STR_11(CODE[3]), 
		 -> STR_10(CODE[17]), STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[5]), 
		 -> STR_2(CODE[3]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    enviar_comando_at@parametro	PTR unsigned char  size(1) Largest target is 17
		 -> parametro_configuracao_modulo_bt(BANK0[17]), 

    enviar_string_serial@string_a_enviar	PTR const unsigned char  size(2) Largest target is 288
		 -> STR_41(CODE[4]), STR_40(CODE[6]), STR_39(CODE[6]), STR_38(CODE[6]), 
		 -> STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), STR_34(CODE[5]), 
		 -> STR_33(CODE[5]), STR_32(CODE[5]), STR_31(CODE[4]), STR_30(CODE[3]), 
		 -> STR_27(CODE[17]), STR_26(CODE[19]), STR_25(CODE[10]), STR_24(CODE[9]), 
		 -> STR_23(CODE[7]), STR_22(CODE[6]), STR_21(CODE[13]), STR_20(CODE[6]), 
		 -> STR_19(CODE[6]), STR_18(CODE[3]), STR_17(CODE[3]), STR_6(CODE[6]), 
		 -> parametro_configuracao_modulo_bt(BANK0[17]), STR_5(CODE[10]), STR_4(CODE[4]), STR_3(CODE[5]), 
		 -> senha(BIGRAM[288]), buffer_serial(BANK1[80]), 

    verificar_num_contas@contas_cadastradas	PTR int  size(1) Largest target is 2
		 -> main@contas_cadastradas(BANK0[2]), 

    verificar_num_contas@qtd_contas	PTR unsigned char  size(1) Largest target is 1
		 -> main@qtd_total_contas(BANK0[1]), 

    carregar_senha@senha_a_carregar	PTR unsigned char [18] size(2) Largest target is 288
		 -> senha(BIGRAM[288]), 

    main@ptr_data	PTR unsigned char  size(1) Largest target is 7
		 -> data_recebida.ano(BANK0[1]), data_recebida(BANK0[7]), 

    main@ptr_caractere_recebido_serial	PTR unsigned char  size(2) Largest target is 80
		 -> buffer_serial(BANK1[80]), 

    zerar_string@string_a_zerar	PTR unsigned char  size(2) Largest target is 80
		 -> buffer_teclado_matricial(BANK0[40]), parametro_configuracao_modulo_bt(BANK0[17]), buffer_serial(BANK1[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _aux in COMRAM

    _aux->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcd_putc
    i2_lcd_putc->i2_lcd_gotoxy
    i2_lcd_gotoxy->i2_lcd_write
    i2_lcd_clear->i2_lcd_write
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _verificar_num_contas->_Read_b_eep
    _printf->___lwmod
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _numero_para_ascii->___awdiv
    ___awdiv->___wmul
    _limpar_linha->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write
    _lcd_init->_lcd_clear
    _lcd_clear->_lcd_write
    _escrever_simbolo_fechadura->_lcd_write
    _enviar_comando_at->_enviar_string_serial
    _eeprom_config_inicial->_Write_b_eep
    _configurar_data_inicial->_dia_da_semana
    _dia_da_semana->___lwmod
    ___lwmod->___lwdiv
    _carregar_senha->_Read_b_eep

Critical Paths under _aux in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aux in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aux in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aux in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aux in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aux in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _aux in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _aux in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   33015
                                             42 BANK0     24    24      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                            ___awmod
                  _ascii_para_numero
                     _carregar_senha
                      _config_serial
            _configurar_data_inicial
                           _delay_ms
                      _dia_da_semana
              _eeprom_config_inicial
            _enviar_caractere_serial
                  _enviar_comando_at
               _enviar_string_serial
                         _lcd_gotoxy
                           _lcd_init
                       _limpar_linha
                  _numero_para_ascii
                             _printf
                     _resetar_timer1
               _verificar_num_contas
                       _zerar_string
 ---------------------------------------------------------------------------------
 (1) _zerar_string                                         2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _verificar_num_contas                                 6     5      1     613
                                              2 BANK0      6     5      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _resetar_timer1                                       2     1      1     419
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    20     14    5823
                                             12 BANK0     30    16     14
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1041
                                              5 BANK0      1     1      0
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1010
                                              4 BANK0      1     1      0
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _numero_para_ascii                                    6     6      0    2213
                                             14 BANK0      6     6      0
                            ___awdiv
                            ___lbdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     318
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _limpar_linha                                         2     2      0     985
                                              4 BANK0      2     2      0
                         _lcd_gotoxy
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1     824
                                              1 BANK0      3     2      1
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     251
                                              2 BANK0      3     3      0
         _escrever_simbolo_fechadura
                          _lcd_clear
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_clear                                            1     1      0      62
                                              1 BANK0      1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _escrever_simbolo_fechadura                           0     0      0      62
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enviar_comando_at                                    2     1      1    3205
                                              2 BANK0      2     1      1
            _enviar_caractere_serial
               _enviar_string_serial
 ---------------------------------------------------------------------------------
 (1) _enviar_string_serial                                 2     0      2    2663
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enviar_caractere_serial                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_config_inicial                                1     1      0    1431
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    1177
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     453
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _configurar_data_inicial                              7     0      7    3486
                                             34 BANK0      7     0      7
                      _dia_da_semana
 ---------------------------------------------------------------------------------
 (1) _dia_da_semana                                       22    18      4    3085
                                             12 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1042
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     540
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _config_serial                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _carregar_senha                                       8     6      2     856
                                              2 BANK0      8     6      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2     339
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ascii_para_numero                                    4     2      2     817
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     587
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _aux                                                 17    17      0    2821
                                             30 COMRAM    17    17      0
                  _teclado_matricial
                       i2_lcd_gotoxy
                           i2_printf
                   i2_resetar_timer1
 ---------------------------------------------------------------------------------
 (7) i2_resetar_timer1                                     2     1      1     122
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            22    20      2    2134
                                             12 COMRAM    18    16      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     382
                                              5 COMRAM     1     1      0
                         i2_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i2_lcd_putc                                           1     1      0     360
                                              4 COMRAM     1     1      0
                        i2_lcd_clear
                       i2_lcd_gotoxy
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_gotoxy                                        3     2      1     228
                                              1 COMRAM     3     2      1
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_clear                                         1     1      0      44
                                              1 COMRAM     1     1      0
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_write                                         1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _teclado_matricial                                    4     3      1     169
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Busy_eep
   _Read_b_eep
   _Write_b_eep
   ___awmod
   _ascii_para_numero
   _carregar_senha
     _Read_b_eep
   _config_serial
   _configurar_data_inicial
     _dia_da_semana
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
         ___wmul (ARG)
       ___wmul
   _delay_ms
   _dia_da_semana
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
   _eeprom_config_inicial
     _Busy_eep
     _Write_b_eep
   _enviar_caractere_serial
   _enviar_comando_at
     _enviar_caractere_serial
     _enviar_string_serial
   _enviar_string_serial
   _lcd_gotoxy
     _lcd_write
   _lcd_init
     _escrever_simbolo_fechadura
       _lcd_write
     _lcd_clear
       _lcd_write
     _lcd_write
   _limpar_linha
     _lcd_gotoxy
       _lcd_write
     _lcd_write
   _numero_para_ascii
     ___awdiv
       ___wmul (ARG)
     ___lbdiv
     ___wmul
   _printf
     ___awmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcd_putc
         _lcd_clear
           _lcd_write
         _lcd_gotoxy
           _lcd_write
         _lcd_write
   _resetar_timer1
   _verificar_num_contas
     _Read_b_eep
   _zerar_string

 _aux (ROOT)
   _teclado_matricial
   i2_lcd_gotoxy
     i2_lcd_write
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcd_putc
         i2_lcd_clear
           i2_lcd_write
         i2_lcd_gotoxy
           i2_lcd_write
         i2_lcd_write
   i2_resetar_timer1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     120      21       14.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     42      9A       5       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      49       1       76.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      20        0.0%
DATA                 0      0     253       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 17 14:59:47 2015

             __size_of_enviar_comando_at 010E                     main@qtd_total_contas 00F0  
                                     PL2 7DE8                    __end_of_dia_da_semana 6A7E  
                                     PL4 68CC                                       PL6 70B4  
                                     PL8 68E2                    _eeprom_config_inicial 6742  
                                     _WR 007D31                             ___awdiv@sign 00C3  
                    ___wmul@multiplicand 00BA                       i2___lwdiv@dividend 0001  
                     __CFG_FOSC$XTPLL_XT 000000                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      PL10 7E00  
                                    PL20 7E54                                      PL12 7E22  
                                    PL30 67BA                                      PL22 70D4  
                                    PL14 70C6                                      PL32 73A6  
                                    PL24 7E68                                      PL16 7398  
                                    PL34 60EE                                      PL26 7E7A  
                                    PL18 7E40                                      PL36 7E88  
                                    PL28 6A7E                  __size_of_carregar_senha 006A  
                                    l322 7832                                      l412 7D6A  
                                    l343 7A2C                                      l271 7586  
                                    l263 77EE                                      l360 7C46  
                                    l353 7A08                                      l450 66E0  
                                    l371 7C12                                      l355 7A1A  
                                    l347 7998                                      l268 77E8  
                                    l453 671A                                      l630 63B0  
                                    l551 60C2                                      l447 66C6  
                                    l456 6734                                      l465 6106  
                                    l625 6396                                      l713 6946  
                                    l626 63C8                                      l634 5F3A  
                                    l642 6406                                      l706 6046  
                                    l627 639C                                      l459 673C  
                                    l379 7CB2                                      l628 63A2  
                                    l820 72E8                                      l804 71D2  
                                    l388 7D74                                      l629 63A8  
                                    l389 7D42                                      l671 6B9A  
                                    l840 5EFE                                      l745 654A  
                                    l746 6568                                      l819 72E4  
                                    l835 7396                                      l764 62EC  
                                    l782 70FA                                      l867 614E  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                                    _RX9 007D5E                                      _TX9 007D66  
                           __CFG_BOR$OFF 000000                                      _aux 1008  
                   __size_of_Write_b_eep 0034                             ___awmod@sign 00BD  
                                    prod 000FF3                                      wreg 000FE8  
       _parametro_configuracao_modulo_bt 00A0               enviar_comando_at@parametro 00BA  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1406 6206                                     l1396 629A  
                                   l5101 62AA                                     l5103 62B4  
                                   l5111 62DA                                     l5105 62BE  
                                   l5121 6506                                     l5107 62CC  
                                   l5123 650C                                     l6003 7778  
                                   l6011 7796                                     l5205 63E4  
                                   l5301 669E                                     l5133 6520  
                                   l6101 78E8                                     l5127 651A  
                                   l5135 6530                                     l6111 7940  
                                   l6023 77DA                                     l5225 6A00  
                                   l5209 6410                                     l5305 66A8  
                                   l5137 653C                                     l6105 7928  
                                   l6025 77E0                                     l6113 7942  
                                   l5163 626A                                     l5331 6188  
                                   l5323 6174                                     l5403 721A  
                                   l6051 7842                                     l5165 6272  
                                   l5229 6A0C                                     l5309 66B4  
                                   l5325 6178                                     l5149 6558  
                                   l5405 722C                                     l5341 5FCE  
                                   l6301 7CA2                                     l6213 7B14  
                                   ?_aux 0001                   ??_verificar_num_contas 00BB  
                                   l5175 6290                                     l5167 6276  
                                   l5191 61FC                                     l5183 61DE  
                                   l5319 616E                                     l5335 6190  
                                   l5415 7248                                     l6135 798C  
                                   l6311 7CBE                                     l6047 7836  
                                   l5185 61E6                                     l5265 5FC4  
                                   l5441 72AC                                     l5417 726A  
                                   l5409 723A                                     l5345 5FDE  
                                   l6305 7CAE                                     l6145 79B4  
                                   l6161 79F0                                     l6065 7874  
                                   l6073 7890                                     l5187 61EA  
                                   l5611 6916                                     l5291 6680  
                                   l5283 6668                                     l5427 728C  
                                   l5363 7108                                     l5355 70EC  
                                   l6331 7CFA                                     l6251 7BAC  
                                   l6243 7B90                                     l6235 7B54  
                                   l6147 79B6                                     l6067 7878  
                                   l5701 6B04                                     l5613 691C  
                                   l5293 6684                                     l5277 6658  
                                   l5461 7314                                     l5429 7290  
                                   l6341 7D14                                     l6333 7CFE  
                                   l6325 7CE8                                     l6149 79BA  
                                   l6077 789C                                     l5519 63A4  
                                   l5527 63B4                                     l5615 6928  
                                   l5463 731A                                     l5471 733E  
                                   l5455 72FC                                     l5447 72C2  
                                   l5391 71BC                                     l5359 7102  
                                   l6263 7C2E                                     l6247 7B9C  
                                   l6159 79E2                                     l6095 78D8  
                                   l6087 78C4                                     l5721 6B68  
                                   l5713 6B40                                     l5705 6B18  
                                   l5609 6912                                     l5289 6678  
                                   l5473 7344                                     l5385 7180  
                                   l5377 7160                                     l5369 711C  
                                   l5561 6380                                     l6337 7D08  
                                   l6281 7C66                                     l6089 78C8  
                                   l5801 744A                                     l5619 6936  
                                   l5467 732E                                     l5395 71D8  
                                   l5387 7186                                     l5555 6340  
                                   l6363 7D62                                     l6099 78E0  
                                   l5811 748A                                     l5741 64B8  
                                   l5581 6866                                     l5725 6B7C  
                                   l5717 6B54                                     l5709 6B2C  
                                   l5477 737E                                     l5397 71DE  
                                   l5389 718C                                     l6293 7C8A  
                                   l6285 7C72                                     l6277 7C5A  
                                   l5487 6746                                     l5399 71F0  
                                   l5479 7386                                     l5761 64F8  
                                   l5753 64E2                                     l5745 64C4  
                                   l5737 64AC                                     l5681 60AC  
                                   l6297 7C96                                     l6289 7C7E  
                                   l5747 64CC                                     l5659 610E  
                                   l5691 6ABE                                     l6379 7DCA  
                                   l5915 7620                                     l5749 64D0  
                                   l5757 64EC                                     l5589 68A2  
                                   l5677 6050                                     l5941 7698  
                                   l5933 7660                                     l5909 75EC  
                                   l5829 74CC                                     l5695 6ADE  
                                   l5927 764C                                     l5855 7518  
                             i2_lcd_putc 656A                                     l5953 76CA  
                                   l5971 770E                                     l5891 75A0  
                                   l5859 7524                                     l5981 7728  
                                   l5965 76F8                                     l5949 76AE  
                                   l5893 75A4                                     l5877 7568  
                                   l5991 7750                                     l5975 7718  
                                   l5959 76EA                                     l5887 758C  
                                   l5993 7754                                     l5987 7746  
                                   l5979 7724                                     STR_1 7FFD  
                                   STR_2 7FEF                                     STR_3 7FD8  
                                   STR_4 7FEA                                     STR_5 7F62  
                                   STR_6 7FC3                                     STR_7 7FDD  
                                   STR_8 7FEE                                     STR_9 7FEF  
                                   _BRGH 007D62                                     _CREN 007D5C  
                                   _FERR 007D5A                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATD 000F8C  
                                   _PIE1 000F9D                                     u6130 71B8  
                                   _RBIE 007F93                                     _RBIF 007F90  
                                   u6137 71AE                                     u6170 7210  
                                   _RCIE 007CED                                     _RCIF 007CF5  
                                   u6177 7206                                     u6364 636C  
                                   u5901 69B8                                     u6365 6366  
                                   _OERR 007D59                                     u5860 6404  
                                   u5880 6430                                     u6920 7688  
                                   u6664 7DF8                                     u6681 749E  
                                   u6665 7DF2                                     u5867 63FA  
                                   u6844 760E                                     u5965 615A  
                                   u6845 760A                                     u5966 615C  
                                   u7494 7B6E                                     u5887 6426  
                                   u7495 7B6A                                     u7907 6950  
                                   u7917 696A                                     u7927 697A  
                                   u7937 6986                                     u7947 5F88  
                                   u7957 6018                                     u7967 60B2  
                                   _SPEN 007D5F                                     _TRMT 007D61  
                                   _TXIE 007CEC                                     _TXEN 007D65  
                                   _SYNC 007D64                             __CFG_PWRT$ON 000000  
                                   _main 73B4                                     fsr0h 000FEA  
                                   fsr1h 000FE2                       i2___lwdiv@quotient 0005  
                                   indf0 000FEF                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     prodh 000FF4  
                                   prodl 000FF3                                     start 1018  
                  __size_of_zerar_string 0022                            __CFG_IESO$OFF 000000  
                        __end_ofi2_putch 5F0C                            __CFG_MCLRE$ON 000000  
                           ___param_bank 000010                  i2resetar_timer1@valor_h 0002  
                i2resetar_timer1@valor_l 0001                                    ??_aux 001F  
    configurar_data_inicial@data_inicial 00DA                            __CFG_PLLDIV$1 000000  
                            i2_lcd_clear 5F60                                    ?_main 0001  
                        __end_of___awdiv 66BE                          __end_of___lbdiv 6194  
                                  _EEADR 000FA9                                    STR_10 7F24  
                                  STR_11 7FEF                                    STR_20 7FBD  
                                  STR_12 7EFF                                    STR_21 7F55  
                                  STR_13 7F46                                    STR_30 7FF2  
                                  STR_22 7FB1                                    STR_14 7ED8  
                                  STR_31 7FE2                                    STR_23 7F86  
                                  STR_15 7EC2                                    STR_32 7FD3  
                                  STR_40 7F9F                                    STR_24 7F76  
                                  STR_16 7F12                                    _BRG16 007DC3  
                                  STR_17 7FF5                                    STR_41 7FE6  
                                  STR_33 7FC9                                    STR_25 7F6C  
                                  STR_18 7FF8                                    STR_34 7FCE  
                                  STR_42 7F7F                                    STR_26 7EEC  
                                  STR_19 7FB7                                    STR_35 7F99  
                                  STR_27 7F35                                    STR_28 7FFB  
                                  STR_36 7F8D                          __end_of___awmod 6502  
                                  STR_37 7FA5                                    STR_29 7EA1  
                                  STR_38 7FAB                                    STR_39 7F93  
                                  _CMCON 000FB4                              i2_lcd_write 60D0  
                                  _T0CON 000FD5                          ___awdiv@divisor 00C0  
                                  _T1CON 000FCD                        config_serial@baud 00B8  
                        __end_of___lwdiv 62A4                   ??_enviar_string_serial 00BA  
                        __end_of___lwmod 6210                                    i2l211 6CF0  
                                  i2l213 6CF8                                    i2l231 6D42  
                                  i2l215 6D00                                    i2l241 6DA0  
                                  i2l225 6D28                                    i2l217 6D0A  
                                  i2l227 6D30                                    i2l180 6BD8  
                                  i2l229 6D38                                    i2l254 6DF8  
                                  i2l182 6BFC                                    i2l186 6CCC  
                                  i2l820 7014                                    i2l804 6F0A  
                                  i2l745 65B6                                    i2l746 65D6  
                                  i2l819 7010                                    i2l835 70B2  
                                  i2l764 633A                                    i2l782 6E36  
                        ___awdiv@counter 00C2                                    _RCREG 000FAE  
                                  _TMR0H 000FD7                                    _TMR1H 000FCF  
                                  _TMR0L 000FD6                                    _TMR1L 000FCE  
                                  _SPBRG 000FAF                                    _PORTB 000F81  
                                  _PORTD 000F83                            __CFG_USBDIV$1 000000  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _TXCKP 007DC4  
                                  _TXREG 000FAD                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                __size_ofi2_resetar_timer1 000E  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 00B8                           __CFG_EBTRB$OFF 000000  
                             i2isdigit@c 0003                          __end_of_dpowers 7EA1  
                 Write_b_eep@GIE_BIT_VAL 00BB                          __end_of_isdigit 5FCC  
                                  _senha 0150                                    _putch 5F0C  
                                  main@i 00EC                             _zerar_string 5FCC  
                                  tablat 000FF5                             main@ptr_data 00EA  
                       __end_ofi2___wmul 6080                     _num_interrupt_timer1 003A  
                                  plusw0 000FEB                                    plusw1 000FE3  
                                  plusw2 000FDB                                    status 000FD8  
                        ??_config_serial 00B8                    __size_ofi2_lcd_gotoxy 004E  
                        ___lbdiv@divisor 00B8                          ___lbdiv@counter 00BA  
                          i2printf@width 001C                         __end_ofi2_printf 70B4  
                     __size_ofi2___lwdiv 004A                       __size_ofi2___lwmod 003E  
               _buffer_teclado_matricial 0078                 lcd_init@definir_tipo_lcd 00BB  
                        __initialization 6438                             __end_of_main 7DE8  
                 ?_eeprom_config_inicial 0001                               i2printf@ap 0016  
                             i2printf@cp 0014                               _Read_b_eep 5F4E  
                       __end_of_Busy_eep 5F04                  ascii_para_numero@numero 00BA  
                     __size_ofi2_isdigit 001C                                   ??_main 00E2  
                          __activetblptr 000002                         lcd_gotoxy@coluna 00B9  
                            i2lcd_putc@c 0005                          __CFG_CCP2MX$OFF 000000  
                           i2_lcd_gotoxy 62EE                                   _ADCON1 000FC1  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                       ___awdiv@dividend 00BE                                   ?_putch 0001  
                            ?i2_lcd_putc 0001                                   i2l1406 61C8  
                                 i2l4201 6F98                                   i2l4211 6FBA  
                                 i2l1396 6250                                   i2l3341 62F4  
                                 i2l4213 6FBE                                   i2l3343 62FE  
                                 i2l3351 6328                                   i2l3431 656E  
                                 i2l4231 6FEE                                   i2l4143 6E3E  
                                 i2l3345 6308                                   i2l3433 6574  
                                 i2l4225 6FD8                                   i2l4161 6E9C  
                                 i2l4153 6E58                                   i2l4401 6D70  
                                 i2l3347 6318                                   i2l3443 6588  
                                 i2l4251 7054                                   i2l4171 6EC2  
                                 i2l4147 6E44                                   i2l4139 6E28  
                                 i2l4403 6D78                                   i2l4331 6C76  
                                 i2l3621 5FA8                                   i2l3437 6582  
                                 i2l3445 659A                                   i2l4261 70A2  
                                 i2l4245 703C                                   i2l4181 6F16  
                                 i2l4173 6EC6                                   i2l4405 6D7E  
                                 i2l4325 6C64                                   i2l3631 6220  
                                 i2l3447 65A6                                   i2l4247 7042  
                                 i2l4255 7064                                   i2l4239 7028  
                                 i2l4183 6F26                                   i2l4175 6EF6  
                                 i2l4263 70A8                                   i2l4423 6D9A  
                                 i2l4415 6D90                                   i2l4335 6C86  
                                 i2l3633 6228                                   i2l4257 706A  
                                 i2l4193 6F6E                                   i2l4169 6EBC  
                                 i2l4337 6C8A                                   i2l4329 6C72  
                                 i2l4345 6C96                                   i2l3811 67E2  
                                 i2l3643 6246                                   i2l3635 622C  
                                 i2l3651 61A0                                   i2l3459 65C6  
                                 i2l4187 6F4E                                   i2l4179 6F10  
                                 i2l4427 6DA8                                   i2l4371 6D0C  
                                 i2l4339 6C90                                   i2l3821 67F6  
                                 i2l3813 67E6                                   i2l3653 61A8  
                                 i2l4189 6F60                                   i2l4437 6DB4  
                                 i2l4453 6DF6                                   i2l4373 6D14  
                                 i2l3831 680A                                   i2l3823 67FA  
                                 i2l3815 67EA                                   i2l3807 67DA  
                                 i2l3655 61AC                                   i2l4199 6F7C  
                                 i2l4295 6C24                                   i2l3833 680E  
                                 i2l3825 67FE                                   i2l3817 67EE  
                                 i2l3809 67DE                                   i2l3841 681C  
                                 i2l4449 6DEC                                   i2l4393 6D5A  
                                 i2l3835 6812                                   i2l3827 6802  
                                 i2l3819 67F2                                   i2l3843 685E  
                                 i2l3659 61BE                                   i2l4387 6D44  
                                 i2l3837 6816                                   i2l3829 6806  
                                 i2l4399 6D66                                   _INTCON 000FF2  
                                 _OSCCON 000FD3                                   _TMR0IE 007F95  
                                 _TMR0IF 007F92                                ??i2_putch 0006  
                                 _TMR1IE 007CE8                                   _TMR1IF 007CF0  
                                 _TMR1ON 007E68                           __CFG_VREGEN$ON 000000  
                       __end_of_delay_ms 60D0                           __CFG_XINST$OFF 000000  
                      _teclado_matricial 67CA                        _ascii_para_numero 60FC  
                       __end_of_lcd_init 69AE                         __end_of_lcd_putc 656A  
                                 ___wmul 6080                                ??___awdiv 00C2  
                     ?_teclado_matricial 0001                                ??___lbdiv 00B9  
                         __CFG_STVREN$ON 000000                                ??___awmod 00BC  
           ??_escrever_simbolo_fechadura 00B9                       ?_ascii_para_numero 00B8  
                              ??___lwdiv 00BC                                ??___lwmod 00C3  
                                 clear_0 6440                                   clear_1 6452  
                                 clear_2 645E                                   clear_3 646A  
                       ___awdiv@quotient 00C4                          ___awmod@divisor 00BA  
                        ___awmod@counter 00BC                                   _printf 70E6  
                         _carregar_senha 6862                      ??_teclado_matricial 0002  
                    ??_ascii_para_numero 00BA                 ?_enviar_caractere_serial 0001  
                           __pdataCOMRAM 003D                            ?_limpar_linha 0001  
                              ??_isdigit 00B8                  dia_da_semana@tabela_mes 00CD  
                      __end_ofi2___lwdiv 625A                             __mediumconst 7E96  
                      __end_ofi2___lwmod 61D2                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                                 putch@c 00BD                      carregar_senha@conta 00C1  
                       ___lbdiv@dividend 00B9                        __end_ofi2_isdigit 5FB0  
                             __accesstop 0060                  __end_of__initialization 6490  
                        __CFG_PBADEN$OFF 000000                        i2lcd_gotoxy@linha 0004  
    __size_of_escrever_simbolo_fechadura 006E                __end_of_teclado_matricial 6862  
                          ___rparam_used 000001                __end_of_ascii_para_numero 612C  
                __size_of_resetar_timer1 000E         __size_of_configurar_data_inicial 0024  
                     i2___lwmod@dividend 0008                           __pcstackCOMRAM 0001  
                            ?_Read_b_eep 00B8                   __end_of_carregar_senha 68CC  
                          __end_of_putch 5F16                              i2printf@len 0019  
                    __size_ofi2_lcd_putc 006E                              i2printf@val 0017  
                             __end_ofPL2 7E00                               __end_ofPL4 68E2  
                             __end_ofPL6 70C6                               __end_ofPL8 6906  
                       ___lbdiv@quotient 00BB                                ?i2___wmul 0001  
                         ??_limpar_linha 00BC                         i2_resetar_timer1 5F24  
                     __size_of_lcd_clear 001A                                ?i2_printf 000D  
 verificar_num_contas@contas_cadastradas 00BE                       __size_of_lcd_write 0024  
                                ??_putch 00BD                               __pbssBANK0 0060  
                             __pbssBANK1 0100                                ?_Busy_eep 0001  
                             _data_atual 0030                   eeprom_config_inicial@i 00BC  
                         main@comando_at 00E9                             i2lcd_write@c 0001  
                                ?___wmul 00B8                   main@contas_cadastradas 00EE  
                        ?_carregar_senha 00BA                             ?i2_lcd_clear 0001  
                          ??_Write_b_eep 00BB                                  ?_printf 00C4  
                                _FLAGS_1 0070                                  _FLAGS_2 0037  
                                _FLAGS_3 0038                             ?i2_lcd_write 0001  
                             ??i2___wmul 0005                                  _INTCON2 000FF1  
                              ?_delay_ms 00B8                               _lcd_gotoxy 62A4  
                             ??i2_printf 000F                                ?_lcd_init 0001  
                              ?_lcd_putc 0001                      __size_of_Read_b_eep 0012  
                 __size_of_dia_da_semana 00D0                               ??_Busy_eep 00B8  
          __size_of_verificar_num_contas 0050                                  i2_putch 5F04  
                     dia_da_semana@F5283 003D               __size_of_teclado_matricial 0098  
             __size_of_ascii_para_numero 0030                                  _Linha_3 0071  
                                _Linha_4 0072                  ??_eeprom_config_inicial 00BC  
                                __Hparam 0000                                  __Lparam 0000  
                      __end_of_lcd_clear 5F94       __end_of_escrever_simbolo_fechadura 6646  
             _escrever_simbolo_fechadura 65D8  enviar_caractere_serial@carater_a_enviar 00B8  
                                ___awdiv 6646                                  ___lbdiv 6160  
          main@ultimo_caractere_recebido 00F2                                  ___awmod 649A  
                      __end_of_lcd_write 6036                          __size_of___wmul 0026  
                                ___lwdiv 625A                                  ___lwmod 61D2  
                                __pcinit 6438                                  __ramtop 0800  
                                __ptext0 73B4                                  __ptext1 5FCC  
                                __ptext2 633C                                  __ptext3 5F40  
                                __ptext4 70E6                                  __ptext5 5F0C  
                                __ptext6 6502                                  __ptext7 5FB0  
                                __ptext8 66BE                                  __ptext9 6160  
                        __size_of_printf 02B2                                  _dpowers 7E97  
                           __size_of_aux 5E1A                                  _isdigit 5FB0  
                       ___awmod@dividend 00B8      enviar_string_serial@string_a_enviar 00B8  
             zerar_string@string_a_zerar 00B8            __size_of_enviar_string_serial 0056  
                             ??_delay_ms 00BA                      __end_of_Write_b_eep 6160  
                             ??_lcd_init 00BA                             ??i2_lcd_putc 0005  
                         __pintcode_body 6B9C                               ??_lcd_putc 00BC  
                   end_of_initialization 6490                           main@tentativas 00E8  
                         main@novo_valor 00ED                            __Lmediumconst 7E96  
                                int_func 6B9C                      i2___wmul@multiplier 0001  
                _configurar_data_inicial 5FEE                    __end_of_config_serial 63E2  
                   __end_of_limpar_linha 605A                           _resetar_timer1 5F40  
                             _nova_senha 0060                                  printf@c 00E1  
                                printf@f 00C4                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc1 000FE6                                  postinc2 000FDE  
                      _numero_para_ascii 66BE                            _dia_da_semana 69AE  
                     __end_ofi2_lcd_putc 65D8                       ?_numero_para_ascii 0001  
                              _PORTBbits 000F81                                _PORTDbits 000F83  
                              _PORTEbits 000F84        _qtd_vezes_mesma_tecla_pressionada 0077  
                  teclado_matricial@temp 0003                              ?_lcd_gotoxy 00B9  
                    ??_numero_para_ascii 00C6                       i2lcd_gotoxy@coluna 0002  
                      i2___lwdiv@divisor 0003                                i2___lwdiv 6210  
                              i2___lwmod 6194                        i2___lwdiv@counter 0007  
                 __end_of_resetar_timer1 5F4E         __size_of_enviar_caractere_serial 000E  
                          aux@RCREG_temp 002D                              printf@width 00DF  
                             main@funcao 00F5               teclado_matricial@caractere 0004  
                              i2_isdigit 5F94                               lcd_write@c 00B8  
               __end_ofi2_resetar_timer1 5F32                __end_of_numero_para_ascii 6742  
                           ??_Read_b_eep 00BA                           ?_dia_da_semana 00C4  
                  verificar_num_contas@i 00BF                           __end_of___wmul 60A6  
                          __pidataCOMRAM 5F17                              _Write_b_eep 612C  
                   __size_ofi2_lcd_clear 001A                         i2___wmul@product 0005  
                         __end_of_printf 7398                            _data_recebida 00B1  
                           i2printf@flag 001B                              __end_ofPL10 7E22  
                            __end_ofPL20 7E68                              __end_ofPL12 7E40  
                            __end_ofPL30 67CA                              __end_ofPL22 70E6  
                            __end_ofPL14 70D4                              __end_ofPL32 73B4  
                            __end_ofPL24 7E7A                              __end_ofPL16 73A6  
                            __end_ofPL34 60FC                              __end_ofPL26 7E88  
                            __end_ofPL18 7E54                              __end_ofPL36 7E96  
                            __end_ofPL28 6A8E                             i2printf@prec 0013  
                    start_initialization 6438                     __size_ofi2_lcd_write 001E  
                      __size_ofi2___wmul 0026                              __end_of_aux 6E22  
                              i2printf@c 001E                                i2printf@f 000D  
        _qtd_caracteres_recebidos_serial 003B                               ?i2___lwdiv 0001  
                             ?i2___lwmod 0008                        __size_ofi2_printf 0292  
                        lcd_gotoxy@linha 00BB                ??_configurar_data_inicial 00E1  
                     __end_of_Read_b_eep 5F60                          ?_resetar_timer1 00B8  
                      __size_of_Busy_eep 0006                               ?i2_isdigit 0001  
                       ??_carregar_senha 00BC                 main@conta_a_ser_alterada 00EB  
                    __size_of_lcd_gotoxy 004A                                 ??___wmul 00BC  
                       __CFG_LPT1OSC$OFF 000000                       _caractere_recebido 0073  
                               ??_printf 00D2                              __pbssBIGRAM 0150  
                            __pbssCOMRAM 0030                            __pcstackBANK0 00B8  
                      i2___lwmod@divisor 000A                        i2___lwmod@counter 000C  
                numero_para_ascii@numero 00C9                             _isdigit$1543 00B9  
                          ?_zerar_string 00B8                        __size_of_delay_ms 002A  
                  __size_of_limpar_linha 0024                        __size_of_lcd_init 00A8  
                               ?i2_putch 0001                        __size_of_lcd_putc 0068  
                       ___lwdiv@dividend 00B8           __size_of_eeprom_config_inicial 0078  
          __end_of_eeprom_config_inicial 67BA               __size_of_numero_para_ascii 0084  
                        ??_dia_da_semana 00C8                                __pintcode 1008  
            ?_escrever_simbolo_fechadura 0001                            __pmediumconst 7E96  
                               ?___awdiv 00BE                                 ?___lbdiv 00B8  
                               ?___awmod 00B8                                 ?___lwdiv 00B8  
                               ?___lwmod 00BF          __end_of_configurar_data_inicial 6012  
           __end_of_verificar_num_contas 638C                                _lcd_clear 5F7A  
                              _lcd_write 6012                                 ?_isdigit 0001  
            ascii_para_numero@caractere1 00B9              ascii_para_numero@caractere2 00B8  
            ascii_para_numero@caractere3 00BB                             _limpar_linha 6036  
                          ?i2_lcd_gotoxy 0002                           ??_zerar_string 00BA  
                       ___lwdiv@quotient 00BD                                _linha_lcd 0075  
                            ??i2___lwdiv 0005                              ??i2___lwmod 000C  
                         __size_of_putch 000A                  _enviar_caractere_serial 5F32  
                    _qtd_max_colunas_lcd 0076                           ___wmul@product 00BC  
                               _LATCbits 000F8B                                 _LATDbits 000F8C  
                               _LATEbits 000F8D                              ??i2_isdigit 0001  
           __end_of_enviar_string_serial 6438                                 i2u416_44 6BF0  
                               i2u416_45 6BEC                                 i2u391_40 6EF2  
                               i2u391_47 6EE8                                 i2u395_40 6F46  
                               i2u395_47 6F3C                                 i2u797_47 5F6E  
                               i2u798_47 60D4                                 _RCONbits 000FD0  
       _qtd_caracteres_recebidos_teclado 003C                                 _PORTB_SR 0039  
                             ?_lcd_clear 0001                                aux@coluna 002E  
                             ?_lcd_write 0001                                main@i_795 00F3  
                      ___wmul@multiplier 00B8                                 i2___wmul 605A  
                        Write_b_eep@badd 00B8                          Write_b_eep@bdat 00BA  
                             printf@flag 00DE                               printf@prec 00D6  
                              main@conta 00F6                                main@etapa 00F4  
                              lcd_putc@c 00BC                                main@ordem 00F9  
                         ??i2_lcd_gotoxy 0003                             ??_lcd_gotoxy 00BA  
                               i2_printf 6E22                             delay_ms@temp 00BB  
                              copy_data0 6484                                 _Busy_eep 5EFE  
                               i2putch@c 0006                 limpar_linha@coluna_atual 00BD  
                       __size_ofi2_putch 0008                               _EECON1bits 000FA6  
                               __Hrparam 0000                                 __Lrparam 0000  
                      ?i2_resetar_timer1 0001                        limpar_linha@linha 00BC  
                     __end_of_lcd_gotoxy 62EE                 enviar_comando_at@comando 00BB  
                     ??i2_resetar_timer1 0002                        _enviar_comando_at 6A8E  
                       __size_of___awdiv 0078                         __size_of___lbdiv 0034  
                       __size_of___awmod 0068                    i2___wmul@multiplicand 0003  
                       __size_of___lwdiv 004A                         __size_of___lwmod 003E  
                 numero_para_ascii@temp1 00CA                   numero_para_ascii@temp2 00C7  
                           ?_Write_b_eep 00B8                       ?_enviar_comando_at 00BA  
                    dia_da_semana@seculo 00D9                         __size_of_isdigit 001C  
                 __size_of_config_serial 0056                                 _delay_ms 60A6  
                        ___lwdiv@divisor 00BA                      ??_enviar_comando_at 00BB  
                        ___lwdiv@counter 00BC                                 __ptext10 6646  
                               __ptext11 6036                                 __ptext20 6742  
                               __ptext12 62A4                                 __ptext21 612C  
                               __ptext13 6906                                 __ptext30 6862  
                               __ptext22 5EFE                                 __ptext14 5F7A  
                               __ptext31 5F4E                                 __ptext23 60A6  
                               __ptext15 65D8                                 __ptext40 5F60  
                               __ptext32 60FC                                 __ptext24 5FEE  
                               __ptext16 6012                                 __ptext41 60D0  
                               __ptext33 649A                                 __ptext25 69AE  
                               __ptext17 6A8E                                 __ptext42 5F94  
                               __ptext26 6080                                 __ptext18 63E2  
                               __ptext43 605A                                 __ptext35 5F24  
                               __ptext27 61D2                                 __ptext19 5F32  
                               __ptext44 6194                                 __ptext36 6E22  
                               __ptext28 625A                                 __ptext45 6210  
                               __ptext37 5F04                                 __ptext29 638C  
                               __ptext46 67CA                                 __ptext38 656A  
                               __ptext39 62EE                ??_enviar_caractere_serial 00B8  
                       ??_resetar_timer1 00B9                                 _lcd_init 6906  
                               _lcd_putc 6502           carregar_senha@senha_a_carregar 00BA  
                               _lcd_type 0074                           i2_isdigit$1543 0002  
                   _verificar_num_contas 633C                         dia_da_semana@dia 00C7  
                       dia_da_semana@ano 00C4                         dia_da_semana@mes 00C6  
                          __size_of_main 0A34                __end_of_enviar_comando_at 6B9C  
                   __end_of_zerar_string 5FEE                                 aux@linha 002F  
                  resetar_timer1@valor_h 00B9                    resetar_timer1@valor_l 00B8  
                          ??i2_lcd_clear 0002                                printf@len 00DC  
                            ??_lcd_clear 00B9                                printf@val 00DA  
                               main@cont 00F1                            ??i2_lcd_write 0001  
                            ??_lcd_write 00B8                    __CFG_CPUDIV$OSC4_PLL6 000000  
                             _INTCONbits 000FF2                     _enviar_string_serial 63E2  
                    delay_ms@delay_total 00B8                                 isdigit@c 00BA  
      main@ptr_caractere_recebido_serial 00F7                                 intlevel2 0000  
                  ?_verificar_num_contas 00BA                         ___lwmod@dividend 00BF  
                           _qtd_max_dias 0049                            _config_serial 638C  
                   __end_ofi2_lcd_gotoxy 633C          __end_of_enviar_caractere_serial 5F40  
                          _buffer_serial 0100                                 printf@ap 00D9  
                               printf@cp 00D7                          carregar_senha@i 00C0  
                        ___lwmod@divisor 00C1                    ?_enviar_string_serial 00B8  
                        ___lwmod@counter 00C3                      __end_ofi2_lcd_clear 5F7A  
               ?_configurar_data_inicial 00DA                      __end_ofi2_lcd_write 60EE  
                teclado_matricial@coluna 0002           verificar_num_contas@qtd_contas 00BA  
                 teclado_matricial@linha 0001                           ?_config_serial 0001  
