

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 12 22:42:51 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44                           	psect	pa_nodes,global,class=CODE,delta=1
    45  0000                     prodh	equ	0xFF4
    46                           prodl	equ	0xFF3
    47                           intcon	equ	0xFF2
    48                           intcon2	equ	0xFF1
    49                           wreg	equ	0xFE8
    50                           indf1	equ	0xFE7
    51                           postinc1	equ	0xFE6
    52                           plusw1	equ	0xFE3
    53                           fsr1h	equ	0xFE2
    54                           fsr1l	equ	0xFE1
    55                           indf2	equ	0xFDF
    56                           postinc2	equ	0xFDE
    57                           plusw2	equ	0xFDB
    58                           fsr2h	equ	0xFDA
    59                           fsr2l	equ	0xFD9
    60                           status	equ	0xFD8
    61                           
    62                           	psect	idataCOMRAM
    63  007247                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for dia_da_semana@F5261
    67  007247  00                 	db	0
    68  007248  03                 	db	3
    69  007249  03                 	db	3
    70  00724A  06                 	db	6
    71  00724B  01                 	db	1
    72  00724C  04                 	db	4
    73  00724D  06                 	db	6
    74  00724E  02                 	db	2
    75  00724F  05                 	db	5
    76  007250  00                 	db	0
    77  007251  03                 	db	3
    78  007252  05                 	db	5
    79                           
    80                           ;initializer for _qtd_max_dias
    81  007253  1F                 	db	31
    82                           prodh	equ	0xFF4
    83                           prodl	equ	0xFF3
    84                           intcon	equ	0xFF2
    85                           intcon2	equ	0xFF1
    86                           wreg	equ	0xFE8
    87                           indf1	equ	0xFE7
    88                           postinc1	equ	0xFE6
    89                           plusw1	equ	0xFE3
    90                           fsr1h	equ	0xFE2
    91                           fsr1l	equ	0xFE1
    92                           indf2	equ	0xFDF
    93                           postinc2	equ	0xFDE
    94                           plusw2	equ	0xFDB
    95                           fsr2h	equ	0xFDA
    96                           fsr2l	equ	0xFD9
    97                           status	equ	0xFD8
    98                           
    99                           	psect	idataBANK0
   100  007266                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for main@F5445
   104  007266  4F                 	db	79
   105  007267  4B                 	db	75
   106  007268  00                 	db	0
   107                           
   108                           ;initializer for main@F5448
   109  007269  45                 	db	69
   110  00726A  4E                 	db	78
   111  00726B  00                 	db	0
   112                           
   113                           ;initializer for main@F5450
   114  00726C  45                 	db	69
   115  00726D  50                 	db	80
   116  00726E  00                 	db	0
   117                           
   118                           ;initializer for main@F5452
   119  00726F  45                 	db	69
   120  007270  43                 	db	67
   121  007271  00                 	db	0
   122                           
   123                           ;initializer for main@F5454
   124  007272  45                 	db	69
   125  007273  53                 	db	83
   126  007274  00                 	db	0
   127                           
   128                           ;initializer for main@F5456
   129  007275  45                 	db	69
   130  007276  49                 	db	73
   131  007277  00                 	db	0
   132  0000                     _ADCON1	set	4033
   133  0000                     _CMCON	set	4020
   134  0000                     _EEADR	set	4009
   135  0000                     _EECON1bits	set	4006
   136  0000                     _EECON2	set	4007
   137  0000                     _EEDATA	set	4008
   138  0000                     _INTCON	set	4082
   139  0000                     _INTCON2	set	4081
   140  0000                     _INTCONbits	set	4082
   141  0000                     _LATB	set	3978
   142  0000                     _LATD	set	3980
   143  0000                     _LATDbits	set	3980
   144  0000                     _OSCCON	set	4051
   145  0000                     _PIE1	set	3997
   146  0000                     _PORTAbits	set	3968
   147  0000                     _PORTB	set	3969
   148  0000                     _PORTBbits	set	3969
   149  0000                     _PORTCbits	set	3970
   150  0000                     _PORTD	set	3971
   151  0000                     _PORTDbits	set	3971
   152  0000                     _RCONbits	set	4048
   153  0000                     _RCREG	set	4014
   154  0000                     _SPBRG	set	4015
   155  0000                     _T0CON	set	4053
   156  0000                     _T1CON	set	4045
   157  0000                     _TMR0H	set	4055
   158  0000                     _TMR0L	set	4054
   159  0000                     _TMR1H	set	4047
   160  0000                     _TMR1L	set	4046
   161  0000                     _TRISB	set	3987
   162  0000                     _TRISC	set	3988
   163  0000                     _TRISD	set	3989
   164  0000                     _TXREG	set	4013
   165  0000                     _BRG16	set	32195
   166  0000                     _BRGH	set	32098
   167  0000                     _CREN	set	32092
   168  0000                     _FERR	set	32090
   169  0000                     _OERR	set	32089
   170  0000                     _RBIE	set	32659
   171  0000                     _RBIF	set	32656
   172  0000                     _RCIE	set	31981
   173  0000                     _RCIF	set	31989
   174  0000                     _RX9	set	32094
   175  0000                     _SPEN	set	32095
   176  0000                     _SYNC	set	32100
   177  0000                     _TMR0IE	set	32661
   178  0000                     _TMR0IF	set	32658
   179  0000                     _TMR1IE	set	31976
   180  0000                     _TMR1IF	set	31984
   181  0000                     _TMR1ON	set	32360
   182  0000                     _TRMT	set	32097
   183  0000                     _TX9	set	32102
   184  0000                     _TXCKP	set	32196
   185  0000                     _TXEN	set	32101
   186  0000                     _TXIE	set	31980
   187  0000                     _WR	set	32049
   188                           
   189                           ; #config settings
   190  0000                     prodh	equ	0xFF4
   191                           prodl	equ	0xFF3
   192                           intcon	equ	0xFF2
   193                           intcon2	equ	0xFF1
   194                           wreg	equ	0xFE8
   195                           indf1	equ	0xFE7
   196                           postinc1	equ	0xFE6
   197                           plusw1	equ	0xFE3
   198                           fsr1h	equ	0xFE2
   199                           fsr1l	equ	0xFE1
   200                           indf2	equ	0xFDF
   201                           postinc2	equ	0xFDE
   202                           plusw2	equ	0xFDB
   203                           fsr2h	equ	0xFDA
   204                           fsr2l	equ	0xFD9
   205                           status	equ	0xFD8
   206                           
   207                           	psect	cinit
   208  0075CE                     __pcinit:
   209                           	opt stack 0
   210  0075CE                     start_initialization:
   211                           	opt stack 0
   212  0075CE                     __initialization:
   213                           	opt stack 0
   214                           
   215                           ; Clear objects allocated to BIGRAM (272 bytes)
   216  0075CE  EE01  F01C         	lfsr	0,__pbssBIGRAM
   217  0075D2  EE11 F010          	lfsr	1,272
   218  0075D6                     clear_0:
   219  0075D6  6AEE               	clrf	postinc0,c
   220  0075D8  50E5               	movf	postdec1,w,c
   221  0075DA  50E1               	movf	fsr1l,w,c
   222  0075DC  E1FC               	bnz	clear_0
   223  0075DE  50E2               	movf	fsr1h,w,c
   224  0075E0  E1FA               	bnz	clear_0
   225                           
   226                           ; Clear objects allocated to BANK0 (100 bytes)
   227  0075E2  EE00  F060         	lfsr	0,__pbssBANK0
   228  0075E6  0E64               	movlw	100
   229  0075E8                     clear_1:
   230  0075E8  6AEE               	clrf	postinc0,c
   231  0075EA  06E8               	decf	wreg,f,c
   232  0075EC  E1FD               	bnz	clear_1
   233                           
   234                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   235  0075EE  6A42               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   236                           
   237                           ; Clear objects allocated to COMRAM (12 bytes)
   238  0075F0  EE00  F036         	lfsr	0,__pbssCOMRAM
   239  0075F4  0E0C               	movlw	12
   240  0075F6                     clear_2:
   241  0075F6  6AEE               	clrf	postinc0,c
   242  0075F8  06E8               	decf	wreg,f,c
   243  0075FA  E1FD               	bnz	clear_2
   244                           
   245                           ; Initialize objects allocated to BANK0 (18 bytes)
   246                           ; load TBLPTR registers with __pidataBANK0
   247  0075FC  0E66               	movlw	low __pidataBANK0
   248  0075FE  6EF6               	movwf	tblptrl,c
   249  007600  0E72               	movlw	high __pidataBANK0
   250  007602  6EF7               	movwf	tblptrh,c
   251  007604  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   252  007606  6EF8               	movwf	tblptru,c
   253  007608  EE00  F0C4         	lfsr	0,__pdataBANK0
   254  00760C  EE10 F012          	lfsr	1,18
   255  007610                     copy_data0:
   256  007610  0009               	tblrd		*+
   257  007612  CFF5 FFEE          	movff	tablat,postinc0
   258  007616  50E5               	movf	postdec1,w,c
   259  007618  50E1               	movf	fsr1l,w,c
   260  00761A  E1FA               	bnz	copy_data0
   261                           
   262                           ; Initialize objects allocated to COMRAM (13 bytes)
   263                           ; load TBLPTR registers with __pidataCOMRAM
   264  00761C  0E47               	movlw	low __pidataCOMRAM
   265  00761E  6EF6               	movwf	tblptrl,c
   266  007620  0E72               	movlw	high __pidataCOMRAM
   267  007622  6EF7               	movwf	tblptrh,c
   268  007624  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   269  007626  6EF8               	movwf	tblptru,c
   270  007628  EE00  F029         	lfsr	0,__pdataCOMRAM
   271  00762C  EE10 F00D          	lfsr	1,13
   272  007630                     copy_data1:
   273  007630  0009               	tblrd		*+
   274  007632  CFF5 FFEE          	movff	tablat,postinc0
   275  007636  50E5               	movf	postdec1,w,c
   276  007638  50E1               	movf	fsr1l,w,c
   277  00763A  E1FA               	bnz	copy_data1
   278  00763C                     end_of_initialization:
   279                           	opt stack 0
   280  00763C                     __end_of__initialization:
   281                           	opt stack 0
   282  00763C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   283  00763E  6EF8               	movwf	tblptru,c
   284  007640  0100               	movlb	0
   285  007642  EF5F  F03D         	goto	_main	;jump to C main() function
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           prodh	equ	0xFF4
   291                           prodl	equ	0xFF3
   292                           intcon	equ	0xFF2
   293                           intcon2	equ	0xFF1
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           indf1	equ	0xFE7
   297                           postinc1	equ	0xFE6
   298                           postdec1	equ	0xFE5
   299                           plusw1	equ	0xFE3
   300                           fsr1h	equ	0xFE2
   301                           fsr1l	equ	0xFE1
   302                           indf2	equ	0xFDF
   303                           postinc2	equ	0xFDE
   304                           plusw2	equ	0xFDB
   305                           fsr2h	equ	0xFDA
   306                           fsr2l	equ	0xFD9
   307                           status	equ	0xFD8
   308                           
   309                           	psect	bitbssCOMRAM
   310  000210                     __pbitbssCOMRAM:
   311                           	opt stack 0
   312  000210                     _debounce:
   313                           	opt stack 0
   314  000210                     	ds	1
   315  000211                     _enviar:
   316                           	opt stack 0
   317  000211                     	ds	1
   318  000212                     _modo_bluetooth_teclado:
   319                           	opt stack 0
   320  000212                     	ds	1
   321  000213                     _receber:
   322                           	opt stack 0
   323  000213                     	ds	1
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           prodh	equ	0xFF4
   329                           prodl	equ	0xFF3
   330                           intcon	equ	0xFF2
   331                           intcon2	equ	0xFF1
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           indf1	equ	0xFE7
   335                           postinc1	equ	0xFE6
   336                           postdec1	equ	0xFE5
   337                           plusw1	equ	0xFE3
   338                           fsr1h	equ	0xFE2
   339                           fsr1l	equ	0xFE1
   340                           indf2	equ	0xFDF
   341                           postinc2	equ	0xFDE
   342                           plusw2	equ	0xFDB
   343                           fsr2h	equ	0xFDA
   344                           fsr2l	equ	0xFD9
   345                           status	equ	0xFD8
   346                           
   347                           	psect	bssCOMRAM
   348  000036                     __pbssCOMRAM:
   349                           	opt stack 0
   350  000036                     _FLAGS_2:
   351                           	opt stack 0
   352  000036                     	ds	1
   353  000037                     _PORTB_SR:
   354                           	opt stack 0
   355  000037                     	ds	1
   356  000038                     _caractere_recebido:
   357                           	opt stack 0
   358  000038                     	ds	1
   359  000039                     _num_interrupt_timer1:
   360                           	opt stack 0
   361  000039                     	ds	1
   362  00003A                     _qtd_caracteres_recebidos_serial:
   363                           	opt stack 0
   364  00003A                     	ds	1
   365  00003B                     _data_atual:
   366                           	opt stack 0
   367  00003B                     	ds	7
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           prodh	equ	0xFF4
   373                           prodl	equ	0xFF3
   374                           intcon	equ	0xFF2
   375                           intcon2	equ	0xFF1
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           indf1	equ	0xFE7
   379                           postinc1	equ	0xFE6
   380                           postdec1	equ	0xFE5
   381                           plusw1	equ	0xFE3
   382                           fsr1h	equ	0xFE2
   383                           fsr1l	equ	0xFE1
   384                           indf2	equ	0xFDF
   385                           postinc2	equ	0xFDE
   386                           plusw2	equ	0xFDB
   387                           fsr2h	equ	0xFDA
   388                           fsr2l	equ	0xFD9
   389                           status	equ	0xFD8
   390                           
   391                           	psect	dataCOMRAM
   392  000029                     __pdataCOMRAM:
   393                           	opt stack 0
   394  000029                     dia_da_semana@F5261:
   395                           	opt stack 0
   396  000029                     	ds	12
   397  000035                     _qtd_max_dias:
   398                           	opt stack 0
   399  000035                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           prodh	equ	0xFF4
   405                           prodl	equ	0xFF3
   406                           intcon	equ	0xFF2
   407                           intcon2	equ	0xFF1
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           indf1	equ	0xFE7
   411                           postinc1	equ	0xFE6
   412                           postdec1	equ	0xFE5
   413                           plusw1	equ	0xFE3
   414                           fsr1h	equ	0xFE2
   415                           fsr1l	equ	0xFE1
   416                           indf2	equ	0xFDF
   417                           postinc2	equ	0xFDE
   418                           plusw2	equ	0xFDB
   419                           fsr2h	equ	0xFDA
   420                           fsr2l	equ	0xFD9
   421                           status	equ	0xFD8
   422                           
   423                           	psect	bssBANK0
   424  000060                     __pbssBANK0:
   425                           	opt stack 0
   426  000060                     _buffer_serial:
   427                           	opt stack 0
   428  000060                     	ds	80
   429  0000B0                     _nova_senha:
   430                           	opt stack 0
   431  0000B0                     	ds	16
   432  0000C0                     _ptr_data:
   433                           	opt stack 0
   434  0000C0                     	ds	2
   435  0000C2                     _FLAGS_1:
   436                           	opt stack 0
   437  0000C2                     	ds	1
   438  0000C3                     _qtd_vezes_mesma_tecla_pressionada:
   439                           	opt stack 0
   440  0000C3                     	ds	1
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           prodh	equ	0xFF4
   446                           prodl	equ	0xFF3
   447                           intcon	equ	0xFF2
   448                           intcon2	equ	0xFF1
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           indf1	equ	0xFE7
   452                           postinc1	equ	0xFE6
   453                           postdec1	equ	0xFE5
   454                           plusw1	equ	0xFE3
   455                           fsr1h	equ	0xFE2
   456                           fsr1l	equ	0xFE1
   457                           indf2	equ	0xFDF
   458                           postinc2	equ	0xFDE
   459                           plusw2	equ	0xFDB
   460                           fsr2h	equ	0xFDA
   461                           fsr2l	equ	0xFD9
   462                           status	equ	0xFD8
   463                           
   464                           	psect	dataBANK0
   465  0000C4                     __pdataBANK0:
   466                           	opt stack 0
   467  0000C4                     main@F5445:
   468                           	opt stack 0
   469  0000C4                     	ds	3
   470  0000C7                     main@F5448:
   471                           	opt stack 0
   472  0000C7                     	ds	3
   473  0000CA                     main@F5450:
   474                           	opt stack 0
   475  0000CA                     	ds	3
   476  0000CD                     main@F5452:
   477                           	opt stack 0
   478  0000CD                     	ds	3
   479  0000D0                     main@F5454:
   480                           	opt stack 0
   481  0000D0                     	ds	3
   482  0000D3                     main@F5456:
   483                           	opt stack 0
   484  0000D3                     	ds	3
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           prodh	equ	0xFF4
   490                           prodl	equ	0xFF3
   491                           intcon	equ	0xFF2
   492                           intcon2	equ	0xFF1
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           indf1	equ	0xFE7
   496                           postinc1	equ	0xFE6
   497                           postdec1	equ	0xFE5
   498                           plusw1	equ	0xFE3
   499                           fsr1h	equ	0xFE2
   500                           fsr1l	equ	0xFE1
   501                           indf2	equ	0xFDF
   502                           postinc2	equ	0xFDE
   503                           plusw2	equ	0xFDB
   504                           fsr2h	equ	0xFDA
   505                           fsr2l	equ	0xFD9
   506                           status	equ	0xFD8
   507                           
   508                           	psect	bssBIGRAM
   509  00011C                     __pbssBIGRAM:
   510                           	opt stack 0
   511  00011C                     _senha:
   512                           	opt stack 0
   513  00011C                     	ds	272
   514                           tblptru	equ	0xFF8
   515                           tblptrh	equ	0xFF7
   516                           tblptrl	equ	0xFF6
   517                           tablat	equ	0xFF5
   518                           prodh	equ	0xFF4
   519                           prodl	equ	0xFF3
   520                           intcon	equ	0xFF2
   521                           intcon2	equ	0xFF1
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           indf1	equ	0xFE7
   525                           postinc1	equ	0xFE6
   526                           postdec1	equ	0xFE5
   527                           plusw1	equ	0xFE3
   528                           fsr1h	equ	0xFE2
   529                           fsr1l	equ	0xFE1
   530                           indf2	equ	0xFDF
   531                           postinc2	equ	0xFDE
   532                           plusw2	equ	0xFDB
   533                           fsr2h	equ	0xFDA
   534                           fsr2l	equ	0xFD9
   535                           status	equ	0xFD8
   536                           
   537                           	psect	cstackBANK1
   538  000100                     __pcstackBANK1:
   539                           	opt stack 0
   540  000100                     main@OK:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0x0
   544  000100                     	ds	3
   545  000103                     main@EN:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x3
   549  000103                     	ds	3
   550  000106                     main@EP:
   551                           	opt stack 0
   552                           
   553                           ; 3 bytes @ 0x6
   554  000106                     	ds	3
   555  000109                     main@EC:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x9
   559  000109                     	ds	3
   560  00010C                     main@ES:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0xC
   564  00010C                     	ds	3
   565  00010F                     main@EI:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0xF
   569  00010F                     	ds	3
   570  000112                     main@ultimo_caractere_recebido:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x12
   574  000112                     	ds	1
   575  000113                     main@j:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x13
   579  000113                     	ds	1
   580  000114                     main@qtd_total_contas:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x14
   584  000114                     	ds	1
   585  000115                     main@conta_a_ser_alterada:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x15
   589  000115                     	ds	2
   590  000117                     main@etapa:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x17
   594  000117                     	ds	1
   595  000118                     main@conta:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x18
   599  000118                     	ds	1
   600  000119                     main@funcao:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x19
   604  000119                     	ds	1
   605  00011A                     main@cont:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x1A
   609  00011A                     	ds	1
   610  00011B                     main@ordem:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x1B
   614  00011B                     	ds	1
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           prodh	equ	0xFF4
   620                           prodl	equ	0xFF3
   621                           intcon	equ	0xFF2
   622                           intcon2	equ	0xFF1
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           indf1	equ	0xFE7
   626                           postinc1	equ	0xFE6
   627                           postdec1	equ	0xFE5
   628                           plusw1	equ	0xFE3
   629                           fsr1h	equ	0xFE2
   630                           fsr1l	equ	0xFE1
   631                           indf2	equ	0xFDF
   632                           postinc2	equ	0xFDE
   633                           plusw2	equ	0xFDB
   634                           fsr2h	equ	0xFDA
   635                           fsr2l	equ	0xFD9
   636                           status	equ	0xFD8
   637                           
   638                           	psect	cstackBANK0
   639  0000D6                     __pcstackBANK0:
   640                           	opt stack 0
   641  0000D6                     ___awdiv@counter:
   642                           	opt stack 0
   643  0000D6                     dia_da_semana@tabela_mes:
   644                           	opt stack 0
   645                           
   646                           ; 12 bytes @ 0x0
   647  0000D6                     	ds	1
   648  0000D7                     ___awdiv@sign:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x1
   652  0000D7                     	ds	1
   653  0000D8                     ___awdiv@quotient:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x2
   657  0000D8                     	ds	2
   658  0000DA                     numero_para_ascii@temp2:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x4
   662  0000DA                     	ds	2
   663  0000DC                     numero_para_ascii@numero:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x6
   667  0000DC                     	ds	1
   668  0000DD                     numero_para_ascii@temp1:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x7
   672  0000DD                     	ds	5
   673  0000E2                     dia_da_semana@dia:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0xC
   677  0000E2                     	ds	1
   678  0000E3                     ??_main:
   679                           
   680                           ; 0 bytes @ 0xD
   681  0000E3                     	ds	5
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           prodh	equ	0xFF4
   687                           prodl	equ	0xFF3
   688                           intcon	equ	0xFF2
   689                           intcon2	equ	0xFF1
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           indf1	equ	0xFE7
   693                           postinc1	equ	0xFE6
   694                           postdec1	equ	0xFE5
   695                           plusw1	equ	0xFE3
   696                           fsr1h	equ	0xFE2
   697                           fsr1l	equ	0xFE1
   698                           indf2	equ	0xFDF
   699                           postinc2	equ	0xFDE
   700                           plusw2	equ	0xFDB
   701                           fsr2h	equ	0xFDA
   702                           fsr2l	equ	0xFD9
   703                           status	equ	0xFD8
   704                           
   705                           	psect	cstackCOMRAM
   706  000001                     __pcstackCOMRAM:
   707                           	opt stack 0
   708  000001                     ?i2___wmul:
   709                           	opt stack 0
   710  000001                     teclado_matricial@linha:
   711                           	opt stack 0
   712  000001                     i2enviar_caractere_serial@caractere_a_enviar:
   713                           	opt stack 0
   714  000001                     i2___lbdiv@divisor:
   715                           	opt stack 0
   716  000001                     i2___wmul@multiplier:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x0
   720  000001                     	ds	1
   721  000002                     teclado_matricial@coluna:
   722                           	opt stack 0
   723  000002                     i2___lbdiv@dividend:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x1
   727  000002                     	ds	1
   728  000003                     teclado_matricial@temp:
   729                           	opt stack 0
   730  000003                     i2___lbdiv@counter:
   731                           	opt stack 0
   732  000003                     i2___wmul@multiplicand:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x2
   736  000003                     	ds	1
   737  000004                     teclado_matricial@caractere:
   738                           	opt stack 0
   739  000004                     i2___lbdiv@quotient:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x3
   743  000004                     	ds	1
   744  000005                     i2___wmul@product:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x4
   748  000005                     	ds	2
   749  000007                     ?i2___awdiv:
   750                           	opt stack 0
   751  000007                     i2___awdiv@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x6
   755  000007                     	ds	2
   756  000009                     i2___awdiv@divisor:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x8
   760  000009                     	ds	2
   761  00000B                     i2___awdiv@counter:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0xA
   765  00000B                     	ds	1
   766  00000C                     i2___awdiv@sign:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0xB
   770  00000C                     	ds	1
   771  00000D                     i2___awdiv@quotient:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0xC
   775  00000D                     	ds	2
   776  00000F                     ??i2_numero_para_ascii:
   777                           
   778                           ; 0 bytes @ 0xE
   779  00000F                     	ds	1
   780  000010                     i2numero_para_ascii@numero:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0xF
   784  000010                     	ds	1
   785  000011                     i2numero_para_ascii@temp2:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x10
   789  000011                     	ds	2
   790  000013                     i2numero_para_ascii@temp1:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x12
   794  000013                     	ds	2
   795  000015                     ??_aux:
   796                           
   797                           ; 0 bytes @ 0x14
   798  000015                     	ds	7
   799  00001C                     aux@coluna:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x1B
   803  00001C                     	ds	1
   804  00001D                     aux@linha:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x1C
   808  00001D                     	ds	1
   809  00001E                     ?___wmul:
   810                           	opt stack 0
   811  00001E                     ascii_para_numero@caractere2:
   812                           	opt stack 0
   813  00001E                     configurar_serial@valor_baud:
   814                           	opt stack 0
   815  00001E                     enviar_caractere_serial@caractere_a_enviar:
   816                           	opt stack 0
   817  00001E                     ___lbdiv@divisor:
   818                           	opt stack 0
   819  00001E                     delay_ms@delay_total:
   820                           	opt stack 0
   821  00001E                     enviar_string_serial@string_a_enviar:
   822                           	opt stack 0
   823  00001E                     Read_b_eep@badd:
   824                           	opt stack 0
   825  00001E                     Write_b_eep@badd:
   826                           	opt stack 0
   827  00001E                     ___wmul@multiplier:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x1D
   831  00001E                     	ds	1
   832  00001F                     ascii_para_numero@caractere1:
   833                           	opt stack 0
   834  00001F                     ___lbdiv@dividend:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1E
   838  00001F                     	ds	1
   839  000020                     ??_delay_ms:
   840  000020                     ascii_para_numero@caractere3:
   841                           	opt stack 0
   842  000020                     verificar_num_contas@qtd_contas:
   843                           	opt stack 0
   844  000020                     enviar_string_serial@cont:
   845                           	opt stack 0
   846  000020                     Write_b_eep@bdat:
   847                           	opt stack 0
   848  000020                     ___lbdiv@counter:
   849                           	opt stack 0
   850  000020                     carregar_senha@senha:
   851                           	opt stack 0
   852  000020                     ___wmul@multiplicand:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x1F
   856  000020                     	ds	1
   857  000021                     ascii_para_numero@numero:
   858                           	opt stack 0
   859  000021                     verificar_num_contas@i:
   860                           	opt stack 0
   861  000021                     Write_b_eep@GIE_BIT_VAL:
   862                           	opt stack 0
   863  000021                     ___lbdiv@quotient:
   864                           	opt stack 0
   865  000021                     delay_ms@temp:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x20
   869  000021                     	ds	1
   870  000022                     ??_carregar_senha:
   871  000022                     dia_da_semana@mes:
   872                           	opt stack 0
   873  000022                     eeprom_config_inicial@i:
   874                           	opt stack 0
   875  000022                     ___wmul@product:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x21
   879  000022                     	ds	1
   880  000023                     dia_da_semana@ano:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x22
   884  000023                     	ds	1
   885  000024                     ??_dia_da_semana:
   886  000024                     ?___awdiv:
   887                           	opt stack 0
   888  000024                     ___awdiv@dividend:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x23
   892  000024                     	ds	2
   893  000026                     carregar_senha@conta:
   894                           	opt stack 0
   895  000026                     ___awdiv@divisor:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x25
   899  000026                     	ds	1
   900  000027                     carregar_senha@i:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x26
   904  000027                     	ds	1
   905  000028                     ??_numero_para_ascii:
   906  000028                     
   907                           ; 0 bytes @ 0x27
   908  000028                     	ds	1
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           prodh	equ	0xFF4
   914                           prodl	equ	0xFF3
   915                           intcon	equ	0xFF2
   916                           intcon2	equ	0xFF1
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           indf1	equ	0xFE7
   920                           postinc1	equ	0xFE6
   921                           postdec1	equ	0xFE5
   922                           plusw1	equ	0xFE3
   923                           fsr1h	equ	0xFE2
   924                           fsr1l	equ	0xFE1
   925                           indf2	equ	0xFDF
   926                           postinc2	equ	0xFDE
   927                           plusw2	equ	0xFDB
   928                           fsr2h	equ	0xFDA
   929                           fsr2l	equ	0xFD9
   930                           status	equ	0xFD8
   931                           
   932 ;;
   933 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   934 ;;
   935 ;; *************** function _main *****************
   936 ;; Defined at:
   937 ;;		line 320 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  EI              3   15[BANK1 ] unsigned char [3]
   942 ;;  ES              3   12[BANK1 ] unsigned char [3]
   943 ;;  EC              3    9[BANK1 ] unsigned char [3]
   944 ;;  EP              3    6[BANK1 ] unsigned char [3]
   945 ;;  EN              3    3[BANK1 ] unsigned char [3]
   946 ;;  i               1    0        unsigned char 
   947 ;;  OK              3    0[BANK1 ] unsigned char [3]
   948 ;;  j               1   19[BANK1 ] unsigned char 
   949 ;;  ordem           1   27[BANK1 ] unsigned char 
   950 ;;  cont            1   26[BANK1 ] unsigned char 
   951 ;;  funcao          1   25[BANK1 ] unsigned char 
   952 ;;  conta           1   24[BANK1 ] unsigned char 
   953 ;;  etapa           1   23[BANK1 ] unsigned char 
   954 ;;  conta_a_ser_    1   21[BANK1 ] unsigned char 
   955 ;;  qtd_total_co    1   20[BANK1 ] unsigned char 
   956 ;;  ultimo_carac    1   18[BANK1 ] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  2  262[None  ] int 
   959 ;; Registers used:
   960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   966 ;;      Params:         0       0       0       0       0       0       0       0       0
   967 ;;      Locals:         0       0      28       0       0       0       0       0       0
   968 ;;      Temps:          0       5       0       0       0       0       0       0       0
   969 ;;      Totals:         0       5      28       0       0       0       0       0       0
   970 ;;Total ram usage:       33 bytes
   971 ;; Hardware stack levels required when called:    5
   972 ;; This function calls:
   973 ;;		_Busy_eep
   974 ;;		_Read_b_eep
   975 ;;		_Write_b_eep
   976 ;;		_ascii_para_numero
   977 ;;		_carregar_senha
   978 ;;		_configurar_serial
   979 ;;		_delay_ms
   980 ;;		_dia_da_semana
   981 ;;		_eeprom_config_inicial
   982 ;;		_enviar_caractere_serial
   983 ;;		_enviar_string_serial
   984 ;;		_numero_para_ascii
   985 ;;		_verificar_num_contas
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text0
   992  007ABE                     __ptext0:
   993                           	opt stack 0
   994  007ABE                     _main:
   995                           	opt stack 26
   996                           
   997                           ;main.c: 322: unsigned char ordem = 0;
   998                           
   999                           ;incstack = 0
  1000  007ABE  0101               	movlb	1	; () banked
  1001  007AC0  6B1B               	clrf	main@ordem& (0+255),b
  1002                           
  1003                           ;main.c: 323: unsigned char etapa=0;
  1004  007AC2  6B17               	clrf	main@etapa& (0+255),b
  1005                           
  1006                           ;main.c: 324: unsigned char funcao=0;
  1007  007AC4  6B19               	clrf	main@funcao& (0+255),b
  1008                           
  1009                           ;main.c: 326: unsigned char conta_a_ser_alterada=0;
  1010  007AC6  6B15               	clrf	main@conta_a_ser_alterada& (0+255),b
  1011                           
  1012                           ;main.c: 327: unsigned char cont=0;
  1013  007AC8  6B1A               	clrf	main@cont& (0+255),b
  1014                           
  1015                           ;main.c: 328: unsigned char qtd_total_contas=0;
  1016  007ACA  6B14               	clrf	main@qtd_total_contas& (0+255),b
  1017                           
  1018                           ;main.c: 329: unsigned char ultimo_caractere_recebido=0;
  1019  007ACC  6B12               	clrf	main@ultimo_caractere_recebido& (0+255),b
  1020                           
  1021                           ; BSR set to: 1
  1022                           ;main.c: 332: OSCCON=0XF0;
  1023  007ACE  0EF0               	movlw	240
  1024  007AD0  6ED3               	movwf	4051,c	;volatile
  1025                           
  1026                           ;main.c: 335: INTCON = 0b11100000;
  1027  007AD2  0EE0               	movlw	224
  1028  007AD4  6EF2               	movwf	intcon,c	;volatile
  1029                           
  1030                           ; BSR set to: 1
  1031                           ;main.c: 336: INTCON2 =0b00000000;
  1032  007AD6  6AF1               	clrf	intcon2,c	;volatile
  1033                           
  1034                           ;main.c: 337: PIE1=0b00100001;
  1035  007AD8  0E21               	movlw	33
  1036  007ADA  6E9D               	movwf	3997,c	;volatile
  1037                           
  1038                           ; BSR set to: 1
  1039                           ;main.c: 338: RCONbits.IPEN = 0;
  1040  007ADC  9ED0               	bcf	4048,7,c	;volatile
  1041                           
  1042                           ;main.c: 342: T0CON = 0b10000111;
  1043  007ADE  0E87               	movlw	135
  1044  007AE0  6ED5               	movwf	4053,c	;volatile
  1045                           
  1046                           ;main.c: 343: TMR0H=0xC2;
  1047  007AE2  0EC2               	movlw	194
  1048  007AE4  6ED7               	movwf	4055,c	;volatile
  1049                           
  1050                           ;main.c: 344: TMR0L= 0xF7;
  1051  007AE6  0EF7               	movlw	247
  1052  007AE8  6ED6               	movwf	4054,c	;volatile
  1053                           
  1054                           ; BSR set to: 1
  1055                           ;main.c: 347: LATD=0;
  1056  007AEA  6A8C               	clrf	3980,c	;volatile
  1057                           
  1058                           ;main.c: 351: TRISB=0xF0;
  1059  007AEC  0EF0               	movlw	240
  1060  007AEE  6E93               	movwf	3987,c	;volatile
  1061                           
  1062                           ;main.c: 352: LATB=0x0F;
  1063  007AF0  0E0F               	movlw	15
  1064  007AF2  6E8A               	movwf	3978,c	;volatile
  1065                           
  1066                           ;main.c: 353: TRISC=0xC3;
  1067  007AF4  0EC3               	movlw	195
  1068  007AF6  6E94               	movwf	3988,c	;volatile
  1069                           
  1070                           ; BSR set to: 1
  1071                           ;main.c: 354: TRISD=0x00;
  1072  007AF8  6A95               	clrf	3989,c	;volatile
  1073                           
  1074                           ; BSR set to: 1
  1075                           ;main.c: 355: ADCON1=0XFF;
  1076  007AFA  68C1               	setf	4033,c	;volatile
  1077                           
  1078                           ;main.c: 356: CMCON=0X07;
  1079  007AFC  0E07               	movlw	7
  1080  007AFE  6EB4               	movwf	4020,c	;volatile
  1081                           
  1082                           ;main.c: 359: T1CON = 0b00001110;
  1083  007B00  0E0E               	movlw	14
  1084  007B02  6ECD               	movwf	4045,c	;volatile
  1085                           
  1086                           ;main.c: 360: TMR1H=0XC0;
  1087  007B04  0EC0               	movlw	192
  1088  007B06  6ECF               	movwf	4047,c	;volatile
  1089                           
  1090                           ; BSR set to: 1
  1091                           ;main.c: 361: TMR1L=0;
  1092  007B08  6ACE               	clrf	4046,c	;volatile
  1093                           
  1094                           ; BSR set to: 1
  1095                           ;main.c: 364: if(Read_b_eep(0) == 0xFF){eeprom_config_inicial();}
  1096  007B0A  6A1F               	clrf	Read_b_eep@badd+1,c
  1097  007B0C  6A1E               	clrf	Read_b_eep@badd,c
  1098  007B0E  EC2A  F039         	call	_Read_b_eep	;wreg free
  1099  007B12  0AFF               	xorlw	255
  1100  007B14  B4D8               	btfsc	status,2,c
  1101  007B16  EC3A  F03A         	call	_eeprom_config_inicial	;wreg free
  1102                           
  1103                           ;main.c: 366: configurar_serial(35);
  1104  007B1A  0E23               	movlw	35
  1105  007B1C  EC4C  F039         	call	_configurar_serial
  1106                           
  1107                           ;main.c: 368: qtd_total_contas = verificar_num_contas();
  1108  007B20  EC95  F039         	call	_verificar_num_contas	;wreg free
  1109  007B24  0101               	movlb	1	; () banked
  1110  007B26  6F14               	movwf	main@qtd_total_contas& (0+255),b
  1111                           
  1112                           ; BSR set to: 1
  1113                           ;main.c: 369: numero_para_ascii(qtd_total_contas);
  1114  007B28  5114               	movf	main@qtd_total_contas& (0+255),w,b
  1115  007B2A  EC63  F03B         	call	_numero_para_ascii
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 371: for(conta=0;conta<qtd_total_contas;conta++){
  1119  007B2E  0101               	movlb	1	; () banked
  1120  007B30  6B18               	clrf	main@conta& (0+255),b
  1121  007B32  D009               	goto	l3736
  1122  007B34                     l3732:
  1123                           
  1124                           ; BSR set to: 1
  1125                           ;main.c: 372: carregar_senha(conta, senha);}
  1126  007B34  0E1C               	movlw	low _senha
  1127  007B36  6E20               	movwf	carregar_senha@senha,c
  1128  007B38  0E01               	movlw	high _senha
  1129  007B3A  6E21               	movwf	carregar_senha@senha+1,c
  1130  007B3C  5118               	movf	main@conta& (0+255),w,b
  1131  007B3E  ECA6  F03B         	call	_carregar_senha
  1132  007B42  0101               	movlb	1	; () banked
  1133  007B44  2B18               	incf	main@conta& (0+255),f,b
  1134  007B46                     l3736:
  1135                           
  1136                           ; BSR set to: 1
  1137  007B46  5114               	movf	main@qtd_total_contas& (0+255),w,b
  1138  007B48  5D18               	subwf	main@conta& (0+255),w,b
  1139  007B4A  E3F4               	bnc	l3732
  1140                           
  1141                           ; BSR set to: 1
  1142                           ;main.c: 374: conta=0;
  1143  007B4C  6B18               	clrf	main@conta& (0+255),b
  1144                           
  1145                           ;main.c: 375: RCIE=1;
  1146  007B4E  8A9D               	bsf	3997,5,c	;volatile
  1147                           
  1148                           ;main.c: 377: data_atual.ano=0;
  1149  007B50  6A3B               	clrf	_data_atual,c
  1150                           
  1151                           ;main.c: 378: data_atual.mes= 0;
  1152  007B52  6A3C               	clrf	_data_atual+1,c
  1153                           
  1154                           ; BSR set to: 1
  1155                           ;main.c: 379: data_atual.dia=1;
  1156  007B54  0E01               	movlw	1
  1157  007B56  6E3D               	movwf	_data_atual+2,c
  1158                           
  1159                           ; BSR set to: 1
  1160                           ;main.c: 380: data_atual.dia_da_semana= dia_da_semana(data_atual.ano,data_atual.mes,data
      +                          _atual.dia);
  1161  007B58  C03C  F022         	movff	_data_atual+1,dia_da_semana@mes
  1162  007B5C  C03D  F023         	movff	_data_atual+2,dia_da_semana@ano
  1163  007B60  503B               	movf	_data_atual,w,c
  1164  007B62  EC0A  F03A         	call	_dia_da_semana
  1165  007B66  6E41               	movwf	_data_atual+6,c
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;main.c: 381: data_atual.hora=0;
  1169  007B68  6A3E               	clrf	_data_atual+3,c
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;main.c: 382: data_atual.minuto=0;
  1173  007B6A  6A3F               	clrf	_data_atual+4,c
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;main.c: 383: data_atual.segundo=0;
  1177  007B6C  6A40               	clrf	_data_atual+5,c
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 384: PORTB_SR=PORTB;
  1181  007B6E  CF81 F037          	movff	3969,_PORTB_SR	;volatile
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;main.c: 385: RBIE=1;
  1185  007B72  86F2               	bsf	intcon,3,c	;volatile
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 386: RBIF=0;
  1189  007B74  90F2               	bcf	intcon,0,c	;volatile
  1190  007B76                     l3756:
  1191                           
  1192                           ;main.c: 391: if(receber == 1){
  1193  007B76  A642               	btfss	_receber/(0+8),_receber& (0+7),c
  1194  007B78  D162               	goto	l3938
  1195                           
  1196                           ;main.c: 392: receber=0;
  1197  007B7A  9642               	bcf	_receber/(0+8),_receber& (0+7),c
  1198                           
  1199                           ;main.c: 393: numero_para_ascii(qtd_total_contas);
  1200  007B7C  0101               	movlb	1	; () banked
  1201  007B7E  5114               	movf	main@qtd_total_contas& (0+255),w,b
  1202  007B80  EC63  F03B         	call	_numero_para_ascii
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;main.c: 394: TXREG = '\n';
  1206  007B84  0E0A               	movlw	10
  1207  007B86  6EAD               	movwf	4013,c	;volatile
  1208  007B88                     l269:
  1209  007B88  A2AC               	btfss	4012,1,c	;volatile
  1210  007B8A  D7FE               	goto	l269
  1211                           
  1212                           ;main.c: 396: char j;
  1213                           ;main.c: 397: for(j=0;j<qtd_caracteres_recebidos_serial;j++){
  1214  007B8C  0101               	movlb	1	; () banked
  1215  007B8E  6B13               	clrf	main@j& (0+255),b
  1216  007B90  D006               	goto	l3768
  1217  007B92                     l3764:
  1218                           
  1219                           ; BSR set to: 1
  1220                           ;main.c: 398: TXREG = buffer_serial[j];
  1221  007B92  5113               	movf	main@j& (0+255),w,b
  1222  007B94  DA2F               	call	PL16	;call to abstracted procedure
  1223  007B96                     l274:
  1224  007B96  A2AC               	btfss	4012,1,c	;volatile
  1225  007B98  D7FE               	goto	l274
  1226  007B9A  0101               	movlb	1	; () banked
  1227  007B9C  2B13               	incf	main@j& (0+255),f,b
  1228  007B9E                     l3768:
  1229                           
  1230                           ; BSR set to: 1
  1231  007B9E  503A               	movf	_qtd_caracteres_recebidos_serial,w,c
  1232  007BA0  5D13               	subwf	main@j& (0+255),w,b
  1233  007BA2  E3F7               	bnc	l3764
  1234                           
  1235                           ; BSR set to: 1
  1236                           ;main.c: 400: }
  1237                           ;main.c: 402: TXREG = '\n';
  1238  007BA4  0E0A               	movlw	10
  1239  007BA6  6EAD               	movwf	4013,c	;volatile
  1240  007BA8                     l278:
  1241  007BA8  A2AC               	btfss	4012,1,c	;volatile
  1242  007BAA  D7FE               	goto	l278
  1243                           
  1244                           ;main.c: 405: for(cont=0;cont<qtd_caracteres_recebidos_serial;cont++){
  1245  007BAC  0101               	movlb	1	; () banked
  1246  007BAE  6B1A               	clrf	main@cont& (0+255),b
  1247  007BB0  D13F               	goto	l3934
  1248  007BB2                     l282:
  1249                           
  1250                           ; BSR set to: 1
  1251                           ;main.c: 408: if((FLAGS_1 & (1<<0))){
  1252  007BB2  0100               	movlb	0	; () banked
  1253  007BB4  A1C2               	btfss	_FLAGS_1& (0+255),0,b
  1254  007BB6  D010               	goto	l3778
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;main.c: 410: if(buffer_serial[cont] != '>') {
  1258  007BB8  0101               	movlb	1	; () banked
  1259  007BBA  511A               	movf	main@cont& (0+255),w,b
  1260  007BBC  0F60               	addlw	low _buffer_serial
  1261  007BBE  6ED9               	movwf	fsr2l,c
  1262  007BC0  6ADA               	clrf	fsr2h,c
  1263  007BC2  0E3E               	movlw	62
  1264  007BC4  18DE               	xorwf	postinc2,w,c
  1265  007BC6  E002               	bz	l284
  1266                           
  1267                           ; BSR set to: 1
  1268                           ;main.c: 411: (FLAGS_1 |= (1<<7));}
  1269  007BC8  0100               	movlb	0	; () banked
  1270  007BCA  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  1271  007BCC                     l284:
  1272                           
  1273                           ;main.c: 413: (FLAGS_1 &= ~(1<<0));
  1274  007BCC  0100               	movlb	0	; () banked
  1275  007BCE  91C2               	bcf	_FLAGS_1& (0+255),0,b
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;main.c: 414: ordem=0;
  1279  007BD0  0101               	movlb	1	; () banked
  1280  007BD2  6B1B               	clrf	main@ordem& (0+255),b
  1281                           
  1282                           ;main.c: 415: etapa++;}
  1283  007BD4  2B17               	incf	main@etapa& (0+255),f,b
  1284  007BD6  D11B               	goto	l3920
  1285  007BD8                     l3778:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 417: else if(etapa == 0){
  1289  007BD8  0101               	movlb	1	; () banked
  1290  007BDA  5117               	movf	main@etapa& (0+255),w,b
  1291  007BDC  E10A               	bnz	l3784
  1292                           
  1293                           ; BSR set to: 1
  1294                           ;main.c: 420: if(buffer_serial[cont] != 'I') {(FLAGS_1 |= (1<<7));}
  1295  007BDE  511A               	movf	main@cont& (0+255),w,b
  1296  007BE0  0F60               	addlw	low _buffer_serial
  1297  007BE2  6ED9               	movwf	fsr2l,c
  1298  007BE4  6ADA               	clrf	fsr2h,c
  1299  007BE6  0E49               	movlw	73
  1300  007BE8  18DE               	xorwf	postinc2,w,c
  1301  007BEA  E059               	bz	L1
  1302                           
  1303                           ; BSR set to: 1
  1304  007BEC  0100               	movlb	0	; () banked
  1305  007BEE  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  1306  007BF0  D056               	goto	L1
  1307  007BF2                     l3784:
  1308                           
  1309                           ; BSR set to: 1
  1310                           ;main.c: 425: else if(etapa == 1){
  1311  007BF2  0517               	decf	main@etapa& (0+255),w,b
  1312  007BF4  E118               	bnz	l3802
  1313                           
  1314                           ; BSR set to: 1
  1315                           ;main.c: 427: funcao = buffer_serial[cont++];
  1316  007BF6  511A               	movf	main@cont& (0+255),w,b
  1317  007BF8  0F60               	addlw	low _buffer_serial
  1318  007BFA  6ED9               	movwf	fsr2l,c
  1319  007BFC  6ADA               	clrf	fsr2h,c
  1320  007BFE  50DF               	movf	indf2,w,c
  1321  007C00  6F19               	movwf	main@funcao& (0+255),b
  1322                           
  1323                           ; BSR set to: 1
  1324  007C02  2B1A               	incf	main@cont& (0+255),f,b
  1325                           
  1326                           ; BSR set to: 1
  1327                           ;main.c: 428: if(funcao<'0' || funcao>'7') {(FLAGS_1 |= (1<<7));}
  1328  007C04  0E2F               	movlw	47
  1329  007C06  6519               	cpfsgt	main@funcao& (0+255),b
  1330  007C08  D003               	goto	l3794
  1331                           
  1332                           ; BSR set to: 1
  1333  007C0A  0E37               	movlw	55
  1334  007C0C  6519               	cpfsgt	main@funcao& (0+255),b
  1335  007C0E  D002               	goto	l3796
  1336  007C10                     l3794:
  1337                           
  1338                           ; BSR set to: 1
  1339  007C10  0100               	movlb	0	; () banked
  1340  007C12  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  1341  007C14                     l3796:
  1342                           
  1343                           ;main.c: 430: conta = ((buffer_serial[cont]) - '0');
  1344  007C14  D9E8               	call	PL12	;call to abstracted procedure
  1345  007C16  0FD0               	addlw	208
  1346  007C18  6F18               	movwf	main@conta& (0+255),b
  1347                           
  1348                           ; BSR set to: 1
  1349                           ;main.c: 432: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  1350  007C1A  0E0F               	movlw	15
  1351  007C1C  6518               	cpfsgt	main@conta& (0+255),b
  1352  007C1E  D03F               	goto	L1
  1353                           
  1354                           ; BSR set to: 1
  1355  007C20  0100               	movlb	0	; () banked
  1356  007C22  85C2               	bsf	_FLAGS_1& (0+255),2,b
  1357  007C24  D03C               	goto	L1
  1358  007C26                     l3802:
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;main.c: 440: else if(etapa == 2){
  1362  007C26  0E02               	movlw	2
  1363  007C28  1917               	xorwf	main@etapa& (0+255),w,b
  1364  007C2A  E13C               	bnz	l3820
  1365                           
  1366                           ; BSR set to: 1
  1367                           ;main.c: 442: for(ordem=0;senha[conta][ordem]!= 0;ordem++){
  1368  007C2C  6B1B               	clrf	main@ordem& (0+255),b
  1369  007C2E  D02D               	goto	l3816
  1370  007C30                     l3806:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 443: if(senha[conta][ordem] != buffer_serial[cont++]) {
  1374  007C30  0101               	movlb	1	; () banked
  1375  007C32  D9D0               	call	PL8	;call to abstracted procedure
  1376  007C34  0101               	movlb	1	; () banked
  1377  007C36  5118               	movf	main@conta& (0+255),w,b
  1378  007C38  0D11               	mullw	17
  1379  007C3A  0E1C               	movlw	low _senha
  1380  007C3C  0100               	movlb	0	; () banked
  1381  007C3E  6FE5               	movwf	(??_main+2)& (0+255),b
  1382  007C40  0E01               	movlw	high _senha
  1383  007C42  6FE6               	movwf	(??_main+3)& (0+255),b
  1384  007C44  50F3               	movf	prodl,w,c
  1385  007C46  27E5               	addwf	(??_main+2)& (0+255),f,b
  1386  007C48  50F4               	movf	prodh,w,c
  1387  007C4A  23E6               	addwfc	(??_main+3)& (0+255),f,b
  1388  007C4C  0101               	movlb	1	; () banked
  1389  007C4E  511B               	movf	main@ordem& (0+255),w,b
  1390  007C50  0100               	movlb	0	; () banked
  1391  007C52  25E5               	addwf	(??_main+2)& (0+255),w,b
  1392  007C54  6EE1               	movwf	fsr1l,c
  1393  007C56  0E00               	movlw	0
  1394  007C58  21E6               	addwfc	(??_main+3)& (0+255),w,b
  1395  007C5A  6EE2               	movwf	fsr1h,c
  1396  007C5C  50DE               	movf	postinc2,w,c
  1397  007C5E  18E6               	xorwf	postinc1,w,c
  1398  007C60  E012               	bz	l3814
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 444: (FLAGS_1 |= (1<<6));
  1402  007C62  8DC2               	bsf	_FLAGS_1& (0+255),6,b
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 445: TXREG = senha[conta][ordem]; while(!TRMT){}
  1406  007C64  0101               	movlb	1	; () banked
  1407  007C66  5118               	movf	main@conta& (0+255),w,b
  1408  007C68  D98F               	call	PL2	;call to abstracted procedure
  1409  007C6A  6ED9               	movwf	fsr2l,c
  1410  007C6C  0E00               	movlw	0
  1411  007C6E  21E4               	addwfc	(??_main+1)& (0+255),w,b
  1412  007C70  6EDA               	movwf	fsr2h,c
  1413  007C72  50DF               	movf	indf2,w,c
  1414  007C74  6EAD               	movwf	4013,c	;volatile
  1415  007C76                     l299:
  1416  007C76  A2AC               	btfss	4012,1,c	;volatile
  1417  007C78  D7FE               	goto	l299
  1418                           
  1419                           ;main.c: 446: TXREG = buffer_serial[--cont]; while(!TRMT){}
  1420  007C7A  0101               	movlb	1	; () banked
  1421  007C7C  071A               	decf	main@cont& (0+255),f,b
  1422  007C7E  511A               	movf	main@cont& (0+255),w,b
  1423  007C80  D9B9               	call	PL16	;call to abstracted procedure
  1424  007C82                     l302:
  1425  007C82  A2AC               	btfss	4012,1,c	;volatile
  1426  007C84  D7FE               	goto	l302
  1427  007C86                     l3814:
  1428  007C86  0101               	movlb	1	; () banked
  1429  007C88  2B1B               	incf	main@ordem& (0+255),f,b
  1430  007C8A                     l3816:
  1431                           
  1432                           ; BSR set to: 1
  1433  007C8A  5118               	movf	main@conta& (0+255),w,b
  1434  007C8C  D97D               	call	PL2	;call to abstracted procedure
  1435  007C8E  6ED9               	movwf	fsr2l,c
  1436  007C90  0E00               	movlw	0
  1437  007C92  21E4               	addwfc	(??_main+1)& (0+255),w,b
  1438  007C94  6EDA               	movwf	fsr2h,c
  1439  007C96  50DF               	movf	indf2,w,c
  1440  007C98  E1CB               	bnz	l3806
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 447: }
  1444                           ;main.c: 448: }
  1445                           ;main.c: 449: cont--;
  1446  007C9A  0101               	movlb	1	; () banked
  1447  007C9C  071A               	decf	main@cont& (0+255),f,b
  1448  007C9E                     L1:
  1449                           
  1450                           ;main.c: 450: (FLAGS_1 |= (1<<0));
  1451  007C9E  0100               	movlb	0	; () banked
  1452  007CA0  81C2               	bsf	_FLAGS_1& (0+255),0,b
  1453                           
  1454                           ;main.c: 452: }
  1455  007CA2  D0B5               	goto	l3920
  1456  007CA4                     l3820:
  1457                           
  1458                           ; BSR set to: 1
  1459                           ;main.c: 455: else if(etapa == 3){
  1460  007CA4  0E03               	movlw	3
  1461  007CA6  1917               	xorwf	main@etapa& (0+255),w,b
  1462  007CA8  E001 D0A0          	bnz	l3910
  1463                           
  1464                           ; BSR set to: 1
  1465                           ;main.c: 456: if(funcao == '0' || funcao == '2'){
  1466  007CAC  0E30               	movlw	48
  1467  007CAE  1919               	xorwf	main@funcao& (0+255),w,b
  1468  007CB0  E003               	bz	l310
  1469                           
  1470                           ; BSR set to: 1
  1471  007CB2  0E32               	movlw	50
  1472  007CB4  1919               	xorwf	main@funcao& (0+255),w,b
  1473  007CB6  E11B               	bnz	l3838
  1474  007CB8                     l310:
  1475                           
  1476                           ; BSR set to: 1
  1477                           ;main.c: 458: for(ordem=0;ordem<2;ordem++){
  1478  007CB8  6B1B               	clrf	main@ordem& (0+255),b
  1479  007CBA                     l3830:
  1480                           
  1481                           ; BSR set to: 1
  1482                           ;main.c: 459: if( buffer_serial[cont++] != ('N'+(ordem))) {(FLAGS_1 |= (1<<7));}
  1483  007CBA  D98C               	call	PL8	;call to abstracted procedure
  1484  007CBC  50DF               	movf	indf2,w,c
  1485  007CBE  6FE4               	movwf	(??_main+1)& (0+255),b
  1486  007CC0  6BE5               	clrf	(??_main+2)& (0+255),b
  1487  007CC2  0101               	movlb	1	; () banked
  1488  007CC4  511B               	movf	main@ordem& (0+255),w,b
  1489  007CC6  0100               	movlb	0	; () banked
  1490  007CC8  6FE6               	movwf	(??_main+3)& (0+255),b
  1491  007CCA  6BE7               	clrf	(??_main+4)& (0+255),b
  1492  007CCC  0E4E               	movlw	78
  1493  007CCE  27E6               	addwf	(??_main+3)& (0+255),f,b
  1494  007CD0  0E00               	movlw	0
  1495  007CD2  23E7               	addwfc	(??_main+4)& (0+255),f,b
  1496  007CD4  51E4               	movf	(??_main+1)& (0+255),w,b
  1497  007CD6  19E6               	xorwf	(??_main+3)& (0+255),w,b
  1498  007CD8  E103               	bnz	u4240
  1499  007CDA  51E5               	movf	(??_main+2)& (0+255),w,b
  1500  007CDC  19E7               	xorwf	(??_main+4)& (0+255),w,b
  1501  007CDE  A4D8               	btfss	status,2,c
  1502  007CE0                     u4240:
  1503                           
  1504                           ; BSR set to: 0
  1505  007CE0  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  1506                           
  1507                           ; BSR set to: 0
  1508  007CE2  0101               	movlb	1	; () banked
  1509  007CE4  2B1B               	incf	main@ordem& (0+255),f,b
  1510                           
  1511                           ; BSR set to: 1
  1512  007CE6  0E01               	movlw	1
  1513  007CE8  651B               	cpfsgt	main@ordem& (0+255),b
  1514  007CEA  D7E7               	goto	l3830
  1515  007CEC  D7D8               	goto	L1
  1516  007CEE                     l3838:
  1517                           
  1518                           ; BSR set to: 1
  1519                           ;main.c: 465: else if(funcao == '1'){
  1520  007CEE  0E31               	movlw	49
  1521  007CF0  1919               	xorwf	main@funcao& (0+255),w,b
  1522  007CF2  E105               	bnz	l3844
  1523                           
  1524                           ; BSR set to: 1
  1525                           ;main.c: 467: endereco_inic_eeprom = (1794 + (buffer_serial[cont] *26));
  1526  007CF4  511B               	movf	main@ordem& (0+255),w,b
  1527  007CF6  E001 D08A          	bnz	l3920
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;main.c: 469: ordem++;
  1531  007CFA  2B1B               	incf	main@ordem& (0+255),f,b
  1532  007CFC  D088               	goto	l3920
  1533  007CFE                     l3844:
  1534                           
  1535                           ; BSR set to: 1
  1536                           ;main.c: 474: else if(funcao == '4'){
  1537  007CFE  0E34               	movlw	52
  1538  007D00  1919               	xorwf	main@funcao& (0+255),w,b
  1539  007D02  E12C               	bnz	l3868
  1540                           
  1541                           ; BSR set to: 1
  1542                           ;main.c: 483: ptr_data= &data_atual.ano;
  1543  007D04  0E3B               	movlw	low _data_atual
  1544  007D06  0100               	movlb	0	; () banked
  1545  007D08  6FC0               	movwf	_ptr_data& (0+255),b
  1546  007D0A  6BC1               	clrf	(_ptr_data+1)& (0+255),b
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 485: for(ordem=0;ordem<7;ordem++){
  1550  007D0C  0101               	movlb	1	; () banked
  1551  007D0E  6B1B               	clrf	main@ordem& (0+255),b
  1552  007D10                     l3852:
  1553                           
  1554                           ; BSR set to: 1
  1555                           ;main.c: 486: if(buffer_serial[cont] == 'X') {
  1556  007D10  511A               	movf	main@cont& (0+255),w,b
  1557  007D12  0F60               	addlw	low _buffer_serial
  1558  007D14  6ED9               	movwf	fsr2l,c
  1559  007D16  6ADA               	clrf	fsr2h,c
  1560  007D18  0E58               	movlw	88
  1561  007D1A  18DE               	xorwf	postinc2,w,c
  1562  007D1C  E103               	bnz	l3858
  1563                           
  1564                           ; BSR set to: 1
  1565                           ;main.c: 487: ordem++;
  1566  007D1E  2B1B               	incf	main@ordem& (0+255),f,b
  1567                           
  1568                           ; BSR set to: 1
  1569                           ;main.c: 488: cont+=2;}
  1570  007D20  0E02               	movlw	2
  1571  007D22  271A               	addwf	main@cont& (0+255),f,b
  1572  007D24                     l3858:
  1573                           
  1574                           ; BSR set to: 1
  1575                           ;main.c: 490: *ptr_data = ascii_para_numero('0',buffer_serial[cont],buffer_serial[cont+1
      +                          ]);
  1576  007D24  511A               	movf	main@cont& (0+255),w,b
  1577  007D26  0F60               	addlw	low _buffer_serial
  1578  007D28  6ED9               	movwf	fsr2l,c
  1579  007D2A  6ADA               	clrf	fsr2h,c
  1580  007D2C  50DF               	movf	indf2,w,c
  1581  007D2E  6E1E               	movwf	ascii_para_numero@caractere2,c
  1582  007D30  511A               	movf	main@cont& (0+255),w,b
  1583  007D32  0F61               	addlw	low (_buffer_serial+1)
  1584  007D34  6ED9               	movwf	fsr2l,c
  1585  007D36  6ADA               	clrf	fsr2h,c
  1586  007D38  50DF               	movf	indf2,w,c
  1587  007D3A  6E1F               	movwf	ascii_para_numero@caractere1,c
  1588  007D3C  0E30               	movlw	48
  1589  007D3E  EC3C  F039         	call	_ascii_para_numero
  1590  007D42  C0C0  FFD9         	movff	_ptr_data,fsr2l
  1591  007D46  C0C1  FFDA         	movff	_ptr_data+1,fsr2h
  1592  007D4A  6EDF               	movwf	indf2,c
  1593                           
  1594                           ; BSR set to: 1
  1595                           ;main.c: 491: cont+=2;}
  1596  007D4C  0E02               	movlw	2
  1597  007D4E  271A               	addwf	main@cont& (0+255),f,b
  1598                           
  1599                           ; BSR set to: 1
  1600  007D50  2B1B               	incf	main@ordem& (0+255),f,b
  1601                           
  1602                           ; BSR set to: 1
  1603  007D52  0E06               	movlw	6
  1604  007D54  651B               	cpfsgt	main@ordem& (0+255),b
  1605  007D56  D7DC               	goto	l3852
  1606                           
  1607                           ; BSR set to: 1
  1608                           ;main.c: 492: cont--;
  1609  007D58  071A               	decf	main@cont& (0+255),f,b
  1610                           
  1611                           ;main.c: 493: }
  1612  007D5A  D059               	goto	l3920
  1613  007D5C                     l3868:
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;main.c: 495: else if(funcao == '7'){
  1617  007D5C  0E37               	movlw	55
  1618  007D5E  1919               	xorwf	main@funcao& (0+255),w,b
  1619  007D60  E156               	bnz	l3920
  1620                           
  1621                           ; BSR set to: 1
  1622                           ;main.c: 497: conta_a_ser_alterada = (buffer_serial[cont] - '0');
  1623  007D62  511A               	movf	main@cont& (0+255),w,b
  1624  007D64  0F60               	addlw	low _buffer_serial
  1625  007D66  6ED9               	movwf	fsr2l,c
  1626  007D68  6ADA               	clrf	fsr2h,c
  1627  007D6A  50DF               	movf	indf2,w,c
  1628  007D6C  0FD0               	addlw	208
  1629  007D6E  6F15               	movwf	main@conta_a_ser_alterada& (0+255),b
  1630                           
  1631                           ; BSR set to: 1
  1632                           ;main.c: 499: if( conta_a_ser_alterada != conta && (!((((conta*16)+ (16-1)) & (1<<6)))) 
      +                          ){
  1633  007D70  1918               	xorwf	main@conta& (0+255),w,b
  1634  007D72  E009               	bz	l3878
  1635                           
  1636                           ; BSR set to: 1
  1637  007D74  5118               	movf	main@conta& (0+255),w,b
  1638  007D76  0D10               	mullw	16
  1639  007D78  CFF3 F0E3          	movff	prodl,??_main
  1640  007D7C  0E0F               	movlw	15
  1641  007D7E  0100               	movlb	0	; () banked
  1642  007D80  27E3               	addwf	??_main& (0+255),f,b
  1643  007D82  ADE3               	btfss	??_main& (0+255),6,b
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;main.c: 500: (FLAGS_1 |= (1<<3));
  1647  007D84  87C2               	bsf	_FLAGS_1& (0+255),3,b
  1648  007D86                     l3878:
  1649                           
  1650                           ;main.c: 501: }
  1651                           ;main.c: 503: for(ordem=0;ordem<(16-1);ordem++){
  1652  007D86  0101               	movlb	1	; () banked
  1653  007D88  6B1B               	clrf	main@ordem& (0+255),b
  1654  007D8A                     l3884:
  1655                           
  1656                           ; BSR set to: 1
  1657                           ;main.c: 504: cont++;
  1658  007D8A  2B1A               	incf	main@cont& (0+255),f,b
  1659                           
  1660                           ; BSR set to: 1
  1661                           ;main.c: 506: if(buffer_serial[cont] == '<') {
  1662  007D8C  511A               	movf	main@cont& (0+255),w,b
  1663  007D8E  0F60               	addlw	low _buffer_serial
  1664  007D90  6ED9               	movwf	fsr2l,c
  1665  007D92  6ADA               	clrf	fsr2h,c
  1666  007D94  0E3C               	movlw	60
  1667  007D96  18DE               	xorwf	postinc2,w,c
  1668  007D98  E110               	bnz	l3898
  1669                           
  1670                           ; BSR set to: 1
  1671                           ;main.c: 507: if(ordem<5) (FLAGS_1 |= (1<<7));
  1672  007D9A  0E05               	movlw	5
  1673  007D9C  611B               	cpfslt	main@ordem& (0+255),b
  1674  007D9E  D003               	goto	l3892
  1675                           
  1676                           ; BSR set to: 1
  1677  007DA0  0100               	movlb	0	; () banked
  1678  007DA2  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  1679  007DA4  D01D               	goto	l3904
  1680  007DA6                     l3892:
  1681                           
  1682                           ; BSR set to: 1
  1683                           ;main.c: 509: else {
  1684                           ;main.c: 510: if(ordem<16-2) (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16)+ordem),
      +                          0));
  1685  007DA6  0E0E               	movlw	14
  1686  007DA8  611B               	cpfslt	main@ordem& (0+255),b
  1687  007DAA  D779               	goto	L1
  1688                           
  1689                           ; BSR set to: 1
  1690  007DAC  EC14  F039         	call	_Busy_eep	;wreg free
  1691  007DB0  D8FA               	call	PL4	;call to abstracted procedure
  1692  007DB2  6A20               	clrf	Write_b_eep@bdat,c
  1693  007DB4  ECF0  F039         	call	_Write_b_eep	;wreg free
  1694  007DB8  D772               	goto	L1
  1695  007DBA                     l3898:
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;main.c: 515: else{
  1699                           ;main.c: 517: senha[conta_a_ser_alterada][ordem] = buffer_serial[cont];
  1700  007DBA  511A               	movf	main@cont& (0+255),w,b
  1701  007DBC  0F60               	addlw	low _buffer_serial
  1702  007DBE  6ED9               	movwf	fsr2l,c
  1703  007DC0  6ADA               	clrf	fsr2h,c
  1704  007DC2  5115               	movf	main@conta_a_ser_alterada& (0+255),w,b
  1705  007DC4  D8E1               	call	PL2	;call to abstracted procedure
  1706  007DC6  6EE1               	movwf	fsr1l,c
  1707  007DC8  0E00               	movlw	0
  1708  007DCA  21E4               	addwfc	(??_main+1)& (0+255),w,b
  1709  007DCC  6EE2               	movwf	fsr1h,c
  1710  007DCE  CFDF FFE7          	movff	indf2,indf1
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 518: (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16)+ordem),buffer_serial[c
      +                          ont]));}
  1714  007DD2  EC14  F039         	call	_Busy_eep	;wreg free
  1715  007DD6  D8E7               	call	PL4	;call to abstracted procedure
  1716  007DD8  D906               	call	PL12	;call to abstracted procedure
  1717  007DDA  6E20               	movwf	Write_b_eep@bdat,c
  1718  007DDC  ECF0  F039         	call	_Write_b_eep	;wreg free
  1719  007DE0                     l3904:
  1720  007DE0  0101               	movlb	1	; () banked
  1721  007DE2  2B1B               	incf	main@ordem& (0+255),f,b
  1722                           
  1723                           ; BSR set to: 1
  1724  007DE4  0E0E               	movlw	14
  1725  007DE6  651B               	cpfsgt	main@ordem& (0+255),b
  1726  007DE8  D7D0               	goto	l3884
  1727  007DEA  D759               	goto	L1
  1728  007DEC                     l3910:
  1729                           
  1730                           ; BSR set to: 1
  1731                           ;main.c: 525: else if(etapa == 4){
  1732  007DEC  0E04               	movlw	4
  1733  007DEE  1917               	xorwf	main@etapa& (0+255),w,b
  1734  007DF0  E10E               	bnz	l3920
  1735                           
  1736                           ; BSR set to: 1
  1737                           ;main.c: 526: if(buffer_serial[cont] != 'F') {(FLAGS_1 |= (1<<7));}
  1738  007DF2  511A               	movf	main@cont& (0+255),w,b
  1739  007DF4  0F60               	addlw	low _buffer_serial
  1740  007DF6  6ED9               	movwf	fsr2l,c
  1741  007DF8  6ADA               	clrf	fsr2h,c
  1742  007DFA  0E46               	movlw	70
  1743  007DFC  18DE               	xorwf	postinc2,w,c
  1744  007DFE  E002               	bz	l3916
  1745                           
  1746                           ; BSR set to: 1
  1747  007E00  0100               	movlb	0	; () banked
  1748  007E02  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  1749  007E04                     l3916:
  1750                           
  1751                           ;main.c: 527: enviar=1; receber=qtd_caracteres_recebidos_serial=0;}
  1752  007E04  8242               	bsf	_enviar/(0+8),_enviar& (0+7),c
  1753  007E06  6A3A               	clrf	_qtd_caracteres_recebidos_serial,c
  1754  007E08  9642               	bcf	_receber/(0+8),_receber& (0+7),c
  1755  007E0A  B03A               	btfsc	_qtd_caracteres_recebidos_serial,0,c
  1756  007E0C  8642               	bsf	_receber/(0+8),_receber& (0+7),c
  1757  007E0E                     l3920:
  1758                           
  1759                           ;main.c: 531: if(FLAGS_1>3 ) {
  1760  007E0E  0E03               	movlw	3
  1761  007E10  0100               	movlb	0	; () banked
  1762  007E12  65C2               	cpfsgt	_FLAGS_1& (0+255),b
  1763  007E14  D00B               	goto	l3932
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 532: (FLAGS_1 &= ~(1<<0));
  1767  007E16  91C2               	bcf	_FLAGS_1& (0+255),0,b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 533: TXREG = '0' + etapa;
  1771  007E18  0101               	movlb	1	; () banked
  1772  007E1A  5117               	movf	main@etapa& (0+255),w,b
  1773  007E1C  0F30               	addlw	48
  1774  007E1E  6EAD               	movwf	4013,c	;volatile
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;main.c: 534: etapa = 0;
  1778  007E20  6B17               	clrf	main@etapa& (0+255),b
  1779                           
  1780                           ; BSR set to: 1
  1781                           ;main.c: 535: enviar=1;
  1782  007E22  8242               	bsf	_enviar/(0+8),_enviar& (0+7),c
  1783                           
  1784                           ; BSR set to: 1
  1785                           ;main.c: 536: receber=qtd_caracteres_recebidos_serial=0;}
  1786  007E24  6A3A               	clrf	_qtd_caracteres_recebidos_serial,c
  1787  007E26  9642               	bcf	_receber/(0+8),_receber& (0+7),c
  1788  007E28  B03A               	btfsc	_qtd_caracteres_recebidos_serial,0,c
  1789  007E2A  8642               	bsf	_receber/(0+8),_receber& (0+7),c
  1790  007E2C                     l3932:
  1791  007E2C  0101               	movlb	1	; () banked
  1792  007E2E  2B1A               	incf	main@cont& (0+255),f,b
  1793  007E30                     l3934:
  1794                           
  1795                           ; BSR set to: 1
  1796  007E30  503A               	movf	_qtd_caracteres_recebidos_serial,w,c
  1797  007E32  5D1A               	subwf	main@cont& (0+255),w,b
  1798  007E34  E201 D6BD          	bnc	l282
  1799                           
  1800                           ; BSR set to: 1
  1801                           ;main.c: 538: }
  1802                           ;main.c: 540: numero_para_ascii(qtd_total_contas);}
  1803  007E38  5114               	movf	main@qtd_total_contas& (0+255),w,b
  1804  007E3A  EC63  F03B         	call	_numero_para_ascii
  1805  007E3E                     l3938:
  1806                           
  1807                           ;main.c: 542: if(enviar==1){
  1808  007E3E  A242               	btfss	_enviar/(0+8),_enviar& (0+7),c
  1809  007E40  D066               	goto	l4042
  1810                           
  1811                           ;main.c: 544: enviar=0;
  1812  007E42  9242               	bcf	_enviar/(0+8),_enviar& (0+7),c
  1813                           
  1814                           ;main.c: 545: qtd_caracteres_recebidos_serial=0;
  1815  007E44  6A3A               	clrf	_qtd_caracteres_recebidos_serial,c
  1816                           
  1817                           ;main.c: 546: etapa = 0;
  1818  007E46  0101               	movlb	1	; () banked
  1819  007E48  6B17               	clrf	main@etapa& (0+255),b
  1820                           
  1821                           ; BSR set to: 1
  1822                           ;main.c: 548: enviar_caractere_serial('\n');
  1823  007E4A  0E0A               	movlw	10
  1824  007E4C  EC1D  F039         	call	_enviar_caractere_serial
  1825                           
  1826                           ;main.c: 549: enviar_caractere_serial('I');
  1827  007E50  0E49               	movlw	73
  1828  007E52  EC1D  F039         	call	_enviar_caractere_serial
  1829                           
  1830                           ;main.c: 592: else{
  1831                           ;main.c: 594: LATDbits.LD3^=1;
  1832  007E56  768C               	btg	3980,3,c	;volatile
  1833                           
  1834                           ;main.c: 596: if((FLAGS_1 & (1<<3))){
  1835  007E58  0100               	movlb	0	; () banked
  1836  007E5A  A7C2               	btfss	_FLAGS_1& (0+255),3,b
  1837  007E5C  D00D               	goto	l4000
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 598: char EN[] = {"EN"};
  1841  007E5E  C0C7  F103         	movff	main@F5448,main@EN
  1842  007E62  C0C8  F104         	movff	main@F5448+1,main@EN+1
  1843  007E66  C0C9  F105         	movff	main@F5448+2,main@EN+2
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 599: enviar_string_serial(EN);
  1847  007E6A  0E03               	movlw	low main@EN
  1848  007E6C  6E1E               	movwf	enviar_string_serial@string_a_enviar,c
  1849  007E6E  0E01               	movlw	high main@EN
  1850  007E70  6E1F               	movwf	enviar_string_serial@string_a_enviar+1,c
  1851  007E72  EC6F  F039         	call	_enviar_string_serial	;wreg free
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 600: (FLAGS_1 &= ~(1<<3));}
  1855  007E76  97C2               	bcf	_FLAGS_1& (0+255),3,b
  1856  007E78                     l4000:
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;main.c: 602: if((FLAGS_1 & (1<<7))){
  1860  007E78  AFC2               	btfss	_FLAGS_1& (0+255),7,b
  1861  007E7A  D016               	goto	l4012
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 604: char EP[] = {"EP"};
  1865  007E7C  C0CA  F106         	movff	main@F5450,main@EP
  1866  007E80  C0CB  F107         	movff	main@F5450+1,main@EP+1
  1867  007E84  C0CC  F108         	movff	main@F5450+2,main@EP+2
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 605: enviar_string_serial(EP);
  1871  007E88  0E06               	movlw	low main@EP
  1872  007E8A  6E1E               	movwf	enviar_string_serial@string_a_enviar,c
  1873  007E8C  0E01               	movlw	high main@EP
  1874  007E8E  6E1F               	movwf	enviar_string_serial@string_a_enviar+1,c
  1875  007E90  EC6F  F039         	call	_enviar_string_serial	;wreg free
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 606: if(funcao == '7'){
  1879  007E94  0E37               	movlw	55
  1880  007E96  0101               	movlb	1	; () banked
  1881  007E98  1919               	xorwf	main@funcao& (0+255),w,b
  1882  007E9A  E104               	bnz	l4010
  1883                           
  1884                           ; BSR set to: 1
  1885                           ;main.c: 607: TXREG = 'S';
  1886  007E9C  0E53               	movlw	83
  1887  007E9E  6EAD               	movwf	4013,c	;volatile
  1888  007EA0                     l365:
  1889  007EA0  A2AC               	btfss	4012,1,c	;volatile
  1890  007EA2  D7FE               	goto	l365
  1891  007EA4                     l4010:
  1892                           
  1893                           ;main.c: 609: }
  1894                           ;main.c: 611: (FLAGS_1 &= ~(1<<7));}
  1895  007EA4  0100               	movlb	0	; () banked
  1896  007EA6  9FC2               	bcf	_FLAGS_1& (0+255),7,b
  1897  007EA8                     l4012:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 613: if((FLAGS_1 & (1<<4))){
  1901  007EA8  A9C2               	btfss	_FLAGS_1& (0+255),4,b
  1902  007EAA  D00D               	goto	l4020
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 615: char EC[] = {"EC"};
  1906  007EAC  C0CD  F109         	movff	main@F5452,main@EC
  1907  007EB0  C0CE  F10A         	movff	main@F5452+1,main@EC+1
  1908  007EB4  C0CF  F10B         	movff	main@F5452+2,main@EC+2
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 616: enviar_string_serial(EC);
  1912  007EB8  0E09               	movlw	low main@EC
  1913  007EBA  6E1E               	movwf	enviar_string_serial@string_a_enviar,c
  1914  007EBC  0E01               	movlw	high main@EC
  1915  007EBE  6E1F               	movwf	enviar_string_serial@string_a_enviar+1,c
  1916  007EC0  EC6F  F039         	call	_enviar_string_serial	;wreg free
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;main.c: 617: (FLAGS_1 &= ~(1<<4));}
  1920  007EC4  99C2               	bcf	_FLAGS_1& (0+255),4,b
  1921  007EC6                     l4020:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 620: if((FLAGS_1 & (1<<6))){
  1925  007EC6  ADC2               	btfss	_FLAGS_1& (0+255),6,b
  1926  007EC8  D00D               	goto	l4028
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;main.c: 621: char ES[] = {"ES"};
  1930  007ECA  C0D0  F10C         	movff	main@F5454,main@ES
  1931  007ECE  C0D1  F10D         	movff	main@F5454+1,main@ES+1
  1932  007ED2  C0D2  F10E         	movff	main@F5454+2,main@ES+2
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 622: enviar_string_serial(ES);
  1936  007ED6  0E0C               	movlw	low main@ES
  1937  007ED8  6E1E               	movwf	enviar_string_serial@string_a_enviar,c
  1938  007EDA  0E01               	movlw	high main@ES
  1939  007EDC  6E1F               	movwf	enviar_string_serial@string_a_enviar+1,c
  1940  007EDE  EC6F  F039         	call	_enviar_string_serial	;wreg free
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 623: (FLAGS_1 &= ~(1<<6));}
  1944  007EE2  9DC2               	bcf	_FLAGS_1& (0+255),6,b
  1945  007EE4                     l4028:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 625: if((FLAGS_1 & (1<<2))){
  1949  007EE4  A5C2               	btfss	_FLAGS_1& (0+255),2,b
  1950  007EE6  D00D               	goto	l4036
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;main.c: 626: char EI[] = {"EI"};
  1954  007EE8  C0D3  F10F         	movff	main@F5456,main@EI
  1955  007EEC  C0D4  F110         	movff	main@F5456+1,main@EI+1
  1956  007EF0  C0D5  F111         	movff	main@F5456+2,main@EI+2
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;main.c: 627: enviar_string_serial(EI);
  1960  007EF4  0E0F               	movlw	low main@EI
  1961  007EF6  6E1E               	movwf	enviar_string_serial@string_a_enviar,c
  1962  007EF8  0E01               	movlw	high main@EI
  1963  007EFA  6E1F               	movwf	enviar_string_serial@string_a_enviar+1,c
  1964  007EFC  EC6F  F039         	call	_enviar_string_serial	;wreg free
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;main.c: 628: (FLAGS_1 &= ~(1<<2));}
  1968  007F00  95C2               	bcf	_FLAGS_1& (0+255),2,b
  1969  007F02                     l4036:
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;main.c: 629: }
  1973                           ;main.c: 633: enviar_caractere_serial('F');
  1974  007F02  0E46               	movlw	70
  1975  007F04  EC1D  F039         	call	_enviar_caractere_serial
  1976                           
  1977                           ;main.c: 634: PORTB_SR = PORTB;
  1978  007F08  CF81 F037          	movff	3969,_PORTB_SR	;volatile
  1979                           
  1980                           ;main.c: 635: RBIE=1;}
  1981  007F0C  86F2               	bsf	intcon,3,c	;volatile
  1982  007F0E                     l4042:
  1983                           
  1984                           ;main.c: 639: if((PORTB&0xF0) == 0xF0 && RBIE==0 && debounce==1 && modo_bluetooth_teclad
      +                          o==1){
  1985  007F0E  5081               	movf	3969,w,c	;volatile
  1986  007F10  0BF0               	andlw	240
  1987  007F12  0AF0               	xorlw	240
  1988  007F14  B4D8               	btfsc	status,2,c
  1989  007F16  B6F2               	btfsc	intcon,3,c	;volatile
  1990  007F18  D62E               	goto	l3756
  1991  007F1A  B042               	btfsc	_debounce/(0+8),_debounce& (0+7),c
  1992  007F1C  A442               	btfss	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  1993  007F1E  D62B               	goto	l3756
  1994                           
  1995                           ;main.c: 641: delay_ms(60);
  1996  007F20  6A1F               	clrf	delay_ms@delay_total+1,c
  1997  007F22  0E3C               	movlw	60
  1998  007F24  6E1E               	movwf	delay_ms@delay_total,c
  1999  007F26  ECA8  F039         	call	_delay_ms	;wreg free
  2000                           
  2001                           ;main.c: 643: if(!((FLAGS_2 & (1<<0)))){
  2002  007F2A  B036               	btfsc	_FLAGS_2,0,c
  2003  007F2C  D002               	goto	l4056
  2004                           
  2005                           ;main.c: 644: receber=1;
  2006  007F2E  8642               	bsf	_receber/(0+8),_receber& (0+7),c
  2007                           
  2008                           ;main.c: 645: }
  2009  007F30  D026               	goto	l379
  2010  007F32                     l4056:
  2011                           
  2012                           ;main.c: 647: else if(caractere_recebido == 'A' ||caractere_recebido == 'M'){
  2013  007F32  0E41               	movlw	65
  2014  007F34  1838               	xorwf	_caractere_recebido,w,c
  2015  007F36  E003               	bz	l382
  2016  007F38  0E4D               	movlw	77
  2017  007F3A  1838               	xorwf	_caractere_recebido,w,c
  2018  007F3C  E102               	bnz	l4060
  2019  007F3E                     l382:
  2020                           
  2021                           ;main.c: 648: __nop();}
  2022  007F3E  F000               	nop	
  2023  007F40  D01E               	goto	l379
  2024  007F42                     l4060:
  2025                           
  2026                           ;main.c: 651: else if(caractere_recebido == ultimo_caractere_recebido){
  2027  007F42  0101               	movlb	1	; () banked
  2028  007F44  5112               	movf	main@ultimo_caractere_recebido& (0+255),w,b
  2029  007F46  1838               	xorwf	_caractere_recebido,w,c
  2030  007F48  E113               	bnz	l384
  2031                           
  2032                           ; BSR set to: 1
  2033                           ;main.c: 653: if(++qtd_vezes_mesma_tecla_pressionada > 3 || ( (qtd_vezes_mesma_tecla_pre
      +                          ssionada>3-1) && caractere_recebido == '9')){
  2034  007F4A  0100               	movlb	0	; () banked
  2035  007F4C  2BC3               	incf	_qtd_vezes_mesma_tecla_pressionada& (0+255),f,b
  2036  007F4E  0E04               	movlw	4
  2037  007F50  61C3               	cpfslt	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2038  007F52  D006               	goto	l387
  2039                           
  2040                           ; BSR set to: 0
  2041  007F54  0E02               	movlw	2
  2042  007F56  65C3               	cpfsgt	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2043  007F58  D008               	goto	l385
  2044                           
  2045                           ; BSR set to: 0
  2046  007F5A  0E39               	movlw	57
  2047  007F5C  1838               	xorwf	_caractere_recebido,w,c
  2048  007F5E  E105               	bnz	l385
  2049  007F60                     l387:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 654: TMR1ON=0;
  2053  007F60  90CD               	bcf	4045,0,c	;volatile
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 655: TMR1H=0xC0;
  2057  007F62  0EC0               	movlw	192
  2058  007F64  6ECF               	movwf	4047,c	;volatile
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 656: qtd_vezes_mesma_tecla_pressionada=0;}
  2062  007F66  6BC3               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2063  007F68  D00A               	goto	l379
  2064  007F6A                     l385:
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 658: else ultimo_caractere_recebido= caractere_recebido;
  2068  007F6A  C038  F112         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  2069  007F6E  D007               	goto	l379
  2070  007F70                     l384:
  2071                           
  2072                           ; BSR set to: 1
  2073                           ;main.c: 664: else if((FLAGS_2 & (1<<0))){
  2074  007F70  A036               	btfss	_FLAGS_2,0,c
  2075  007F72  D005               	goto	l379
  2076                           
  2077                           ; BSR set to: 1
  2078                           ;main.c: 666: if(qtd_vezes_mesma_tecla_pressionada>0) receber=1;
  2079  007F74  0100               	movlb	0	; () banked
  2080  007F76  51C3               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2081  007F78  E0F8               	bz	l385
  2082                           
  2083                           ; BSR set to: 0
  2084  007F7A  8642               	bsf	_receber/(0+8),_receber& (0+7),c
  2085  007F7C  D7F6               	goto	l385
  2086  007F7E                     l379:
  2087                           
  2088                           ;main.c: 671: }
  2089                           ;main.c: 674: PORTB_SR=PORTB;
  2090  007F7E  CF81 F037          	movff	3969,_PORTB_SR	;volatile
  2091                           
  2092                           ;main.c: 675: RBIE=1;
  2093  007F82  86F2               	bsf	intcon,3,c	;volatile
  2094                           
  2095                           ;main.c: 676: debounce=0;
  2096  007F84  9042               	bcf	_debounce/(0+8),_debounce& (0+7),c
  2097  007F86  D5F7               	goto	l3756
  2098  007F88                     __end_of_main:
  2099                           	opt stack 0
  2100  007F88                     PL2:
  2101                           	opt stack 26
  2102  007F88  0D11               	mullw	17
  2103  007F8A  0E1C               	movlw	low _senha
  2104  007F8C  0100               	movlb	0	; () banked
  2105  007F8E  6FE3               	movwf	??_main& (0+255),b
  2106  007F90  0E01               	movlw	high _senha
  2107  007F92  6FE4               	movwf	(??_main+1)& (0+255),b
  2108  007F94  50F3               	movf	prodl,w,c
  2109  007F96  27E3               	addwf	??_main& (0+255),f,b
  2110  007F98  50F4               	movf	prodh,w,c
  2111  007F9A  23E4               	addwfc	(??_main+1)& (0+255),f,b
  2112  007F9C  0101               	movlb	1	; () banked
  2113  007F9E  511B               	movf	main@ordem& (0+255),w,b
  2114  007FA0  0100               	movlb	0	; () banked
  2115  007FA2  25E3               	addwf	??_main& (0+255),w,b
  2116  007FA4  0012               	return	
  2117  007FA6                     __end_ofPL2:
  2118                           	opt stack 0
  2119  007FA6                     PL4:
  2120                           	opt stack 26
  2121  007FA6  0101               	movlb	1	; () banked
  2122  007FA8  5115               	movf	main@conta_a_ser_alterada& (0+255),w,b
  2123  007FAA  0100               	movlb	0	; () banked
  2124  007FAC  6FE3               	movwf	??_main& (0+255),b
  2125  007FAE  6BE4               	clrf	(??_main+1)& (0+255),b
  2126  007FB0  3BE3               	swapf	??_main& (0+255),f,b
  2127  007FB2  3BE4               	swapf	(??_main+1)& (0+255),f,b
  2128  007FB4  0EF0               	movlw	240
  2129  007FB6  17E4               	andwf	(??_main+1)& (0+255),f,b
  2130  007FB8  51E3               	movf	??_main& (0+255),w,b
  2131  007FBA  0B0F               	andlw	15
  2132  007FBC  13E4               	iorwf	(??_main+1)& (0+255),f,b
  2133  007FBE  0EF0               	movlw	240
  2134  007FC0  17E3               	andwf	??_main& (0+255),f,b
  2135  007FC2  0101               	movlb	1	; () banked
  2136  007FC4  511B               	movf	main@ordem& (0+255),w,b
  2137  007FC6  0100               	movlb	0	; () banked
  2138  007FC8  25E3               	addwf	??_main& (0+255),w,b
  2139  007FCA  6E1E               	movwf	Write_b_eep@badd,c
  2140  007FCC  0E00               	movlw	0
  2141  007FCE  21E4               	addwfc	(??_main+1)& (0+255),w,b
  2142  007FD0  6E1F               	movwf	Write_b_eep@badd+1,c
  2143  007FD2  0012               	return	
  2144  007FD4                     __end_ofPL4:
  2145                           	opt stack 0
  2146  007FD4                     PL8:
  2147                           	opt stack 26
  2148  007FD4  2B1A               	incf	main@cont& (0+255),f,b
  2149  007FD6  051A               	decf	main@cont& (0+255),w,b
  2150  007FD8  0100               	movlb	0	; () banked
  2151  007FDA  6FE3               	movwf	??_main& (0+255),b
  2152  007FDC  51E3               	movf	??_main& (0+255),w,b
  2153  007FDE  0F60               	addlw	low _buffer_serial
  2154  007FE0  6ED9               	movwf	fsr2l,c
  2155  007FE2  6ADA               	clrf	fsr2h,c
  2156  007FE4  0012               	return	
  2157  007FE6                     __end_ofPL8:
  2158                           	opt stack 0
  2159  007FE6                     PL12:
  2160                           	opt stack 26
  2161  007FE6  0101               	movlb	1	; () banked
  2162  007FE8  511A               	movf	main@cont& (0+255),w,b
  2163  007FEA  0F60               	addlw	low _buffer_serial
  2164  007FEC  6ED9               	movwf	fsr2l,c
  2165  007FEE  6ADA               	clrf	fsr2h,c
  2166  007FF0  50DF               	movf	indf2,w,c
  2167  007FF2  0012               	return	
  2168  007FF4                     __end_ofPL12:
  2169                           	opt stack 0
  2170  007FF4                     PL16:
  2171                           	opt stack 26
  2172  007FF4  0F60               	addlw	low _buffer_serial
  2173  007FF6  6ED9               	movwf	fsr2l,c
  2174  007FF8  6ADA               	clrf	fsr2h,c
  2175  007FFA  50DF               	movf	indf2,w,c
  2176  007FFC  6EAD               	movwf	4013,c	;volatile
  2177  007FFE  0012               	return	
  2178  008000                     __end_ofPL16:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           intcon	equ	0xFF2
  2187                           intcon2	equ	0xFF1
  2188                           postinc0	equ	0xFEE
  2189                           wreg	equ	0xFE8
  2190                           indf1	equ	0xFE7
  2191                           postinc1	equ	0xFE6
  2192                           postdec1	equ	0xFE5
  2193                           plusw1	equ	0xFE3
  2194                           fsr1h	equ	0xFE2
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           plusw2	equ	0xFDB
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _verificar_num_contas *****************
  2204 ;; Defined at:
  2205 ;;		line 19 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  i               1   32[COMRAM] unsigned char 
  2210 ;;  qtd_contas      1   31[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      unsigned char 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/1
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0
  2221 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2223 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2224 ;;Total ram usage:        2 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    4
  2227 ;; This function calls:
  2228 ;;		_Read_b_eep
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text1
  2235  00732A                     __ptext1:
  2236                           	opt stack 0
  2237  00732A                     _verificar_num_contas:
  2238                           	opt stack 26
  2239                           
  2240                           ;eeprom_interna.c: 20: char i;
  2241                           ;eeprom_interna.c: 21: unsigned char qtd_contas=0;
  2242                           
  2243                           ;incstack = 0
  2244  00732A  6A20               	clrf	verificar_num_contas@qtd_contas,c
  2245                           
  2246                           ;eeprom_interna.c: 22: for(i=0;i<16;i++){
  2247  00732C  6A21               	clrf	verificar_num_contas@i,c
  2248  00732E                     l3268:
  2249                           
  2250                           ;eeprom_interna.c: 23: if(Read_b_eep(i*16) != 0xFF) {qtd_contas++;}
  2251  00732E  5021               	movf	verificar_num_contas@i,w,c
  2252  007330  0D10               	mullw	16
  2253  007332  CFF3 F01E          	movff	prodl,Read_b_eep@badd
  2254  007336  CFF4 F01F          	movff	prodh,Read_b_eep@badd+1
  2255  00733A  EC2A  F039         	call	_Read_b_eep	;wreg free
  2256  00733E  0AFF               	xorlw	255
  2257  007340  A4D8               	btfss	status,2,c
  2258  007342  2A20               	incf	verificar_num_contas@qtd_contas,f,c
  2259  007344  2A21               	incf	verificar_num_contas@i,f,c
  2260  007346  0E0F               	movlw	15
  2261  007348  6421               	cpfsgt	verificar_num_contas@i,c
  2262  00734A  D7F1               	goto	l3268
  2263                           
  2264                           ;eeprom_interna.c: 24: }
  2265                           ;eeprom_interna.c: 25: return (qtd_contas);}
  2266  00734C  5020               	movf	verificar_num_contas@qtd_contas,w,c
  2267  00734E  0012               	return		;funcret
  2268  007350                     __end_of_verificar_num_contas:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           intcon2	equ	0xFF1
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           indf1	equ	0xFE7
  2281                           postinc1	equ	0xFE6
  2282                           postdec1	equ	0xFE5
  2283                           plusw1	equ	0xFE3
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           indf2	equ	0xFDF
  2287                           postinc2	equ	0xFDE
  2288                           plusw2	equ	0xFDB
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _numero_para_ascii *****************
  2294 ;; Defined at:
  2295 ;;		line 86 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  numero          1    wreg     unsigned char 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  numero          1    6[BANK0 ] unsigned char 
  2300 ;;  temp1           2    7[BANK0 ] int 
  2301 ;;  temp2           2    4[BANK0 ] int 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;		None               void
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : F/1
  2308 ;;		On exit  : F/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0
  2312 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2313 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2314 ;;      Totals:         1       5       0       0       0       0       0       0       0
  2315 ;;Total ram usage:        6 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    4
  2318 ;; This function calls:
  2319 ;;		___awdiv
  2320 ;;		___lbdiv
  2321 ;;		___wmul
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text2
  2328  0076C6                     __ptext2:
  2329                           	opt stack 0
  2330  0076C6                     _numero_para_ascii:
  2331                           	opt stack 26
  2332                           
  2333                           ;incstack = 0
  2334                           ;numero_para_ascii@numero stored from wreg
  2335  0076C6  0100               	movlb	0	; () banked
  2336  0076C8  6FDC               	movwf	numero_para_ascii@numero& (0+255),b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;ascii.c: 87: int temp1;
  2340                           ;ascii.c: 88: int temp2;
  2341                           ;ascii.c: 90: TXREG = '+';
  2342  0076CA  0E2B               	movlw	43
  2343  0076CC  6EAD               	movwf	4013,c	;volatile
  2344  0076CE                     l430:
  2345  0076CE  A2AC               	btfss	4012,1,c	;volatile
  2346  0076D0  D7FE               	goto	l430
  2347                           
  2348                           ;ascii.c: 93: temp1 = numero/100;
  2349  0076D2  0E64               	movlw	100
  2350  0076D4  6E1E               	movwf	___lbdiv@divisor,c
  2351  0076D6  0100               	movlb	0	; () banked
  2352  0076D8  51DC               	movf	numero_para_ascii@numero& (0+255),w,b
  2353  0076DA  ECD6  F039         	call	___lbdiv
  2354  0076DE  0100               	movlb	0	; () banked
  2355  0076E0  6FDD               	movwf	numero_para_ascii@temp1& (0+255),b
  2356  0076E2  6BDE               	clrf	(numero_para_ascii@temp1+1)& (0+255),b
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;ascii.c: 94: TXREG = '0'+ temp1;
  2360  0076E4  51DD               	movf	numero_para_ascii@temp1& (0+255),w,b
  2361  0076E6  0F30               	addlw	48
  2362  0076E8  6EAD               	movwf	4013,c	;volatile
  2363  0076EA                     l433:
  2364                           
  2365                           ; BSR set to: 0
  2366  0076EA  A2AC               	btfss	4012,1,c	;volatile
  2367  0076EC  D7FE               	goto	l433
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;ascii.c: 97: temp2 = ((numero - temp1*100)/10);
  2371  0076EE  C0DD  F01E         	movff	numero_para_ascii@temp1,___wmul@multiplier
  2372  0076F2  C0DE  F01F         	movff	numero_para_ascii@temp1+1,___wmul@multiplier+1
  2373  0076F6  6821               	setf	___wmul@multiplicand+1,c
  2374  0076F8  0E9C               	movlw	156
  2375  0076FA  6E20               	movwf	___wmul@multiplicand,c
  2376  0076FC  EC82  F039         	call	___wmul	;wreg free
  2377  007700  51DC               	movf	numero_para_ascii@numero& (0+255),w,b
  2378  007702  241E               	addwf	?___wmul,w,c
  2379  007704  6E24               	movwf	___awdiv@dividend,c
  2380  007706  0E00               	movlw	0
  2381  007708  201F               	addwfc	?___wmul+1,w,c
  2382  00770A  6E25               	movwf	___awdiv@dividend+1,c
  2383  00770C  6A27               	clrf	___awdiv@divisor+1,c
  2384  00770E  0E0A               	movlw	10
  2385  007710  6E26               	movwf	___awdiv@divisor,c
  2386  007712  ECAB  F03A         	call	___awdiv	;wreg free
  2387  007716  C024  F0DA         	movff	?___awdiv,numero_para_ascii@temp2
  2388  00771A  C025  F0DB         	movff	?___awdiv+1,numero_para_ascii@temp2+1
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;ascii.c: 98: TXREG = '0'+ temp2;
  2392  00771E  51DA               	movf	numero_para_ascii@temp2& (0+255),w,b
  2393  007720  0F30               	addlw	48
  2394  007722  6EAD               	movwf	4013,c	;volatile
  2395  007724                     l436:
  2396                           
  2397                           ; BSR set to: 0
  2398  007724  A2AC               	btfss	4012,1,c	;volatile
  2399  007726  D7FE               	goto	l436
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;ascii.c: 101: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  2403  007728  51DD               	movf	numero_para_ascii@temp1& (0+255),w,b
  2404  00772A  0D9C               	mullw	156
  2405  00772C  CFF3 F028          	movff	prodl,??_numero_para_ascii
  2406  007730  51DA               	movf	numero_para_ascii@temp2& (0+255),w,b
  2407  007732  0DF6               	mullw	246
  2408  007734  50F3               	movf	prodl,w,c
  2409  007736  2428               	addwf	??_numero_para_ascii,w,c
  2410  007738  25DC               	addwf	numero_para_ascii@numero& (0+255),w,b
  2411  00773A  0F30               	addlw	48
  2412  00773C  6EAD               	movwf	4013,c	;volatile
  2413  00773E                     l439:
  2414                           
  2415                           ; BSR set to: 0
  2416  00773E  A2AC               	btfss	4012,1,c	;volatile
  2417  007740  D7FE               	goto	l439
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;ascii.c: 104: TXREG = '+';
  2421  007742  0E2B               	movlw	43
  2422  007744  6EAD               	movwf	4013,c	;volatile
  2423  007746                     l442:
  2424                           
  2425                           ; BSR set to: 0
  2426  007746  B2AC               	btfsc	4012,1,c	;volatile
  2427                           
  2428                           ; BSR set to: 0
  2429  007748  0012               	return		;funcret
  2430  00774A  D7FD               	goto	l442
  2431  00774C                     __end_of_numero_para_ascii:
  2432                           	opt stack 0
  2433                           tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           intcon	equ	0xFF2
  2440                           intcon2	equ	0xFF1
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           indf1	equ	0xFE7
  2444                           postinc1	equ	0xFE6
  2445                           postdec1	equ	0xFE5
  2446                           plusw1	equ	0xFE3
  2447                           fsr1h	equ	0xFE2
  2448                           fsr1l	equ	0xFE1
  2449                           indf2	equ	0xFDF
  2450                           postinc2	equ	0xFDE
  2451                           plusw2	equ	0xFDB
  2452                           fsr2h	equ	0xFDA
  2453                           fsr2l	equ	0xFD9
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function ___wmul *****************
  2457 ;; Defined at:
  2458 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  multiplier      2   29[COMRAM] unsigned int 
  2461 ;;  multiplicand    2   31[COMRAM] unsigned int 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  product         2   33[COMRAM] unsigned int 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  2   29[COMRAM] unsigned int 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0, prodl, prodh
  2468 ;; Tracked objects:
  2469 ;;		On entry : F/0
  2470 ;;		On exit  : F/0
  2471 ;;		Unchanged: F/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2473 ;;      Params:         4       0       0       0       0       0       0       0       0
  2474 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2476 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2477 ;;Total ram usage:        6 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    3
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_numero_para_ascii
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text3
  2488  007304                     __ptext3:
  2489                           	opt stack 0
  2490  007304                     ___wmul:
  2491                           	opt stack 26
  2492                           
  2493                           ; BSR set to: 0
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;incstack = 0
  2497  007304  501E               	movf	___wmul@multiplier,w,c
  2498  007306  0220               	mulwf	___wmul@multiplicand,c
  2499  007308  CFF3 F022          	movff	prodl,___wmul@product
  2500  00730C  CFF4 F023          	movff	prodh,___wmul@product+1
  2501  007310  501E               	movf	___wmul@multiplier,w,c
  2502  007312  0221               	mulwf	___wmul@multiplicand+1,c
  2503  007314  50F3               	movf	prodl,w,c
  2504  007316  2623               	addwf	___wmul@product+1,f,c
  2505  007318  501F               	movf	___wmul@multiplier+1,w,c
  2506  00731A  0220               	mulwf	___wmul@multiplicand,c
  2507  00731C  50F3               	movf	prodl,w,c
  2508  00731E  2623               	addwf	___wmul@product+1,f,c
  2509                           
  2510                           ; BSR set to: 0
  2511  007320  C022  F01E         	movff	___wmul@product,?___wmul
  2512  007324  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  2513                           
  2514                           ; BSR set to: 0
  2515  007328  0012               	return		;funcret
  2516  00732A                     __end_of___wmul:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           intcon2	equ	0xFF1
  2526                           postinc0	equ	0xFEE
  2527                           wreg	equ	0xFE8
  2528                           indf1	equ	0xFE7
  2529                           postinc1	equ	0xFE6
  2530                           postdec1	equ	0xFE5
  2531                           plusw1	equ	0xFE3
  2532                           fsr1h	equ	0xFE2
  2533                           fsr1l	equ	0xFE1
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           plusw2	equ	0xFDB
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function ___awdiv *****************
  2542 ;; Defined at:
  2543 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  dividend        2   35[COMRAM] int 
  2546 ;;  divisor         2   37[COMRAM] int 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;  quotient        2    2[BANK0 ] int 
  2549 ;;  sign            1    1[BANK0 ] unsigned char 
  2550 ;;  counter         1    0[BANK0 ] unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  2   35[COMRAM] int 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0
  2555 ;; Tracked objects:
  2556 ;;		On entry : F/0
  2557 ;;		On exit  : F/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2560 ;;      Params:         4       0       0       0       0       0       0       0       0
  2561 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2563 ;;      Totals:         4       4       0       0       0       0       0       0       0
  2564 ;;Total ram usage:        8 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    3
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_numero_para_ascii
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text4
  2575  007556                     __ptext4:
  2576                           	opt stack 0
  2577  007556                     ___awdiv:
  2578                           	opt stack 26
  2579                           
  2580                           ; BSR set to: 0
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;incstack = 0
  2584  007556  6BD7               	clrf	___awdiv@sign& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587  007558  AE27               	btfss	___awdiv@divisor+1,7,c
  2588  00755A  D006               	goto	l3134
  2589                           
  2590                           ; BSR set to: 0
  2591  00755C  6C26               	negf	___awdiv@divisor,c
  2592  00755E  1E27               	comf	___awdiv@divisor+1,f,c
  2593  007560  B0D8               	btfsc	status,0,c
  2594  007562  2A27               	incf	___awdiv@divisor+1,f,c
  2595                           
  2596                           ; BSR set to: 0
  2597  007564  0E01               	movlw	1
  2598  007566  6FD7               	movwf	___awdiv@sign& (0+255),b
  2599  007568                     l3134:
  2600                           
  2601                           ; BSR set to: 0
  2602  007568  AE25               	btfss	___awdiv@dividend+1,7,c
  2603  00756A  D006               	goto	l3140
  2604                           
  2605                           ; BSR set to: 0
  2606  00756C  6C24               	negf	___awdiv@dividend,c
  2607  00756E  1E25               	comf	___awdiv@dividend+1,f,c
  2608  007570  B0D8               	btfsc	status,0,c
  2609  007572  2A25               	incf	___awdiv@dividend+1,f,c
  2610                           
  2611                           ; BSR set to: 0
  2612  007574  0E01               	movlw	1
  2613  007576  1BD7               	xorwf	___awdiv@sign& (0+255),f,b
  2614  007578                     l3140:
  2615                           
  2616                           ; BSR set to: 0
  2617  007578  6BD8               	clrf	___awdiv@quotient& (0+255),b
  2618  00757A  6BD9               	clrf	(___awdiv@quotient+1)& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621  00757C  5026               	movf	___awdiv@divisor,w,c
  2622  00757E  1027               	iorwf	___awdiv@divisor+1,w,c
  2623  007580  E01B               	bz	l3162
  2624                           
  2625                           ; BSR set to: 0
  2626  007582  0E01               	movlw	1
  2627  007584  6FD6               	movwf	___awdiv@counter& (0+255),b
  2628  007586  D004               	goto	l3148
  2629  007588                     l3146:
  2630                           
  2631                           ; BSR set to: 0
  2632  007588  90D8               	bcf	status,0,c
  2633  00758A  3626               	rlcf	___awdiv@divisor,f,c
  2634  00758C  3627               	rlcf	___awdiv@divisor+1,f,c
  2635  00758E  2BD6               	incf	___awdiv@counter& (0+255),f,b
  2636  007590                     l3148:
  2637                           
  2638                           ; BSR set to: 0
  2639  007590  AE27               	btfss	___awdiv@divisor+1,7,c
  2640  007592  D7FA               	goto	l3146
  2641  007594                     l3150:
  2642                           
  2643                           ; BSR set to: 0
  2644  007594  90D8               	bcf	status,0,c
  2645  007596  37D8               	rlcf	___awdiv@quotient& (0+255),f,b
  2646  007598  37D9               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2647                           
  2648                           ; BSR set to: 0
  2649  00759A  5026               	movf	___awdiv@divisor,w,c
  2650  00759C  5C24               	subwf	___awdiv@dividend,w,c
  2651  00759E  5027               	movf	___awdiv@divisor+1,w,c
  2652  0075A0  5825               	subwfb	___awdiv@dividend+1,w,c
  2653  0075A2  E305               	bnc	l3158
  2654                           
  2655                           ; BSR set to: 0
  2656  0075A4  5026               	movf	___awdiv@divisor,w,c
  2657  0075A6  5E24               	subwf	___awdiv@dividend,f,c
  2658  0075A8  5027               	movf	___awdiv@divisor+1,w,c
  2659  0075AA  5A25               	subwfb	___awdiv@dividend+1,f,c
  2660                           
  2661                           ; BSR set to: 0
  2662  0075AC  81D8               	bsf	___awdiv@quotient& (0+255),0,b
  2663  0075AE                     l3158:
  2664                           
  2665                           ; BSR set to: 0
  2666  0075AE  90D8               	bcf	status,0,c
  2667  0075B0  3227               	rrcf	___awdiv@divisor+1,f,c
  2668  0075B2  3226               	rrcf	___awdiv@divisor,f,c
  2669                           
  2670                           ; BSR set to: 0
  2671  0075B4  2FD6               	decfsz	___awdiv@counter& (0+255),f,b
  2672  0075B6  D7EE               	goto	l3150
  2673  0075B8                     l3162:
  2674                           
  2675                           ; BSR set to: 0
  2676  0075B8  51D7               	movf	___awdiv@sign& (0+255),w,b
  2677  0075BA  E004               	bz	l3166
  2678                           
  2679                           ; BSR set to: 0
  2680  0075BC  6DD8               	negf	___awdiv@quotient& (0+255),b
  2681  0075BE  1FD9               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2682  0075C0  B0D8               	btfsc	status,0,c
  2683  0075C2  2BD9               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2684  0075C4                     l3166:
  2685                           
  2686                           ; BSR set to: 0
  2687  0075C4  C0D8  F024         	movff	___awdiv@quotient,?___awdiv
  2688  0075C8  C0D9  F025         	movff	___awdiv@quotient+1,?___awdiv+1
  2689                           
  2690                           ; BSR set to: 0
  2691  0075CC  0012               	return		;funcret
  2692  0075CE                     __end_of___awdiv:
  2693                           	opt stack 0
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           prodh	equ	0xFF4
  2699                           prodl	equ	0xFF3
  2700                           intcon	equ	0xFF2
  2701                           intcon2	equ	0xFF1
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           indf1	equ	0xFE7
  2705                           postinc1	equ	0xFE6
  2706                           postdec1	equ	0xFE5
  2707                           plusw1	equ	0xFE3
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           plusw2	equ	0xFDB
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _enviar_string_serial *****************
  2718 ;; Defined at:
  2719 ;;		line 21 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\funcoes_serial.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  string_a_env    2   29[COMRAM] PTR unsigned char 
  2722 ;;		 -> main@EI(3), main@ES(3), main@EC(3), main@EP(3), 
  2723 ;;		 -> main@EN(3), main@OK(3), 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  cont            1   31[COMRAM] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;		None               void
  2728 ;; Registers used:
  2729 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2730 ;; Tracked objects:
  2731 ;;		On entry : F/0
  2732 ;;		On exit  : F/0
  2733 ;;		Unchanged: F/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2735 ;;      Params:         2       0       0       0       0       0       0       0       0
  2736 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2738 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        3 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    3
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_main
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text5
  2750  0072DE                     __ptext5:
  2751                           	opt stack 0
  2752  0072DE                     _enviar_string_serial:
  2753                           	opt stack 27
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;funcoes_serial.c: 22: char cont=0;
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;incstack = 0
  2760  0072DE  6A20               	clrf	enviar_string_serial@cont,c
  2761                           
  2762                           ;funcoes_serial.c: 24: while(string_a_enviar[cont] != (0)){
  2763  0072E0  D005               	goto	l3702
  2764  0072E2                     l3698:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;funcoes_serial.c: 26: TXREG = string_a_enviar[cont];
  2768  0072E2  D808               	call	PL10	;call to abstracted procedure
  2769  0072E4  6EAD               	movwf	4013,c	;volatile
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;funcoes_serial.c: 27: cont++;
  2773  0072E6  2A20               	incf	enviar_string_serial@cont,f,c
  2774  0072E8                     l597:
  2775                           
  2776                           ; BSR set to: 0
  2777  0072E8  A2AC               	btfss	4012,1,c	;volatile
  2778  0072EA  D7FE               	goto	l597
  2779  0072EC                     l3702:
  2780                           
  2781                           ; BSR set to: 0
  2782  0072EC  D803               	call	PL10	;call to abstracted procedure
  2783  0072EE  B4D8               	btfsc	status,2,c
  2784                           
  2785                           ; BSR set to: 0
  2786  0072F0  0012               	return		;funcret
  2787  0072F2  D7F7               	goto	l3698
  2788  0072F4                     __end_of_enviar_string_serial:
  2789                           	opt stack 0
  2790  0072F4                     PL10:
  2791                           	opt stack 27
  2792  0072F4  5020               	movf	enviar_string_serial@cont,w,c
  2793  0072F6  241E               	addwf	enviar_string_serial@string_a_enviar,w,c
  2794  0072F8  6ED9               	movwf	fsr2l,c
  2795  0072FA  0E00               	movlw	0
  2796  0072FC  201F               	addwfc	enviar_string_serial@string_a_enviar+1,w,c
  2797  0072FE  6EDA               	movwf	fsr2h,c
  2798  007300  50DF               	movf	indf2,w,c
  2799  007302  0012               	return	
  2800  007304                     __end_ofPL10:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           intcon	equ	0xFF2
  2809                           intcon2	equ	0xFF1
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           postinc1	equ	0xFE6
  2814                           postdec1	equ	0xFE5
  2815                           plusw1	equ	0xFE3
  2816                           fsr1h	equ	0xFE2
  2817                           fsr1l	equ	0xFE1
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           plusw2	equ	0xFDB
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _enviar_caractere_serial *****************
  2826 ;; Defined at:
  2827 ;;		line 32 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\funcoes_serial.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  caractere_a_    1    wreg     unsigned char 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  caractere_a_    1   29[COMRAM] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;		None               void
  2834 ;; Registers used:
  2835 ;;		wreg
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/1
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2841 ;;      Params:         0       0       0       0       0       0       0       0       0
  2842 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2844 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    3
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text6
  2856  00723A                     __ptext6:
  2857                           	opt stack 0
  2858  00723A                     _enviar_caractere_serial:
  2859                           	opt stack 27
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;incstack = 0
  2863                           ;enviar_caractere_serial@caractere_a_enviar stored from wreg
  2864  00723A  6E1E               	movwf	enviar_caractere_serial@caractere_a_enviar,c
  2865                           
  2866                           ;funcoes_serial.c: 33: TXREG = caractere_a_enviar;
  2867  00723C  C01E  FFAD         	movff	enviar_caractere_serial@caractere_a_enviar,4013	;volatile
  2868  007240                     l604:
  2869  007240  B2AC               	btfsc	4012,1,c	;volatile
  2870  007242  0012               	return		;funcret
  2871  007244  D7FD               	goto	l604
  2872  007246                     __end_of_enviar_caractere_serial:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           prodh	equ	0xFF4
  2879                           prodl	equ	0xFF3
  2880                           intcon	equ	0xFF2
  2881                           intcon2	equ	0xFF1
  2882                           postinc0	equ	0xFEE
  2883                           wreg	equ	0xFE8
  2884                           indf1	equ	0xFE7
  2885                           postinc1	equ	0xFE6
  2886                           postdec1	equ	0xFE5
  2887                           plusw1	equ	0xFE3
  2888                           fsr1h	equ	0xFE2
  2889                           fsr1l	equ	0xFE1
  2890                           indf2	equ	0xFDF
  2891                           postinc2	equ	0xFDE
  2892                           plusw2	equ	0xFDB
  2893                           fsr2h	equ	0xFDA
  2894                           fsr2l	equ	0xFD9
  2895                           status	equ	0xFD8
  2896                           
  2897 ;; *************** function _eeprom_config_inicial *****************
  2898 ;; Defined at:
  2899 ;;		line 4 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;		None
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  i               1   33[COMRAM] unsigned char 
  2904 ;; Return value:  Size  Location     Type
  2905 ;;		None               void
  2906 ;; Registers used:
  2907 ;;		wreg, status,2, status,0, cstack
  2908 ;; Tracked objects:
  2909 ;;		On entry : 0/1
  2910 ;;		On exit  : 0/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2913 ;;      Params:         0       0       0       0       0       0       0       0       0
  2914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2916 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2917 ;;Total ram usage:        1 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    4
  2920 ;; This function calls:
  2921 ;;		_Busy_eep
  2922 ;;		_Write_b_eep
  2923 ;; This function is called by:
  2924 ;;		_main
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text7
  2929  007474                     __ptext7:
  2930                           	opt stack 0
  2931  007474                     _eeprom_config_inicial:
  2932                           	opt stack 26
  2933                           
  2934                           ;eeprom_interna.c: 5: unsigned char i;
  2935                           ;eeprom_interna.c: 7: for(i=0;i<10;i++){
  2936                           
  2937                           ;incstack = 0
  2938  007474  6A22               	clrf	eeprom_config_inicial@i,c
  2939  007476                     l3218:
  2940                           
  2941                           ;eeprom_interna.c: 8: (Busy_eep(), Write_b_eep(i,('0'+i)));
  2942  007476  EC14  F039         	call	_Busy_eep	;wreg free
  2943  00747A  C022  F01E         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  2944  00747E  6A1F               	clrf	Write_b_eep@badd+1,c
  2945  007480  5022               	movf	eeprom_config_inicial@i,w,c
  2946  007482  0F30               	addlw	48
  2947  007484  6E20               	movwf	Write_b_eep@bdat,c
  2948  007486  ECF0  F039         	call	_Write_b_eep	;wreg free
  2949                           
  2950                           ;eeprom_interna.c: 9: (Busy_eep(), Write_b_eep(16+i,('a'+i)));
  2951  00748A  EC14  F039         	call	_Busy_eep	;wreg free
  2952  00748E  D820               	call	PL14	;call to abstracted procedure
  2953  007490  5022               	movf	eeprom_config_inicial@i,w,c
  2954  007492  0F61               	addlw	97
  2955  007494  6E20               	movwf	Write_b_eep@bdat,c
  2956  007496  ECF0  F039         	call	_Write_b_eep	;wreg free
  2957  00749A  2A22               	incf	eeprom_config_inicial@i,f,c
  2958  00749C  0E09               	movlw	9
  2959  00749E  6422               	cpfsgt	eeprom_config_inicial@i,c
  2960  0074A0  D7EA               	goto	l3218
  2961                           
  2962                           ;eeprom_interna.c: 11: }
  2963                           ;eeprom_interna.c: 12: (Busy_eep(), Write_b_eep(i,0));
  2964  0074A2  EC14  F039         	call	_Busy_eep	;wreg free
  2965  0074A6  C022  F01E         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  2966  0074AA  6A1F               	clrf	Write_b_eep@badd+1,c
  2967  0074AC  6A20               	clrf	Write_b_eep@bdat,c
  2968  0074AE  ECF0  F039         	call	_Write_b_eep	;wreg free
  2969                           
  2970                           ;eeprom_interna.c: 13: (Busy_eep(), Write_b_eep(16+i,0));
  2971  0074B2  EC14  F039         	call	_Busy_eep	;wreg free
  2972  0074B6  D80C               	call	PL14	;call to abstracted procedure
  2973  0074B8  6A20               	clrf	Write_b_eep@bdat,c
  2974  0074BA  ECF0  F039         	call	_Write_b_eep	;wreg free
  2975                           
  2976                           ;eeprom_interna.c: 15: (Busy_eep(), Write_b_eep(((16*2)-1),0b11111101));
  2977  0074BE  EC14  F039         	call	_Busy_eep	;wreg free
  2978  0074C2  6A1F               	clrf	Write_b_eep@badd+1,c
  2979  0074C4  0E1F               	movlw	31
  2980  0074C6  6E1E               	movwf	Write_b_eep@badd,c
  2981  0074C8  0EFD               	movlw	253
  2982  0074CA  6E20               	movwf	Write_b_eep@bdat,c
  2983  0074CC  EFF0  F039         	goto	_Write_b_eep	;wreg free
  2984  0074D0                     __end_of_eeprom_config_inicial:
  2985                           	opt stack 0
  2986  0074D0                     PL14:
  2987                           	opt stack 26
  2988  0074D0  0E10               	movlw	16
  2989  0074D2  2422               	addwf	eeprom_config_inicial@i,w,c
  2990  0074D4  6E1E               	movwf	Write_b_eep@badd,c
  2991  0074D6  6A1F               	clrf	Write_b_eep@badd+1,c
  2992  0074D8  0E00               	movlw	0
  2993  0074DA  221F               	addwfc	Write_b_eep@badd+1,f,c
  2994  0074DC  0C00               	retlw	0
  2995  0074DE                     __end_ofPL14:
  2996                           	opt stack 0
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon	equ	0xFF2
  3004                           intcon2	equ	0xFF1
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           indf1	equ	0xFE7
  3008                           postinc1	equ	0xFE6
  3009                           postdec1	equ	0xFE5
  3010                           plusw1	equ	0xFE3
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           postinc2	equ	0xFDE
  3015                           plusw2	equ	0xFDB
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _Write_b_eep *****************
  3021 ;; Defined at:
  3022 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\write_B.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  badd            2   29[COMRAM] unsigned int 
  3025 ;;  bdat            1   31[COMRAM] unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  GIE_BIT_VAL     1   32[COMRAM] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;		None               void
  3030 ;; Registers used:
  3031 ;;		wreg, status,2
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3037 ;;      Params:         3       0       0       0       0       0       0       0       0
  3038 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3040 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3041 ;;Total ram usage:        4 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;;		_eeprom_config_inicial
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text8
  3053  0073E0                     __ptext8:
  3054                           	opt stack 0
  3055  0073E0                     _Write_b_eep:
  3056                           	opt stack 26
  3057                           
  3058                           ;incstack = 0
  3059  0073E0  C01E  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  3060  0073E4  C020  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  3061  0073E8  9EA6               	bcf	4006,7,c	;volatile
  3062  0073EA  9CA6               	bcf	4006,6,c	;volatile
  3063  0073EC  84A6               	bsf	4006,2,c	;volatile
  3064  0073EE  0E00               	movlw	0
  3065  0073F0  BEF2               	btfsc	intcon,7,c	;volatile
  3066  0073F2  0E01               	movlw	1
  3067  0073F4  6E21               	movwf	Write_b_eep@GIE_BIT_VAL,c
  3068  0073F6  9EF2               	bcf	intcon,7,c	;volatile
  3069  0073F8  0E55               	movlw	85
  3070  0073FA  6EA7               	movwf	4007,c	;volatile
  3071  0073FC  0EAA               	movlw	170
  3072  0073FE  6EA7               	movwf	4007,c	;volatile
  3073  007400  82A6               	bsf	4006,1,c	;volatile
  3074  007402                     l639:
  3075  007402  B2A6               	btfsc	4006,1,c	;volatile
  3076  007404  D7FE               	goto	l639
  3077  007406  B021               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  3078  007408  D002               	bra	u3075
  3079  00740A  9EF2               	bcf	intcon,7,c	;volatile
  3080  00740C  D001               	bra	u3076
  3081  00740E                     u3075:
  3082  00740E  8EF2               	bsf	intcon,7,c	;volatile
  3083  007410                     u3076:
  3084  007410  94A6               	bcf	4006,2,c	;volatile
  3085  007412  0012               	return		;funcret
  3086  007414                     __end_of_Write_b_eep:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           intcon	equ	0xFF2
  3095                           intcon2	equ	0xFF1
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           indf1	equ	0xFE7
  3099                           postinc1	equ	0xFE6
  3100                           postdec1	equ	0xFE5
  3101                           plusw1	equ	0xFE3
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           indf2	equ	0xFDF
  3105                           postinc2	equ	0xFDE
  3106                           plusw2	equ	0xFDB
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _Busy_eep *****************
  3112 ;; Defined at:
  3113 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\busy_eep.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		None
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/1
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3130 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3131 ;;Total ram usage:        0 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    3
  3134 ;; This function calls:
  3135 ;;		Nothing
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;;		_eeprom_config_inicial
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           	psect	text9
  3143  007228                     __ptext9:
  3144                           	opt stack 0
  3145  007228                     _Busy_eep:
  3146                           	opt stack 26
  3147  007228                     l612:
  3148  007228  A2A6               	btfss	4006,1,c	;volatile
  3149  00722A  0012               	return		;funcret
  3150  00722C  D7FD               	goto	l612
  3151  00722E                     __end_of_Busy_eep:
  3152                           	opt stack 0
  3153                           tblptru	equ	0xFF8
  3154                           tblptrh	equ	0xFF7
  3155                           tblptrl	equ	0xFF6
  3156                           tablat	equ	0xFF5
  3157                           prodh	equ	0xFF4
  3158                           prodl	equ	0xFF3
  3159                           intcon	equ	0xFF2
  3160                           intcon2	equ	0xFF1
  3161                           postinc0	equ	0xFEE
  3162                           wreg	equ	0xFE8
  3163                           indf1	equ	0xFE7
  3164                           postinc1	equ	0xFE6
  3165                           postdec1	equ	0xFE5
  3166                           plusw1	equ	0xFE3
  3167                           fsr1h	equ	0xFE2
  3168                           fsr1l	equ	0xFE1
  3169                           indf2	equ	0xFDF
  3170                           postinc2	equ	0xFDE
  3171                           plusw2	equ	0xFDB
  3172                           fsr2h	equ	0xFDA
  3173                           fsr2l	equ	0xFD9
  3174                           status	equ	0xFD8
  3175                           
  3176 ;; *************** function _dia_da_semana *****************
  3177 ;; Defined at:
  3178 ;;		line 4 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  dia             1    wreg     unsigned char 
  3181 ;;  mes             1   33[COMRAM] unsigned char 
  3182 ;;  ano             1   34[COMRAM] unsigned char 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  dia             1   12[BANK0 ] unsigned char 
  3185 ;;  tabela_mes     12    0[BANK0 ] unsigned char [12]
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      unsigned char 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : F/1
  3192 ;;		On exit  : F/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3195 ;;      Params:         2       0       0       0       0       0       0       0       0
  3196 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3197 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3198 ;;      Totals:         4      13       0       0       0       0       0       0       0
  3199 ;;Total ram usage:       17 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    4
  3202 ;; This function calls:
  3203 ;;		___lbdiv
  3204 ;; This function is called by:
  3205 ;;		_main
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text10
  3210  007414                     __ptext10:
  3211                           	opt stack 0
  3212  007414                     _dia_da_semana:
  3213                           	opt stack 26
  3214                           
  3215                           ;incstack = 0
  3216                           ;dia_da_semana@dia stored from wreg
  3217  007414  0100               	movlb	0	; () banked
  3218  007416  6FE2               	movwf	dia_da_semana@dia& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;time.c: 5: ano +=15;
  3222  007418  0E0F               	movlw	15
  3223  00741A  2623               	addwf	dia_da_semana@ano,f,c
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;time.c: 6: char tabela_mes[] = {0,3,3,6,1,4,6,2,5,0,3,5};
  3227  00741C  EE20  F029         	lfsr	2,dia_da_semana@F5261
  3228  007420  EE10  F0D6         	lfsr	1,dia_da_semana@tabela_mes
  3229  007424  0E0B               	movlw	11
  3230  007426                     u3301:
  3231  007426  CFDB FFE3          	movff	plusw2,plusw1
  3232  00742A  06E8               	decf	wreg,f,c
  3233  00742C  E2FC               	bc	u3301
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;time.c: 7: if(ano%4==0){
  3237  00742E  C023  F024         	movff	dia_da_semana@ano,??_dia_da_semana
  3238  007432  0E03               	movlw	3
  3239  007434  1624               	andwf	??_dia_da_semana,f,c
  3240  007436  E104               	bnz	l3298
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;time.c: 8: tabela_mes[0] = 6;
  3244  007438  0E06               	movlw	6
  3245  00743A  6FD6               	movwf	dia_da_semana@tabela_mes& (0+255),b
  3246                           
  3247                           ;time.c: 9: tabela_mes[1] = 2;}
  3248  00743C  0E02               	movlw	2
  3249  00743E  6FD7               	movwf	(dia_da_semana@tabela_mes+1)& (0+255),b
  3250  007440                     l3298:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;time.c: 11: return ( dia + mes + tabela_mes[mes-1] + ano + ano/4 + (6 - ((ano/100)*2)) 
      +                          );
  3254  007440  C022  F024         	movff	dia_da_semana@mes,??_dia_da_semana
  3255  007444  0624               	decf	??_dia_da_semana,f,c
  3256  007446  5024               	movf	??_dia_da_semana,w,c
  3257  007448  0FD6               	addlw	low dia_da_semana@tabela_mes
  3258  00744A  6ED9               	movwf	fsr2l,c
  3259  00744C  6ADA               	clrf	fsr2h,c
  3260  00744E  50DF               	movf	indf2,w,c
  3261  007450  6E25               	movwf	(??_dia_da_semana+1)& (0+255),c
  3262  007452  0E64               	movlw	100
  3263  007454  6E1E               	movwf	___lbdiv@divisor,c
  3264  007456  5023               	movf	dia_da_semana@ano,w,c
  3265  007458  ECD6  F039         	call	___lbdiv
  3266  00745C  0DFE               	mullw	-2
  3267  00745E  4023               	rrncf	dia_da_semana@ano,w,c
  3268  007460  42E8               	rrncf	wreg,f,c
  3269  007462  0B3F               	andlw	63
  3270  007464  24F3               	addwf	prodl,w,c
  3271  007466  2425               	addwf	??_dia_da_semana+1,w,c
  3272  007468  0100               	movlb	0	; () banked
  3273  00746A  25E2               	addwf	dia_da_semana@dia& (0+255),w,b
  3274  00746C  2422               	addwf	dia_da_semana@mes,w,c
  3275  00746E  2423               	addwf	dia_da_semana@ano,w,c
  3276  007470  0F06               	addlw	6
  3277                           
  3278                           ; BSR set to: 0
  3279  007472  0012               	return		;funcret
  3280  007474                     __end_of_dia_da_semana:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           intcon2	equ	0xFF1
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           indf1	equ	0xFE7
  3293                           postinc1	equ	0xFE6
  3294                           postdec1	equ	0xFE5
  3295                           plusw1	equ	0xFE3
  3296                           fsr1h	equ	0xFE2
  3297                           fsr1l	equ	0xFE1
  3298                           indf2	equ	0xFDF
  3299                           postinc2	equ	0xFDE
  3300                           plusw2	equ	0xFDB
  3301                           fsr2h	equ	0xFDA
  3302                           fsr2l	equ	0xFD9
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function ___lbdiv *****************
  3306 ;; Defined at:
  3307 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  dividend        1    wreg     unsigned char 
  3310 ;;  divisor         1   29[COMRAM] unsigned char 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  dividend        1   30[COMRAM] unsigned char 
  3313 ;;  quotient        1   32[COMRAM] unsigned char 
  3314 ;;  counter         1   31[COMRAM] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      unsigned char 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0
  3319 ;; Tracked objects:
  3320 ;;		On entry : E/0
  3321 ;;		On exit  : E/0
  3322 ;;		Unchanged: E/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3324 ;;      Params:         1       0       0       0       0       0       0       0       0
  3325 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3327 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3328 ;;Total ram usage:        4 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    3
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_numero_para_ascii
  3335 ;;		_dia_da_semana
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text11
  3340  0073AC                     __ptext11:
  3341                           	opt stack 0
  3342  0073AC                     ___lbdiv:
  3343                           	opt stack 26
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;incstack = 0
  3347                           ;___lbdiv@dividend stored from wreg
  3348  0073AC  6E1F               	movwf	___lbdiv@dividend,c
  3349  0073AE  6A21               	clrf	___lbdiv@quotient,c
  3350  0073B0  501E               	movf	___lbdiv@divisor,w,c
  3351  0073B2  E014               	bz	l3192
  3352  0073B4  0E01               	movlw	1
  3353  0073B6  6E20               	movwf	___lbdiv@counter,c
  3354  0073B8  D003               	goto	l3180
  3355  0073BA                     l3176:
  3356  0073BA  90D8               	bcf	status,0,c
  3357  0073BC  361E               	rlcf	___lbdiv@divisor,f,c
  3358  0073BE  2A20               	incf	___lbdiv@counter,f,c
  3359  0073C0                     l3180:
  3360  0073C0  AE1E               	btfss	___lbdiv@divisor,7,c
  3361  0073C2  D7FB               	goto	l3176
  3362  0073C4                     l3182:
  3363  0073C4  90D8               	bcf	status,0,c
  3364  0073C6  3621               	rlcf	___lbdiv@quotient,f,c
  3365  0073C8  501E               	movf	___lbdiv@divisor,w,c
  3366  0073CA  5C1F               	subwf	___lbdiv@dividend,w,c
  3367  0073CC  E303               	bnc	l3188
  3368  0073CE  501E               	movf	___lbdiv@divisor,w,c
  3369  0073D0  5E1F               	subwf	___lbdiv@dividend,f,c
  3370  0073D2  8021               	bsf	___lbdiv@quotient,0,c
  3371  0073D4                     l3188:
  3372  0073D4  90D8               	bcf	status,0,c
  3373  0073D6  321E               	rrcf	___lbdiv@divisor,f,c
  3374  0073D8  2E20               	decfsz	___lbdiv@counter,f,c
  3375  0073DA  D7F4               	goto	l3182
  3376  0073DC                     l3192:
  3377  0073DC  5021               	movf	___lbdiv@quotient,w,c
  3378  0073DE  0012               	return		;funcret
  3379  0073E0                     __end_of___lbdiv:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodh	equ	0xFF4
  3386                           prodl	equ	0xFF3
  3387                           intcon	equ	0xFF2
  3388                           intcon2	equ	0xFF1
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           indf1	equ	0xFE7
  3392                           postinc1	equ	0xFE6
  3393                           postdec1	equ	0xFE5
  3394                           plusw1	equ	0xFE3
  3395                           fsr1h	equ	0xFE2
  3396                           fsr1l	equ	0xFE1
  3397                           indf2	equ	0xFDF
  3398                           postinc2	equ	0xFDE
  3399                           plusw2	equ	0xFDB
  3400                           fsr2h	equ	0xFDA
  3401                           fsr2l	equ	0xFD9
  3402                           status	equ	0xFD8
  3403                           
  3404 ;; *************** function _delay_ms *****************
  3405 ;; Defined at:
  3406 ;;		line 79 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  delay_total     2   29[COMRAM] unsigned int 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  temp            2   32[COMRAM] unsigned int 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3420 ;;      Params:         2       0       0       0       0       0       0       0       0
  3421 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3422 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3423 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3424 ;;Total ram usage:        5 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    3
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text12
  3435  007350                     __ptext12:
  3436                           	opt stack 0
  3437  007350                     _delay_ms:
  3438                           	opt stack 27
  3439                           
  3440                           ;ascii.c: 80: unsigned int temp = 0;
  3441                           
  3442                           ;incstack = 0
  3443  007350  6A21               	clrf	delay_ms@temp,c
  3444  007352  6A22               	clrf	delay_ms@temp+1,c
  3445                           
  3446                           ;ascii.c: 81: while(temp < delay_total){
  3447  007354  D00A               	goto	l424
  3448  007356                     l3320:
  3449                           
  3450                           ;ascii.c: 82: _delay((unsigned long)((1)*(16000000/4000.0)));
  3451  007356  0E06               	movlw	6
  3452  007358  6E20               	movwf	??_delay_ms& (0+255),c
  3453  00735A  0E30               	movlw	48
  3454  00735C                     u4657:
  3455  00735C  2EE8               	decfsz	wreg,f,c
  3456  00735E  D7FE               	goto	u4657
  3457  007360  2E20               	decfsz	??_delay_ms& (0+255),f,c
  3458  007362  D7FC               	goto	u4657
  3459  007364  D000               	nop2	
  3460                           
  3461                           ;ascii.c: 83: temp++;}
  3462  007366  4A21               	infsnz	delay_ms@temp,f,c
  3463  007368  2A22               	incf	delay_ms@temp+1,f,c
  3464  00736A                     l424:
  3465  00736A  501E               	movf	delay_ms@delay_total,w,c
  3466  00736C  5C21               	subwf	delay_ms@temp,w,c
  3467  00736E  501F               	movf	delay_ms@delay_total+1,w,c
  3468  007370  5822               	subwfb	delay_ms@temp+1,w,c
  3469  007372  B0D8               	btfsc	status,0,c
  3470  007374  0012               	return		;funcret
  3471  007376  D7EF               	goto	l3320
  3472  007378                     __end_of_delay_ms:
  3473                           	opt stack 0
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           intcon2	equ	0xFF1
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           indf1	equ	0xFE7
  3485                           postinc1	equ	0xFE6
  3486                           postdec1	equ	0xFE5
  3487                           plusw1	equ	0xFE3
  3488                           fsr1h	equ	0xFE2
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           plusw2	equ	0xFDB
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _configurar_serial *****************
  3498 ;; Defined at:
  3499 ;;		line 5 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\funcoes_serial.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  valor_baud      1    wreg     unsigned char 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  valor_baud      1   29[COMRAM] unsigned char 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		wreg
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/1
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3513 ;;      Params:         0       0       0       0       0       0       0       0       0
  3514 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3516 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    3
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_main
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text13
  3528  007298                     __ptext13:
  3529                           	opt stack 0
  3530  007298                     _configurar_serial:
  3531                           	opt stack 27
  3532                           
  3533                           ;incstack = 0
  3534                           ;configurar_serial@valor_baud stored from wreg
  3535  007298  6E1E               	movwf	configurar_serial@valor_baud,c
  3536                           
  3537                           ;funcoes_serial.c: 6: SYNC=0;
  3538  00729A  98AC               	bcf	4012,4,c	;volatile
  3539                           
  3540                           ;funcoes_serial.c: 7: BRGH=1;
  3541  00729C  84AC               	bsf	4012,2,c	;volatile
  3542                           
  3543                           ;funcoes_serial.c: 8: BRG16=1;
  3544  00729E  86B8               	bsf	4024,3,c	;volatile
  3545                           
  3546                           ;funcoes_serial.c: 9: SPBRG= valor_baud;
  3547  0072A0  C01E  FFAF         	movff	configurar_serial@valor_baud,4015	;volatile
  3548                           
  3549                           ;funcoes_serial.c: 10: TX9=0;
  3550  0072A4  9CAC               	bcf	4012,6,c	;volatile
  3551                           
  3552                           ;funcoes_serial.c: 11: RX9=0;
  3553  0072A6  9CAB               	bcf	4011,6,c	;volatile
  3554                           
  3555                           ;funcoes_serial.c: 12: TXEN=1;
  3556  0072A8  8AAC               	bsf	4012,5,c	;volatile
  3557                           
  3558                           ;funcoes_serial.c: 13: RCIE=0;
  3559  0072AA  9A9D               	bcf	3997,5,c	;volatile
  3560                           
  3561                           ;funcoes_serial.c: 14: CREN=1;
  3562  0072AC  88AB               	bsf	4011,4,c	;volatile
  3563                           
  3564                           ;funcoes_serial.c: 15: SPEN=1;
  3565  0072AE  8EAB               	bsf	4011,7,c	;volatile
  3566                           
  3567                           ;funcoes_serial.c: 16: TXCKP = 0;
  3568  0072B0  98B8               	bcf	4024,4,c	;volatile
  3569                           
  3570                           ;funcoes_serial.c: 17: TXIE = 0;
  3571  0072B2  989D               	bcf	3997,4,c	;volatile
  3572                           
  3573                           ;funcoes_serial.c: 18: TX9 = 0;
  3574  0072B4  9CAC               	bcf	4012,6,c	;volatile
  3575  0072B6  0012               	return		;funcret
  3576  0072B8                     __end_of_configurar_serial:
  3577                           	opt stack 0
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           intcon	equ	0xFF2
  3585                           intcon2	equ	0xFF1
  3586                           postinc0	equ	0xFEE
  3587                           wreg	equ	0xFE8
  3588                           indf1	equ	0xFE7
  3589                           postinc1	equ	0xFE6
  3590                           postdec1	equ	0xFE5
  3591                           plusw1	equ	0xFE3
  3592                           fsr1h	equ	0xFE2
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           plusw2	equ	0xFDB
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _carregar_senha *****************
  3602 ;; Defined at:
  3603 ;;		line 30 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  conta           1    wreg     unsigned char 
  3606 ;;  senha           2   31[COMRAM] PTR unsigned char [17]
  3607 ;;		 -> senha(272), 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  conta           1   37[COMRAM] unsigned char 
  3610 ;;  i               1   38[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : F/1
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         2       0       0       0       0       0       0       0       0
  3621 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3622 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        8 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		_Read_b_eep
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text14
  3635  00774C                     __ptext14:
  3636                           	opt stack 0
  3637  00774C                     _carregar_senha:
  3638                           	opt stack 26
  3639                           
  3640                           ;incstack = 0
  3641                           ;carregar_senha@conta stored from wreg
  3642  00774C  6E26               	movwf	carregar_senha@conta,c
  3643                           
  3644                           ; BSR set to: 1
  3645                           ;eeprom_interna.c: 31: TXREG = '\n';
  3646  00774E  0E0A               	movlw	10
  3647  007750  6EAD               	movwf	4013,c	;volatile
  3648  007752                     l551:
  3649                           
  3650                           ; BSR set to: 1
  3651  007752  A2AC               	btfss	4012,1,c	;volatile
  3652  007754  D7FE               	goto	l551
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;eeprom_interna.c: 33: char i = 0;
  3656  007756  6A27               	clrf	carregar_senha@i,c
  3657  007758                     l3280:
  3658                           
  3659                           ;eeprom_interna.c: 36: senha[conta][i] = Read_b_eep((conta*16) + i);
  3660  007758  D835               	call	PL6	;call to abstracted procedure
  3661  00775A  2422               	addwf	??_carregar_senha,w,c
  3662  00775C  6ED9               	movwf	fsr2l,c
  3663  00775E  0E00               	movlw	0
  3664  007760  2023               	addwfc	??_carregar_senha+1,w,c
  3665  007762  6EDA               	movwf	fsr2h,c
  3666  007764  5026               	movf	carregar_senha@conta,w,c
  3667  007766  6E24               	movwf	(??_carregar_senha+2)& (0+255),c
  3668  007768  6A25               	clrf	(??_carregar_senha+3)& (0+255),c
  3669  00776A  3A24               	swapf	??_carregar_senha+2,f,c
  3670  00776C  3A25               	swapf	??_carregar_senha+3,f,c
  3671  00776E  0EF0               	movlw	240
  3672  007770  1625               	andwf	??_carregar_senha+3,f,c
  3673  007772  5024               	movf	??_carregar_senha+2,w,c
  3674  007774  0B0F               	andlw	15
  3675  007776  1225               	iorwf	??_carregar_senha+3,f,c
  3676  007778  0EF0               	movlw	240
  3677  00777A  1624               	andwf	??_carregar_senha+2,f,c
  3678  00777C  5027               	movf	carregar_senha@i,w,c
  3679  00777E  2424               	addwf	??_carregar_senha+2,w,c
  3680  007780  6E1E               	movwf	Read_b_eep@badd,c
  3681  007782  0E00               	movlw	0
  3682  007784  2025               	addwfc	??_carregar_senha+3,w,c
  3683  007786  6E1F               	movwf	Read_b_eep@badd+1,c
  3684  007788  EC2A  F039         	call	_Read_b_eep	;wreg free
  3685  00778C  6EDF               	movwf	indf2,c
  3686                           
  3687                           ;eeprom_interna.c: 37: TXREG= senha[conta][i];
  3688  00778E  D81A               	call	PL6	;call to abstracted procedure
  3689  007790  2422               	addwf	??_carregar_senha,w,c
  3690  007792  6ED9               	movwf	fsr2l,c
  3691  007794  0E00               	movlw	0
  3692  007796  2023               	addwfc	??_carregar_senha+1,w,c
  3693  007798  6EDA               	movwf	fsr2h,c
  3694  00779A  50DF               	movf	indf2,w,c
  3695  00779C  6EAD               	movwf	4013,c	;volatile
  3696  00779E                     l555:
  3697  00779E  A2AC               	btfss	4012,1,c	;volatile
  3698  0077A0  D7FE               	goto	l555
  3699                           
  3700                           ;eeprom_interna.c: 39: i++;} while( senha[conta][i-1] && i<(16-1));
  3701  0077A2  2A27               	incf	carregar_senha@i,f,c
  3702  0077A4  D80F               	call	PL6	;call to abstracted procedure
  3703  0077A6  2622               	addwf	??_carregar_senha,f,c
  3704  0077A8  0E00               	movlw	0
  3705  0077AA  2223               	addwfc	??_carregar_senha+1,f,c
  3706  0077AC  0EFF               	movlw	255
  3707  0077AE  2422               	addwf	??_carregar_senha,w,c
  3708  0077B0  6ED9               	movwf	fsr2l,c
  3709  0077B2  0EFF               	movlw	255
  3710  0077B4  2023               	addwfc	??_carregar_senha+1,w,c
  3711  0077B6  6EDA               	movwf	fsr2h,c
  3712  0077B8  50DF               	movf	indf2,w,c
  3713  0077BA  E003               	bz	l561
  3714  0077BC  0E0E               	movlw	14
  3715  0077BE  6427               	cpfsgt	carregar_senha@i,c
  3716  0077C0  D7CB               	goto	l3280
  3717  0077C2                     l561:
  3718  0077C2  0012               	return		;funcret
  3719  0077C4                     __end_of_carregar_senha:
  3720                           	opt stack 0
  3721  0077C4                     PL6:
  3722                           	opt stack 26
  3723  0077C4  5026               	movf	carregar_senha@conta,w,c
  3724  0077C6  0D11               	mullw	17
  3725  0077C8  C020  F022         	movff	carregar_senha@senha,??_carregar_senha
  3726  0077CC  C021  F023         	movff	carregar_senha@senha+1,??_carregar_senha+1
  3727  0077D0  50F3               	movf	prodl,w,c
  3728  0077D2  2622               	addwf	??_carregar_senha,f,c
  3729  0077D4  50F4               	movf	prodh,w,c
  3730  0077D6  2223               	addwfc	??_carregar_senha+1,f,c
  3731  0077D8  5027               	movf	carregar_senha@i,w,c
  3732  0077DA  0012               	return	
  3733  0077DC                     __end_ofPL6:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           intcon2	equ	0xFF1
  3743                           postinc0	equ	0xFEE
  3744                           wreg	equ	0xFE8
  3745                           indf1	equ	0xFE7
  3746                           postinc1	equ	0xFE6
  3747                           postdec1	equ	0xFE5
  3748                           plusw1	equ	0xFE3
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           indf2	equ	0xFDF
  3752                           postinc2	equ	0xFDE
  3753                           plusw2	equ	0xFDB
  3754                           fsr2h	equ	0xFDA
  3755                           fsr2l	equ	0xFD9
  3756                           status	equ	0xFD8
  3757                           
  3758 ;; *************** function _Read_b_eep *****************
  3759 ;; Defined at:
  3760 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\read_B.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  badd            2   29[COMRAM] unsigned int 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      unsigned char 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/1
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3774 ;;      Params:         2       0       0       0       0       0       0       0       0
  3775 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    3
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_main
  3785 ;;		_verificar_num_contas
  3786 ;;		_carregar_senha
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text15
  3791  007254                     __ptext15:
  3792                           	opt stack 0
  3793  007254                     _Read_b_eep:
  3794                           	opt stack 26
  3795                           
  3796                           ;incstack = 0
  3797  007254  C01E  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  3798  007258  9CA6               	bcf	4006,6,c	;volatile
  3799  00725A  9EA6               	bcf	4006,7,c	;volatile
  3800  00725C  80A6               	bsf	4006,0,c	;volatile
  3801  00725E  F000               	nop	
  3802  007260  F000               	nop	
  3803  007262  50A8               	movf	4008,w,c	;volatile
  3804  007264  0012               	return		;funcret
  3805  007266                     __end_of_Read_b_eep:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           intcon	equ	0xFF2
  3814                           intcon2	equ	0xFF1
  3815                           postinc0	equ	0xFEE
  3816                           wreg	equ	0xFE8
  3817                           indf1	equ	0xFE7
  3818                           postinc1	equ	0xFE6
  3819                           postdec1	equ	0xFE5
  3820                           plusw1	equ	0xFE3
  3821                           fsr1h	equ	0xFE2
  3822                           fsr1l	equ	0xFE1
  3823                           indf2	equ	0xFDF
  3824                           postinc2	equ	0xFDE
  3825                           plusw2	equ	0xFDB
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           status	equ	0xFD8
  3829                           
  3830 ;; *************** function _ascii_para_numero *****************
  3831 ;; Defined at:
  3832 ;;		line 108 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  caractere3      1    wreg     unsigned char 
  3835 ;;  caractere2      1   29[COMRAM] unsigned char 
  3836 ;;  caractere1      1   30[COMRAM] unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  caractere3      1   31[COMRAM] unsigned char 
  3839 ;;  numero          1   32[COMRAM] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      unsigned char 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0, prodl, prodh
  3844 ;; Tracked objects:
  3845 ;;		On entry : F/1
  3846 ;;		On exit  : F/1
  3847 ;;		Unchanged: F/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3849 ;;      Params:         2       0       0       0       0       0       0       0       0
  3850 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3852 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3853 ;;Total ram usage:        4 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    3
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_main
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text16
  3864  007278                     __ptext16:
  3865                           	opt stack 0
  3866  007278                     _ascii_para_numero:
  3867                           	opt stack 27
  3868                           
  3869                           ;incstack = 0
  3870                           ;ascii_para_numero@caractere3 stored from wreg
  3871  007278  6E20               	movwf	ascii_para_numero@caractere3,c
  3872                           
  3873                           ; BSR set to: 1
  3874                           ;ascii.c: 109: char numero;
  3875                           ;ascii.c: 110: numero=((caractere3 - '0')*100);
  3876  00727A  5020               	movf	ascii_para_numero@caractere3,w,c
  3877  00727C  0FD0               	addlw	208
  3878  00727E  0D64               	mullw	100
  3879  007280  CFF3 F021          	movff	prodl,ascii_para_numero@numero
  3880                           
  3881                           ;ascii.c: 111: numero+=((caractere2 - '0')*10);
  3882  007284  501E               	movf	ascii_para_numero@caractere2,w,c
  3883  007286  0FD0               	addlw	208
  3884  007288  0D0A               	mullw	10
  3885  00728A  50F3               	movf	prodl,w,c
  3886  00728C  2621               	addwf	ascii_para_numero@numero,f,c
  3887                           
  3888                           ; BSR set to: 1
  3889                           ;ascii.c: 112: numero+=(caractere1 - '0');
  3890  00728E  501F               	movf	ascii_para_numero@caractere1,w,c
  3891  007290  0FD0               	addlw	208
  3892  007292  2621               	addwf	ascii_para_numero@numero,f,c
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;ascii.c: 113: return numero;}
  3896  007294  5021               	movf	ascii_para_numero@numero,w,c
  3897                           
  3898                           ; BSR set to: 1
  3899  007296  0012               	return		;funcret
  3900  007298                     __end_of_ascii_para_numero:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           intcon	equ	0xFF2
  3909                           intcon2	equ	0xFF1
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           indf1	equ	0xFE7
  3913                           postinc1	equ	0xFE6
  3914                           postdec1	equ	0xFE5
  3915                           plusw1	equ	0xFE3
  3916                           fsr1h	equ	0xFE2
  3917                           fsr1l	equ	0xFE1
  3918                           indf2	equ	0xFDF
  3919                           postinc2	equ	0xFDE
  3920                           plusw2	equ	0xFDB
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _aux *****************
  3926 ;; Defined at:
  3927 ;;		line 114 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  temp            1    0        unsigned char 
  3932 ;;  temp            1    0        unsigned char 
  3933 ;;  linha           1   28[COMRAM] unsigned char 
  3934 ;;  coluna          1   27[COMRAM] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;		None               void
  3937 ;; Registers used:
  3938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3944 ;;      Params:         0       0       0       0       0       0       0       0       0
  3945 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3946 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3947 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3948 ;;Total ram usage:        9 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    2
  3951 ;; This function calls:
  3952 ;;		_teclado_matricial
  3953 ;;		i2_enviar_caractere_serial
  3954 ;;		i2_numero_para_ascii
  3955 ;; This function is called by:
  3956 ;;		Interrupt level 2
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	intcode
  3961  001008                     __pintcode:
  3962                           	opt stack 0
  3963  001008                     _aux:
  3964                           	opt stack 26
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;incstack = 0
  3968  001008  CFD9 F016          	movff	fsr2l,??_aux+1
  3969  00100C  CFDA F017          	movff	fsr2h,??_aux+2
  3970  001010  CFF3 F018          	movff	prodl,??_aux+3
  3971  001014  ED3A  F03C         	call	int_func,f	;refresh shadow registers
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           intcon	equ	0xFF2
  3979                           intcon2	equ	0xFF1
  3980                           postinc0	equ	0xFEE
  3981                           wreg	equ	0xFE8
  3982                           indf1	equ	0xFE7
  3983                           postinc1	equ	0xFE6
  3984                           postdec1	equ	0xFE5
  3985                           plusw1	equ	0xFE3
  3986                           fsr1h	equ	0xFE2
  3987                           fsr1l	equ	0xFE1
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           plusw2	equ	0xFDB
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995                           	psect	intcode_body
  3996  007874                     __pintcode_body:
  3997                           	opt stack 26
  3998  007874                     int_func:
  3999                           	opt stack 26
  4000  007874  0006               	pop		; remove dummy address from shadow register refresh
  4001  007876  CFF4 F019          	movff	prodh,??_aux+4
  4002                           
  4003                           ;main.c: 116: if(TMR1IE && TMR1IF){
  4004  00787A  B09D               	btfsc	3997,0,c	;volatile
  4005  00787C  A09E               	btfss	3998,0,c	;volatile
  4006  00787E  D014               	goto	i2l180
  4007                           
  4008                           ;main.c: 117: TMR1IF=0;
  4009  007880  909E               	bcf	3998,0,c	;volatile
  4010                           
  4011                           ;main.c: 118: TMR1H=0xC0;
  4012  007882  0EC0               	movlw	192
  4013  007884  6ECF               	movwf	4047,c	;volatile
  4014                           
  4015                           ;main.c: 120: if(modo_bluetooth_teclado==1){
  4016  007886  A442               	btfss	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  4017  007888  D006               	goto	i2l181
  4018                           
  4019                           ;main.c: 121: qtd_caracteres_recebidos_serial=0;
  4020  00788A  6A3A               	clrf	_qtd_caracteres_recebidos_serial,c
  4021                           
  4022                           ;main.c: 122: (FLAGS_1 |= (1<<7));
  4023  00788C  0100               	movlb	0	; () banked
  4024  00788E  8FC2               	bsf	_FLAGS_1& (0+255),7,b
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;main.c: 123: enviar=1;
  4028  007890  8242               	bsf	_enviar/(0+8),_enviar& (0+7),c
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;main.c: 124: TMR1ON=0;
  4032  007892  90CD               	bcf	4045,0,c	;volatile
  4033                           
  4034                           ;main.c: 125: }
  4035  007894  D009               	goto	i2l180
  4036  007896                     i2l181:
  4037                           
  4038                           ;main.c: 128: else if(modo_bluetooth_teclado==1 && ++num_interrupt_timer1==10){
  4039  007896  A442               	btfss	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  4040  007898  D007               	goto	i2l180
  4041  00789A  2A39               	incf	_num_interrupt_timer1,f,c
  4042  00789C  0E0A               	movlw	10
  4043  00789E  1839               	xorwf	_num_interrupt_timer1,w,c
  4044  0078A0  E103               	bnz	i2l180
  4045                           
  4046                           ;main.c: 129: receber=1;
  4047  0078A2  8642               	bsf	_receber/(0+8),_receber& (0+7),c
  4048                           
  4049                           ;main.c: 130: TMR1ON=0;
  4050  0078A4  90CD               	bcf	4045,0,c	;volatile
  4051                           
  4052                           ;main.c: 131: num_interrupt_timer1=0;}
  4053  0078A6  6A39               	clrf	_num_interrupt_timer1,c
  4054  0078A8                     i2l180:
  4055                           
  4056                           ;main.c: 133: }
  4057                           ;main.c: 135: if(TMR0IE && TMR0IF){
  4058  0078A8  BAF2               	btfsc	intcon,5,c	;volatile
  4059  0078AA  A4F2               	btfss	intcon,2,c	;volatile
  4060  0078AC  D04E               	goto	i2l184
  4061                           
  4062                           ;main.c: 136: TMR0H = 0xC2;
  4063  0078AE  0EC2               	movlw	194
  4064  0078B0  6ED7               	movwf	4055,c	;volatile
  4065                           
  4066                           ;main.c: 137: TMR0L+=0xF7;
  4067  0078B2  0EF7               	movlw	247
  4068  0078B4  26D6               	addwf	4054,f,c	;volatile
  4069                           
  4070                           ;main.c: 138: TMR0IF=0;
  4071  0078B6  94F2               	bcf	intcon,2,c	;volatile
  4072                           
  4073                           ;main.c: 139: LATDbits.LD1^=1;
  4074  0078B8  728C               	btg	3980,1,c	;volatile
  4075                           
  4076                           ;main.c: 141: if(++data_atual.segundo>59){
  4077  0078BA  2A40               	incf	_data_atual+5,f,c
  4078  0078BC  0E3B               	movlw	59
  4079  0078BE  6440               	cpfsgt	_data_atual+5,c
  4080  0078C0  D044               	goto	i2l184
  4081                           
  4082                           ;main.c: 142: data_atual.segundo=0;
  4083  0078C2  6A40               	clrf	_data_atual+5,c
  4084                           
  4085                           ;main.c: 144: if(++data_atual.minuto>59){
  4086  0078C4  2A3F               	incf	_data_atual+4,f,c
  4087  0078C6  0E3B               	movlw	59
  4088  0078C8  643F               	cpfsgt	_data_atual+4,c
  4089  0078CA  D03F               	goto	i2l184
  4090                           
  4091                           ;main.c: 147: data_atual.minuto=0;
  4092  0078CC  6A3F               	clrf	_data_atual+4,c
  4093                           
  4094                           ;main.c: 149: if(++data_atual.hora>23){
  4095  0078CE  2A3E               	incf	_data_atual+3,f,c
  4096  0078D0  0E17               	movlw	23
  4097  0078D2  643E               	cpfsgt	_data_atual+3,c
  4098  0078D4  D03A               	goto	i2l184
  4099                           
  4100                           ;main.c: 151: data_atual.hora=0;
  4101  0078D6  6A3E               	clrf	_data_atual+3,c
  4102                           
  4103                           ;main.c: 152: if(++data_atual.dia_da_semana > 6) data_atual.dia_da_semana = 1;
  4104  0078D8  2A41               	incf	_data_atual+6,f,c
  4105  0078DA  0E06               	movlw	6
  4106  0078DC  6441               	cpfsgt	_data_atual+6,c
  4107  0078DE  D002               	goto	i2l2582
  4108  0078E0  0E01               	movlw	1
  4109  0078E2  6E41               	movwf	_data_atual+6,c
  4110  0078E4                     i2l2582:
  4111                           
  4112                           ;main.c: 154: if(++data_atual.dia >= qtd_max_dias) {
  4113  0078E4  2A3D               	incf	_data_atual+2,f,c
  4114  0078E6  5035               	movf	_qtd_max_dias,w,c
  4115  0078E8  5C3D               	subwf	_data_atual+2,w,c
  4116  0078EA  E32F               	bnc	i2l184
  4117                           
  4118                           ;main.c: 155: data_atual.dia=1;
  4119  0078EC  0E01               	movlw	1
  4120  0078EE  6E3D               	movwf	_data_atual+2,c
  4121                           
  4122                           ;main.c: 157: switch(++data_atual.mes){
  4123  0078F0  D012               	goto	i2l2602
  4124  0078F2                     i2l2586:
  4125                           
  4126                           ;main.c: 159: case 2:
  4127                           ;main.c: 160: case 4:
  4128                           ;main.c: 161: case 6:
  4129                           ;main.c: 162: case 7:
  4130                           ;main.c: 163: case 9:
  4131                           ;main.c: 164: case 11:
  4132                           ;main.c: 165: qtd_max_dias=31;
  4133  0078F2  0E1F               	movlw	31
  4134  0078F4  D00B               	goto	L4
  4135  0078F6                     i2l2588:
  4136                           
  4137                           ;main.c: 169: if(!((data_atual.ano+3)%4)) qtd_max_dias=29;
  4138  0078F6  C03B  F015         	movff	_data_atual,??_aux
  4139  0078FA  0E03               	movlw	3
  4140  0078FC  2615               	addwf	??_aux,f,c
  4141  0078FE  1615               	andwf	??_aux,f,c
  4142  007900  E102               	bnz	i2l2592
  4143  007902  0E1D               	movlw	29
  4144  007904  D003               	goto	L4
  4145  007906                     i2l2592:
  4146                           
  4147                           ;main.c: 170: else qtd_max_dias=28;
  4148  007906  0E1C               	movlw	28
  4149  007908  D001               	goto	L4
  4150  00790A                     i2l2594:
  4151                           
  4152                           ;main.c: 174: case 5:
  4153                           ;main.c: 175: case 8:
  4154                           ;main.c: 176: case 10:
  4155                           ;main.c: 177: qtd_max_dias=30;
  4156  00790A  0E1E               	movlw	30
  4157  00790C                     L4:
  4158  00790C  6E35               	movwf	_qtd_max_dias,c
  4159                           
  4160                           ;main.c: 178: break;
  4161  00790E  D01D               	goto	i2l184
  4162  007910                     i2l2596:
  4163                           
  4164                           ;main.c: 181: data_atual.ano++;
  4165  007910  2A3B               	incf	_data_atual,f,c
  4166                           
  4167                           ;main.c: 182: data_atual.mes=0;
  4168  007912  6A3C               	clrf	_data_atual+1,c
  4169                           
  4170                           ;main.c: 183: break;}
  4171  007914  D01A               	goto	i2l184
  4172  007916                     i2l2602:
  4173  007916  2A3C               	incf	_data_atual+1,f,c
  4174  007918  503C               	movf	_data_atual+1,w,c
  4175                           
  4176                           ; Switch size 1, requested type "space"
  4177                           ; Number of cases is 12, Range of values is 0 to 11
  4178                           ; switch strategies available:
  4179                           ; Name         Instructions Cycles
  4180                           ; simple_byte           37    19 (average)
  4181                           ;	Chosen strategy is simple_byte
  4182  00791A  E0EB               	bz	i2l2586
  4183  00791C  0A01               	xorlw	1	; case 1
  4184  00791E  E0EB               	bz	i2l2588
  4185  007920  0A03               	xorlw	3	; case 2
  4186  007922  E0E7               	bz	i2l2586
  4187  007924  0A01               	xorlw	1	; case 3
  4188  007926  E0F1               	bz	i2l2594
  4189  007928  0A07               	xorlw	7	; case 4
  4190  00792A  E0E3               	bz	i2l2586
  4191  00792C  0A01               	xorlw	1	; case 5
  4192  00792E  E0ED               	bz	i2l2594
  4193  007930  0A03               	xorlw	3	; case 6
  4194  007932  E0DF               	bz	i2l2586
  4195  007934  0A01               	xorlw	1	; case 7
  4196  007936  E0DD               	bz	i2l2586
  4197  007938  0A0F               	xorlw	15	; case 8
  4198  00793A  E0E7               	bz	i2l2594
  4199  00793C  0A01               	xorlw	1	; case 9
  4200  00793E  E0D9               	bz	i2l2586
  4201  007940  0A03               	xorlw	3	; case 10
  4202  007942  E0E3               	bz	i2l2594
  4203  007944  0A01               	xorlw	1	; case 11
  4204  007946  E0D5               	bz	i2l2586
  4205  007948  D7E3               	goto	i2l2596
  4206  00794A                     i2l184:
  4207                           
  4208                           ;main.c: 184: }
  4209                           ;main.c: 186: }
  4210                           ;main.c: 187: }
  4211                           ;main.c: 188: }
  4212                           ;main.c: 191: }
  4213                           ;main.c: 193: if(TMR1IE && TMR1IF){
  4214  00794A  B09D               	btfsc	3997,0,c	;volatile
  4215  00794C  A09E               	btfss	3998,0,c	;volatile
  4216  00794E  D003               	goto	i2l2612
  4217                           
  4218                           ;main.c: 194: LATDbits.LD2^=1;
  4219  007950  748C               	btg	3980,2,c	;volatile
  4220                           
  4221                           ;main.c: 195: TMR1IF=0;
  4222  007952  909E               	bcf	3998,0,c	;volatile
  4223                           
  4224                           ;main.c: 196: TMR1ON=0;}
  4225  007954  90CD               	bcf	4045,0,c	;volatile
  4226  007956                     i2l2612:
  4227                           
  4228                           ;main.c: 198: if(RBIE && RBIF){
  4229  007956  B6F2               	btfsc	intcon,3,c	;volatile
  4230  007958  A0F2               	btfss	intcon,0,c	;volatile
  4231  00795A  D06D               	goto	i2l2686
  4232                           
  4233                           ;main.c: 200: char linha=0;
  4234  00795C  6A1D               	clrf	aux@linha,c
  4235                           
  4236                           ;main.c: 201: PORTB_SR=(PORTB&0xF0);
  4237  00795E  5081               	movf	3969,w,c	;volatile
  4238  007960  0BF0               	andlw	240
  4239  007962  6E37               	movwf	_PORTB_SR,c
  4240                           
  4241                           ;main.c: 202: RBIF=0;
  4242  007964  90F2               	bcf	intcon,0,c	;volatile
  4243                           
  4244                           ;main.c: 203: if(PORTB_SR != 0xF0) {
  4245  007966  0EF0               	movlw	240
  4246  007968  1837               	xorwf	_PORTB_SR,w,c
  4247  00796A  E062               	bz	i2l2684
  4248                           
  4249                           ;main.c: 204: RBIE=0;
  4250  00796C  96F2               	bcf	intcon,3,c	;volatile
  4251                           
  4252                           ;main.c: 205: debounce=1;
  4253  00796E  8042               	bsf	_debounce/(0+8),_debounce& (0+7),c
  4254                           
  4255                           ;main.c: 206: modo_bluetooth_teclado=1;
  4256  007970  8442               	bsf	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  4257                           
  4258                           ;main.c: 207: LATDbits.LD0^=1;
  4259  007972  708C               	btg	3980,0,c	;volatile
  4260                           
  4261                           ;main.c: 209: if(PORTBbits.RB7==0){coluna=1;}
  4262  007974  BE81               	btfsc	3969,7,c	;volatile
  4263  007976  D002               	goto	i2l210
  4264  007978  0E01               	movlw	1
  4265  00797A  D00B               	goto	L7
  4266  00797C                     i2l210:
  4267                           
  4268                           ;main.c: 211: else if(PORTBbits.RB6==0){coluna=2;}
  4269  00797C  BC81               	btfsc	3969,6,c	;volatile
  4270  00797E  D002               	goto	i2l212
  4271  007980  0E02               	movlw	2
  4272  007982  D007               	goto	L7
  4273  007984                     i2l212:
  4274                           
  4275                           ;main.c: 213: else if(PORTBbits.RB5==0){coluna=3;}
  4276  007984  BA81               	btfsc	3969,5,c	;volatile
  4277  007986  D002               	goto	i2l214
  4278  007988  0E03               	movlw	3
  4279  00798A  D003               	goto	L7
  4280  00798C                     i2l214:
  4281                           
  4282                           ;main.c: 215: else if(PORTBbits.RB4==0){coluna=4;}
  4283  00798C  B881               	btfsc	3969,4,c	;volatile
  4284  00798E  D003               	goto	i2l216
  4285  007990  0E04               	movlw	4
  4286  007992                     L7:
  4287  007992  6E1C               	movwf	aux@coluna,c
  4288  007994  D001               	goto	i2l2636
  4289  007996                     i2l216:
  4290                           
  4291                           ;main.c: 217: else{coluna=0;}
  4292  007996  6A1C               	clrf	aux@coluna,c
  4293  007998                     i2l2636:
  4294                           
  4295                           ;main.c: 221: TRISB&=0x0F;
  4296  007998  0E0F               	movlw	15
  4297  00799A  1693               	andwf	3987,f,c	;volatile
  4298                           
  4299                           ;main.c: 222: LATB|=0xF0;
  4300  00799C  0EF0               	movlw	240
  4301  00799E  128A               	iorwf	3978,f,c	;volatile
  4302  0079A0                     i2l2638:
  4303  0079A0  CF83 F015          	movff	3971,??_aux	;volatile
  4304  0079A4  0EF0               	movlw	240
  4305  0079A6  1615               	andwf	??_aux,f,c
  4306  0079A8  E1FB               	bnz	i2l2638
  4307                           
  4308                           ;main.c: 227: TRISD|=0xF0;
  4309  0079AA  1295               	iorwf	3989,f,c	;volatile
  4310                           
  4311                           ;main.c: 229: if(PORTDbits.RD4==1){linha=1;}
  4312  0079AC  A883               	btfss	3971,4,c	;volatile
  4313  0079AE  D002               	goto	i2l224
  4314  0079B0  0E01               	movlw	1
  4315  0079B2  D00B               	goto	L10
  4316  0079B4                     i2l224:
  4317                           
  4318                           ;main.c: 231: else if(PORTDbits.RD5==1){linha=2;}
  4319  0079B4  AA83               	btfss	3971,5,c	;volatile
  4320  0079B6  D002               	goto	i2l226
  4321  0079B8  0E02               	movlw	2
  4322  0079BA  D007               	goto	L10
  4323  0079BC                     i2l226:
  4324                           
  4325                           ;main.c: 233: else if(PORTDbits.RD6==1){linha=3;}
  4326  0079BC  AC83               	btfss	3971,6,c	;volatile
  4327  0079BE  D002               	goto	i2l228
  4328  0079C0  0E03               	movlw	3
  4329  0079C2  D003               	goto	L10
  4330  0079C4                     i2l228:
  4331                           
  4332                           ;main.c: 235: else if(PORTDbits.RD7==1){linha=4;}
  4333  0079C4  AE83               	btfss	3971,7,c	;volatile
  4334  0079C6  D003               	goto	i2l230
  4335  0079C8  0E04               	movlw	4
  4336  0079CA                     L10:
  4337  0079CA  6E1D               	movwf	aux@linha,c
  4338  0079CC  D001               	goto	i2l2652
  4339  0079CE                     i2l230:
  4340                           
  4341                           ;main.c: 237: else{linha=0;}
  4342  0079CE  6A1D               	clrf	aux@linha,c
  4343  0079D0                     i2l2652:
  4344                           
  4345                           ;main.c: 239: if(linha && coluna){
  4346  0079D0  501D               	movf	aux@linha,w,c
  4347  0079D2  E01E               	bz	i2l2674
  4348  0079D4  501C               	movf	aux@coluna,w,c
  4349  0079D6  E01C               	bz	i2l2674
  4350                           
  4351                           ;main.c: 241: enviar_caractere_serial('\n');
  4352  0079D8  0E0A               	movlw	10
  4353  0079DA  EC17  F039         	call	i2_enviar_caractere_serial
  4354                           
  4355                           ;main.c: 242: caractere_recebido = teclado_matricial(coluna,linha);
  4356  0079DE  C01D  F001         	movff	aux@linha,teclado_matricial@linha
  4357  0079E2  501C               	movf	aux@coluna,w,c
  4358  0079E4  ECEE  F03B         	call	_teclado_matricial
  4359  0079E8  6E38               	movwf	_caractere_recebido,c
  4360                           
  4361                           ;main.c: 243: enviar_caractere_serial(caractere_recebido);
  4362  0079EA  5038               	movf	_caractere_recebido,w,c
  4363  0079EC  EC17  F039         	call	i2_enviar_caractere_serial
  4364                           
  4365                           ;main.c: 244: numero_para_ascii(linha);
  4366  0079F0  501D               	movf	aux@linha,w,c
  4367  0079F2  EC23  F03B         	call	i2_numero_para_ascii
  4368                           
  4369                           ;main.c: 245: numero_para_ascii(coluna);
  4370  0079F6  501C               	movf	aux@coluna,w,c
  4371  0079F8  EC23  F03B         	call	i2_numero_para_ascii
  4372                           
  4373                           ;main.c: 248: if(caractere_recebido == 'A'){
  4374  0079FC  0E41               	movlw	65
  4375  0079FE  1838               	xorwf	_caractere_recebido,w,c
  4376  007A00  E102               	bnz	i2l2670
  4377                           
  4378                           ;main.c: 249: (FLAGS_2 ^= (1<<0) );}
  4379  007A02  0E01               	movlw	1
  4380  007A04  D004               	goto	L11
  4381  007A06                     i2l2670:
  4382                           
  4383                           ;main.c: 251: else if(caractere_recebido == 'M'){
  4384  007A06  0E4D               	movlw	77
  4385  007A08  1838               	xorwf	_caractere_recebido,w,c
  4386  007A0A  E102               	bnz	i2l2674
  4387                           
  4388                           ;main.c: 252: (FLAGS_2 ^= (1<<1) );}
  4389  007A0C  0E02               	movlw	2
  4390  007A0E                     L11:
  4391  007A0E  1A36               	xorwf	_FLAGS_2,f,c
  4392  007A10                     i2l2674:
  4393                           
  4394                           ;main.c: 254: }
  4395                           ;main.c: 256: if((FLAGS_2 & (1<<0))) {TMR1ON=1;}
  4396  007A10  B036               	btfsc	_FLAGS_2,0,c
  4397  007A12  80CD               	bsf	4045,0,c	;volatile
  4398                           
  4399                           ;main.c: 258: TRISB|=0xF0;
  4400  007A14  0EF0               	movlw	240
  4401  007A16  1293               	iorwf	3987,f,c	;volatile
  4402                           
  4403                           ;main.c: 259: LATD&=0x0F;
  4404  007A18  0E0F               	movlw	15
  4405  007A1A  168C               	andwf	3980,f,c	;volatile
  4406                           
  4407                           ;main.c: 260: TRISD&=0X0F;
  4408  007A1C  1695               	andwf	3989,f,c	;volatile
  4409  007A1E                     i2l2680:
  4410  007A1E  CF83 F015          	movff	3971,??_aux	;volatile
  4411  007A22  0EF0               	movlw	240
  4412  007A24  1615               	andwf	??_aux,f,c
  4413  007A26  E1FB               	bnz	i2l2680
  4414  007A28                     i2l2682:
  4415  007A28  5081               	movf	3969,w,c	;volatile
  4416  007A2A  0BF0               	andlw	240
  4417  007A2C  0AF0               	xorlw	240
  4418  007A2E  E1FC               	bnz	i2l2682
  4419  007A30                     i2l2684:
  4420                           
  4421                           ;main.c: 265: }
  4422                           ;main.c: 267: PORTB_SR=(PORTB&0xF0);}
  4423  007A30  5081               	movf	3969,w,c	;volatile
  4424  007A32  0BF0               	andlw	240
  4425  007A34  6E37               	movwf	_PORTB_SR,c
  4426  007A36                     i2l2686:
  4427                           
  4428                           ;main.c: 269: if(RCIE && RCIF){
  4429  007A36  BA9D               	btfsc	3997,5,c	;volatile
  4430  007A38  AA9E               	btfss	3998,5,c	;volatile
  4431  007A3A  D038               	goto	i2l260
  4432                           
  4433                           ;main.c: 270: modo_bluetooth_teclado=0;;
  4434  007A3C  9442               	bcf	_modo_bluetooth_teclado/(0+8),_modo_bluetooth_teclado& (0+7),c
  4435                           
  4436                           ;main.c: 271: RBIE=0;
  4437  007A3E  96F2               	bcf	intcon,3,c	;volatile
  4438                           
  4439                           ;main.c: 273: if(OERR==1){
  4440  007A40  A2AB               	btfss	4011,1,c	;volatile
  4441  007A42  D00A               	goto	i2l244
  4442                           
  4443                           ;main.c: 274: (FLAGS_1 |= (1<<4));
  4444  007A44  0100               	movlb	0	; () banked
  4445  007A46  89C2               	bsf	_FLAGS_1& (0+255),4,b
  4446  007A48                     i2l2694:
  4447  007A48  50AE               	movf	4014,w,c	;volatile
  4448                           
  4449                           ;main.c: 278: CREN = 0;
  4450  007A4A  98AB               	bcf	4011,4,c	;volatile
  4451                           
  4452                           ;main.c: 279: CREN = 1;
  4453  007A4C  88AB               	bsf	4011,4,c	;volatile
  4454                           
  4455                           ;main.c: 282: }while(OERR);
  4456  007A4E  B2AB               	btfsc	4011,1,c	;volatile
  4457  007A50  D7FB               	goto	i2l2694
  4458  007A52                     i2l247:
  4459                           
  4460                           ;main.c: 283: enviar=1;
  4461  007A52  8242               	bsf	_enviar/(0+8),_enviar& (0+7),c
  4462                           
  4463                           ;main.c: 284: receber=0;
  4464  007A54  9642               	bcf	_receber/(0+8),_receber& (0+7),c
  4465                           
  4466                           ;main.c: 286: }
  4467  007A56  D029               	goto	i2l2726
  4468  007A58                     i2l244:
  4469                           
  4470                           ;main.c: 288: else if(FERR==1){
  4471  007A58  A4AB               	btfss	4011,2,c	;volatile
  4472  007A5A  D008               	goto	i2l2712
  4473                           
  4474                           ;main.c: 289: (FLAGS_1 |= (1<<4));
  4475  007A5C  0100               	movlb	0	; () banked
  4476  007A5E  89C2               	bsf	_FLAGS_1& (0+255),4,b
  4477  007A60                     i2l2704:
  4478  007A60  50AE               	movf	4014,w,c	;volatile
  4479                           
  4480                           ;main.c: 293: SPEN=0;
  4481  007A62  9EAB               	bcf	4011,7,c	;volatile
  4482                           
  4483                           ;main.c: 294: SPEN=1;
  4484  007A64  8EAB               	bsf	4011,7,c	;volatile
  4485                           
  4486                           ;main.c: 296: }while(FERR);
  4487  007A66  A4AB               	btfss	4011,2,c	;volatile
  4488  007A68  D7F4               	goto	i2l247
  4489  007A6A  D7FA               	goto	i2l2704
  4490  007A6C                     i2l2712:
  4491                           
  4492                           ;main.c: 300: else{
  4493                           ;main.c: 302: buffer_serial[qtd_caracteres_recebidos_serial] = RCREG;
  4494  007A6C  503A               	movf	_qtd_caracteres_recebidos_serial,w,c
  4495  007A6E  0F60               	addlw	low _buffer_serial
  4496  007A70  6ED9               	movwf	fsr2l,c
  4497  007A72  6ADA               	clrf	fsr2h,c
  4498  007A74  CFAE FFDF          	movff	4014,indf2	;volatile
  4499                           
  4500                           ;main.c: 303: TXREG = buffer_serial[qtd_caracteres_recebidos_serial];
  4501  007A78  503A               	movf	_qtd_caracteres_recebidos_serial,w,c
  4502  007A7A  0F60               	addlw	low _buffer_serial
  4503  007A7C  6ED9               	movwf	fsr2l,c
  4504  007A7E  6ADA               	clrf	fsr2h,c
  4505  007A80  50DF               	movf	indf2,w,c
  4506  007A82  6EAD               	movwf	4013,c	;volatile
  4507  007A84                     i2l254:
  4508  007A84  A2AC               	btfss	4012,1,c	;volatile
  4509  007A86  D7FE               	goto	i2l254
  4510                           
  4511                           ;main.c: 307: if(++qtd_caracteres_recebidos_serial == 80 || buffer_serial[qtd_caracteres
      +                          _recebidos_serial-1] == 'F'){
  4512  007A88  2A3A               	incf	_qtd_caracteres_recebidos_serial,f,c
  4513  007A8A  0E50               	movlw	80
  4514  007A8C  183A               	xorwf	_qtd_caracteres_recebidos_serial,w,c
  4515  007A8E  E007               	bz	i2l259
  4516  007A90  503A               	movf	_qtd_caracteres_recebidos_serial,w,c
  4517  007A92  0F5F               	addlw	low (_buffer_serial+255)
  4518  007A94  6ED9               	movwf	fsr2l,c
  4519  007A96  6ADA               	clrf	fsr2h,c
  4520  007A98  0E46               	movlw	70
  4521  007A9A  18DE               	xorwf	postinc2,w,c
  4522  007A9C  E106               	bnz	i2l2726
  4523  007A9E                     i2l259:
  4524                           
  4525                           ;main.c: 308: receber=1;
  4526  007A9E  8642               	bsf	_receber/(0+8),_receber& (0+7),c
  4527                           
  4528                           ;main.c: 309: LATDbits.LD0^=1;
  4529  007AA0  708C               	btg	3980,0,c	;volatile
  4530                           
  4531                           ;main.c: 310: TMR1ON=0;
  4532  007AA2  90CD               	bcf	4045,0,c	;volatile
  4533                           
  4534                           ;main.c: 311: TMR1L=0;
  4535  007AA4  6ACE               	clrf	4046,c	;volatile
  4536                           
  4537                           ;main.c: 312: TMR1H=0xC0;}
  4538  007AA6  0EC0               	movlw	192
  4539  007AA8  6ECF               	movwf	4047,c	;volatile
  4540  007AAA                     i2l2726:
  4541                           
  4542                           ;main.c: 313: }
  4543                           ;main.c: 315: RCIF=0;}
  4544  007AAA  9A9E               	bcf	3998,5,c	;volatile
  4545  007AAC                     i2l260:
  4546  007AAC  C019  FFF4         	movff	??_aux+4,prodh
  4547  007AB0  C018  FFF3         	movff	??_aux+3,prodl
  4548  007AB4  C017  FFDA         	movff	??_aux+2,fsr2h
  4549  007AB8  C016  FFD9         	movff	??_aux+1,fsr2l
  4550  007ABC  0011               	retfie		f
  4551  007ABE                     __end_of_aux:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           intcon2	equ	0xFF1
  4561                           postinc0	equ	0xFEE
  4562                           wreg	equ	0xFE8
  4563                           indf1	equ	0xFE7
  4564                           postinc1	equ	0xFE6
  4565                           postdec1	equ	0xFE5
  4566                           plusw1	equ	0xFE3
  4567                           fsr1h	equ	0xFE2
  4568                           fsr1l	equ	0xFE1
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           plusw2	equ	0xFDB
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function i2_numero_para_ascii *****************
  4577 ;; Defined at:
  4578 ;;		line 86 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  numero          1    wreg     unsigned char 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  numero          1   15[COMRAM] unsigned char 
  4583 ;;  numero_para_    2   18[COMRAM] int 
  4584 ;;  numero_para_    2   16[COMRAM] int 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;		None               void
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4594 ;;      Params:         0       0       0       0       0       0       0       0       0
  4595 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4596 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4597 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4598 ;;Total ram usage:        6 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    1
  4601 ;; This function calls:
  4602 ;;		i2___awdiv
  4603 ;;		i2___lbdiv
  4604 ;;		i2___wmul
  4605 ;; This function is called by:
  4606 ;;		_aux
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text18
  4611  007646                     __ptext18:
  4612                           	opt stack 0
  4613  007646                     i2_numero_para_ascii:
  4614                           	opt stack 26
  4615                           
  4616                           ;incstack = 0
  4617                           ;i2numero_para_ascii@numero stored from wreg
  4618  007646  6E10               	movwf	i2numero_para_ascii@numero,c
  4619                           
  4620                           ;ascii.c: 87: int temp1;
  4621                           ;ascii.c: 88: int temp2;
  4622                           ;ascii.c: 90: TXREG = '+';
  4623  007648  0E2B               	movlw	43
  4624  00764A  6EAD               	movwf	4013,c	;volatile
  4625  00764C                     i2l430:
  4626  00764C  A2AC               	btfss	4012,1,c	;volatile
  4627  00764E  D7FE               	goto	i2l430
  4628                           
  4629                           ;ascii.c: 93: temp1 = numero/100;
  4630  007650  0E64               	movlw	100
  4631  007652  6E01               	movwf	i2___lbdiv@divisor,c
  4632  007654  5010               	movf	i2numero_para_ascii@numero,w,c
  4633  007656  ECBC  F039         	call	i2___lbdiv
  4634  00765A  6E13               	movwf	i2numero_para_ascii@temp1,c
  4635  00765C  6A14               	clrf	i2numero_para_ascii@temp1+1,c
  4636                           
  4637                           ;ascii.c: 94: TXREG = '0'+ temp1;
  4638  00765E  5013               	movf	i2numero_para_ascii@temp1,w,c
  4639  007660  0F30               	addlw	48
  4640  007662  6EAD               	movwf	4013,c	;volatile
  4641  007664                     i2l433:
  4642  007664  A2AC               	btfss	4012,1,c	;volatile
  4643  007666  D7FE               	goto	i2l433
  4644                           
  4645                           ;ascii.c: 97: temp2 = ((numero - temp1*100)/10);
  4646  007668  C013  F001         	movff	i2numero_para_ascii@temp1,i2___wmul@multiplier
  4647  00766C  C014  F002         	movff	i2numero_para_ascii@temp1+1,i2___wmul@multiplier+1
  4648  007670  6804               	setf	i2___wmul@multiplicand+1,c
  4649  007672  0E9C               	movlw	156
  4650  007674  6E03               	movwf	i2___wmul@multiplicand,c
  4651  007676  EC5C  F039         	call	i2___wmul	;wreg free
  4652  00767A  5010               	movf	i2numero_para_ascii@numero,w,c
  4653  00767C  2401               	addwf	?i2___wmul,w,c
  4654  00767E  6E07               	movwf	i2___awdiv@dividend,c
  4655  007680  0E00               	movlw	0
  4656  007682  2002               	addwfc	?i2___wmul+1,w,c
  4657  007684  6E08               	movwf	i2___awdiv@dividend+1,c
  4658  007686  6A0A               	clrf	i2___awdiv@divisor+1,c
  4659  007688  0E0A               	movlw	10
  4660  00768A  6E09               	movwf	i2___awdiv@divisor,c
  4661  00768C  EC6F  F03A         	call	i2___awdiv	;wreg free
  4662  007690  C007  F011         	movff	?i2___awdiv,i2numero_para_ascii@temp2
  4663  007694  C008  F012         	movff	?i2___awdiv+1,i2numero_para_ascii@temp2+1
  4664                           
  4665                           ;ascii.c: 98: TXREG = '0'+ temp2;
  4666  007698  5011               	movf	i2numero_para_ascii@temp2,w,c
  4667  00769A  0F30               	addlw	48
  4668  00769C  6EAD               	movwf	4013,c	;volatile
  4669  00769E                     i2l436:
  4670  00769E  A2AC               	btfss	4012,1,c	;volatile
  4671  0076A0  D7FE               	goto	i2l436
  4672                           
  4673                           ;ascii.c: 101: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  4674  0076A2  5013               	movf	i2numero_para_ascii@temp1,w,c
  4675  0076A4  0D9C               	mullw	156
  4676  0076A6  CFF3 F00F          	movff	prodl,??i2_numero_para_ascii
  4677  0076AA  5011               	movf	i2numero_para_ascii@temp2,w,c
  4678  0076AC  0DF6               	mullw	246
  4679  0076AE  50F3               	movf	prodl,w,c
  4680  0076B0  240F               	addwf	??i2_numero_para_ascii,w,c
  4681  0076B2  2410               	addwf	i2numero_para_ascii@numero,w,c
  4682  0076B4  0F30               	addlw	48
  4683  0076B6  6EAD               	movwf	4013,c	;volatile
  4684  0076B8                     i2l439:
  4685  0076B8  A2AC               	btfss	4012,1,c	;volatile
  4686  0076BA  D7FE               	goto	i2l439
  4687                           
  4688                           ;ascii.c: 104: TXREG = '+';
  4689  0076BC  0E2B               	movlw	43
  4690  0076BE  6EAD               	movwf	4013,c	;volatile
  4691  0076C0                     i2l442:
  4692  0076C0  B2AC               	btfsc	4012,1,c	;volatile
  4693  0076C2  0012               	return		;funcret
  4694  0076C4  D7FD               	goto	i2l442
  4695  0076C6                     __end_ofi2_numero_para_ascii:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           intcon	equ	0xFF2
  4704                           intcon2	equ	0xFF1
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           indf1	equ	0xFE7
  4708                           postinc1	equ	0xFE6
  4709                           postdec1	equ	0xFE5
  4710                           plusw1	equ	0xFE3
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function i2___wmul *****************
  4721 ;; Defined at:
  4722 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  multiplier      2    0[COMRAM] unsigned int 
  4725 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  __wmul          2    4[COMRAM] unsigned int 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  2    0[COMRAM] unsigned int 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, prodl, prodh
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4737 ;;      Params:         4       0       0       0       0       0       0       0       0
  4738 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4740 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4741 ;;Total ram usage:        6 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		i2_numero_para_ascii
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text19
  4751  0072B8                     __ptext19:
  4752                           	opt stack 0
  4753  0072B8                     i2___wmul:
  4754                           	opt stack 26
  4755                           
  4756                           ;incstack = 0
  4757  0072B8  5001               	movf	i2___wmul@multiplier,w,c
  4758  0072BA  0203               	mulwf	i2___wmul@multiplicand,c
  4759  0072BC  CFF3 F005          	movff	prodl,i2___wmul@product
  4760  0072C0  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4761  0072C4  5001               	movf	i2___wmul@multiplier,w,c
  4762  0072C6  0204               	mulwf	i2___wmul@multiplicand+1,c
  4763  0072C8  50F3               	movf	prodl,w,c
  4764  0072CA  2606               	addwf	i2___wmul@product+1,f,c
  4765  0072CC  5002               	movf	i2___wmul@multiplier+1,w,c
  4766  0072CE  0203               	mulwf	i2___wmul@multiplicand,c
  4767  0072D0  50F3               	movf	prodl,w,c
  4768  0072D2  2606               	addwf	i2___wmul@product+1,f,c
  4769  0072D4  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4770  0072D8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4771  0072DC  0012               	return		;funcret
  4772  0072DE                     __end_ofi2___wmul:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon2	equ	0xFF1
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           indf1	equ	0xFE7
  4785                           postinc1	equ	0xFE6
  4786                           postdec1	equ	0xFE5
  4787                           plusw1	equ	0xFE3
  4788                           fsr1h	equ	0xFE2
  4789                           fsr1l	equ	0xFE1
  4790                           indf2	equ	0xFDF
  4791                           postinc2	equ	0xFDE
  4792                           plusw2	equ	0xFDB
  4793                           fsr2h	equ	0xFDA
  4794                           fsr2l	equ	0xFD9
  4795                           status	equ	0xFD8
  4796                           
  4797 ;; *************** function i2___lbdiv *****************
  4798 ;; Defined at:
  4799 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;  dividend        1    wreg     unsigned char 
  4802 ;;  divisor         1    0[COMRAM] unsigned char 
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  dividend        1    1[COMRAM] unsigned char 
  4805 ;;  __lbdiv         1    3[COMRAM] unsigned char 
  4806 ;;  __lbdiv         1    2[COMRAM] unsigned char 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      unsigned char 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4816 ;;      Params:         1       0       0       0       0       0       0       0       0
  4817 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4819 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4820 ;;Total ram usage:        4 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		i2_numero_para_ascii
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text20
  4830  007378                     __ptext20:
  4831                           	opt stack 0
  4832  007378                     i2___lbdiv:
  4833                           	opt stack 26
  4834                           
  4835                           ;incstack = 0
  4836                           ;i2___lbdiv@dividend stored from wreg
  4837  007378  6E02               	movwf	i2___lbdiv@dividend,c
  4838  00737A  6A04               	clrf	i2___lbdiv@quotient,c
  4839  00737C  5001               	movf	i2___lbdiv@divisor,w,c
  4840  00737E  E014               	bz	i2l2344
  4841  007380  0E01               	movlw	1
  4842  007382  6E03               	movwf	i2___lbdiv@counter,c
  4843  007384  D003               	goto	i2l2332
  4844  007386                     i2l2328:
  4845  007386  90D8               	bcf	status,0,c
  4846  007388  3601               	rlcf	i2___lbdiv@divisor,f,c
  4847  00738A  2A03               	incf	i2___lbdiv@counter,f,c
  4848  00738C                     i2l2332:
  4849  00738C  AE01               	btfss	i2___lbdiv@divisor,7,c
  4850  00738E  D7FB               	goto	i2l2328
  4851  007390                     i2l2334:
  4852  007390  90D8               	bcf	status,0,c
  4853  007392  3604               	rlcf	i2___lbdiv@quotient,f,c
  4854  007394  5001               	movf	i2___lbdiv@divisor,w,c
  4855  007396  5C02               	subwf	i2___lbdiv@dividend,w,c
  4856  007398  E303               	bnc	i2l2340
  4857  00739A  5001               	movf	i2___lbdiv@divisor,w,c
  4858  00739C  5E02               	subwf	i2___lbdiv@dividend,f,c
  4859  00739E  8004               	bsf	i2___lbdiv@quotient,0,c
  4860  0073A0                     i2l2340:
  4861  0073A0  90D8               	bcf	status,0,c
  4862  0073A2  3201               	rrcf	i2___lbdiv@divisor,f,c
  4863  0073A4  2E03               	decfsz	i2___lbdiv@counter,f,c
  4864  0073A6  D7F4               	goto	i2l2334
  4865  0073A8                     i2l2344:
  4866  0073A8  5004               	movf	i2___lbdiv@quotient,w,c
  4867  0073AA  0012               	return		;funcret
  4868  0073AC                     __end_ofi2___lbdiv:
  4869                           	opt stack 0
  4870                           tblptru	equ	0xFF8
  4871                           tblptrh	equ	0xFF7
  4872                           tblptrl	equ	0xFF6
  4873                           tablat	equ	0xFF5
  4874                           prodh	equ	0xFF4
  4875                           prodl	equ	0xFF3
  4876                           intcon	equ	0xFF2
  4877                           intcon2	equ	0xFF1
  4878                           postinc0	equ	0xFEE
  4879                           wreg	equ	0xFE8
  4880                           indf1	equ	0xFE7
  4881                           postinc1	equ	0xFE6
  4882                           postdec1	equ	0xFE5
  4883                           plusw1	equ	0xFE3
  4884                           fsr1h	equ	0xFE2
  4885                           fsr1l	equ	0xFE1
  4886                           indf2	equ	0xFDF
  4887                           postinc2	equ	0xFDE
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function i2___awdiv *****************
  4894 ;; Defined at:
  4895 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  dividend        2    6[COMRAM] int 
  4898 ;;  divisor         2    8[COMRAM] int 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  __awdiv         2   12[COMRAM] int 
  4901 ;;  __awdiv         1   11[COMRAM] unsigned char 
  4902 ;;  __awdiv         1   10[COMRAM] unsigned char 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  2    6[COMRAM] int 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4912 ;;      Params:         4       0       0       0       0       0       0       0       0
  4913 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4915 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4916 ;;Total ram usage:        8 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		i2_numero_para_ascii
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text21
  4926  0074DE                     __ptext21:
  4927                           	opt stack 0
  4928  0074DE                     i2___awdiv:
  4929                           	opt stack 26
  4930                           
  4931                           ;incstack = 0
  4932  0074DE  6A0C               	clrf	i2___awdiv@sign,c
  4933  0074E0  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  4934  0074E2  D006               	goto	i2l2286
  4935  0074E4  6C09               	negf	i2___awdiv@divisor,c
  4936  0074E6  1E0A               	comf	i2___awdiv@divisor+1,f,c
  4937  0074E8  B0D8               	btfsc	status,0,c
  4938  0074EA  2A0A               	incf	i2___awdiv@divisor+1,f,c
  4939  0074EC  0E01               	movlw	1
  4940  0074EE  6E0C               	movwf	i2___awdiv@sign,c
  4941  0074F0                     i2l2286:
  4942  0074F0  AE08               	btfss	i2___awdiv@dividend+1,7,c
  4943  0074F2  D006               	goto	i2l2292
  4944  0074F4  6C07               	negf	i2___awdiv@dividend,c
  4945  0074F6  1E08               	comf	i2___awdiv@dividend+1,f,c
  4946  0074F8  B0D8               	btfsc	status,0,c
  4947  0074FA  2A08               	incf	i2___awdiv@dividend+1,f,c
  4948  0074FC  0E01               	movlw	1
  4949  0074FE  1A0C               	xorwf	i2___awdiv@sign,f,c
  4950  007500                     i2l2292:
  4951  007500  6A0D               	clrf	i2___awdiv@quotient,c
  4952  007502  6A0E               	clrf	i2___awdiv@quotient+1,c
  4953  007504  5009               	movf	i2___awdiv@divisor,w,c
  4954  007506  100A               	iorwf	i2___awdiv@divisor+1,w,c
  4955  007508  E01B               	bz	i2l2314
  4956  00750A  0E01               	movlw	1
  4957  00750C  6E0B               	movwf	i2___awdiv@counter,c
  4958  00750E  D004               	goto	i2l2300
  4959  007510                     i2l2298:
  4960  007510  90D8               	bcf	status,0,c
  4961  007512  3609               	rlcf	i2___awdiv@divisor,f,c
  4962  007514  360A               	rlcf	i2___awdiv@divisor+1,f,c
  4963  007516  2A0B               	incf	i2___awdiv@counter,f,c
  4964  007518                     i2l2300:
  4965  007518  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  4966  00751A  D7FA               	goto	i2l2298
  4967  00751C                     i2l2302:
  4968  00751C  90D8               	bcf	status,0,c
  4969  00751E  360D               	rlcf	i2___awdiv@quotient,f,c
  4970  007520  360E               	rlcf	i2___awdiv@quotient+1,f,c
  4971  007522  5009               	movf	i2___awdiv@divisor,w,c
  4972  007524  5C07               	subwf	i2___awdiv@dividend,w,c
  4973  007526  500A               	movf	i2___awdiv@divisor+1,w,c
  4974  007528  5808               	subwfb	i2___awdiv@dividend+1,w,c
  4975  00752A  E305               	bnc	i2l2310
  4976  00752C  5009               	movf	i2___awdiv@divisor,w,c
  4977  00752E  5E07               	subwf	i2___awdiv@dividend,f,c
  4978  007530  500A               	movf	i2___awdiv@divisor+1,w,c
  4979  007532  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  4980  007534  800D               	bsf	i2___awdiv@quotient,0,c
  4981  007536                     i2l2310:
  4982  007536  90D8               	bcf	status,0,c
  4983  007538  320A               	rrcf	i2___awdiv@divisor+1,f,c
  4984  00753A  3209               	rrcf	i2___awdiv@divisor,f,c
  4985  00753C  2E0B               	decfsz	i2___awdiv@counter,f,c
  4986  00753E  D7EE               	goto	i2l2302
  4987  007540                     i2l2314:
  4988  007540  500C               	movf	i2___awdiv@sign,w,c
  4989  007542  E004               	bz	i2l2318
  4990  007544  6C0D               	negf	i2___awdiv@quotient,c
  4991  007546  1E0E               	comf	i2___awdiv@quotient+1,f,c
  4992  007548  B0D8               	btfsc	status,0,c
  4993  00754A  2A0E               	incf	i2___awdiv@quotient+1,f,c
  4994  00754C                     i2l2318:
  4995  00754C  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  4996  007550  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  4997  007554  0012               	return		;funcret
  4998  007556                     __end_ofi2___awdiv:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           prodh	equ	0xFF4
  5005                           prodl	equ	0xFF3
  5006                           intcon	equ	0xFF2
  5007                           intcon2	equ	0xFF1
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           indf1	equ	0xFE7
  5011                           postinc1	equ	0xFE6
  5012                           postdec1	equ	0xFE5
  5013                           plusw1	equ	0xFE3
  5014                           fsr1h	equ	0xFE2
  5015                           fsr1l	equ	0xFE1
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           plusw2	equ	0xFDB
  5019                           fsr2h	equ	0xFDA
  5020                           fsr2l	equ	0xFD9
  5021                           status	equ	0xFD8
  5022                           
  5023 ;; *************** function i2_enviar_caractere_serial *****************
  5024 ;; Defined at:
  5025 ;;		line 32 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\funcoes_serial.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;  caractere_a_    1    wreg     unsigned char 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  caractere_a_    1    0[COMRAM] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;		None               void
  5032 ;; Registers used:
  5033 ;;		wreg
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5039 ;;      Params:         0       0       0       0       0       0       0       0       0
  5040 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5042 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5043 ;;Total ram usage:        1 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_aux
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text22
  5053  00722E                     __ptext22:
  5054                           	opt stack 0
  5055  00722E                     i2_enviar_caractere_serial:
  5056                           	opt stack 27
  5057                           
  5058                           ;incstack = 0
  5059                           ;i2enviar_caractere_serial@caractere_a_enviar stored from wreg
  5060  00722E  6E01               	movwf	i2enviar_caractere_serial@caractere_a_enviar,c
  5061                           
  5062                           ;funcoes_serial.c: 33: TXREG = caractere_a_enviar;
  5063  007230  C001  FFAD         	movff	i2enviar_caractere_serial@caractere_a_enviar,4013	;volatile
  5064  007234                     i2l604:
  5065  007234  B2AC               	btfsc	4012,1,c	;volatile
  5066  007236  0012               	return		;funcret
  5067  007238  D7FD               	goto	i2l604
  5068  00723A                     __end_ofi2_enviar_caractere_serial:
  5069                           	opt stack 0
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           intcon	equ	0xFF2
  5077                           intcon2	equ	0xFF1
  5078                           postinc0	equ	0xFEE
  5079                           wreg	equ	0xFE8
  5080                           indf1	equ	0xFE7
  5081                           postinc1	equ	0xFE6
  5082                           postdec1	equ	0xFE5
  5083                           plusw1	equ	0xFE3
  5084                           fsr1h	equ	0xFE2
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           plusw2	equ	0xFDB
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093 ;; *************** function _teclado_matricial *****************
  5094 ;; Defined at:
  5095 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  coluna          1    wreg     unsigned char 
  5098 ;;  linha           1    0[COMRAM] unsigned char 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  coluna          1    1[COMRAM] unsigned char 
  5101 ;;  caractere       1    3[COMRAM] unsigned char 
  5102 ;;  temp            1    2[COMRAM] unsigned char 
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  1    wreg      unsigned char 
  5105 ;; Registers used:
  5106 ;;		wreg, status,2, status,0, prodl, prodh
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5112 ;;      Params:         1       0       0       0       0       0       0       0       0
  5113 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5115 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5116 ;;Total ram usage:        4 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_aux
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text23
  5126  0077DC                     __ptext23:
  5127                           	opt stack 0
  5128  0077DC                     _teclado_matricial:
  5129                           	opt stack 27
  5130                           
  5131                           ;incstack = 0
  5132                           ;teclado_matricial@coluna stored from wreg
  5133  0077DC  6E02               	movwf	teclado_matricial@coluna,c
  5134                           
  5135                           ;ascii.c: 8: char temp = ((linha-1)*4) + coluna;
  5136  0077DE  5001               	movf	teclado_matricial@linha,w,c
  5137  0077E0  0D04               	mullw	4
  5138  0077E2  50F3               	movf	prodl,w,c
  5139  0077E4  2402               	addwf	teclado_matricial@coluna,w,c
  5140  0077E6  0FFC               	addlw	252
  5141  0077E8  6E03               	movwf	teclado_matricial@temp,c
  5142                           
  5143                           ;ascii.c: 9: char caractere;
  5144                           ;ascii.c: 11: switch(temp){
  5145  0077EA  D021               	goto	i2l2386
  5146  0077EC                     i2l2352:
  5147                           
  5148                           ;ascii.c: 13: caractere = 'M';
  5149  0077EC  0E4D               	movlw	77
  5150  0077EE  D01D               	goto	L26
  5151  0077F0                     i2l2354:
  5152                           
  5153                           ;ascii.c: 17: caractere = '0';
  5154  0077F0  0E30               	movlw	48
  5155  0077F2  D01B               	goto	L26
  5156  0077F4                     i2l2356:
  5157                           
  5158                           ;ascii.c: 21: caractere = 'F';
  5159  0077F4  0E46               	movlw	70
  5160  0077F6  D019               	goto	L26
  5161  0077F8                     i2l2358:
  5162                           
  5163                           ;ascii.c: 25: caractere = 'D';
  5164  0077F8  0E44               	movlw	68
  5165  0077FA  D017               	goto	L26
  5166  0077FC                     i2l2360:
  5167                           
  5168                           ;ascii.c: 29: caractere = '7';
  5169  0077FC  0E37               	movlw	55
  5170  0077FE  D015               	goto	L26
  5171  007800                     i2l2362:
  5172                           
  5173                           ;ascii.c: 33: caractere = '8';
  5174  007800  0E38               	movlw	56
  5175  007802  D013               	goto	L26
  5176  007804                     i2l2364:
  5177                           
  5178                           ;ascii.c: 37: caractere = '9';
  5179  007804  0E39               	movlw	57
  5180  007806  D011               	goto	L26
  5181  007808                     i2l2366:
  5182                           
  5183                           ;ascii.c: 41: caractere = 'C';
  5184  007808  0E43               	movlw	67
  5185  00780A  D00F               	goto	L26
  5186  00780C                     i2l2368:
  5187                           
  5188                           ;ascii.c: 45: caractere = '4';
  5189  00780C  0E34               	movlw	52
  5190  00780E  D00D               	goto	L26
  5191  007810                     i2l2370:
  5192                           
  5193                           ;ascii.c: 49: caractere = '5';
  5194  007810  0E35               	movlw	53
  5195  007812  D00B               	goto	L26
  5196  007814                     i2l2372:
  5197                           
  5198                           ;ascii.c: 53: caractere = '6';
  5199  007814  0E36               	movlw	54
  5200  007816  D009               	goto	L26
  5201  007818                     i2l2374:
  5202                           
  5203                           ;ascii.c: 57: caractere = 'B';
  5204  007818  0E42               	movlw	66
  5205  00781A  D007               	goto	L26
  5206  00781C                     i2l2376:
  5207                           
  5208                           ;ascii.c: 61: caractere = '1';
  5209  00781C  0E31               	movlw	49
  5210  00781E  D005               	goto	L26
  5211  007820                     i2l2378:
  5212                           
  5213                           ;ascii.c: 65: caractere = '2';
  5214  007820  0E32               	movlw	50
  5215  007822  D003               	goto	L26
  5216  007824                     i2l2380:
  5217                           
  5218                           ;ascii.c: 69: caractere = '3';
  5219  007824  0E33               	movlw	51
  5220  007826  D001               	goto	L26
  5221  007828                     i2l2382:
  5222                           
  5223                           ;ascii.c: 73: caractere = 'A';
  5224  007828  0E41               	movlw	65
  5225  00782A                     L26:
  5226  00782A  6E04               	movwf	teclado_matricial@caractere,c
  5227                           
  5228                           ;ascii.c: 74: break;}
  5229  00782C  D021               	goto	i2l2388
  5230  00782E                     i2l2386:
  5231  00782E  5003               	movf	teclado_matricial@temp,w,c
  5232                           
  5233                           ; Switch size 1, requested type "space"
  5234                           ; Number of cases is 16, Range of values is 1 to 16
  5235                           ; switch strategies available:
  5236                           ; Name         Instructions Cycles
  5237                           ; simple_byte           49    25 (average)
  5238                           ;	Chosen strategy is simple_byte
  5239  007830  0A01               	xorlw	1	; case 1
  5240  007832  E0DC               	bz	i2l2352
  5241  007834  0A03               	xorlw	3	; case 2
  5242  007836  E0DC               	bz	i2l2354
  5243  007838  0A01               	xorlw	1	; case 3
  5244  00783A  E0DC               	bz	i2l2356
  5245  00783C  0A07               	xorlw	7	; case 4
  5246  00783E  E0DC               	bz	i2l2358
  5247  007840  0A01               	xorlw	1	; case 5
  5248  007842  E0DC               	bz	i2l2360
  5249  007844  0A03               	xorlw	3	; case 6
  5250  007846  E0DC               	bz	i2l2362
  5251  007848  0A01               	xorlw	1	; case 7
  5252  00784A  E0DC               	bz	i2l2364
  5253  00784C  0A0F               	xorlw	15	; case 8
  5254  00784E  E0DC               	bz	i2l2366
  5255  007850  0A01               	xorlw	1	; case 9
  5256  007852  E0DC               	bz	i2l2368
  5257  007854  0A03               	xorlw	3	; case 10
  5258  007856  E0DC               	bz	i2l2370
  5259  007858  0A01               	xorlw	1	; case 11
  5260  00785A  E0DC               	bz	i2l2372
  5261  00785C  0A07               	xorlw	7	; case 12
  5262  00785E  E0DC               	bz	i2l2374
  5263  007860  0A01               	xorlw	1	; case 13
  5264  007862  E0DC               	bz	i2l2376
  5265  007864  0A03               	xorlw	3	; case 14
  5266  007866  E0DC               	bz	i2l2378
  5267  007868  0A01               	xorlw	1	; case 15
  5268  00786A  E0DC               	bz	i2l2380
  5269  00786C  0A1F               	xorlw	31	; case 16
  5270  00786E  E0DC               	bz	i2l2382
  5271  007870                     i2l2388:
  5272                           
  5273                           ;ascii.c: 76: return caractere;
  5274  007870  5004               	movf	teclado_matricial@caractere,w,c
  5275  007872  0012               	return		;funcret
  5276  007874                     __end_of_teclado_matricial:
  5277                           	opt stack 0
  5278  0000                     tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           intcon2	equ	0xFF1
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           indf1	equ	0xFE7
  5289                           postinc1	equ	0xFE6
  5290                           postdec1	equ	0xFE5
  5291                           plusw1	equ	0xFE3
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           plusw2	equ	0xFDB
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           intcon2	equ	0xFF1
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf1	equ	0xFE7
  5311                           postinc1	equ	0xFE6
  5312                           postdec1	equ	0xFE5
  5313                           plusw1	equ	0xFE3
  5314                           fsr1h	equ	0xFE2
  5315                           fsr1l	equ	0xFE1
  5316                           indf2	equ	0xFDF
  5317                           postinc2	equ	0xFDE
  5318                           plusw2	equ	0xFDB
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323                           	psect	rparam
  5324  0000                     tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           intcon2	equ	0xFF1
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           indf1	equ	0xFE7
  5335                           postinc1	equ	0xFE6
  5336                           postdec1	equ	0xFE5
  5337                           plusw1	equ	0xFE3
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           plusw2	equ	0xFDB
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           intcon2	equ	0xFF1
  5354                           postinc0	equ	0xFEE
  5355                           wreg	equ	0xFE8
  5356                           indf1	equ	0xFE7
  5357                           postinc1	equ	0xFE6
  5358                           postdec1	equ	0xFE5
  5359                           plusw1	equ	0xFE3
  5360                           fsr1h	equ	0xFE2
  5361                           fsr1l	equ	0xFE1
  5362                           indf2	equ	0xFDF
  5363                           postinc2	equ	0xFDE
  5364                           plusw2	equ	0xFDB
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        31
    BSS         384
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      66
    BANK0           160     18     136
    BANK1           256     28      28
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    enviar_string_serial@string_a_enviar	PTR unsigned char  size(2) Largest target is 3
		 -> main@EI(BANK1[3]), main@ES(BANK1[3]), main@EC(BANK1[3]), main@EP(BANK1[3]), 
		 -> main@EN(BANK1[3]), main@OK(BANK1[3]), 

    carregar_senha@senha	PTR unsigned char [17] size(2) Largest target is 272
		 -> senha(BIGRAM[272]), 

    ptr_data	PTR unsigned char  size(2) Largest target is 7
		 -> NULL(NULL[0]), data_atual.ano(COMRAM[1]), data_atual(COMRAM[7]), 

    sp__memset	PTR void  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_numero_para_ascii
    _verificar_num_contas->_Read_b_eep
    _numero_para_ascii->___awdiv
    ___awdiv->___wmul
    _eeprom_config_inicial->_Write_b_eep
    _dia_da_semana->___lbdiv
    _carregar_senha->_Read_b_eep

Critical Paths under _aux in COMRAM

    _aux->i2_numero_para_ascii
    i2_numero_para_ascii->i2___awdiv
    i2___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_dia_da_semana
    _numero_para_ascii->___awdiv

Critical Paths under _aux in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aux in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aux in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aux in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aux in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aux in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _aux in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _aux in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0   12116
                                             13 BANK0      5     5      0
                                              0 BANK1     28    28      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                  _ascii_para_numero
                     _carregar_senha
                  _configurar_serial
                           _delay_ms
                      _dia_da_semana
              _eeprom_config_inicial
            _enviar_caractere_serial
               _enviar_string_serial
                  _numero_para_ascii
               _verificar_num_contas
 ---------------------------------------------------------------------------------
 (1) _verificar_num_contas                                 2     2      0     398
                                             31 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _numero_para_ascii                                    6     6      0    1982
                                             39 COMRAM     1     1      0
                                              4 BANK0      5     5      0
                            ___awdiv
                            ___lbdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     734
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             35 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _enviar_string_serial                                 3     1      2     420
                                             29 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _enviar_caractere_serial                              1     1      0      31
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_config_inicial                                1     1      0    1585
                                             33 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    1331
                                             29 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dia_da_semana                                       17    15      2     846
                                             33 COMRAM     4     2      2
                                              0 BANK0     13    13      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     395
                                             29 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     299
                                             29 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _configurar_serial                                    1     1      0      31
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _carregar_senha                                       8     6      2     717
                                             31 COMRAM     8     6      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2     262
                                             29 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ascii_para_numero                                    4     2      2     287
                                             29 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _aux                                                  9     9      0    1308
                                             20 COMRAM     9     9      0
                  _teclado_matricial
          i2_enviar_caractere_serial
                i2_numero_para_ascii
 ---------------------------------------------------------------------------------
 (4) i2_numero_para_ascii                                  6     6      0     927
                                             14 COMRAM     6     6      0
                          i2___awdiv
                          i2___lbdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) i2___lbdiv                                            4     3      1     188
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) i2_enviar_caractere_serial                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _teclado_matricial                                    4     3      1     169
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Busy_eep
   _Read_b_eep
   _Write_b_eep
   _ascii_para_numero
   _carregar_senha
     _Read_b_eep
   _configurar_serial
   _delay_ms
   _dia_da_semana
     ___lbdiv
   _eeprom_config_inicial
     _Busy_eep
     _Write_b_eep
   _enviar_caractere_serial
   _enviar_string_serial
   _numero_para_ascii
     ___awdiv
       ___wmul (ARG)
     ___lbdiv
     ___wmul
   _verificar_num_contas
     _Read_b_eep

 _aux (ROOT)
   _teclado_matricial
   i2_enviar_caractere_serial
   i2_numero_para_ascii
     i2___awdiv
       i2___wmul (ARG)
     i2___lbdiv
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     110      21       13.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1C      1C       7       10.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      88       5       85.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     28      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6      20        0.0%
DATA                 0      0     1F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 12 22:42:51 2015

                  i2numero_para_ascii@numero 0010                         main@qtd_total_contas 0114  
                                         PL2 7F88                        __end_of_dia_da_semana 7474  
                                         PL4 7FA6                                           PL6 77C4  
                                         PL8 7FD4                        _eeprom_config_inicial 7474  
                                         _WR 007D31                                 ___awdiv@sign 00D7  
                        ___wmul@multiplicand 0020                           __CFG_FOSC$XTPLL_XT 000000  
                               __CFG_CP0$OFF 000000                                 __CFG_CP1$OFF 000000  
                               __CFG_CP2$OFF 000000                                 __CFG_CP3$OFF 000000  
                                        PL10 72F4                                          PL12 7FE6  
                                        PL14 74D0                                          PL16 7FF4  
                    __size_of_carregar_senha 0078                                          l310 7CB8  
                                        l302 7C82                                          l430 76CE  
                                        l424 736A                                          l433 76EA  
                                        l442 7746                                          l282 7BB2  
                                        l274 7B96                                          l612 7228  
                                        l604 7240                                          l436 7724  
                                        l284 7BCC                                          l365 7EA0  
                                        l269 7B88                                          l382 7F3E  
                                        l278 7BA8                                          l551 7752  
                                        l439 773E                                          l384 7F70  
                                        l561 77C2                                          l385 7F6A  
                                        l555 779E                                          l387 7F60  
                                        l379 7F7E                                          l299 7C76  
                                        l639 7402                                          l597 72E8  
                               __CFG_CPB$OFF 000000                                 __CFG_CPD$OFF 000000  
                                        _RX9 007D5E                                          _TX9 007D66  
                               __CFG_BOR$OFF 000000                                          _aux 1008  
                       __size_of_Write_b_eep 0034                                          wreg 000FE8  
                               __CFG_LVP$OFF 000000                                 __CFG_WDT$OFF 000000  
                                       l4000 7E78                                         l4010 7EA4  
                                       l3140 7578                                         l4020 7EC6  
                                       l4012 7EA8                                         l3150 7594  
                                       l3134 7568                                         l3320 7356  
                                       l3218 7476                                         l3146 7588  
                                       l3162 75B8                                         l4042 7F0E  
                                       l3180 73C0                                         l3148 7590  
                                       l4060 7F42                                         l4036 7F02  
                                       l4028 7EE4                                         l3182 73C4  
                                       l3166 75C4                                         l3158 75AE  
                                       l3280 7758                                         l3176 73BA  
                                       l3192 73DC                                         l4056 7F32  
                                       l3188 73D4                                         l3268 732E  
                                       l3702 72EC                                         l3298 7440  
                                       l3802 7C26                                         l3820 7CA4  
                                       l3732 7B34                                         l3830 7CBA  
                                       l3910 7DEC                                         l3814 7C86  
                                       l3806 7C30                       ??_verificar_num_contas 0020  
                                       ?_aux 0001                                         l3904 7DE0  
                                       l3816 7C8A                                         l3920 7E0E  
                                       l3736 7B46                                         l3932 7E2C  
                                       l3916 7E04                                         l3852 7D10  
                                       l3844 7CFE                                         l3764 7B92  
                                       l3756 7B76                                         l3838 7CEE  
                                       l3934 7E30                                         l3784 7BF2  
                                       l3768 7B9E                                         l3698 72E2  
                                       l3858 7D24                                         l3794 7C10  
                                       l3778 7BD8                                         l3938 7E3E  
                                       l3892 7DA6                                         l3884 7D8A  
                                       l3868 7D5C                                         l3796 7C14  
                                       l3878 7D86                                         l3898 7DBA  
                                       _BRGH 007D62                                         _CREN 007D5C  
                                       _FERR 007D5A                                         _LATB 000F8A  
                                       _LATD 000F8C                                         u3301 7426  
                                       u3075 740E                                         u3076 7410  
                                       _PIE1 000F9D                                         u4240 7CE0  
                                       _RBIE 007F93                                         _RBIF 007F90  
                                       _RCIE 007CED                                         _RCIF 007CF5  
                                       u4657 735C                                         _OERR 007D59  
                                       _SPEN 007D5F                                         _TRMT 007D61  
                                       _TXIE 007CEC                                         _TXEN 007D65  
                                       _SYNC 007D64                                 __CFG_PWRT$ON 000000  
                                       _main 7ABE                                         fsr1h 000FE2  
                                       fsr2h 000FDA                                         indf1 000FE7  
                                       fsr1l 000FE1                                         indf2 000FDF  
                                       fsr2l 000FD9                                         prodh 000FF4  
                                       prodl 000FF3                                         start 1018  
                              __CFG_IESO$OFF 000000                                __CFG_MCLRE$ON 000000  
                               ___param_bank 000010                                        ??_aux 0015  
                  i2_enviar_caractere_serial 722E                                __CFG_PLLDIV$1 000000  
                                      ?_main 0001                              __end_of___awdiv 75CE  
                            __end_of___lbdiv 73E0                                        _EEADR 000FA9  
                                      _BRG16 007DC3                                        _CMCON 000FB4  
                                      _T0CON 000FD5                              ___awdiv@divisor 0026  
                                      _T1CON 000FCD                       ??_enviar_string_serial 0020  
                                      i2l210 797C                                        i2l212 7984  
                                      i2l230 79CE                                        i2l214 798C  
                                      i2l224 79B4                                        i2l216 7996  
                                      i2l226 79BC                                        i2l244 7A58  
                                      i2l260 7AAC                                        i2l228 79C4  
                                      i2l180 78A8                                        i2l181 7896  
                                      i2l430 764C                                        i2l254 7A84  
                                      i2l247 7A52                                        i2l184 794A  
                                      i2l433 7664                                        i2l442 76C0  
                                      i2l259 7A9E                                        i2l604 7234  
                                      i2l436 769E                                        i2l439 76B8  
                            ___awdiv@counter 00D6                                        _RCREG 000FAE  
                                      _TMR0H 000FD7                                        _TMR1H 000FCF  
                                      _TMR0L 000FD6                                        _TMR1L 000FCE  
                                      _SPBRG 000FAF                                        _PORTB 000F81  
                                      _PORTD 000F83                                __CFG_USBDIV$1 000000  
                                      _TRISB 000F93                                        _TRISC 000F94  
                                      _TRISD 000F95                                        _TXCKP 007DC4  
                                      _TXREG 000FAD                                __CFG_WRT0$OFF 000000  
                              __CFG_WRT1$OFF 000000                                __CFG_WRT2$OFF 000000  
                              __CFG_WRT3$OFF 000000                               __CFG_EBTR0$OFF 000000  
                             __CFG_FCMEN$OFF 000000                               __CFG_EBTR1$OFF 000000  
                             __CFG_EBTR2$OFF 000000                               __CFG_EBTR3$OFF 000000  
                              __CFG_WRTB$OFF 000000                                __CFG_WRTC$OFF 000000  
                              __CFG_WRTD$OFF 000000                               Read_b_eep@badd 001E  
                             __CFG_EBTRB$OFF 000000                       Write_b_eep@GIE_BIT_VAL 0021  
                                      _senha 011C                                        main@j 0113  
                             __pbitbssCOMRAM 0210                                        tablat 000FF5  
                           __end_ofi2___wmul 72DE                         _num_interrupt_timer1 0039  
                                      plusw1 000FE3                                        plusw2 000FDB  
                                      status 000FD8                              ___lbdiv@divisor 001E  
                            ___lbdiv@counter 0020                           __size_ofi2___awdiv 0078  
                         __size_ofi2___lbdiv 0034                              __initialization 75CE  
                               __end_of_main 7F88                       ?_eeprom_config_inicial 0001  
                                 _Read_b_eep 7254                             __end_of_Busy_eep 722E  
                    ascii_para_numero@numero 0021                                       ??_main 00E3  
                              __activetblptr 000002                              __CFG_CCP2MX$OFF 000000  
                                     _ADCON1 000FC1                                       _EEDATA 000FA8  
                                     _EECON2 000FA7                             ___awdiv@dividend 0024  
                        i2_numero_para_ascii 7646                                       i2l2300 7518  
                                     i2l2310 7536                                       i2l2302 751C  
                                     i2l2314 7540                                       i2l2340 73A0  
                                     i2l2332 738C                                       i2l2318 754C  
                                     i2l2334 7390                                       i2l2360 77FC  
                                     i2l2352 77EC                                       i2l2328 7386  
                                     i2l2344 73A8                                       i2l2370 7810  
                                     i2l2362 7800                                       i2l2354 77F0  
                                     i2l2602 7916                                       i2l2380 7824  
                                     i2l2372 7814                                       i2l2364 7804  
                                     i2l2356 77F4                                       i2l2292 7500  
                                     i2l2612 7956                                       i2l2382 7828  
                                     i2l2374 7818                                       i2l2366 7808  
                                     i2l2358 77F8                                       i2l2286 74F0  
                                     i2l2376 781C                                       i2l2368 780C  
                                     i2l2704 7A60                                       i2l2712 7A6C  
                                     i2l2378 7820                                       i2l2386 782E  
                                     i2l2298 7510                                       i2l2388 7870  
                                     i2l2652 79D0                                       i2l2636 7998  
                                     i2l2726 7AAA                                       i2l2670 7A06  
                                     i2l2638 79A0                                       i2l2582 78E4  
                                     i2l2680 7A1E                                       i2l2592 7906  
                                     i2l2682 7A28                                       i2l2674 7A10  
                                     i2l2594 790A                                       i2l2586 78F2  
                                     i2l2684 7A30                                       i2l2596 7910  
                                     i2l2588 78F6                                       i2l2694 7A48  
                                     i2l2686 7A36                                       _INTCON 000FF2  
                                     _OSCCON 000FD3                                       _TMR0IE 007F95  
                                     _TMR0IF 007F92                                       _TMR1IE 007CE8  
                                     _TMR1IF 007CF0                                       _TMR1ON 007E68  
                             __CFG_VREGEN$ON 000000                             __end_of_delay_ms 7378  
                             __CFG_XINST$OFF 000000                            _teclado_matricial 77DC  
                          _ascii_para_numero 7278                     i2numero_para_ascii@temp1 0013  
                   i2numero_para_ascii@temp2 0011                                       ___wmul 7304  
                                  ??___awdiv 0028                           ?_teclado_matricial 0001  
                                  ??___lbdiv 001F                               __CFG_STVREN$ON 000000  
                         ?_ascii_para_numero 001E                         ?i2_numero_para_ascii 0001  
                                     _enviar 0211                                       clear_0 75D6  
                                     clear_1 75E8                                       clear_2 75F6  
                           ___awdiv@quotient 00D8                                       main@EC 0109  
                             _carregar_senha 774C                                       main@EI 010F  
                                     main@EN 0103                                       main@EP 0106  
  enviar_caractere_serial@caractere_a_enviar 001E  i2enviar_caractere_serial@caractere_a_enviar 0001  
                                     main@ES 010C                                       main@OK 0100  
                             i2___awdiv@sign 000C                          ??_teclado_matricial 0002  
                        ??_ascii_para_numero 0020                     ?_enviar_caractere_serial 0001  
                               __pdataCOMRAM 0029                            __end_ofi2___awdiv 7556  
                    dia_da_semana@tabela_mes 00D6                            __end_ofi2___lbdiv 73AC  
                                     tblptrh 000FF7                                       tblptrl 000FF6  
                                     tblptru 000FF8                            _configurar_serial 7298  
                        carregar_senha@conta 0026                          carregar_senha@senha 0020  
                           ___lbdiv@dividend 001F                           ?_configurar_serial 0001  
                                 __accesstop 0060                      __end_of__initialization 763C  
                            __CFG_PBADEN$OFF 000000                    __end_of_teclado_matricial 7874  
                              ___rparam_used 000001                    __end_of_ascii_para_numero 7298  
                        ??_configurar_serial 001E                               __pcstackCOMRAM 0001  
                               __pidataBANK0 7266                        ??i2_numero_para_ascii 000F  
                                ?_Read_b_eep 001E                       __end_of_carregar_senha 77C4  
                                 __end_ofPL2 7FA6                                   __end_ofPL4 7FD4  
                                 __end_ofPL6 77DC                                   __end_ofPL8 7FE6  
                           ___lbdiv@quotient 0021                                    ?i2___wmul 0001  
                  __end_of_configurar_serial 72B8           __size_ofi2_enviar_caractere_serial 000C  
                                 __pbssBANK0 0060                                    ?_Busy_eep 0001  
                                 _data_atual 003B                       eeprom_config_inicial@i 0022  
                                    ?___wmul 001E                              ?_carregar_senha 0020  
                              ??_Write_b_eep 0021                                      _FLAGS_1 00C2  
                                    _FLAGS_2 0036                                   ??i2___wmul 0005  
                                    _INTCON2 000FF1                                    ?_delay_ms 001E  
                        __size_of_Read_b_eep 0012                       __size_of_dia_da_semana 0060  
                                 ??_Busy_eep 001E                __size_of_verificar_num_contas 0026  
                         dia_da_semana@F5261 0029                   __size_of_teclado_matricial 0098  
                 __size_of_ascii_para_numero 0020                      ??_eeprom_config_inicial 0022  
                                    __Hparam 0000                                      __Lparam 0000  
                                    ___awdiv 7556                                      ___lbdiv 73AC  
              main@ultimo_caractere_recebido 0112                              __size_of___wmul 0026  
                                    __pcinit 75CE                                      __ramtop 0800  
                                    __ptext0 7ABE                                      __ptext1 732A  
                                    __ptext2 76C6                                      __ptext3 7304  
                                    __ptext4 7556                                      __ptext5 72DE  
                                    __ptext6 723A                                      __ptext7 7474  
                                    __ptext8 73E0                                      __ptext9 7228  
                               __size_of_aux 6AB6                   __size_of_configurar_serial 0020  
                                    _receber 0213          enviar_string_serial@string_a_enviar 001E  
              __size_of_enviar_string_serial 0016                                   ??_delay_ms 0020  
                        __end_of_Write_b_eep 7414                               __pintcode_body 7874  
                       end_of_initialization 763C                                __Lmediumconst 0000  
                                    int_func 7874                          i2___wmul@multiplier 0001  
                                 _nova_senha 00B0                                      postdec1 000FE5  
                                    postinc0 000FEE                                      postinc1 000FE6  
                                    postinc2 000FDE                            _numero_para_ascii 76C6  
                              _dia_da_semana 7414                           ?_numero_para_ascii 0001  
                                  _PORTAbits 000F80                                    _PORTBbits 000F81  
                                  _PORTCbits 000F82                                    _PORTDbits 000F83  
          _qtd_vezes_mesma_tecla_pressionada 00C3                        teclado_matricial@temp 0003  
                        ??_numero_para_ascii 0028                                    i2___awdiv 74DE  
                                  i2___lbdiv 7378             __size_of_enviar_caractere_serial 000C  
                                 main@funcao 0119                           i2___awdiv@dividend 0007  
                 teclado_matricial@caractere 0004                    __end_of_numero_para_ascii 774C  
                               ??_Read_b_eep 0020                               ?_dia_da_semana 0022  
                      verificar_num_contas@i 0021                               __end_of___wmul 732A  
                              __pidataCOMRAM 7247                                  _Write_b_eep 73E0  
                           i2___wmul@product 0005                                  __end_ofPL10 7304  
                                __end_ofPL12 7FF4                                  __end_ofPL14 74DE  
                                __end_ofPL16 8000                          start_initialization 75CE  
                         i2___awdiv@quotient 000D                            __size_ofi2___wmul 0026  
                                __end_of_aux 7ABE                                   ?i2___awdiv 0007  
                                 ?i2___lbdiv 0001              _qtd_caracteres_recebidos_serial 003A  
                         __end_of_Read_b_eep 7266                  __end_ofi2_numero_para_ascii 76C6  
                         i2___lbdiv@dividend 0002                            __size_of_Busy_eep 0006  
                           ??_carregar_senha 0022                     main@conta_a_ser_alterada 0115  
                                   ??___wmul 0022                                  __pdataBANK0 00C4  
                           __CFG_LPT1OSC$OFF 000000                           _caractere_recebido 0038  
                     _modo_bluetooth_teclado 0212                                  __pbssBIGRAM 011C  
                                __pbssCOMRAM 0036                                __pcstackBANK0 00D6  
                              __pcstackBANK1 0100                           i2___lbdiv@quotient 0004  
                    numero_para_ascii@numero 00DC                            __size_of_delay_ms 0028  
             __size_of_eeprom_config_inicial 005C                __end_of_eeprom_config_inicial 74D0  
                 __size_of_numero_para_ascii 0086                              ??_dia_da_semana 0024  
                                  __pintcode 1008                                     ?___awdiv 0024  
                                   ?___lbdiv 001E                 __end_of_verificar_num_contas 7350  
                ascii_para_numero@caractere1 001F                  ascii_para_numero@caractere2 001E  
                ascii_para_numero@caractere3 0020                                  ??i2___awdiv 000B  
                                ??i2___lbdiv 0002                   ?i2_enviar_caractere_serial 0001  
                    _enviar_caractere_serial 723A                               ___wmul@product 0022  
                                   _LATDbits 000F8C                 __end_of_enviar_string_serial 72F4  
                                   _RCONbits 000FD0                                    main@F5450 00CA  
                                  main@F5452 00CD                                    main@F5445 00C4  
                                  main@F5454 00D0                                    main@F5456 00D3  
                                  main@F5448 00C7                                     _PORTB_SR 0037  
                                  aux@coluna 001C                            ___wmul@multiplier 001E  
                                   i2___wmul 72B8                              Write_b_eep@badd 001E  
                            Write_b_eep@bdat 0020                                    main@conta 0118  
                                  main@etapa 0117                                    main@ordem 011B  
                          i2___awdiv@divisor 0009                            i2___awdiv@counter 000B  
                configurar_serial@valor_baud 001E                                 delay_ms@temp 0021  
                                  copy_data0 7610                                    copy_data1 7630  
                                   _Busy_eep 7228            __end_ofi2_enviar_caractere_serial 723A  
                                 _EECON1bits 000FA6                                     __Hrparam 0000  
                          i2___lbdiv@divisor 0001                            i2___lbdiv@counter 0003  
                                   __Lrparam 0000                             __size_of___awdiv 0078  
                           __size_of___lbdiv 0034                        i2___wmul@multiplicand 0003  
                     numero_para_ascii@temp1 00DD                       numero_para_ascii@temp2 00DA  
                               ?_Write_b_eep 001E                                     _debounce 0210  
                                   _delay_ms 7350                                     __ptext10 7414  
                                   __ptext11 73AC                                     __ptext20 7378  
                                   __ptext12 7350                                     __ptext21 74DE  
                                   __ptext13 7298                                     __ptext22 722E  
                                   __ptext14 774C                                     __ptext23 77DC  
                                   __ptext15 7254                                     __ptext16 7278  
                                   __ptext18 7646                                     __ptext19 72B8  
                  ??_enviar_caractere_serial 001E                         _verificar_num_contas 732A  
                           dia_da_semana@dia 00E2                             dia_da_semana@ano 0023  
                           dia_da_semana@mes 0022                                __size_of_main 04CA  
                   enviar_string_serial@cont 0020                                     _ptr_data 00C0  
                                   aux@linha 001D                                     main@cont 011A  
                      __CFG_CPUDIV$OSC4_PLL6 000000                                   _INTCONbits 000FF2  
                       _enviar_string_serial 72DE                          delay_ms@delay_total 001E  
                                   intlevel2 0000                        ?_verificar_num_contas 0001  
                               _qtd_max_dias 0035              __end_of_enviar_caractere_serial 7246  
                              _buffer_serial 0060                 __size_ofi2_numero_para_ascii 0080  
                            carregar_senha@i 0027                        ?_enviar_string_serial 001E  
                    teclado_matricial@coluna 0002               verificar_num_contas@qtd_contas 0020  
                ??i2_enviar_caractere_serial 0001                       teclado_matricial@linha 0001  
