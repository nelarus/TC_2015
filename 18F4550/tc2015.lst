

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 08 17:37:54 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	pa_nodes,global,class=CODE,delta=1
    66  0000                     tblptru	equ	0xFF8
    67                           tblptrh	equ	0xFF7
    68                           tblptrl	equ	0xFF6
    69                           tablat	equ	0xFF5
    70                           prodh	equ	0xFF4
    71                           prodl	equ	0xFF3
    72                           intcon	equ	0xFF2
    73                           intcon2	equ	0xFF1
    74                           wreg	equ	0xFE8
    75                           indf1	equ	0xFE7
    76                           postinc1	equ	0xFE6
    77                           plusw1	equ	0xFE3
    78                           fsr1h	equ	0xFE2
    79                           fsr1l	equ	0xFE1
    80                           indf2	equ	0xFDF
    81                           postinc2	equ	0xFDE
    82                           postdec2	equ	0xFDD
    83                           plusw2	equ	0xFDB
    84                           fsr2h	equ	0xFDA
    85                           fsr2l	equ	0xFD9
    86                           status	equ	0xFD8
    87                           
    88                           	psect	idataCOMRAM
    89  001004                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _qtd_max_dias
    93  001004  1F                 	db	31
    94                           tblptru	equ	0xFF8
    95                           tblptrh	equ	0xFF7
    96                           tblptrl	equ	0xFF6
    97                           tablat	equ	0xFF5
    98                           prodh	equ	0xFF4
    99                           prodl	equ	0xFF3
   100                           intcon	equ	0xFF2
   101                           intcon2	equ	0xFF1
   102                           wreg	equ	0xFE8
   103                           indf1	equ	0xFE7
   104                           postinc1	equ	0xFE6
   105                           plusw1	equ	0xFE3
   106                           fsr1h	equ	0xFE2
   107                           fsr1l	equ	0xFE1
   108                           indf2	equ	0xFDF
   109                           postinc2	equ	0xFDE
   110                           postdec2	equ	0xFDD
   111                           plusw2	equ	0xFDB
   112                           fsr2h	equ	0xFDA
   113                           fsr2l	equ	0xFD9
   114                           status	equ	0xFD8
   115                           
   116                           	psect	idataBANK0
   117  0062A8                     __pidataBANK0:
   118                           	opt stack 0
   119                           
   120                           ;initializer for dia_da_semana@F5265
   121  0062A8  00                 	db	0
   122  0062A9  03                 	db	3
   123  0062AA  03                 	db	3
   124  0062AB  06                 	db	6
   125  0062AC  01                 	db	1
   126  0062AD  04                 	db	4
   127  0062AE  06                 	db	6
   128  0062AF  02                 	db	2
   129  0062B0  05                 	db	5
   130  0062B1  00                 	db	0
   131  0062B2  03                 	db	3
   132  0062B3  05                 	db	5
   133                           tblptru	equ	0xFF8
   134                           tblptrh	equ	0xFF7
   135                           tblptrl	equ	0xFF6
   136                           tablat	equ	0xFF5
   137                           prodh	equ	0xFF4
   138                           prodl	equ	0xFF3
   139                           intcon	equ	0xFF2
   140                           intcon2	equ	0xFF1
   141                           wreg	equ	0xFE8
   142                           indf1	equ	0xFE7
   143                           postinc1	equ	0xFE6
   144                           plusw1	equ	0xFE3
   145                           fsr1h	equ	0xFE2
   146                           fsr1l	equ	0xFE1
   147                           indf2	equ	0xFDF
   148                           postinc2	equ	0xFDE
   149                           postdec2	equ	0xFDD
   150                           plusw2	equ	0xFDB
   151                           fsr2h	equ	0xFDA
   152                           fsr2l	equ	0xFD9
   153                           status	equ	0xFD8
   154                           
   155                           	psect	smallconst
   156  00101C                     __psmallconst:
   157                           	opt stack 0
   158  00101C  00                 	db	0
   159  00101D                     _dpowers:
   160                           	opt stack 0
   161  00101D  0001               	dw	1
   162  00101F  000A               	dw	10
   163  001021  0064               	dw	100
   164  001023  03E8               	dw	1000
   165  001025  2710               	dw	10000
   166  001027                     __end_of_dpowers:
   167                           	opt stack 0
   168  0000                     _ADCON1	set	4033
   169  0000                     _CMCON	set	4020
   170  0000                     _EEADR	set	4009
   171  0000                     _EECON1bits	set	4006
   172  0000                     _EECON2	set	4007
   173  0000                     _EEDATA	set	4008
   174  0000                     _INTCON	set	4082
   175  0000                     _INTCON2	set	4081
   176  0000                     _INTCONbits	set	4082
   177  0000                     _LATA	set	3977
   178  0000                     _LATB	set	3978
   179  0000                     _LATCbits	set	3979
   180  0000                     _LATD	set	3980
   181  0000                     _LATDbits	set	3980
   182  0000                     _LATEbits	set	3981
   183  0000                     _OSCCON	set	4051
   184  0000                     _PIE1	set	3997
   185  0000                     _PORTB	set	3969
   186  0000                     _PORTBbits	set	3969
   187  0000                     _PORTD	set	3971
   188  0000                     _PORTDbits	set	3971
   189  0000                     _PORTE	set	3972
   190  0000                     _PORTEbits	set	3972
   191  0000                     _RCONbits	set	4048
   192  0000                     _RCREG	set	4014
   193  0000                     _SPBRG	set	4015
   194  0000                     _T0CON	set	4053
   195  0000                     _T1CON	set	4045
   196  0000                     _TMR0H	set	4055
   197  0000                     _TMR0L	set	4054
   198  0000                     _TMR1H	set	4047
   199  0000                     _TMR1L	set	4046
   200  0000                     _TRISA	set	3986
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISC	set	3988
   203  0000                     _TRISD	set	3989
   204  0000                     _TRISE	set	3990
   205  0000                     _TXREG	set	4013
   206  0000                     _BRG16	set	32195
   207  0000                     _BRGH	set	32098
   208  0000                     _CREN	set	32092
   209  0000                     _FERR	set	32090
   210  0000                     _OERR	set	32089
   211  0000                     _RBIE	set	32659
   212  0000                     _RBIF	set	32656
   213  0000                     _RCIE	set	31981
   214  0000                     _RCIF	set	31989
   215  0000                     _RX9	set	32094
   216  0000                     _SPEN	set	32095
   217  0000                     _SYNC	set	32100
   218  0000                     _TMR0IE	set	32661
   219  0000                     _TMR0IF	set	32658
   220  0000                     _TMR1IE	set	31976
   221  0000                     _TMR1IF	set	31984
   222  0000                     _TMR1ON	set	32360
   223  0000                     _TRMT	set	32097
   224  0000                     _TX9	set	32102
   225  0000                     _TXCKP	set	32196
   226  0000                     _TXEN	set	32101
   227  0000                     _TXIE	set	31980
   228  0000                     _WR	set	32049
   229  001027                     STR_20:
   230  001027  0A                 	db	10
   231  001028  0A                 	db	10
   232  001029  0A                 	db	10
   233  00102A  25                 	db	37
   234  00102B  30                 	db	48	;'0'
   235  00102C  32                 	db	50	;'2'
   236  00102D  64                 	db	100	;'d'
   237  00102E  3A                 	db	58	;':'
   238  00102F  25                 	db	37
   239  001030  30                 	db	48	;'0'
   240  001031  32                 	db	50	;'2'
   241  001032  64                 	db	100	;'d'
   242  001033  3A                 	db	58	;':'
   243  001034  25                 	db	37
   244  001035  30                 	db	48	;'0'
   245  001036  32                 	db	50	;'2'
   246  001037  64                 	db	100	;'d'
   247  001038  2D                 	db	45
   248  001039  25                 	db	37
   249  00103A  30                 	db	48	;'0'
   250  00103B  32                 	db	50	;'2'
   251  00103C  64                 	db	100	;'d'
   252  00103D  2E                 	db	46
   253  00103E  25                 	db	37
   254  00103F  30                 	db	48	;'0'
   255  001040  32                 	db	50	;'2'
   256  001041  64                 	db	100	;'d'
   257  001042  2E                 	db	46
   258  001043  25                 	db	37
   259  001044  30                 	db	48	;'0'
   260  001045  32                 	db	50	;'2'
   261  001046  64                 	db	100	;'d'
   262  001047  00                 	db	0
   263  001048                     STR_14:
   264  001048  0A                 	db	10
   265  001049  0A                 	db	10
   266  00104A  43                 	db	67	;'C'
   267  00104B  6F                 	db	111	;'o'
   268  00104C  6E                 	db	110	;'n'
   269  00104D  74                 	db	116	;'t'
   270  00104E  61                 	db	97	;'a'
   271  00104F  20                 	db	32
   272  001050  6E                 	db	110	;'n'
   273  001051  61                 	db	97	;'a'
   274  001052  6F                 	db	111	;'o'
   275  001053  20                 	db	32
   276  001054  65                 	db	101	;'e'
   277  001055  78                 	db	120	;'x'
   278  001056  69                 	db	105	;'i'
   279  001057  73                 	db	115	;'s'
   280  001058  74                 	db	116	;'t'
   281  001059  65                 	db	101	;'e'
   282  00105A  6E                 	db	110	;'n'
   283  00105B  74                 	db	116	;'t'
   284  00105C  65                 	db	101	;'e'
   285  00105D  00                 	db	0
   286  00105E                     STR_13:
   287  00105E  0A                 	db	10
   288  00105F  0A                 	db	10
   289  001060  45                 	db	69	;'E'
   290  001061  72                 	db	114	;'r'
   291  001062  72                 	db	114	;'r'
   292  001063  6F                 	db	111	;'o'
   293  001064  20                 	db	32
   294  001065  64                 	db	100	;'d'
   295  001066  65                 	db	101	;'e'
   296  001067  20                 	db	32
   297  001068  70                 	db	112	;'p'
   298  001069  72                 	db	114	;'r'
   299  00106A  6F                 	db	111	;'o'
   300  00106B  74                 	db	116	;'t'
   301  00106C  6F                 	db	111	;'o'
   302  00106D  63                 	db	99	;'c'
   303  00106E  6F                 	db	111	;'o'
   304  00106F  6C                 	db	108	;'l'
   305  001070  6F                 	db	111	;'o'
   306  001071  00                 	db	0
   307  001072                     STR_11:
   308  001072  0A                 	db	10
   309  001073  0A                 	db	10
   310  001074  45                 	db	69	;'E'
   311  001075  72                 	db	114	;'r'
   312  001076  72                 	db	114	;'r'
   313  001077  6F                 	db	111	;'o'
   314  001078  20                 	db	32
   315  001079  64                 	db	100	;'d'
   316  00107A  65                 	db	101	;'e'
   317  00107B  20                 	db	32
   318  00107C  61                 	db	97	;'a'
   319  00107D  62                 	db	98	;'b'
   320  00107E  65                 	db	101	;'e'
   321  00107F  72                 	db	114	;'r'
   322  001080  74                 	db	116	;'t'
   323  001081  75                 	db	117	;'u'
   324  001082  72                 	db	114	;'r'
   325  001083  61                 	db	97	;'a'
   326  001084  00                 	db	0
   327  001085                     STR_15:
   328  001085  0A                 	db	10
   329  001086  0A                 	db	10
   330  001087  53                 	db	83	;'S'
   331  001088  65                 	db	101	;'e'
   332  001089  6E                 	db	110	;'n'
   333  00108A  68                 	db	104	;'h'
   334  00108B  61                 	db	97	;'a'
   335  00108C  20                 	db	32
   336  00108D  69                 	db	105	;'i'
   337  00108E  6E                 	db	110	;'n'
   338  00108F  63                 	db	99	;'c'
   339  001090  6F                 	db	111	;'o'
   340  001091  72                 	db	114	;'r'
   341  001092  72                 	db	114	;'r'
   342  001093  65                 	db	101	;'e'
   343  001094  74                 	db	116	;'t'
   344  001095  61                 	db	97	;'a'
   345  001096  00                 	db	0
   346  001097                     STR_9:
   347  001097  0A                 	db	10
   348  001098  0A                 	db	10
   349  001099  44                 	db	68	;'D'
   350  00109A  65                 	db	101	;'e'
   351  00109B  73                 	db	115	;'s'
   352  00109C  74                 	db	116	;'t'
   353  00109D  72                 	db	114	;'r'
   354  00109E  61                 	db	97	;'a'
   355  00109F  76                 	db	118	;'v'
   356  0010A0  61                 	db	97	;'a'
   357  0010A1  6E                 	db	110	;'n'
   358  0010A2  64                 	db	100	;'d'
   359  0010A3  6F                 	db	111	;'o'
   360  0010A4  2E                 	db	46
   361  0010A5  2E                 	db	46
   362  0010A6  2E                 	db	46
   363  0010A7  00                 	db	0
   364  0010A8                     STR_12:
   365  0010A8  0A                 	db	10
   366  0010A9  0A                 	db	10
   367  0010AA  50                 	db	80	;'P'
   368  0010AB  6F                 	db	111	;'o'
   369  0010AC  72                 	db	114	;'r'
   370  0010AD  74                 	db	116	;'t'
   371  0010AE  61                 	db	97	;'a'
   372  0010AF  20                 	db	32
   373  0010B0  61                 	db	97	;'a'
   374  0010B1  62                 	db	98	;'b'
   375  0010B2  65                 	db	101	;'e'
   376  0010B3  72                 	db	114	;'r'
   377  0010B4  74                 	db	116	;'t'
   378  0010B5  61                 	db	97	;'a'
   379  0010B6  00                 	db	0
   380  0010B7                     STR_21:
   381  0010B7  28                 	db	40
   382  0010B8  6E                 	db	110	;'n'
   383  0010B9  75                 	db	117	;'u'
   384  0010BA  6C                 	db	108	;'l'
   385  0010BB  6C                 	db	108	;'l'
   386  0010BC  29                 	db	41
   387  0010BD  00                 	db	0
   388  0010BE                     STR_6:
   389  0010BE  0A                 	db	10
   390  0010BF  0A                 	db	10
   391  0010C0  25                 	db	37
   392  0010C1  73                 	db	115	;'s'
   393  0010C2  00                 	db	0
   394  0010C3                     STR_5:
   395  0010C3  41                 	db	65	;'A'
   396  0010C4  54                 	db	84	;'T'
   397  0010C5  2B                 	db	43
   398  0010C6  00                 	db	0
   399  0010C7                     STR_7:
   400  0010C7  2A                 	db	42
   401  0010C8  25                 	db	37
   402  0010C9  63                 	db	99	;'c'
   403  0010CA  00                 	db	0
   404  0010CB                     STR_18:
   405  0010CB  53                 	db	83	;'S'
   406  0010CC  45                 	db	69	;'E'
   407  0010CD  00                 	db	0
   408  0010CE                     STR_16:
   409  0010CE  0A                 	db	10
   410  0010CF  49                 	db	73	;'I'
   411  0010D0  00                 	db	0
   412  0010D1                     STR_17:
   413  0010D1  4F                 	db	79	;'O'
   414  0010D2  4B                 	db	75	;'K'
   415  0010D3  00                 	db	0
   416  0010D4                     STR_4:
   417  0010D4  41                 	db	65	;'A'
   418  0010D5  54                 	db	84	;'T'
   419  0010D6  00                 	db	0
   420  0010D7                     STR_3:
   421  0010D7  25                 	db	37
   422  0010D8  64                 	db	100	;'d'
   423  0010D9  00                 	db	0
   424  0010DA                     STR_19:
   425  0010DA  20                 	db	32
   426  0010DB  00                 	db	0
   427  0010DC                     STR_1:
   428  0010DC  2A                 	db	42
   429  0010DD  00                 	db	0
   430  0000                     
   431                           ; #config settings
   432  0010DE  00                 	db	0	; dummy byte at the end
   433  0000                     tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           prodh	equ	0xFF4
   438                           prodl	equ	0xFF3
   439                           intcon	equ	0xFF2
   440                           intcon2	equ	0xFF1
   441                           wreg	equ	0xFE8
   442                           indf1	equ	0xFE7
   443                           postinc1	equ	0xFE6
   444                           plusw1	equ	0xFE3
   445                           fsr1h	equ	0xFE2
   446                           fsr1l	equ	0xFE1
   447                           indf2	equ	0xFDF
   448                           postinc2	equ	0xFDE
   449                           postdec2	equ	0xFDD
   450                           plusw2	equ	0xFDB
   451                           fsr2h	equ	0xFDA
   452                           fsr2l	equ	0xFD9
   453                           status	equ	0xFD8
   454                           
   455                           	psect	cinit
   456  0068DC                     __pcinit:
   457                           	opt stack 0
   458  0068DC                     start_initialization:
   459                           	opt stack 0
   460  0068DC                     __initialization:
   461                           	opt stack 0
   462                           
   463                           ; Clear objects allocated to BIGRAM (272 bytes)
   464  0068DC  EE01  F050         	lfsr	0,__pbssBIGRAM
   465  0068E0  EE11 F010          	lfsr	1,272
   466  0068E4                     clear_0:
   467  0068E4  6AEE               	clrf	postinc0,c
   468  0068E6  50E5               	movf	postdec1,w,c
   469  0068E8  50E1               	movf	fsr1l,w,c
   470  0068EA  E1FC               	bnz	clear_0
   471  0068EC  50E2               	movf	fsr1h,w,c
   472  0068EE  E1FA               	bnz	clear_0
   473                           
   474                           ; Clear objects allocated to BANK1 (80 bytes)
   475  0068F0  EE01  F000         	lfsr	0,__pbssBANK1
   476  0068F4  0E50               	movlw	80
   477  0068F6                     clear_1:
   478  0068F6  6AEE               	clrf	postinc0,c
   479  0068F8  06E8               	decf	wreg,f,c
   480  0068FA  E1FD               	bnz	clear_1
   481                           
   482                           ; Clear objects allocated to BANK0 (61 bytes)
   483  0068FC  EE00  F0AF         	lfsr	0,__pbssBANK0
   484  006900  0E3D               	movlw	61
   485  006902                     clear_2:
   486  006902  6AEE               	clrf	postinc0,c
   487  006904  06E8               	decf	wreg,f,c
   488  006906  E1FD               	bnz	clear_2
   489                           
   490                           ; Clear objects allocated to COMRAM (18 bytes)
   491  006908  EE00  F02D         	lfsr	0,__pbssCOMRAM
   492  00690C  0E12               	movlw	18
   493  00690E                     clear_3:
   494  00690E  6AEE               	clrf	postinc0,c
   495  006910  06E8               	decf	wreg,f,c
   496  006912  E1FD               	bnz	clear_3
   497                           
   498                           ; Initialize objects allocated to BANK0 (12 bytes)
   499                           ; load TBLPTR registers with __pidataBANK0
   500  006914  0EA8               	movlw	low __pidataBANK0
   501  006916  6EF6               	movwf	tblptrl,c
   502  006918  0E62               	movlw	high __pidataBANK0
   503  00691A  6EF7               	movwf	tblptrh,c
   504  00691C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   505  00691E  6EF8               	movwf	tblptru,c
   506  006920  EE00  F0EC         	lfsr	0,__pdataBANK0
   507  006924  EE10 F00C          	lfsr	1,12
   508  006928                     copy_data0:
   509  006928  0009               	tblrd		*+
   510  00692A  CFF5 FFEE          	movff	tablat,postinc0
   511  00692E  50E5               	movf	postdec1,w,c
   512  006930  50E1               	movf	fsr1l,w,c
   513  006932  E1FA               	bnz	copy_data0
   514                           
   515                           ; Initialize objects allocated to COMRAM (1 bytes)
   516                           ; load TBLPTR registers with __pidataCOMRAM
   517  006934  0E04               	movlw	low __pidataCOMRAM
   518  006936  6EF6               	movwf	tblptrl,c
   519  006938  0E10               	movlw	high __pidataCOMRAM
   520  00693A  6EF7               	movwf	tblptrh,c
   521  00693C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   522  00693E  6EF8               	movwf	tblptru,c
   523  006940  0009               	tblrd		*+	;fetch initializer
   524  006942  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   525  006946                     end_of_initialization:
   526                           	opt stack 0
   527  006946                     __end_of__initialization:
   528                           	opt stack 0
   529  006946  0E00               	movlw	low (__Lmediumconst shr (0+16))
   530  006948  6EF8               	movwf	tblptru,c
   531  00694A  0100               	movlb	0
   532  00694C  EFD5  F03A         	goto	_main	;jump to C main() function
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           prodh	equ	0xFF4
   538                           prodl	equ	0xFF3
   539                           intcon	equ	0xFF2
   540                           intcon2	equ	0xFF1
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           indf1	equ	0xFE7
   544                           postinc1	equ	0xFE6
   545                           postdec1	equ	0xFE5
   546                           plusw1	equ	0xFE3
   547                           fsr1h	equ	0xFE2
   548                           fsr1l	equ	0xFE1
   549                           indf2	equ	0xFDF
   550                           postinc2	equ	0xFDE
   551                           postdec2	equ	0xFDD
   552                           plusw2	equ	0xFDB
   553                           fsr2h	equ	0xFDA
   554                           fsr2l	equ	0xFD9
   555                           status	equ	0xFD8
   556                           
   557                           	psect	bssCOMRAM
   558  00002D                     __pbssCOMRAM:
   559                           	opt stack 0
   560  00002D                     _FLAGS_2:
   561                           	opt stack 0
   562  00002D                     	ds	1
   563  00002E                     _FLAGS_3:
   564                           	opt stack 0
   565  00002E                     	ds	1
   566  00002F                     _Linha_3:
   567                           	opt stack 0
   568  00002F                     	ds	1
   569  000030                     _Linha_4:
   570                           	opt stack 0
   571  000030                     	ds	1
   572  000031                     _PORTB_SR:
   573                           	opt stack 0
   574  000031                     	ds	1
   575  000032                     _lcd_type:
   576                           	opt stack 0
   577  000032                     	ds	1
   578  000033                     _linha_lcd:
   579                           	opt stack 0
   580  000033                     	ds	1
   581  000034                     _num_interrupt_timer1:
   582                           	opt stack 0
   583  000034                     	ds	1
   584  000035                     _qtd_caracteres_recebidos_serial:
   585                           	opt stack 0
   586  000035                     	ds	1
   587  000036                     _qtd_caracteres_recebidos_teclado:
   588                           	opt stack 0
   589  000036                     	ds	1
   590  000037                     _qtd_max_colunas_lcd:
   591                           	opt stack 0
   592  000037                     	ds	1
   593  000038                     _data_atual:
   594                           	opt stack 0
   595  000038                     	ds	7
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           prodh	equ	0xFF4
   601                           prodl	equ	0xFF3
   602                           intcon	equ	0xFF2
   603                           intcon2	equ	0xFF1
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           indf1	equ	0xFE7
   607                           postinc1	equ	0xFE6
   608                           postdec1	equ	0xFE5
   609                           plusw1	equ	0xFE3
   610                           fsr1h	equ	0xFE2
   611                           fsr1l	equ	0xFE1
   612                           indf2	equ	0xFDF
   613                           postinc2	equ	0xFDE
   614                           postdec2	equ	0xFDD
   615                           plusw2	equ	0xFDB
   616                           fsr2h	equ	0xFDA
   617                           fsr2l	equ	0xFD9
   618                           status	equ	0xFD8
   619                           
   620                           	psect	dataCOMRAM
   621  00003F                     __pdataCOMRAM:
   622                           	opt stack 0
   623  00003F                     _qtd_max_dias:
   624                           	opt stack 0
   625  00003F                     	ds	1
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           prodh	equ	0xFF4
   631                           prodl	equ	0xFF3
   632                           intcon	equ	0xFF2
   633                           intcon2	equ	0xFF1
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           indf1	equ	0xFE7
   637                           postinc1	equ	0xFE6
   638                           postdec1	equ	0xFE5
   639                           plusw1	equ	0xFE3
   640                           fsr1h	equ	0xFE2
   641                           fsr1l	equ	0xFE1
   642                           indf2	equ	0xFDF
   643                           postinc2	equ	0xFDE
   644                           postdec2	equ	0xFDD
   645                           plusw2	equ	0xFDB
   646                           fsr2h	equ	0xFDA
   647                           fsr2l	equ	0xFD9
   648                           status	equ	0xFD8
   649                           
   650                           	psect	bssBANK0
   651  0000AF                     __pbssBANK0:
   652                           	opt stack 0
   653  0000AF                     _ptr_data:
   654                           	opt stack 0
   655  0000AF                     	ds	2
   656  0000B1                     _FLAGS_1:
   657                           	opt stack 0
   658  0000B1                     	ds	1
   659  0000B2                     _caractere_recebido:
   660                           	opt stack 0
   661  0000B2                     	ds	1
   662  0000B3                     _qtd_vezes_mesma_tecla_pressionada:
   663                           	opt stack 0
   664  0000B3                     	ds	1
   665  0000B4                     _buffer_teclado_matricial:
   666                           	opt stack 0
   667  0000B4                     	ds	40
   668  0000DC                     _nova_senha:
   669                           	opt stack 0
   670  0000DC                     	ds	16
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           prodh	equ	0xFF4
   676                           prodl	equ	0xFF3
   677                           intcon	equ	0xFF2
   678                           intcon2	equ	0xFF1
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           indf1	equ	0xFE7
   682                           postinc1	equ	0xFE6
   683                           postdec1	equ	0xFE5
   684                           plusw1	equ	0xFE3
   685                           fsr1h	equ	0xFE2
   686                           fsr1l	equ	0xFE1
   687                           indf2	equ	0xFDF
   688                           postinc2	equ	0xFDE
   689                           postdec2	equ	0xFDD
   690                           plusw2	equ	0xFDB
   691                           fsr2h	equ	0xFDA
   692                           fsr2l	equ	0xFD9
   693                           status	equ	0xFD8
   694                           
   695                           	psect	dataBANK0
   696  0000EC                     __pdataBANK0:
   697                           	opt stack 0
   698  0000EC                     dia_da_semana@F5265:
   699                           	opt stack 0
   700  0000EC                     	ds	12
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           prodh	equ	0xFF4
   706                           prodl	equ	0xFF3
   707                           intcon	equ	0xFF2
   708                           intcon2	equ	0xFF1
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           indf1	equ	0xFE7
   712                           postinc1	equ	0xFE6
   713                           postdec1	equ	0xFE5
   714                           plusw1	equ	0xFE3
   715                           fsr1h	equ	0xFE2
   716                           fsr1l	equ	0xFE1
   717                           indf2	equ	0xFDF
   718                           postinc2	equ	0xFDE
   719                           postdec2	equ	0xFDD
   720                           plusw2	equ	0xFDB
   721                           fsr2h	equ	0xFDA
   722                           fsr2l	equ	0xFD9
   723                           status	equ	0xFD8
   724                           
   725                           	psect	bssBANK1
   726  000100                     __pbssBANK1:
   727                           	opt stack 0
   728  000100                     _buffer_serial:
   729                           	opt stack 0
   730  000100                     	ds	80
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           prodh	equ	0xFF4
   736                           prodl	equ	0xFF3
   737                           intcon	equ	0xFF2
   738                           intcon2	equ	0xFF1
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           indf1	equ	0xFE7
   742                           postinc1	equ	0xFE6
   743                           postdec1	equ	0xFE5
   744                           plusw1	equ	0xFE3
   745                           fsr1h	equ	0xFE2
   746                           fsr1l	equ	0xFE1
   747                           indf2	equ	0xFDF
   748                           postinc2	equ	0xFDE
   749                           postdec2	equ	0xFDD
   750                           plusw2	equ	0xFDB
   751                           fsr2h	equ	0xFDA
   752                           fsr2l	equ	0xFD9
   753                           status	equ	0xFD8
   754                           
   755                           	psect	bssBIGRAM
   756  000150                     __pbssBIGRAM:
   757                           	opt stack 0
   758  000150                     _senha:
   759                           	opt stack 0
   760  000150                     	ds	272
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           prodh	equ	0xFF4
   766                           prodl	equ	0xFF3
   767                           intcon	equ	0xFF2
   768                           intcon2	equ	0xFF1
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           indf1	equ	0xFE7
   772                           postinc1	equ	0xFE6
   773                           postdec1	equ	0xFE5
   774                           plusw1	equ	0xFE3
   775                           fsr1h	equ	0xFE2
   776                           fsr1l	equ	0xFE1
   777                           indf2	equ	0xFDF
   778                           postinc2	equ	0xFDE
   779                           postdec2	equ	0xFDD
   780                           plusw2	equ	0xFDB
   781                           fsr2h	equ	0xFDA
   782                           fsr2l	equ	0xFD9
   783                           status	equ	0xFD8
   784                           
   785                           	psect	cstackBANK0
   786  000060                     __pcstackBANK0:
   787                           	opt stack 0
   788  000060                     ??_isdigit:
   789  000060                     ?___wmul:
   790                           	opt stack 0
   791  000060                     ?___awmod:
   792                           	opt stack 0
   793  000060                     ?___lwdiv:
   794                           	opt stack 0
   795  000060                     ascii_para_numero@caractere2:
   796                           	opt stack 0
   797  000060                     resetar_timer1@valor_l:
   798                           	opt stack 0
   799  000060                     config_serial@baud:
   800                           	opt stack 0
   801  000060                     enviar_caractere_serial@carater_a_enviar:
   802                           	opt stack 0
   803  000060                     lcd_write@c:
   804                           	opt stack 0
   805  000060                     ___lbdiv@divisor:
   806                           	opt stack 0
   807  000060                     zerar_string@string_a_zerar:
   808                           	opt stack 0
   809  000060                     delay_ms@delay_total:
   810                           	opt stack 0
   811  000060                     enviar_string_serial@string_a_enviar:
   812                           	opt stack 0
   813  000060                     Read_b_eep@badd:
   814                           	opt stack 0
   815  000060                     Write_b_eep@badd:
   816                           	opt stack 0
   817  000060                     ___wmul@multiplier:
   818                           	opt stack 0
   819  000060                     ___awmod@dividend:
   820                           	opt stack 0
   821  000060                     ___lwdiv@dividend:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x0
   825  000060                     	ds	1
   826  000061                     ??_lcd_clear:
   827  000061                     ascii_para_numero@caractere1:
   828                           	opt stack 0
   829  000061                     resetar_timer1@valor_h:
   830                           	opt stack 0
   831  000061                     lcd_gotoxy@coluna:
   832                           	opt stack 0
   833  000061                     _isdigit$1524:
   834                           	opt stack 0
   835  000061                     ___lbdiv@dividend:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x1
   839  000061                     	ds	1
   840  000062                     ??_lcd_gotoxy:
   841  000062                     ??_lcd_init:
   842  000062                     ??_delay_ms:
   843  000062                     ascii_para_numero@caractere3:
   844                           	opt stack 0
   845  000062                     verificar_num_contas@qtd_contas:
   846                           	opt stack 0
   847  000062                     Write_b_eep@bdat:
   848                           	opt stack 0
   849  000062                     isdigit@c:
   850                           	opt stack 0
   851  000062                     ___lbdiv@counter:
   852                           	opt stack 0
   853  000062                     carregar_senha@senha_a_carregar:
   854                           	opt stack 0
   855  000062                     ___wmul@multiplicand:
   856                           	opt stack 0
   857  000062                     ___awmod@divisor:
   858                           	opt stack 0
   859  000062                     ___lwdiv@divisor:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x2
   863  000062                     	ds	1
   864  000063                     ascii_para_numero@numero:
   865                           	opt stack 0
   866  000063                     verificar_num_contas@i:
   867                           	opt stack 0
   868  000063                     lcd_init@definir_tipo_lcd:
   869                           	opt stack 0
   870  000063                     lcd_gotoxy@linha:
   871                           	opt stack 0
   872  000063                     Write_b_eep@GIE_BIT_VAL:
   873                           	opt stack 0
   874  000063                     ___lbdiv@quotient:
   875                           	opt stack 0
   876  000063                     delay_ms@temp:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x3
   880  000063                     	ds	1
   881  000064                     ??_carregar_senha:
   882  000064                     eeprom_config_inicial@i:
   883                           	opt stack 0
   884  000064                     limpar_linha@linha:
   885                           	opt stack 0
   886  000064                     lcd_putc@c:
   887                           	opt stack 0
   888  000064                     ___awmod@counter:
   889                           	opt stack 0
   890  000064                     ___lwdiv@counter:
   891                           	opt stack 0
   892  000064                     ___wmul@product:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x4
   896  000064                     	ds	1
   897  000065                     limpar_linha@coluna_atual:
   898                           	opt stack 0
   899  000065                     putch@c:
   900                           	opt stack 0
   901  000065                     ___awmod@sign:
   902                           	opt stack 0
   903  000065                     ___lwdiv@quotient:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x5
   907  000065                     	ds	1
   908  000066                     ?___awdiv:
   909                           	opt stack 0
   910  000066                     ___awdiv@dividend:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x6
   914  000066                     	ds	1
   915  000067                     ?___lwmod:
   916                           	opt stack 0
   917  000067                     ___lwmod@dividend:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x7
   921  000067                     	ds	1
   922  000068                     carregar_senha@i:
   923                           	opt stack 0
   924  000068                     ___awdiv@divisor:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x8
   928  000068                     	ds	1
   929  000069                     carregar_senha@conta:
   930                           	opt stack 0
   931  000069                     ___lwmod@divisor:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x9
   935  000069                     	ds	1
   936  00006A                     ___awdiv@counter:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0xA
   940  00006A                     	ds	1
   941  00006B                     ___awdiv@sign:
   942                           	opt stack 0
   943  00006B                     ___lwmod@counter:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0xB
   947  00006B                     	ds	1
   948  00006C                     ?_printf:
   949                           	opt stack 0
   950  00006C                     dia_da_semana@ano:
   951                           	opt stack 0
   952  00006C                     ___awdiv@quotient:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0xC
   956  00006C                     	ds	2
   957  00006E                     ??_numero_para_ascii:
   958  00006E                     dia_da_semana@mes:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0xE
   962  00006E                     	ds	1
   963  00006F                     dia_da_semana@dia:
   964                           	opt stack 0
   965  00006F                     numero_para_ascii@temp2:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0xF
   969  00006F                     	ds	1
   970  000070                     ??_dia_da_semana:
   971                           
   972                           ; 0 bytes @ 0x10
   973  000070                     	ds	1
   974  000071                     numero_para_ascii@numero:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x11
   978  000071                     	ds	1
   979  000072                     numero_para_ascii@temp1:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x12
   983  000072                     	ds	3
   984  000075                     dia_da_semana@tabela_mes:
   985                           	opt stack 0
   986                           
   987                           ; 12 bytes @ 0x15
   988  000075                     	ds	3
   989  000078                     ??_printf:
   990                           
   991                           ; 0 bytes @ 0x18
   992  000078                     	ds	4
   993  00007C                     printf@prec:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x1C
   997  00007C                     	ds	1
   998  00007D                     printf@cp:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x1D
  1002  00007D                     	ds	2
  1003  00007F                     printf@ap:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x1F
  1007  00007F                     	ds	1
  1008  000080                     printf@val:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x20
  1012  000080                     	ds	1
  1013  000081                     dia_da_semana@seculo:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x21
  1017  000081                     	ds	1
  1018  000082                     printf@len:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x22
  1022  000082                     	ds	2
  1023  000084                     printf@flag:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x24
  1027  000084                     	ds	1
  1028  000085                     printf@f:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x25
  1032  000085                     	ds	1
  1033  000086                     printf@width:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x26
  1037  000086                     	ds	2
  1038  000088                     printf@c:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x28
  1042  000088                     	ds	1
  1043  000089                     ??_main:
  1044                           
  1045                           ; 0 bytes @ 0x29
  1046  000089                     	ds	6
  1047  00008F                     main@endereco_modulo_repasse:
  1048                           	opt stack 0
  1049                           
  1050                           ; 18 bytes @ 0x2F
  1051  00008F                     	ds	18
  1052  0000A1                     main@tentativas:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x41
  1056  0000A1                     	ds	1
  1057  0000A2                     main@tentativas_841:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x42
  1061  0000A2                     	ds	1
  1062  0000A3                     main@contas_cadastradas:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x43
  1066  0000A3                     	ds	2
  1067  0000A5                     main@qtd_total_contas:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x45
  1071  0000A5                     	ds	1
  1072  0000A6                     main@conta_a_ser_alterada:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x46
  1076  0000A6                     	ds	1
  1077  0000A7                     main@i:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x47
  1081  0000A7                     	ds	1
  1082  0000A8                     main@etapa:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x48
  1086  0000A8                     	ds	1
  1087  0000A9                     main@ultimo_caractere_recebido:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x49
  1091  0000A9                     	ds	1
  1092  0000AA                     main@i_840:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x4A
  1096  0000AA                     	ds	1
  1097  0000AB                     main@conta:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x4B
  1101  0000AB                     	ds	1
  1102  0000AC                     main@ordem:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x4C
  1106  0000AC                     	ds	1
  1107  0000AD                     main@funcao:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x4D
  1111  0000AD                     	ds	1
  1112  0000AE                     main@cont:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x4E
  1116  0000AE                     	ds	1
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           prodh	equ	0xFF4
  1122                           prodl	equ	0xFF3
  1123                           intcon	equ	0xFF2
  1124                           intcon2	equ	0xFF1
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           indf1	equ	0xFE7
  1128                           postinc1	equ	0xFE6
  1129                           postdec1	equ	0xFE5
  1130                           plusw1	equ	0xFE3
  1131                           fsr1h	equ	0xFE2
  1132                           fsr1l	equ	0xFE1
  1133                           indf2	equ	0xFDF
  1134                           postinc2	equ	0xFDE
  1135                           postdec2	equ	0xFDD
  1136                           plusw2	equ	0xFDB
  1137                           fsr2h	equ	0xFDA
  1138                           fsr2l	equ	0xFD9
  1139                           status	equ	0xFD8
  1140                           
  1141                           	psect	cstackCOMRAM
  1142  000001                     __pcstackCOMRAM:
  1143                           	opt stack 0
  1144  000001                     ??i2_isdigit:
  1145  000001                     ?i2_printf:
  1146                           	opt stack 0
  1147  000001                     ?i2___wmul:
  1148                           	opt stack 0
  1149  000001                     ?i2___lwdiv:
  1150                           	opt stack 0
  1151  000001                     teclado_matricial@linha:
  1152                           	opt stack 0
  1153  000001                     i2resetar_timer1@valor_l:
  1154                           	opt stack 0
  1155  000001                     i2lcd_write@c:
  1156                           	opt stack 0
  1157  000001                     i2___wmul@multiplier:
  1158                           	opt stack 0
  1159  000001                     i2___lwdiv@dividend:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x0
  1163  000001                     	ds	1
  1164  000002                     ??i2_lcd_clear:
  1165  000002                     teclado_matricial@coluna:
  1166                           	opt stack 0
  1167  000002                     i2resetar_timer1@valor_h:
  1168                           	opt stack 0
  1169  000002                     i2lcd_gotoxy@coluna:
  1170                           	opt stack 0
  1171  000002                     i2_isdigit$1524:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x1
  1175  000002                     	ds	1
  1176  000003                     ??i2_lcd_gotoxy:
  1177  000003                     teclado_matricial@temp:
  1178                           	opt stack 0
  1179  000003                     i2isdigit@c:
  1180                           	opt stack 0
  1181  000003                     i2___wmul@multiplicand:
  1182                           	opt stack 0
  1183  000003                     i2___lwdiv@divisor:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x2
  1187  000003                     	ds	1
  1188  000004                     teclado_matricial@caractere:
  1189                           	opt stack 0
  1190  000004                     i2lcd_gotoxy@linha:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x3
  1194  000004                     	ds	1
  1195  000005                     i2lcd_putc@c:
  1196                           	opt stack 0
  1197  000005                     i2___wmul@product:
  1198                           	opt stack 0
  1199  000005                     i2___lwdiv@quotient:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x4
  1203  000005                     	ds	1
  1204  000006                     i2putch@c:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x5
  1208  000006                     	ds	1
  1209  000007                     i2___lwdiv@counter:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x6
  1213  000007                     	ds	1
  1214  000008                     ?i2___lwmod:
  1215                           	opt stack 0
  1216  000008                     i2___lwmod@dividend:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x7
  1220  000008                     	ds	2
  1221  00000A                     i2___lwmod@divisor:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x9
  1225  00000A                     	ds	2
  1226  00000C                     i2___lwmod@counter:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0xB
  1230  00000C                     	ds	1
  1231  00000D                     ??i2_printf:
  1232                           
  1233                           ; 0 bytes @ 0xC
  1234  00000D                     	ds	4
  1235  000011                     i2printf@f:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x10
  1239  000011                     	ds	1
  1240  000012                     i2printf@prec:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x11
  1244  000012                     	ds	1
  1245  000013                     i2printf@cp:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x12
  1249  000013                     	ds	2
  1250  000015                     i2printf@ap:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x14
  1254  000015                     	ds	1
  1255  000016                     i2printf@val:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x15
  1259  000016                     	ds	2
  1260  000018                     i2printf@len:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x17
  1264  000018                     	ds	2
  1265  00001A                     i2printf@flag:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x19
  1269  00001A                     	ds	1
  1270  00001B                     i2printf@width:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x1A
  1274  00001B                     	ds	2
  1275  00001D                     i2printf@c:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x1C
  1279  00001D                     	ds	1
  1280  00001E                     ??_aux:
  1281                           
  1282                           ; 0 bytes @ 0x1D
  1283  00001E                     	ds	13
  1284  00002B                     aux@coluna:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x2A
  1288  00002B                     	ds	1
  1289  00002C                     aux@linha:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x2B
  1293  00002C                     	ds	1
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           prodh	equ	0xFF4
  1299                           prodl	equ	0xFF3
  1300                           intcon	equ	0xFF2
  1301                           intcon2	equ	0xFF1
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           indf1	equ	0xFE7
  1305                           postinc1	equ	0xFE6
  1306                           postdec1	equ	0xFE5
  1307                           plusw1	equ	0xFE3
  1308                           fsr1h	equ	0xFE2
  1309                           fsr1l	equ	0xFE1
  1310                           indf2	equ	0xFDF
  1311                           postinc2	equ	0xFDE
  1312                           postdec2	equ	0xFDD
  1313                           plusw2	equ	0xFDB
  1314                           fsr2h	equ	0xFDA
  1315                           fsr2l	equ	0xFD9
  1316                           status	equ	0xFD8
  1317                           
  1318 ;;
  1319 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1320 ;;
  1321 ;; *************** function _main *****************
  1322 ;; Defined at:
  1323 ;;		line 309 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  tentativas      1   66[BANK0 ] unsigned char 
  1328 ;;  i               1   74[BANK0 ] unsigned char 
  1329 ;;  tentativas      1   65[BANK0 ] unsigned char 
  1330 ;;  endereco_mod   18   47[BANK0 ] unsigned char [18]
  1331 ;;  i               1   71[BANK0 ] unsigned char 
  1332 ;;  contas_cadas    2   67[BANK0 ] int 
  1333 ;;  cont            1   78[BANK0 ] unsigned char 
  1334 ;;  funcao          1   77[BANK0 ] unsigned char 
  1335 ;;  ordem           1   76[BANK0 ] unsigned char 
  1336 ;;  conta           1   75[BANK0 ] unsigned char 
  1337 ;;  ultimo_carac    1   73[BANK0 ] unsigned char 
  1338 ;;  etapa           1   72[BANK0 ] unsigned char 
  1339 ;;  conta_a_ser_    1   70[BANK0 ] unsigned char 
  1340 ;;  qtd_total_co    1   69[BANK0 ] unsigned char 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  2  254[None  ] int 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1350 ;;      Params:         0       0       0       0       0       0       0       0       0
  1351 ;;      Locals:         0      32       0       0       0       0       0       0       0
  1352 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1353 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1354 ;;Total ram usage:       38 bytes
  1355 ;; Hardware stack levels required when called:   11
  1356 ;; This function calls:
  1357 ;;		_Busy_eep
  1358 ;;		_Read_b_eep
  1359 ;;		_Write_b_eep
  1360 ;;		___awmod
  1361 ;;		_ascii_para_numero
  1362 ;;		_carregar_senha
  1363 ;;		_config_serial
  1364 ;;		_delay_ms
  1365 ;;		_dia_da_semana
  1366 ;;		_eeprom_config_inicial
  1367 ;;		_enviar_caractere_serial
  1368 ;;		_enviar_string_serial
  1369 ;;		_lcd_gotoxy
  1370 ;;		_lcd_init
  1371 ;;		_limpar_linha
  1372 ;;		_numero_para_ascii
  1373 ;;		_printf
  1374 ;;		_resetar_timer1
  1375 ;;		_verificar_num_contas
  1376 ;;		_zerar_string
  1377 ;; This function is called by:
  1378 ;;		Startup code after reset
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text0
  1383  0075AA                     __ptext0:
  1384                           	opt stack 0
  1385  0075AA                     _main:
  1386                           	opt stack 20
  1387                           
  1388                           ;main.c: 313: unsigned char ordem = 0;
  1389                           
  1390                           ;incstack = 0
  1391  0075AA  0100               	movlb	0	; () banked
  1392  0075AC  6BAC               	clrf	main@ordem& (0+255),b
  1393                           
  1394                           ;main.c: 314: unsigned char etapa=0;
  1395  0075AE  6BA8               	clrf	main@etapa& (0+255),b
  1396                           
  1397                           ;main.c: 315: unsigned char funcao=0;
  1398  0075B0  6BAD               	clrf	main@funcao& (0+255),b
  1399                           
  1400                           ;main.c: 317: unsigned char conta_a_ser_alterada=0;
  1401  0075B2  6BA6               	clrf	main@conta_a_ser_alterada& (0+255),b
  1402                           
  1403                           ;main.c: 318: unsigned char cont=0;
  1404  0075B4  6BAE               	clrf	main@cont& (0+255),b
  1405                           
  1406                           ;main.c: 319: unsigned char qtd_total_contas=0;
  1407  0075B6  6BA5               	clrf	main@qtd_total_contas& (0+255),b
  1408                           
  1409                           ;main.c: 320: unsigned char ultimo_caractere_recebido=0;
  1410  0075B8  6BA9               	clrf	main@ultimo_caractere_recebido& (0+255),b
  1411                           
  1412                           ;main.c: 321: int contas_cadastradas=0;
  1413  0075BA  6BA3               	clrf	main@contas_cadastradas& (0+255),b
  1414  0075BC  6BA4               	clrf	(main@contas_cadastradas+1)& (0+255),b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 323: OSCCON=0XF0;
  1418  0075BE  0EF0               	movlw	240
  1419  0075C0  6ED3               	movwf	4051,c	;volatile
  1420                           
  1421                           ;main.c: 326: INTCON = 0b11100000;
  1422  0075C2  0EE0               	movlw	224
  1423  0075C4  6EF2               	movwf	intcon,c	;volatile
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 327: INTCON2 =0b00000000;
  1427  0075C6  6AF1               	clrf	intcon2,c	;volatile
  1428                           
  1429                           ;main.c: 328: PIE1=0b00100001;
  1430  0075C8  0E21               	movlw	33
  1431  0075CA  6E9D               	movwf	3997,c	;volatile
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;main.c: 329: RCONbits.IPEN = 0;
  1435  0075CC  9ED0               	bcf	4048,7,c	;volatile
  1436                           
  1437                           ;main.c: 333: T0CON = 0b10000111;
  1438  0075CE  0E87               	movlw	135
  1439  0075D0  6ED5               	movwf	4053,c	;volatile
  1440                           
  1441                           ;main.c: 334: TMR0H=0xC2;
  1442  0075D2  0EC2               	movlw	194
  1443  0075D4  6ED7               	movwf	4055,c	;volatile
  1444                           
  1445                           ;main.c: 335: TMR0L= 0xF7;
  1446  0075D6  0EF7               	movlw	247
  1447  0075D8  6ED6               	movwf	4054,c	;volatile
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 338: LATD=0;
  1451  0075DA  6A8C               	clrf	3980,c	;volatile
  1452                           
  1453                           ;main.c: 342: TRISB=0xF0;
  1454  0075DC  0EF0               	movlw	240
  1455  0075DE  6E93               	movwf	3987,c	;volatile
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 343: TRISA=0x00;
  1459  0075E0  6A92               	clrf	3986,c	;volatile
  1460                           
  1461                           ;main.c: 344: TRISE=0X04;
  1462  0075E2  0E04               	movlw	4
  1463  0075E4  6E96               	movwf	3990,c	;volatile
  1464                           
  1465                           ;main.c: 345: LATB=0x0F;
  1466  0075E6  0E0F               	movlw	15
  1467  0075E8  6E8A               	movwf	3978,c	;volatile
  1468                           
  1469                           ;main.c: 346: TRISC=0xDF;
  1470  0075EA  0EDF               	movlw	223
  1471  0075EC  6E94               	movwf	3988,c	;volatile
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;main.c: 347: TRISD=0x00;
  1475  0075EE  6A95               	clrf	3989,c	;volatile
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;main.c: 348: ADCON1=0XFF;
  1479  0075F0  68C1               	setf	4033,c	;volatile
  1480                           
  1481                           ;main.c: 349: CMCON=0X07;
  1482  0075F2  0E07               	movlw	7
  1483  0075F4  6EB4               	movwf	4020,c	;volatile
  1484                           
  1485                           ;main.c: 352: T1CON = 0b00001110;
  1486  0075F6  0E0E               	movlw	14
  1487  0075F8  6ECD               	movwf	4045,c	;volatile
  1488                           
  1489                           ;main.c: 353: TMR1H=0XC0;
  1490  0075FA  0EC0               	movlw	192
  1491  0075FC  6ECF               	movwf	4047,c	;volatile
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 354: TMR1L=0;
  1495  0075FE  6ACE               	clrf	4046,c	;volatile
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;main.c: 357: if(Read_b_eep(0) == 0xFF) eeprom_config_inicial();
  1499  007600  6B61               	clrf	(Read_b_eep@badd+1)& (0+255),b
  1500  007602  6B60               	clrf	Read_b_eep@badd& (0+255),b
  1501  007604  EC6F  F031         	call	_Read_b_eep	;wreg free
  1502  007608  0AFF               	xorlw	255
  1503  00760A  B4D8               	btfsc	status,2,c
  1504  00760C  EC24  F035         	call	_eeprom_config_inicial	;wreg free
  1505                           
  1506                           ;main.c: 359: config_serial(35);
  1507  007610  0E23               	movlw	35
  1508  007612  ECBE  F031         	call	_config_serial
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 362: qtd_total_contas = verificar_num_contas();
  1512  007616  EC3F  F032         	call	_verificar_num_contas	;wreg free
  1513  00761A  6FA5               	movwf	main@qtd_total_contas& (0+255),b
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 365: numero_para_ascii(qtd_total_contas);
  1517  00761C  51A5               	movf	main@qtd_total_contas& (0+255),w,b
  1518  00761E  ECE4  F034         	call	_numero_para_ascii
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;main.c: 367: for(conta=0;conta<qtd_total_contas;conta++){
  1522  007622  6BAB               	clrf	main@conta& (0+255),b
  1523  007624  D020               	goto	l5525
  1524  007626                     l5515:
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 368: carregar_senha(conta,senha);
  1528  007626  0E50               	movlw	low _senha
  1529  007628  6F62               	movwf	carregar_senha@senha_a_carregar& (0+255),b
  1530  00762A  0E01               	movlw	high _senha
  1531  00762C  6F63               	movwf	(carregar_senha@senha_a_carregar+1)& (0+255),b
  1532  00762E  51AB               	movf	main@conta& (0+255),w,b
  1533  007630  EC68  F035         	call	_carregar_senha
  1534                           
  1535                           ;main.c: 370: enviar_string_serial(&senha[conta][0]);
  1536  007634  0100               	movlb	0	; () banked
  1537  007636  51AB               	movf	main@conta& (0+255),w,b
  1538  007638  0D11               	mullw	17
  1539  00763A  0E50               	movlw	low _senha
  1540  00763C  24F3               	addwf	prodl,w,c
  1541  00763E  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1542  007640  0E01               	movlw	high _senha
  1543  007642  20F4               	addwfc	prodh,w,c
  1544  007644  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1545  007646  EC70  F033         	call	_enviar_string_serial	;wreg free
  1546                           
  1547                           ;main.c: 371: numero_para_ascii(senha[conta][16-1]);
  1548  00764A  0100               	movlb	0	; () banked
  1549  00764C  ECC4  F03F         	call	PL6	;call to abstracted procedure
  1550  007650  ECE4  F034         	call	_numero_para_ascii
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 373: (contas_cadastradas |= (1<<conta));
  1554  007654  C0AB  F089         	movff	main@conta,??_main
  1555  007658  ECB8  F03F         	call	PL4	;call to abstracted procedure
  1556  00765C  518A               	movf	(??_main+1)& (0+255),w,b
  1557  00765E  13A3               	iorwf	main@contas_cadastradas& (0+255),f,b
  1558  007660  518B               	movf	(??_main+2)& (0+255),w,b
  1559  007662  13A4               	iorwf	(main@contas_cadastradas+1)& (0+255),f,b
  1560                           
  1561                           ; BSR set to: 0
  1562  007664  2BAB               	incf	main@conta& (0+255),f,b
  1563  007666                     l5525:
  1564                           
  1565                           ; BSR set to: 0
  1566  007666  51A5               	movf	main@qtd_total_contas& (0+255),w,b
  1567  007668  5DAB               	subwf	main@conta& (0+255),w,b
  1568  00766A  E3DD               	bnc	l5515
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;main.c: 374: }
  1572                           ;main.c: 377: conta=0;
  1573  00766C  6BAB               	clrf	main@conta& (0+255),b
  1574                           
  1575                           ;main.c: 378: RCIE=1;
  1576  00766E  8A9D               	bsf	3997,5,c	;volatile
  1577                           
  1578                           ;main.c: 379: _delay((unsigned long)((1)*(16000000/4000000.0)));
  1579  007670  D000               	nop2		;2 cycle nop
  1580  007672  D000               	nop2		;2 cycle nop
  1581                           
  1582                           ;main.c: 380: data_atual.ano=0;
  1583  007674  6A38               	clrf	_data_atual,c
  1584                           
  1585                           ;main.c: 381: data_atual.mes= 1;
  1586  007676  0E01               	movlw	1
  1587  007678  6E39               	movwf	_data_atual+1,c
  1588                           
  1589                           ;main.c: 382: data_atual.dia=1;
  1590  00767A  6E3A               	movwf	_data_atual+2,c
  1591                           
  1592                           ;main.c: 383: data_atual.dia_da_semana= dia_da_semana(data_atual.ano,data_atual.mes,data
      +                          _atual.dia);
  1593  00767C  C038  F06C         	movff	_data_atual,dia_da_semana@ano
  1594  007680  0100               	movlb	0	; () banked
  1595  007682  6B6D               	clrf	(dia_da_semana@ano+1)& (0+255),b
  1596  007684  C039  F06E         	movff	_data_atual+1,dia_da_semana@mes
  1597  007688  C03A  F06F         	movff	_data_atual+2,dia_da_semana@dia
  1598  00768C  EC52  F036         	call	_dia_da_semana	;wreg free
  1599  007690  6E3E               	movwf	_data_atual+6,c
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 384: data_atual.hora=0;
  1603  007692  6A3B               	clrf	_data_atual+3,c
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 385: data_atual.minuto=0;
  1607  007694  6A3C               	clrf	_data_atual+4,c
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;main.c: 386: data_atual.segundo=0;
  1611  007696  6A3D               	clrf	_data_atual+5,c
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 387: PORTB_SR=PORTB;
  1615  007698  CF81 F031          	movff	3969,_PORTB_SR	;volatile
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;main.c: 388: RBIE=1;
  1619  00769C  86F2               	bsf	intcon,3,c	;volatile
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 389: RBIF=0;
  1623  00769E  90F2               	bcf	intcon,0,c	;volatile
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 390: cont=0;
  1627  0076A0  6BAE               	clrf	main@cont& (0+255),b
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;main.c: 392: lcd_init(3);
  1631  0076A2  0E03               	movlw	3
  1632  0076A4  ECFE  F035         	call	_lcd_init
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 393: lcd_gotoxy(1,20);
  1636  0076A8  0E14               	movlw	20
  1637  0076AA  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  1638  0076AC  0E01               	movlw	1
  1639  0076AE  EC4B  F033         	call	_lcd_gotoxy
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;main.c: 394: printf("%c",PORTEbits.RE2);
  1643  0076B2  ECF2  F03F         	call	PL34	;call to abstracted procedure
  1644  0076B6  EC60  F039         	call	_printf
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;main.c: 395: lcd_gotoxy(1,1);
  1648  0076BA  0E01               	movlw	1
  1649  0076BC  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  1650  0076BE  EC4B  F033         	call	_lcd_gotoxy
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 396: LATEbits.LE0=1;
  1654  0076C2  808D               	bsf	3981,0,c	;volatile
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 397: printf("%d",PORTE);
  1658  0076C4  CF84 F06C          	movff	3972,?_printf	;volatile
  1659  0076C8  6B6D               	clrf	(?_printf+1)& (0+255),b
  1660  0076CA  0ED7               	movlw	STR_3& (0+255)
  1661  0076CC  EC60  F039         	call	_printf
  1662  0076D0                     l5557:
  1663                           
  1664                           ;main.c: 401: if((FLAGS_2 & (1<<1))){
  1665  0076D0  A22D               	btfss	_FLAGS_2,1,c
  1666  0076D2  D272               	goto	l5871
  1667                           
  1668                           ;main.c: 404: (FLAGS_2 &= ~(1<<1));
  1669  0076D4  922D               	bcf	_FLAGS_2,1,c
  1670                           
  1671                           ;main.c: 405: if((!((FLAGS_3 & (1<<3))))){
  1672  0076D6  B62E               	btfsc	_FLAGS_3,3,c
  1673  0076D8  D1BF               	goto	l261
  1674                           
  1675                           ;main.c: 407: enviar_caractere_serial('\n');
  1676  0076DA  0E0A               	movlw	10
  1677  0076DC  EC61  F031         	call	_enviar_caractere_serial
  1678                           
  1679                           ;main.c: 409: enviar_string_serial(buffer_serial);
  1680  0076E0  0E00               	movlw	low _buffer_serial
  1681  0076E2  0100               	movlb	0	; () banked
  1682  0076E4  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1683  0076E6  0E01               	movlw	high _buffer_serial
  1684  0076E8  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1685  0076EA  EC70  F033         	call	_enviar_string_serial	;wreg free
  1686                           
  1687                           ;main.c: 411: enviar_caractere_serial('\n');
  1688  0076EE  0E0A               	movlw	10
  1689  0076F0  EC61  F031         	call	_enviar_caractere_serial
  1690                           
  1691                           ;main.c: 413: if(buffer_serial[0] == 'R'){
  1692  0076F4  0E52               	movlw	82
  1693  0076F6  0101               	movlb	1	; () banked
  1694  0076F8  1900               	xorwf	_buffer_serial& (0+255),w,b
  1695  0076FA  E140               	bnz	l262
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;main.c: 414: char i=1;
  1699  0076FC  0E01               	movlw	1
  1700  0076FE  0100               	movlb	0	; () banked
  1701  007700  6FA7               	movwf	main@i& (0+255),b
  1702                           
  1703                           ;main.c: 415: char endereco_modulo_repasse[18];
  1704                           ;main.c: 416: while(buffer_serial[i] != 'R'){
  1705  007702  D00C               	goto	l5577
  1706  007704                     l5573:
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;main.c: 417: endereco_modulo_repasse[i-1] = buffer_serial[i++];
  1710  007704  ECF9  F03F         	call	PL36	;call to abstracted procedure
  1711  007708  C0A7  F089         	movff	main@i,??_main
  1712  00770C  0789               	decf	??_main& (0+255),f,b
  1713  00770E  5189               	movf	??_main& (0+255),w,b
  1714  007710  0F8F               	addlw	low main@endereco_modulo_repasse
  1715  007712  6EE1               	movwf	fsr1l,c
  1716  007714  6AE2               	clrf	fsr1h,c
  1717  007716  CFDF FFE7          	movff	indf2,indf1
  1718                           
  1719                           ; BSR set to: 0
  1720  00771A  2BA7               	incf	main@i& (0+255),f,b
  1721  00771C                     l5577:
  1722                           
  1723                           ; BSR set to: 0
  1724  00771C  ECF9  F03F         	call	PL36	;call to abstracted procedure
  1725  007720  0E52               	movlw	82
  1726  007722  18DE               	xorwf	postinc2,w,c
  1727  007724  E1EF               	bnz	l5573
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 418: }
  1731                           ;main.c: 420: enviar_string_serial("AT");
  1732  007726  0ED4               	movlw	low STR_4
  1733  007728  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1734  00772A  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  1735  00772C  A4D8               	btfss	status,2,c
  1736  00772E  0E10               	movlw	high __smallconst
  1737  007730  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1738  007732  EC70  F033         	call	_enviar_string_serial	;wreg free
  1739                           
  1740                           ;main.c: 421: delay_ms(100);
  1741  007736  0100               	movlb	0	; () banked
  1742  007738  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  1743  00773A  0E64               	movlw	100
  1744  00773C  6F60               	movwf	delay_ms@delay_total& (0+255),b
  1745  00773E  EC2A  F032         	call	_delay_ms	;wreg free
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 422: enviar_string_serial("AT+");
  1749  007742  0EC3               	movlw	low STR_5
  1750  007744  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1751  007746  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  1752  007748  A4D8               	btfss	status,2,c
  1753  00774A  0E10               	movlw	high __smallconst
  1754  00774C  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1755  00774E  EC70  F033         	call	_enviar_string_serial	;wreg free
  1756                           
  1757                           ;main.c: 423: enviar_string_serial(endereco_modulo_repasse);
  1758  007752  0E8F               	movlw	low main@endereco_modulo_repasse
  1759  007754  0100               	movlb	0	; () banked
  1760  007756  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1761  007758  6B61               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1762  00775A  EC70  F033         	call	_enviar_string_serial	;wreg free
  1763                           
  1764                           ;main.c: 424: delay_ms(20);
  1765  00775E  0100               	movlb	0	; () banked
  1766  007760  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  1767  007762  0E14               	movlw	20
  1768  007764  6F60               	movwf	delay_ms@delay_total& (0+255),b
  1769  007766  EC2A  F032         	call	_delay_ms	;wreg free
  1770                           
  1771                           ;main.c: 425: enviar_string_serial(&buffer_serial[i]);
  1772  00776A  0E00               	movlw	low _buffer_serial
  1773  00776C  25A7               	addwf	main@i& (0+255),w,b
  1774  00776E  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  1775  007770  6B61               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  1776  007772  0E01               	movlw	high _buffer_serial
  1777  007774  2361               	addwfc	(enviar_string_serial@string_a_enviar+1)& (0+255),f,b
  1778  007776  EC70  F033         	call	_enviar_string_serial	;wreg free
  1779                           
  1780                           ;main.c: 427: }
  1781  00777A  D21E               	goto	l5871
  1782  00777C                     l262:
  1783                           
  1784                           ; BSR set to: 1
  1785                           ;main.c: 429: else{
  1786                           ;main.c: 430: for(cont=0;cont<qtd_caracteres_recebidos_serial;cont++){
  1787  00777C  0100               	movlb	0	; () banked
  1788  00777E  6BAE               	clrf	main@cont& (0+255),b
  1789  007780  D166               	goto	l5785
  1790  007782                     l268:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 433: if((FLAGS_1 & (1<<0))){
  1794  007782  A1B1               	btfss	_FLAGS_1& (0+255),0,b
  1795  007784  D00A               	goto	l5597
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;main.c: 435: if(buffer_serial[cont] != '>') {
  1799  007786  DBED               	call	PL2	;call to abstracted procedure
  1800  007788  0E3E               	movlw	62
  1801  00778A  18DE               	xorwf	postinc2,w,c
  1802  00778C  E002               	bz	l5593
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 436: (FLAGS_1 |= (1<<7));}
  1806  00778E  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  1807  007790  D157               	goto	l5777
  1808  007792                     l5593:
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;main.c: 438: else{
  1812                           ;main.c: 439: (FLAGS_1 &= ~(1<<0));
  1813  007792  91B1               	bcf	_FLAGS_1& (0+255),0,b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 440: ordem=0;
  1817  007794  6BAC               	clrf	main@ordem& (0+255),b
  1818                           
  1819                           ;main.c: 441: etapa++;}
  1820  007796  2BA8               	incf	main@etapa& (0+255),f,b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 443: }
  1824  007798  D153               	goto	l5777
  1825  00779A                     l5597:
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 445: else if(etapa == 0){
  1829  00779A  51A8               	movf	main@etapa& (0+255),w,b
  1830  00779C  E107               	bnz	l5603
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 447: if(buffer_serial[cont] != 'I') {(FLAGS_1 |= (1<<7));}
  1834  00779E  DBE1               	call	PL2	;call to abstracted procedure
  1835  0077A0  0E49               	movlw	73
  1836  0077A2  18DE               	xorwf	postinc2,w,c
  1837  0077A4  A4D8               	btfss	status,2,c
  1838                           
  1839                           ; BSR set to: 0
  1840  0077A6  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  1841  0077A8                     l274:
  1842                           
  1843                           ;main.c: 449: (FLAGS_1 |= (1<<0));
  1844  0077A8  0100               	movlb	0	; () banked
  1845  0077AA  D078               	goto	L1
  1846  0077AC                     l5603:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;main.c: 452: else if(etapa == 1){
  1850  0077AC  05A8               	decf	main@etapa& (0+255),w,b
  1851  0077AE  E150               	bnz	l5635
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 454: funcao = buffer_serial[cont++];
  1855  0077B0  DBD8               	call	PL2	;call to abstracted procedure
  1856  0077B2  50DF               	movf	indf2,w,c
  1857  0077B4  6FAD               	movwf	main@funcao& (0+255),b
  1858                           
  1859                           ; BSR set to: 0
  1860  0077B6  2BAE               	incf	main@cont& (0+255),f,b
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;main.c: 457: if(funcao<'0' || funcao>'7') {(FLAGS_1 |= (1<<7));}
  1864  0077B8  0E2F               	movlw	47
  1865  0077BA  65AD               	cpfsgt	main@funcao& (0+255),b
  1866  0077BC  D003               	goto	l5613
  1867                           
  1868                           ; BSR set to: 0
  1869  0077BE  0E37               	movlw	55
  1870  0077C0  65AD               	cpfsgt	main@funcao& (0+255),b
  1871  0077C2  D001               	goto	l5615
  1872  0077C4                     l5613:
  1873                           
  1874                           ; BSR set to: 0
  1875  0077C4  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  1876  0077C6                     l5615:
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;main.c: 460: conta = ascii_para_numero('0',(buffer_serial[cont]),(buffer_serial[++cont]
      +                          ) );
  1880  0077C6  DBCD               	call	PL2	;call to abstracted procedure
  1881  0077C8  50DF               	movf	indf2,w,c
  1882  0077CA  6F60               	movwf	ascii_para_numero@caractere2& (0+255),b
  1883  0077CC  2BAE               	incf	main@cont& (0+255),f,b
  1884  0077CE  DBC9               	call	PL2	;call to abstracted procedure
  1885  0077D0  50DF               	movf	indf2,w,c
  1886  0077D2  6F61               	movwf	ascii_para_numero@caractere1& (0+255),b
  1887  0077D4  0E30               	movlw	48
  1888  0077D6  ECAE  F031         	call	_ascii_para_numero
  1889  0077DA  6FAB               	movwf	main@conta& (0+255),b
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 465: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  1893  0077DC  0E0F               	movlw	15
  1894  0077DE  65AB               	cpfsgt	main@conta& (0+255),b
  1895  0077E0  D002               	goto	l5621
  1896  0077E2                     l5619:
  1897                           
  1898                           ; BSR set to: 0
  1899  0077E2  85B1               	bsf	_FLAGS_1& (0+255),2,b
  1900  0077E4  D008               	goto	l5627
  1901  0077E6                     l5621:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 470: else if(funcao != '6' && (!(contas_cadastradas & (1<<conta))) ){
  1905  0077E6  0E36               	movlw	54
  1906  0077E8  19AD               	xorwf	main@funcao& (0+255),w,b
  1907  0077EA  E005               	bz	l5627
  1908                           
  1909                           ; BSR set to: 0
  1910  0077EC  C0AB  F089         	movff	main@conta,??_main
  1911  0077F0  DBBF               	call	PL4	;call to abstracted procedure
  1912  0077F2  DBF1               	call	PL32	;call to abstracted procedure
  1913  0077F4  E0F6               	bz	l5619
  1914  0077F6                     l5627:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 473: if(!((senha[conta][16-1] & (1<<ascii_para_numero('0','0',funcao)))) ) {
  1918  0077F6  DBC8               	call	PL6	;call to abstracted procedure
  1919  0077F8  6F89               	movwf	??_main& (0+255),b
  1920  0077FA  0E30               	movlw	48
  1921  0077FC  6F60               	movwf	ascii_para_numero@caractere2& (0+255),b
  1922  0077FE  C0AD  F061         	movff	main@funcao,ascii_para_numero@caractere1
  1923  007802  ECAE  F031         	call	_ascii_para_numero
  1924  007806  6F8A               	movwf	(??_main+1)& (0+255),b
  1925  007808  0E01               	movlw	1
  1926  00780A  6F8B               	movwf	(??_main+2)& (0+255),b
  1927  00780C  2B8A               	incf	(??_main+1)& (0+255),f,b
  1928  00780E  D002               	goto	u6514
  1929  007810                     u6515:
  1930  007810  90D8               	bcf	status,0,c
  1931  007812  378B               	rlcf	(??_main+2)& (0+255),f,b
  1932  007814                     u6514:
  1933  007814  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1934  007816  D7FC               	goto	u6515
  1935  007818  0100               	movlb	0	; () banked
  1936  00781A  518B               	movf	(??_main+2)& (0+255),w,b
  1937  00781C  1589               	andwf	??_main& (0+255),w,b
  1938  00781E  E1C4               	bnz	l274
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 474: (FLAGS_1 |= (1<<3));
  1942  007820  87B1               	bsf	_FLAGS_1& (0+255),3,b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 475: numero_para_ascii(((senha[conta][16-1] & (1<<(funcao-'0'))) ));
  1946  007822  DBB2               	call	PL6	;call to abstracted procedure
  1947  007824  6F89               	movwf	??_main& (0+255),b
  1948  007826  C0AD  F08A         	movff	main@funcao,??_main+1
  1949  00782A  0ED0               	movlw	208
  1950  00782C  278A               	addwf	(??_main+1)& (0+255),f,b
  1951  00782E  0E01               	movlw	1
  1952  007830  6F8B               	movwf	(??_main+2)& (0+255),b
  1953  007832  2B8A               	incf	(??_main+1)& (0+255),f,b
  1954  007834  D002               	goto	u6534
  1955  007836                     u6535:
  1956  007836  90D8               	bcf	status,0,c
  1957  007838  378B               	rlcf	(??_main+2)& (0+255),f,b
  1958  00783A                     u6534:
  1959  00783A  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1960  00783C  D7FC               	goto	u6535
  1961  00783E  0100               	movlb	0	; () banked
  1962  007840  518B               	movf	(??_main+2)& (0+255),w,b
  1963  007842  1589               	andwf	??_main& (0+255),w,b
  1964  007844  ECE4  F034         	call	_numero_para_ascii
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;main.c: 476: numero_para_ascii(senha[conta][16-1]);}
  1968  007848  DB9F               	call	PL6	;call to abstracted procedure
  1969  00784A  ECE4  F034         	call	_numero_para_ascii
  1970  00784E  D7AC               	goto	l274
  1971  007850                     l5635:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 484: else if(etapa == 2){
  1975  007850  0E02               	movlw	2
  1976  007852  19A8               	xorwf	main@etapa& (0+255),w,b
  1977  007854  E125               	bnz	l5647
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;main.c: 488: for(ordem=0;senha[conta][ordem]!= 0;ordem++){
  1981  007856  6BAC               	clrf	main@ordem& (0+255),b
  1982  007858  D016               	goto	l5643
  1983  00785A                     l5639:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 490: if(senha[conta][ordem] != buffer_serial[cont++]) {
  1987  00785A  DBA0               	call	PL20	;call to abstracted procedure
  1988  00785C  51AB               	movf	main@conta& (0+255),w,b
  1989  00785E  0D11               	mullw	17
  1990  007860  0E50               	movlw	low _senha
  1991  007862  6F8C               	movwf	(??_main+3)& (0+255),b
  1992  007864  0E01               	movlw	high _senha
  1993  007866  6F8D               	movwf	(??_main+4)& (0+255),b
  1994  007868  50F3               	movf	prodl,w,c
  1995  00786A  278C               	addwf	(??_main+3)& (0+255),f,b
  1996  00786C  50F4               	movf	prodh,w,c
  1997  00786E  238D               	addwfc	(??_main+4)& (0+255),f,b
  1998  007870  51AC               	movf	main@ordem& (0+255),w,b
  1999  007872  258C               	addwf	(??_main+3)& (0+255),w,b
  2000  007874  6EE1               	movwf	fsr1l,c
  2001  007876  0E00               	movlw	0
  2002  007878  218D               	addwfc	(??_main+4)& (0+255),w,b
  2003  00787A  6EE2               	movwf	fsr1h,c
  2004  00787C  50DE               	movf	postinc2,w,c
  2005  00787E  18E6               	xorwf	postinc1,w,c
  2006  007880  A4D8               	btfss	status,2,c
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;main.c: 491: (FLAGS_1 |= (1<<6));
  2010  007882  8DB1               	bsf	_FLAGS_1& (0+255),6,b
  2011                           
  2012                           ; BSR set to: 0
  2013  007884  2BAC               	incf	main@ordem& (0+255),f,b
  2014  007886                     l5643:
  2015                           
  2016                           ; BSR set to: 0
  2017  007886  51AB               	movf	main@conta& (0+255),w,b
  2018  007888  DB94               	call	PL24	;call to abstracted procedure
  2019  00788A  51AC               	movf	main@ordem& (0+255),w,b
  2020  00788C  2589               	addwf	??_main& (0+255),w,b
  2021  00788E  6ED9               	movwf	fsr2l,c
  2022  007890  0E00               	movlw	0
  2023  007892  218A               	addwfc	(??_main+1)& (0+255),w,b
  2024  007894  6EDA               	movwf	fsr2h,c
  2025  007896  50DF               	movf	indf2,w,c
  2026  007898  E1E0               	bnz	l5639
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;main.c: 492: }
  2030                           ;main.c: 494: }
  2031                           ;main.c: 495: cont--;
  2032  00789A  07AE               	decf	main@cont& (0+255),f,b
  2033  00789C                     L1:
  2034                           
  2035                           ;main.c: 496: (FLAGS_1 |= (1<<0));
  2036  00789C  81B1               	bsf	_FLAGS_1& (0+255),0,b
  2037                           
  2038                           ;main.c: 498: }
  2039  00789E  D0D0               	goto	l5777
  2040  0078A0                     l5647:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 501: else if(etapa == 3){
  2044  0078A0  0E03               	movlw	3
  2045  0078A2  19A8               	xorwf	main@etapa& (0+255),w,b
  2046  0078A4  E001 D0BC          	bnz	l5767
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;main.c: 502: if(funcao == '0' || funcao == '2'){
  2050  0078A8  0E30               	movlw	48
  2051  0078AA  19AD               	xorwf	main@funcao& (0+255),w,b
  2052  0078AC  E003               	bz	l294
  2053                           
  2054                           ; BSR set to: 0
  2055  0078AE  0E32               	movlw	50
  2056  0078B0  19AD               	xorwf	main@funcao& (0+255),w,b
  2057  0078B2  E118               	bnz	l5665
  2058  0078B4                     l294:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 504: for(ordem=0;ordem<2;ordem++){
  2062  0078B4  6BAC               	clrf	main@ordem& (0+255),b
  2063  0078B6                     l5657:
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;main.c: 505: if( buffer_serial[cont++] != ('N'+(ordem))) {(FLAGS_1 |= (1<<7));}
  2067  0078B6  DB72               	call	PL20	;call to abstracted procedure
  2068  0078B8  50DF               	movf	indf2,w,c
  2069  0078BA  6F8B               	movwf	(??_main+2)& (0+255),b
  2070  0078BC  6B8C               	clrf	(??_main+3)& (0+255),b
  2071  0078BE  51AC               	movf	main@ordem& (0+255),w,b
  2072  0078C0  6F8D               	movwf	(??_main+4)& (0+255),b
  2073  0078C2  6B8E               	clrf	(??_main+5)& (0+255),b
  2074  0078C4  0E4E               	movlw	78
  2075  0078C6  278D               	addwf	(??_main+4)& (0+255),f,b
  2076  0078C8  0E00               	movlw	0
  2077  0078CA  238E               	addwfc	(??_main+5)& (0+255),f,b
  2078  0078CC  518B               	movf	(??_main+2)& (0+255),w,b
  2079  0078CE  198D               	xorwf	(??_main+4)& (0+255),w,b
  2080  0078D0  E103               	bnz	u6600
  2081  0078D2  518C               	movf	(??_main+3)& (0+255),w,b
  2082  0078D4  198E               	xorwf	(??_main+5)& (0+255),w,b
  2083  0078D6  A4D8               	btfss	status,2,c
  2084  0078D8                     u6600:
  2085                           
  2086                           ; BSR set to: 0
  2087  0078D8  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2088                           
  2089                           ; BSR set to: 0
  2090  0078DA  2BAC               	incf	main@ordem& (0+255),f,b
  2091                           
  2092                           ; BSR set to: 0
  2093  0078DC  0E01               	movlw	1
  2094  0078DE  65AC               	cpfsgt	main@ordem& (0+255),b
  2095  0078E0  D7EA               	goto	l5657
  2096  0078E2  D762               	goto	l274
  2097  0078E4                     l5665:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;main.c: 511: else if(funcao == '1'){
  2101  0078E4  0E31               	movlw	49
  2102  0078E6  19AD               	xorwf	main@funcao& (0+255),w,b
  2103  0078E8  E105               	bnz	l5671
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;main.c: 513: endereco_inic_eeprom = (1794 + (buffer_serial[cont] *26));
  2107  0078EA  51AC               	movf	main@ordem& (0+255),w,b
  2108  0078EC  E001 D0A8          	bnz	l5777
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;main.c: 515: ordem++;
  2112  0078F0  2BAC               	incf	main@ordem& (0+255),f,b
  2113  0078F2  D0A6               	goto	l5777
  2114  0078F4                     l5671:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;main.c: 520: else if(funcao == '4'){
  2118  0078F4  0E34               	movlw	52
  2119  0078F6  19AD               	xorwf	main@funcao& (0+255),w,b
  2120  0078F8  E156               	bnz	l5725
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;main.c: 528: ptr_data= &data_atual.ano;
  2124  0078FA  0E38               	movlw	low _data_atual
  2125  0078FC  6FAF               	movwf	_ptr_data& (0+255),b
  2126  0078FE  6BB0               	clrf	(_ptr_data+1)& (0+255),b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;main.c: 530: for(ordem=0;ordem<6;ordem++){
  2130  007900  6BAC               	clrf	main@ordem& (0+255),b
  2131  007902                     l5679:
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;main.c: 531: if(buffer_serial[cont] == 'X') {
  2135  007902  DB2F               	call	PL2	;call to abstracted procedure
  2136  007904  0E58               	movlw	88
  2137  007906  18DE               	xorwf	postinc2,w,c
  2138  007908  E103               	bnz	l5685
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 532: ordem++;
  2142  00790A  2BAC               	incf	main@ordem& (0+255),f,b
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;main.c: 533: cont+=2;}
  2146  00790C  0E02               	movlw	2
  2147  00790E  27AE               	addwf	main@cont& (0+255),f,b
  2148  007910                     l5685:
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;main.c: 535: *(ptr_data+ordem) = ascii_para_numero('0',buffer_serial[cont],buffer_seria
      +                          l[cont+1]);
  2152  007910  51AC               	movf	main@ordem& (0+255),w,b
  2153  007912  25AF               	addwf	_ptr_data& (0+255),w,b
  2154  007914  6ED9               	movwf	fsr2l,c
  2155  007916  0E00               	movlw	0
  2156  007918  21B0               	addwfc	(_ptr_data+1)& (0+255),w,b
  2157  00791A  6EDA               	movwf	fsr2h,c
  2158  00791C  0E00               	movlw	low _buffer_serial
  2159  00791E  25AE               	addwf	main@cont& (0+255),w,b
  2160  007920  6EE1               	movwf	fsr1l,c
  2161  007922  6AE2               	clrf	fsr1h,c
  2162  007924  0E01               	movlw	high _buffer_serial
  2163  007926  22E2               	addwfc	fsr1h,f,c
  2164  007928  50E7               	movf	indf1,w,c
  2165  00792A  6F60               	movwf	ascii_para_numero@caractere2& (0+255),b
  2166  00792C  0E01               	movlw	low (_buffer_serial+1)
  2167  00792E  25AE               	addwf	main@cont& (0+255),w,b
  2168  007930  6EE1               	movwf	fsr1l,c
  2169  007932  6AE2               	clrf	fsr1h,c
  2170  007934  0E01               	movlw	high (_buffer_serial+1)
  2171  007936  22E2               	addwfc	fsr1h,f,c
  2172  007938  50E7               	movf	indf1,w,c
  2173  00793A  6F61               	movwf	ascii_para_numero@caractere1& (0+255),b
  2174  00793C  0E30               	movlw	48
  2175  00793E  ECAE  F031         	call	_ascii_para_numero
  2176  007942  6EDF               	movwf	indf2,c
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;main.c: 540: cont+=2;}
  2180  007944  0E02               	movlw	2
  2181  007946  27AE               	addwf	main@cont& (0+255),f,b
  2182                           
  2183                           ; BSR set to: 0
  2184  007948  2BAC               	incf	main@ordem& (0+255),f,b
  2185                           
  2186                           ; BSR set to: 0
  2187  00794A  0E05               	movlw	5
  2188  00794C  65AC               	cpfsgt	main@ordem& (0+255),b
  2189  00794E  D7D9               	goto	l5679
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 542: data_atual.dia_da_semana = dia_da_semana(data_atual.ano,data_atual.mes,dat
      +                          a_atual.dia);
  2193  007950  C038  F06C         	movff	_data_atual,dia_da_semana@ano
  2194  007954  6B6D               	clrf	(dia_da_semana@ano+1)& (0+255),b
  2195  007956  C039  F06E         	movff	_data_atual+1,dia_da_semana@mes
  2196  00795A  C03A  F06F         	movff	_data_atual+2,dia_da_semana@dia
  2197  00795E  EC52  F036         	call	_dia_da_semana	;wreg free
  2198  007962  6E3E               	movwf	_data_atual+6,c
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;main.c: 546: if(data_atual.mes > 12) data_atual.mes=12;
  2202  007964  0E0C               	movlw	12
  2203  007966  6439               	cpfsgt	_data_atual+1,c
  2204  007968  D001               	goto	l5699
  2205                           
  2206                           ; BSR set to: 0
  2207  00796A  D003               	goto	L2
  2208  00796C                     l5699:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;main.c: 548: else if(data_atual.mes<1) data_atual.mes=1;
  2212  00796C  5039               	movf	_data_atual+1,w,c
  2213  00796E  E102               	bnz	l5703
  2214                           
  2215                           ; BSR set to: 0
  2216  007970  0E01               	movlw	1
  2217  007972                     L2:
  2218  007972  6E39               	movwf	_data_atual+1,c
  2219  007974                     l5703:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;main.c: 551: if(data_atual.dia> qtd_max_dias) data_atual.dia = qtd_max_dias;
  2223  007974  503A               	movf	_data_atual+2,w,c
  2224  007976  5C3F               	subwf	_qtd_max_dias,w,c
  2225  007978  E203               	bc	l5707
  2226                           
  2227                           ; BSR set to: 0
  2228  00797A  C03F  F03A         	movff	_qtd_max_dias,_data_atual+2
  2229  00797E  D004               	goto	l5711
  2230  007980                     l5707:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 553: else if(data_atual.dia<1) data_atual.dia=1;
  2234  007980  503A               	movf	_data_atual+2,w,c
  2235  007982  E102               	bnz	l5711
  2236                           
  2237                           ; BSR set to: 0
  2238  007984  0E01               	movlw	1
  2239  007986  6E3A               	movwf	_data_atual+2,c
  2240  007988                     l5711:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 556: if(data_atual.hora >= 24){ data_atual.hora=0;}
  2244  007988  0E17               	movlw	23
  2245  00798A  643B               	cpfsgt	_data_atual+3,c
  2246  00798C  D001               	goto	l5715
  2247                           
  2248                           ; BSR set to: 0
  2249  00798E  6A3B               	clrf	_data_atual+3,c
  2250  007990                     l5715:
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;main.c: 559: if(data_atual.minuto>=60){data_atual.minuto= 0;}
  2254  007990  0E3B               	movlw	59
  2255  007992  643C               	cpfsgt	_data_atual+4,c
  2256  007994  D001               	goto	l5719
  2257                           
  2258                           ; BSR set to: 0
  2259  007996  6A3C               	clrf	_data_atual+4,c
  2260  007998                     l5719:
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;main.c: 561: if(data_atual.segundo>=60){data_atual.segundo = 0;}
  2264  007998  0E3B               	movlw	59
  2265  00799A  643D               	cpfsgt	_data_atual+5,c
  2266  00799C  D001               	goto	l5723
  2267                           
  2268                           ; BSR set to: 0
  2269  00799E  6A3D               	clrf	_data_atual+5,c
  2270  0079A0                     l5723:
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;main.c: 566: (FLAGS_1 |= (1<<0));
  2274  0079A0  81B1               	bsf	_FLAGS_1& (0+255),0,b
  2275                           
  2276                           ;main.c: 567: cont--;
  2277  0079A2  07AE               	decf	main@cont& (0+255),f,b
  2278                           
  2279                           ;main.c: 568: }
  2280  0079A4  D04D               	goto	l5777
  2281  0079A6                     l5725:
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;main.c: 570: else if(funcao == '6' || funcao == '7'){
  2285  0079A6  0E36               	movlw	54
  2286  0079A8  19AD               	xorwf	main@funcao& (0+255),w,b
  2287  0079AA  E003               	bz	l5729
  2288                           
  2289                           ; BSR set to: 0
  2290  0079AC  0E37               	movlw	55
  2291  0079AE  19AD               	xorwf	main@funcao& (0+255),w,b
  2292  0079B0  E147               	bnz	l5777
  2293  0079B2                     l5729:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;main.c: 572: if(funcao == '6') conta_a_ser_alterada = buffer_serial[cont] - '0';
  2297  0079B2  0E36               	movlw	54
  2298  0079B4  19AD               	xorwf	main@funcao& (0+255),w,b
  2299  0079B6  E105               	bnz	l5733
  2300                           
  2301                           ; BSR set to: 0
  2302  0079B8  DAD4               	call	PL2	;call to abstracted procedure
  2303  0079BA  50DF               	movf	indf2,w,c
  2304  0079BC  0FD0               	addlw	208
  2305  0079BE  6FA6               	movwf	main@conta_a_ser_alterada& (0+255),b
  2306  0079C0  D005               	goto	l320
  2307  0079C2                     l5733:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 574: else if(funcao == '7') conta_a_ser_alterada = conta;
  2311  0079C2  0E37               	movlw	55
  2312  0079C4  19AD               	xorwf	main@funcao& (0+255),w,b
  2313  0079C6  B4D8               	btfsc	status,2,c
  2314                           
  2315                           ; BSR set to: 0
  2316  0079C8  C0AB  F0A6         	movff	main@conta,main@conta_a_ser_alterada
  2317  0079CC                     l320:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;main.c: 578: for(ordem=0;ordem<(16-1);ordem++){
  2321  0079CC  6BAC               	clrf	main@ordem& (0+255),b
  2322  0079CE                     l5741:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;main.c: 581: if(buffer_serial[cont] == '>'){
  2326  0079CE  DAC9               	call	PL2	;call to abstracted procedure
  2327  0079D0  0E3E               	movlw	62
  2328  0079D2  18DE               	xorwf	postinc2,w,c
  2329  0079D4  E102               	bnz	l5745
  2330  0079D6                     l5743:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;main.c: 582: (FLAGS_1 |= (1<<7));}
  2334  0079D6  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2335  0079D8  D018               	goto	l5757
  2336  0079DA                     l5745:
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;main.c: 584: else if(buffer_serial[cont] == '<') {
  2340  0079DA  DAC3               	call	PL2	;call to abstracted procedure
  2341  0079DC  0E3C               	movlw	60
  2342  0079DE  18DE               	xorwf	postinc2,w,c
  2343  0079E0  E10D               	bnz	l5755
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;main.c: 585: if(ordem<5) (FLAGS_1 |= (1<<7));
  2347  0079E2  0E05               	movlw	5
  2348  0079E4  61AC               	cpfslt	main@ordem& (0+255),b
  2349  0079E6  D001               	goto	l5751
  2350  0079E8  D7F6               	goto	l5743
  2351  0079EA                     l5751:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;main.c: 587: else {
  2355                           ;main.c: 588: if(ordem<16-2) nova_senha[ordem]= 0;
  2356  0079EA  0E0E               	movlw	14
  2357  0079EC  61AC               	cpfslt	main@ordem& (0+255),b
  2358  0079EE  D012               	goto	l5763
  2359                           
  2360                           ; BSR set to: 0
  2361  0079F0  51AC               	movf	main@ordem& (0+255),w,b
  2362  0079F2  0FDC               	addlw	low _nova_senha
  2363  0079F4  6ED9               	movwf	fsr2l,c
  2364  0079F6  6ADA               	clrf	fsr2h,c
  2365  0079F8  6ADF               	clrf	indf2,c
  2366  0079FA  D00C               	goto	l5763
  2367  0079FC                     l5755:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;main.c: 593: else{
  2371                           ;main.c: 594: nova_senha[ordem] = buffer_serial[cont];}
  2372  0079FC  DAB2               	call	PL2	;call to abstracted procedure
  2373  0079FE  51AC               	movf	main@ordem& (0+255),w,b
  2374  007A00  0FDC               	addlw	low _nova_senha
  2375  007A02  6EE1               	movwf	fsr1l,c
  2376  007A04  6AE2               	clrf	fsr1h,c
  2377  007A06  CFDF FFE7          	movff	indf2,indf1
  2378  007A0A                     l5757:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 596: cont++;
  2382  007A0A  2BAE               	incf	main@cont& (0+255),f,b
  2383                           
  2384                           ; BSR set to: 0
  2385  007A0C  2BAC               	incf	main@ordem& (0+255),f,b
  2386                           
  2387                           ; BSR set to: 0
  2388  007A0E  0E0E               	movlw	14
  2389  007A10  65AC               	cpfsgt	main@ordem& (0+255),b
  2390  007A12  D7DD               	goto	l5741
  2391  007A14                     l5763:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;main.c: 598: }
  2395                           ;main.c: 600: enviar_string_serial(nova_senha);
  2396  007A14  0EDC               	movlw	low _nova_senha
  2397  007A16  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2398  007A18  6B61               	clrf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2399  007A1A  EC70  F033         	call	_enviar_string_serial	;wreg free
  2400  007A1E  D6C4               	goto	l274
  2401  007A20                     l5767:
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;main.c: 605: else if(etapa == 4){
  2405  007A20  0E04               	movlw	4
  2406  007A22  19A8               	xorwf	main@etapa& (0+255),w,b
  2407  007A24  E10D               	bnz	l5777
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;main.c: 606: if(buffer_serial[cont] != 'F') {(FLAGS_1 |= (1<<7));}
  2411  007A26  DA9D               	call	PL2	;call to abstracted procedure
  2412  007A28  0E46               	movlw	70
  2413  007A2A  18DE               	xorwf	postinc2,w,c
  2414  007A2C  A4D8               	btfss	status,2,c
  2415                           
  2416                           ; BSR set to: 0
  2417  007A2E  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;main.c: 607: (FLAGS_2 |= (1<<0));
  2421  007A30  802D               	bsf	_FLAGS_2,0,c
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;main.c: 608: qtd_caracteres_recebidos_serial=0;
  2425  007A32  6A35               	clrf	_qtd_caracteres_recebidos_serial,c
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;main.c: 609: zerar_string(buffer_serial);}
  2429  007A34  0E00               	movlw	low _buffer_serial
  2430  007A36  6F60               	movwf	zerar_string@string_a_zerar& (0+255),b
  2431  007A38  0E01               	movlw	high _buffer_serial
  2432  007A3A  6F61               	movwf	(zerar_string@string_a_zerar+1)& (0+255),b
  2433  007A3C  ECCF  F031         	call	_zerar_string	;wreg free
  2434  007A40                     l5777:
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 613: if(FLAGS_1>1) {
  2438  007A40  0E01               	movlw	1
  2439  007A42  65B1               	cpfsgt	_FLAGS_1& (0+255),b
  2440  007A44  D003               	goto	l5783
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;main.c: 615: (FLAGS_1 &= ~(1<<0));
  2444  007A46  91B1               	bcf	_FLAGS_1& (0+255),0,b
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;main.c: 616: etapa = 0;
  2448  007A48  6BA8               	clrf	main@etapa& (0+255),b
  2449  007A4A  D0B5               	goto	L3
  2450  007A4C                     l5783:
  2451                           
  2452                           ; BSR set to: 0
  2453  007A4C  2BAE               	incf	main@cont& (0+255),f,b
  2454  007A4E                     l5785:
  2455                           
  2456                           ; BSR set to: 0
  2457  007A4E  5035               	movf	_qtd_caracteres_recebidos_serial,w,c
  2458  007A50  5DAE               	subwf	main@cont& (0+255),w,b
  2459  007A52  E301 D0B1          	bc	l5871
  2460  007A56  D695               	goto	l268
  2461  007A58                     l261:
  2462                           
  2463                           ;main.c: 625: else if((FLAGS_3 & (1<<2))){
  2464  007A58  A42E               	btfss	_FLAGS_3,2,c
  2465  007A5A  D0AE               	goto	l5871
  2466                           
  2467                           ;main.c: 627: if((FLAGS_2 & (1<<4))){
  2468  007A5C  A82D               	btfss	_FLAGS_2,4,c
  2469  007A5E  D021               	goto	l5805
  2470                           
  2471                           ;main.c: 628: resetar_timer1(0xC0,0);
  2472  007A60  0100               	movlb	0	; () banked
  2473  007A62  6B60               	clrf	resetar_timer1@valor_l& (0+255),b
  2474  007A64  0EC0               	movlw	192
  2475  007A66  EC68  F031         	call	_resetar_timer1
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;main.c: 631: if(qtd_vezes_mesma_tecla_pressionada>0 && ultimo_caractere_recebido >='0' 
      +                          && ultimo_caractere_recebido<='9'){
  2479  007A6A  51B3               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2480  007A6C  E01A               	bz	l5805
  2481                           
  2482                           ; BSR set to: 0
  2483  007A6E  0E2F               	movlw	47
  2484  007A70  65A9               	cpfsgt	main@ultimo_caractere_recebido& (0+255),b
  2485  007A72  D017               	goto	l5805
  2486                           
  2487                           ; BSR set to: 0
  2488  007A74  0E3A               	movlw	58
  2489  007A76  61A9               	cpfslt	main@ultimo_caractere_recebido& (0+255),b
  2490  007A78  D014               	goto	l5805
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;main.c: 634: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]= ('a' -1) + qtd
      +                          _vezes_mesma_tecla_pressionada + (( ultimo_caractere_recebido - '1') * 3) ;
  2494  007A7A  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2495  007A7C  0FB4               	addlw	low _buffer_teclado_matricial
  2496  007A7E  6ED9               	movwf	fsr2l,c
  2497  007A80  6ADA               	clrf	fsr2h,c
  2498  007A82  51A9               	movf	main@ultimo_caractere_recebido& (0+255),w,b
  2499  007A84  0D03               	mullw	3
  2500  007A86  50F3               	movf	prodl,w,c
  2501  007A88  25B3               	addwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  2502  007A8A  0FCD               	addlw	205
  2503  007A8C  6EDF               	movwf	indf2,c
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 635: qtd_vezes_mesma_tecla_pressionada=0;
  2507  007A8E  6BB3               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 637: if(ultimo_caractere_recebido != caractere_recebido) {
  2511  007A90  51B2               	movf	_caractere_recebido& (0+255),w,b
  2512  007A92  19A9               	xorwf	main@ultimo_caractere_recebido& (0+255),w,b
  2513  007A94  E004               	bz	l340
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;main.c: 638: ultimo_caractere_recebido = caractere_recebido;
  2517  007A96  C0B2  F0A9         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  2518                           
  2519                           ;main.c: 639: TMR1ON=1;
  2520  007A9A  80CD               	bsf	4045,0,c	;volatile
  2521                           
  2522                           ;main.c: 642: }
  2523  007A9C  D008               	goto	l5809
  2524  007A9E                     l340:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 643: else ultimo_caractere_recebido=0;
  2528  007A9E  6BA9               	clrf	main@ultimo_caractere_recebido& (0+255),b
  2529  007AA0  D006               	goto	l5809
  2530  007AA2                     l5805:
  2531                           
  2532                           ;main.c: 647: else{
  2533                           ;main.c: 648: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] = caractere_rec
      +                          ebido;
  2534  007AA2  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2535  007AA4  0FB4               	addlw	low _buffer_teclado_matricial
  2536  007AA6  6ED9               	movwf	fsr2l,c
  2537  007AA8  6ADA               	clrf	fsr2h,c
  2538  007AAA  C0B2  FFDF         	movff	_caractere_recebido,indf2
  2539  007AAE                     l5809:
  2540                           
  2541                           ;main.c: 659: }
  2542                           ;main.c: 663: qtd_vezes_mesma_tecla_pressionada=0;
  2543  007AAE  0100               	movlb	0	; () banked
  2544  007AB0  6BB3               	clrf	_qtd_vezes_mesma_tecla_pressionada& (0+255),b
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;main.c: 664: caractere_recebido=0;
  2548  007AB2  6BB2               	clrf	_caractere_recebido& (0+255),b
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 668: printf("\n\n%s",buffer_teclado_matricial);
  2552  007AB4  0EB4               	movlw	low _buffer_teclado_matricial
  2553  007AB6  6F6C               	movwf	?_printf& (0+255),b
  2554  007AB8  0EBE               	movlw	STR_6& (0+255)
  2555  007ABA  EC60  F039         	call	_printf
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 670: if(buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] != 'F'){
  2559  007ABE  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2560  007AC0  0FB4               	addlw	low _buffer_teclado_matricial
  2561  007AC2  6ED9               	movwf	fsr2l,c
  2562  007AC4  6ADA               	clrf	fsr2h,c
  2563  007AC6  0E46               	movlw	70
  2564  007AC8  18DE               	xorwf	postinc2,w,c
  2565  007ACA  E017               	bz	l5831
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 672: if(qtd_caracteres_recebidos_teclado){
  2569  007ACC  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2570  007ACE  E00B               	bz	l5825
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 673: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado);
  2574  007AD0  C036  F061         	movff	_qtd_caracteres_recebidos_teclado,lcd_gotoxy@coluna
  2575  007AD4  0E02               	movlw	2
  2576  007AD6  EC4B  F033         	call	_lcd_gotoxy
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 674: printf("*%c",buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]);
  2580  007ADA  DA75               	call	PL30	;call to abstracted procedure
  2581  007ADC  0EC7               	movlw	STR_7& (0+255)
  2582  007ADE  EC60  F039         	call	_printf
  2583  007AE2                     l5823:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 675: TMR1ON=1;}
  2587  007AE2  80CD               	bsf	4045,0,c	;volatile
  2588  007AE4  D00A               	goto	l5831
  2589  007AE6                     l5825:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;main.c: 677: else{
  2593                           ;main.c: 678: lcd_gotoxy(2,(qtd_caracteres_recebidos_teclado+1));
  2594  007AE6  2836               	incf	_qtd_caracteres_recebidos_teclado,w,c
  2595  007AE8  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  2596  007AEA  0E02               	movlw	2
  2597  007AEC  EC4B  F033         	call	_lcd_gotoxy
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 679: printf("%c",buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]);
  2601  007AF0  DA6A               	call	PL30	;call to abstracted procedure
  2602  007AF2  0EC8               	movlw	(STR_7+1)& (0+255)
  2603  007AF4  EC60  F039         	call	_printf
  2604  007AF8  D7F4               	goto	l5823
  2605  007AFA                     l5831:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 681: }
  2609                           ;main.c: 684: if( buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] == 'F' || +
      +                          +qtd_caracteres_recebidos_teclado==(40-1)){
  2610  007AFA  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2611  007AFC  0FB4               	addlw	low _buffer_teclado_matricial
  2612  007AFE  6ED9               	movwf	fsr2l,c
  2613  007B00  6ADA               	clrf	fsr2h,c
  2614  007B02  0E46               	movlw	70
  2615  007B04  18DE               	xorwf	postinc2,w,c
  2616  007B06  E004               	bz	l5835
  2617                           
  2618                           ; BSR set to: 0
  2619  007B08  2A36               	incf	_qtd_caracteres_recebidos_teclado,f,c
  2620  007B0A  0E27               	movlw	39
  2621  007B0C  1836               	xorwf	_qtd_caracteres_recebidos_teclado,w,c
  2622  007B0E  E154               	bnz	l5871
  2623  007B10                     l5835:
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;main.c: 686: resetar_timer1(0xC0,0);
  2627  007B10  6B60               	clrf	resetar_timer1@valor_l& (0+255),b
  2628  007B12  0EC0               	movlw	192
  2629  007B14  EC68  F031         	call	_resetar_timer1
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 687: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado] = 0;
  2633  007B18  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  2634  007B1A  0FB4               	addlw	low _buffer_teclado_matricial
  2635  007B1C  6ED9               	movwf	fsr2l,c
  2636  007B1E  6ADA               	clrf	fsr2h,c
  2637  007B20  6ADF               	clrf	indf2,c
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 690: conta = ( ((buffer_teclado_matricial[0]-'0')*10) + (buffer_teclado_matrici
      +                          al[1]-'0') );
  2641  007B22  51B4               	movf	_buffer_teclado_matricial& (0+255),w,b
  2642  007B24  0D0A               	mullw	10
  2643  007B26  50F3               	movf	prodl,w,c
  2644  007B28  25B5               	addwf	(_buffer_teclado_matricial+1)& (0+255),w,b
  2645  007B2A  0FF0               	addlw	240
  2646  007B2C  6FAB               	movwf	main@conta& (0+255),b
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 691: cont=2;
  2650  007B2E  0E02               	movlw	2
  2651  007B30  6FAE               	movwf	main@cont& (0+255),b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 693: if(!(conta<16)) (FLAGS_1 |= (1<<2));
  2655  007B32  0E0F               	movlw	15
  2656  007B34  65AB               	cpfsgt	main@conta& (0+255),b
  2657  007B36  D002               	goto	l5847
  2658  007B38                     l5845:
  2659                           
  2660                           ; BSR set to: 0
  2661  007B38  85B1               	bsf	_FLAGS_1& (0+255),2,b
  2662  007B3A  D008               	goto	l5853
  2663  007B3C                     l5847:
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 698: else if(funcao != '6' && (!(contas_cadastradas & (1<<conta))) ){
  2667  007B3C  0E36               	movlw	54
  2668  007B3E  19AD               	xorwf	main@funcao& (0+255),w,b
  2669  007B40  E005               	bz	l5853
  2670                           
  2671                           ; BSR set to: 0
  2672  007B42  C0AB  F089         	movff	main@conta,??_main
  2673  007B46  DA14               	call	PL4	;call to abstracted procedure
  2674  007B48  DA46               	call	PL32	;call to abstracted procedure
  2675  007B4A  E0F6               	bz	l5845
  2676  007B4C                     l5853:
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 705: if(qtd_caracteres_recebidos_teclado<(5+2)){(FLAGS_1 |= (1<<7));}
  2680  007B4C  0E07               	movlw	7
  2681  007B4E  6036               	cpfslt	_qtd_caracteres_recebidos_teclado,c
  2682  007B50  D001               	goto	l5857
  2683                           
  2684                           ; BSR set to: 0
  2685  007B52  8FB1               	bsf	_FLAGS_1& (0+255),7,b
  2686  007B54                     l5857:
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 706: limpar_linha(2);
  2690  007B54  0E02               	movlw	2
  2691  007B56  ECF2  F031         	call	_limpar_linha
  2692                           
  2693                           ;main.c: 708: while(cont<(16+2) && buffer_teclado_matricial[cont-2] != 0 && FLAGS_1<2){
  2694  007B5A  D020               	goto	l5863
  2695  007B5C                     l5859:
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;main.c: 713: if(buffer_teclado_matricial[cont] != senha[conta][cont-2]){
  2699  007B5C  51AB               	movf	main@conta& (0+255),w,b
  2700  007B5E  0D11               	mullw	17
  2701  007B60  0EFE               	movlw	254
  2702  007B62  6F89               	movwf	??_main& (0+255),b
  2703  007B64  698A               	setf	(??_main+1)& (0+255),b
  2704  007B66  0E50               	movlw	low _senha
  2705  007B68  6F8B               	movwf	(??_main+2)& (0+255),b
  2706  007B6A  0E01               	movlw	high _senha
  2707  007B6C  6F8C               	movwf	(??_main+3)& (0+255),b
  2708  007B6E  5189               	movf	??_main& (0+255),w,b
  2709  007B70  278B               	addwf	(??_main+2)& (0+255),f,b
  2710  007B72  518A               	movf	(??_main+1)& (0+255),w,b
  2711  007B74  238C               	addwfc	(??_main+3)& (0+255),f,b
  2712  007B76  50F3               	movf	prodl,w,c
  2713  007B78  278B               	addwf	(??_main+2)& (0+255),f,b
  2714  007B7A  50F4               	movf	prodh,w,c
  2715  007B7C  238C               	addwfc	(??_main+3)& (0+255),f,b
  2716  007B7E  51AE               	movf	main@cont& (0+255),w,b
  2717  007B80  258B               	addwf	(??_main+2)& (0+255),w,b
  2718  007B82  6ED9               	movwf	fsr2l,c
  2719  007B84  0E00               	movlw	0
  2720  007B86  218C               	addwfc	(??_main+3)& (0+255),w,b
  2721  007B88  6EDA               	movwf	fsr2h,c
  2722  007B8A  51AE               	movf	main@cont& (0+255),w,b
  2723  007B8C  0FB4               	addlw	low _buffer_teclado_matricial
  2724  007B8E  6EE1               	movwf	fsr1l,c
  2725  007B90  6AE2               	clrf	fsr1h,c
  2726  007B92  50DE               	movf	postinc2,w,c
  2727  007B94  18E6               	xorwf	postinc1,w,c
  2728  007B96  A4D8               	btfss	status,2,c
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 714: (FLAGS_1 |= (1<<6));
  2732  007B98  8DB1               	bsf	_FLAGS_1& (0+255),6,b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 715: }
  2736                           ;main.c: 717: cont++;
  2737  007B9A  2BAE               	incf	main@cont& (0+255),f,b
  2738  007B9C                     l5863:
  2739                           
  2740                           ; BSR set to: 0
  2741  007B9C  0E12               	movlw	18
  2742  007B9E  61AE               	cpfslt	main@cont& (0+255),b
  2743  007BA0  D009               	goto	l5869
  2744                           
  2745                           ; BSR set to: 0
  2746  007BA2  51AE               	movf	main@cont& (0+255),w,b
  2747  007BA4  0FB2               	addlw	low (_buffer_teclado_matricial+254)
  2748  007BA6  6ED9               	movwf	fsr2l,c
  2749  007BA8  6ADA               	clrf	fsr2h,c
  2750  007BAA  50DF               	movf	indf2,w,c
  2751  007BAC  E003               	bz	l5869
  2752                           
  2753                           ; BSR set to: 0
  2754  007BAE  0E01               	movlw	1
  2755  007BB0  65B1               	cpfsgt	_FLAGS_1& (0+255),b
  2756  007BB2  D7D4               	goto	l5859
  2757  007BB4                     l5869:
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;main.c: 718: }
  2761                           ;main.c: 720: (FLAGS_2 |= (1<<7));
  2762  007BB4  8E2D               	bsf	_FLAGS_2,7,c
  2763  007BB6                     L3:
  2764                           
  2765                           ;main.c: 721: (FLAGS_2 |= (1<<0));
  2766  007BB6  802D               	bsf	_FLAGS_2,0,c
  2767  007BB8                     l5871:
  2768                           
  2769                           ;main.c: 723: }
  2770                           ;main.c: 724: }
  2771                           ;main.c: 726: }
  2772                           ;main.c: 729: if((FLAGS_2 & (1<<0))){
  2773  007BB8  A02D               	btfss	_FLAGS_2,0,c
  2774  007BBA  D144               	goto	l6021
  2775                           
  2776                           ;main.c: 732: (FLAGS_2 &= ~(1<<0));
  2777  007BBC  902D               	bcf	_FLAGS_2,0,c
  2778                           
  2779                           ;main.c: 733: qtd_caracteres_recebidos_serial, qtd_caracteres_recebidos_teclado,cont=0;
  2780  007BBE  0100               	movlb	0	; () banked
  2781  007BC0  6BAE               	clrf	main@cont& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 734: etapa = 0;
  2785  007BC2  6BA8               	clrf	main@etapa& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 735: zerar_string(buffer_serial);
  2789  007BC4  0E00               	movlw	low _buffer_serial
  2790  007BC6  6F60               	movwf	zerar_string@string_a_zerar& (0+255),b
  2791  007BC8  0E01               	movlw	high _buffer_serial
  2792  007BCA  6F61               	movwf	(zerar_string@string_a_zerar+1)& (0+255),b
  2793  007BCC  ECCF  F031         	call	_zerar_string	;wreg free
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 736: zerar_string(buffer_teclado_matricial);
  2797  007BD0  0EB4               	movlw	low _buffer_teclado_matricial
  2798  007BD2  6F60               	movwf	zerar_string@string_a_zerar& (0+255),b
  2799  007BD4  6B61               	clrf	(zerar_string@string_a_zerar+1)& (0+255),b
  2800  007BD6  ECCF  F031         	call	_zerar_string	;wreg free
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 739: if((FLAGS_3 & (1<<2))){
  2804  007BDA  A42E               	btfss	_FLAGS_3,2,c
  2805  007BDC  D05A               	goto	l5933
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 741: if(FLAGS_1<2) {
  2809  007BDE  0E02               	movlw	2
  2810  007BE0  61B1               	cpfslt	_FLAGS_1& (0+255),b
  2811  007BE2  D042               	goto	l5923
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 744: limpar_linha(3);
  2815  007BE4  0E03               	movlw	3
  2816  007BE6  ECF2  F031         	call	_limpar_linha
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 745: printf("\n\nDestravando...");
  2820  007BEA  0E97               	movlw	STR_9& (0+255)
  2821  007BEC  EC60  F039         	call	_printf
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 746: _delay((unsigned long)((49)*(16000000/4000.0)));
  2825  007BF0  6989               	setf	??_main& (0+255),b
  2826  007BF2  0E8A               	movlw	138
  2827  007BF4                     u7627:
  2828  007BF4  2EE8               	decfsz	wreg,f,c
  2829  007BF6  D7FE               	goto	u7627
  2830  007BF8  2F89               	decfsz	??_main& (0+255),f,b
  2831  007BFA  D7FC               	goto	u7627
  2832  007BFC  D000               	nop2	
  2833                           
  2834                           ;main.c: 747: delay_ms(800);
  2835  007BFE  0E03               	movlw	3
  2836  007C00  0100               	movlb	0	; () banked
  2837  007C02  6F61               	movwf	(delay_ms@delay_total+1)& (0+255),b
  2838  007C04  0E20               	movlw	32
  2839  007C06  6F60               	movwf	delay_ms@delay_total& (0+255),b
  2840  007C08  EC2A  F032         	call	_delay_ms	;wreg free
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 748: char tentativas=0;
  2844  007C0C  6BA1               	clrf	main@tentativas& (0+255),b
  2845                           
  2846                           ;main.c: 750: while(PORTEbits.RE2==0){
  2847  007C0E  D015               	goto	l5909
  2848  007C10                     l5897:
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;main.c: 751: if(++tentativas == 6){
  2852  007C10  2BA1               	incf	main@tentativas& (0+255),f,b
  2853  007C12  0E06               	movlw	6
  2854  007C14  19A1               	xorwf	main@tentativas& (0+255),w,b
  2855  007C16  E102               	bnz	l365
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 752: (FLAGS_1 |= (1<<5));
  2859  007C18  8BB1               	bsf	_FLAGS_1& (0+255),5,b
  2860                           
  2861                           ;main.c: 753: break;}
  2862  007C1A  D011               	goto	l5911
  2863  007C1C                     l365:
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;main.c: 755: LATCbits.LC4=1;
  2867  007C1C  888B               	bsf	3979,4,c	;volatile
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 756: delay_ms(350);
  2871  007C1E  0E01               	movlw	1
  2872  007C20  6F61               	movwf	(delay_ms@delay_total+1)& (0+255),b
  2873  007C22  0E5E               	movlw	94
  2874  007C24  6F60               	movwf	delay_ms@delay_total& (0+255),b
  2875  007C26  EC2A  F032         	call	_delay_ms	;wreg free
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;main.c: 757: if(PORTEbits.RE2==0) delay_ms(100);
  2879  007C2A  B484               	btfsc	3972,2,c	;volatile
  2880  007C2C  D005               	goto	l5907
  2881                           
  2882                           ; BSR set to: 0
  2883  007C2E  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  2884  007C30  0E64               	movlw	100
  2885  007C32  6F60               	movwf	delay_ms@delay_total& (0+255),b
  2886  007C34  EC2A  F032         	call	_delay_ms	;wreg free
  2887  007C38                     l5907:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 758: LATCbits.LC4=0;
  2891  007C38  988B               	bcf	3979,4,c	;volatile
  2892  007C3A                     l5909:
  2893                           
  2894                           ; BSR set to: 0
  2895  007C3A  A484               	btfss	3972,2,c	;volatile
  2896  007C3C  D7E9               	goto	l5897
  2897  007C3E                     l5911:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 759: }
  2901                           ;main.c: 762: lcd_gotoxy(1,20);
  2902  007C3E  0E14               	movlw	20
  2903  007C40  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  2904  007C42  0E01               	movlw	1
  2905  007C44  EC4B  F033         	call	_lcd_gotoxy
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 763: printf("%c",PORTEbits.RE2);
  2909  007C48  D9CD               	call	PL34	;call to abstracted procedure
  2910  007C4A  EC60  F039         	call	_printf
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;main.c: 765: limpar_linha(3);
  2914  007C4E  0E03               	movlw	3
  2915  007C50  ECF2  F031         	call	_limpar_linha
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 766: if(PORTEbits.RE2==0){
  2919  007C54  B484               	btfsc	3972,2,c	;volatile
  2920  007C56  D004               	goto	l5921
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;main.c: 767: printf("\n\nErro de abertura");}
  2924  007C58  0E72               	movlw	STR_11& (0+255)
  2925  007C5A  EC60  F039         	call	_printf
  2926  007C5E  D0F2               	goto	l6021
  2927  007C60                     l5921:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;main.c: 769: else{
  2931                           ;main.c: 770: printf("\n\nPorta aberta");}
  2932  007C60  0EA8               	movlw	STR_12& (0+255)
  2933  007C62  EC60  F039         	call	_printf
  2934  007C66  D0EE               	goto	l6021
  2935  007C68                     l5923:
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 774: else{
  2939                           ;main.c: 775: limpar_linha(3);
  2940  007C68  0E03               	movlw	3
  2941  007C6A  ECF2  F031         	call	_limpar_linha
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;main.c: 776: if((FLAGS_1 & (1<<7))) printf("\n\nErro de protocolo");
  2945  007C6E  AFB1               	btfss	_FLAGS_1& (0+255),7,b
  2946  007C70  D004               	goto	l371
  2947                           
  2948                           ; BSR set to: 0
  2949  007C72  0E5E               	movlw	STR_13& (0+255)
  2950  007C74  EC60  F039         	call	_printf
  2951  007C78  D0E5               	goto	l6021
  2952  007C7A                     l371:
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 778: else if((FLAGS_1 & (1<<2))) printf("\n\nConta nao existente");
  2956  007C7A  A5B1               	btfss	_FLAGS_1& (0+255),2,b
  2957  007C7C  D004               	goto	l373
  2958                           
  2959                           ; BSR set to: 0
  2960  007C7E  0E48               	movlw	STR_14& (0+255)
  2961  007C80  EC60  F039         	call	_printf
  2962  007C84  D0DF               	goto	l6021
  2963  007C86                     l373:
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;main.c: 780: else if((FLAGS_1 & (1<<6))) printf("\n\nSenha incorreta");}
  2967  007C86  ADB1               	btfss	_FLAGS_1& (0+255),6,b
  2968  007C88  D0DD               	goto	l6021
  2969                           
  2970                           ; BSR set to: 0
  2971  007C8A  0E85               	movlw	STR_15& (0+255)
  2972  007C8C  EC60  F039         	call	_printf
  2973  007C90  D0D9               	goto	l6021
  2974  007C92                     l5933:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 783: else{
  2978                           ;main.c: 785: enviar_string_serial("\nI");
  2979  007C92  0ECE               	movlw	low STR_16
  2980  007C94  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  2981  007C96  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  2982  007C98  A4D8               	btfss	status,2,c
  2983  007C9A  0E10               	movlw	high __smallconst
  2984  007C9C  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  2985  007C9E  EC70  F033         	call	_enviar_string_serial	;wreg free
  2986                           
  2987                           ;main.c: 787: if(!FLAGS_1){
  2988  007CA2  0100               	movlb	0	; () banked
  2989  007CA4  51B1               	movf	_FLAGS_1& (0+255),w,b
  2990  007CA6  E001 D093          	bnz	l5985
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 788: etapa = 0;
  2994  007CAA  6BA8               	clrf	main@etapa& (0+255),b
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;main.c: 789: LATDbits.LD2^=1;
  2998  007CAC  748C               	btg	3980,2,c	;volatile
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;main.c: 790: enviar_string_serial("OK");
  3002  007CAE  0ED1               	movlw	low STR_17
  3003  007CB0  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3004  007CB2  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  3005  007CB4  A4D8               	btfss	status,2,c
  3006  007CB6  0E10               	movlw	high __smallconst
  3007  007CB8  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3008  007CBA  EC70  F033         	call	_enviar_string_serial	;wreg free
  3009                           
  3010                           ;main.c: 792: if(funcao == '2'){
  3011  007CBE  0E32               	movlw	50
  3012  007CC0  0100               	movlb	0	; () banked
  3013  007CC2  19AD               	xorwf	main@funcao& (0+255),w,b
  3014  007CC4  E121               	bnz	l5947
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 793: numero_para_ascii(data_atual.ano);
  3018  007CC6  5038               	movf	_data_atual,w,c
  3019  007CC8  ECE4  F034         	call	_numero_para_ascii
  3020                           
  3021                           ;main.c: 794: numero_para_ascii(data_atual.mes);
  3022  007CCC  5039               	movf	_data_atual+1,w,c
  3023  007CCE  ECE4  F034         	call	_numero_para_ascii
  3024                           
  3025                           ;main.c: 795: numero_para_ascii(data_atual.dia_da_semana);
  3026  007CD2  503E               	movf	_data_atual+6,w,c
  3027  007CD4  ECE4  F034         	call	_numero_para_ascii
  3028                           
  3029                           ;main.c: 796: numero_para_ascii(data_atual.dia);
  3030  007CD8  503A               	movf	_data_atual+2,w,c
  3031  007CDA  ECE4  F034         	call	_numero_para_ascii
  3032                           
  3033                           ;main.c: 797: numero_para_ascii(data_atual.hora);
  3034  007CDE  503B               	movf	_data_atual+3,w,c
  3035  007CE0  ECE4  F034         	call	_numero_para_ascii
  3036                           
  3037                           ;main.c: 798: numero_para_ascii(data_atual.minuto);
  3038  007CE4  503C               	movf	_data_atual+4,w,c
  3039  007CE6  ECE4  F034         	call	_numero_para_ascii
  3040                           
  3041                           ;main.c: 799: numero_para_ascii(data_atual.segundo);
  3042  007CEA  503D               	movf	_data_atual+5,w,c
  3043  007CEC  ECE4  F034         	call	_numero_para_ascii
  3044                           
  3045                           ;main.c: 800: numero_para_ascii(qtd_total_contas);
  3046  007CF0  51A5               	movf	main@qtd_total_contas& (0+255),w,b
  3047  007CF2  ECE4  F034         	call	_numero_para_ascii
  3048                           
  3049                           ;main.c: 801: numero_para_ascii(16);
  3050  007CF6  0E10               	movlw	16
  3051  007CF8  ECE4  F034         	call	_numero_para_ascii
  3052  007CFC  0E01               	movlw	1
  3053                           
  3054                           ;main.c: 802: numero_para_ascii(PORTEbits.RE2);}
  3055  007CFE  A484               	btfss	3972,2,c	;volatile
  3056  007D00  0E00               	movlw	0
  3057  007D02  ECE4  F034         	call	_numero_para_ascii
  3058  007D06  D098               	goto	l397
  3059  007D08                     l5947:
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;main.c: 805: else if(funcao == '7' || funcao == '6'){
  3063  007D08  0E37               	movlw	55
  3064  007D0A  19AD               	xorwf	main@funcao& (0+255),w,b
  3065  007D0C  E003               	bz	l5951
  3066                           
  3067                           ; BSR set to: 0
  3068  007D0E  0E36               	movlw	54
  3069  007D10  19AD               	xorwf	main@funcao& (0+255),w,b
  3070  007D12  E141               	bnz	l5967
  3071  007D14                     l5951:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 807: (contas_cadastradas |= (1<<conta_a_ser_alterada));
  3075  007D14  C0A6  F089         	movff	main@conta_a_ser_alterada,??_main
  3076  007D18  D92B               	call	PL4	;call to abstracted procedure
  3077  007D1A  518A               	movf	(??_main+1)& (0+255),w,b
  3078  007D1C  13A3               	iorwf	main@contas_cadastradas& (0+255),f,b
  3079  007D1E  518B               	movf	(??_main+2)& (0+255),w,b
  3080  007D20  13A4               	iorwf	(main@contas_cadastradas+1)& (0+255),f,b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;main.c: 809: char i=0;
  3084  007D22  6BAA               	clrf	main@i_840& (0+255),b
  3085  007D24                     l5955:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;main.c: 811: senha[conta_a_ser_alterada][i] = nova_senha[i];
  3089  007D24  51AA               	movf	main@i_840& (0+255),w,b
  3090  007D26  0FDC               	addlw	low _nova_senha
  3091  007D28  6ED9               	movwf	fsr2l,c
  3092  007D2A  6ADA               	clrf	fsr2h,c
  3093  007D2C  51A6               	movf	main@conta_a_ser_alterada& (0+255),w,b
  3094  007D2E  D941               	call	PL24	;call to abstracted procedure
  3095  007D30  51AA               	movf	main@i_840& (0+255),w,b
  3096  007D32  2589               	addwf	??_main& (0+255),w,b
  3097  007D34  6EE1               	movwf	fsr1l,c
  3098  007D36  0E00               	movlw	0
  3099  007D38  218A               	addwfc	(??_main+1)& (0+255),w,b
  3100  007D3A  6EE2               	movwf	fsr1h,c
  3101  007D3C  CFDF FFE7          	movff	indf2,indf1
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;main.c: 812: (Busy_eep(), Write_b_eep(((conta_a_ser_alterada*16) + i),nova_senha[i]));
  3105  007D40  EC48  F031         	call	_Busy_eep	;wreg free
  3106  007D44  0100               	movlb	0	; () banked
  3107  007D46  51A6               	movf	main@conta_a_ser_alterada& (0+255),w,b
  3108  007D48  6F89               	movwf	??_main& (0+255),b
  3109  007D4A  6B8A               	clrf	(??_main+1)& (0+255),b
  3110  007D4C  3B89               	swapf	??_main& (0+255),f,b
  3111  007D4E  3B8A               	swapf	(??_main+1)& (0+255),f,b
  3112  007D50  0EF0               	movlw	240
  3113  007D52  178A               	andwf	(??_main+1)& (0+255),f,b
  3114  007D54  5189               	movf	??_main& (0+255),w,b
  3115  007D56  0B0F               	andlw	15
  3116  007D58  138A               	iorwf	(??_main+1)& (0+255),f,b
  3117  007D5A  0EF0               	movlw	240
  3118  007D5C  1789               	andwf	??_main& (0+255),f,b
  3119  007D5E  51AA               	movf	main@i_840& (0+255),w,b
  3120  007D60  2589               	addwf	??_main& (0+255),w,b
  3121  007D62  6F60               	movwf	Write_b_eep@badd& (0+255),b
  3122  007D64  0E00               	movlw	0
  3123  007D66  218A               	addwfc	(??_main+1)& (0+255),w,b
  3124  007D68  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
  3125  007D6A  51AA               	movf	main@i_840& (0+255),w,b
  3126  007D6C  0FDC               	addlw	low _nova_senha
  3127  007D6E  6ED9               	movwf	fsr2l,c
  3128  007D70  6ADA               	clrf	fsr2h,c
  3129  007D72  50DF               	movf	indf2,w,c
  3130  007D74  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  3131  007D76  EC6A  F032         	call	_Write_b_eep	;wreg free
  3132  007D7A                     l384:
  3133  007D7A  B2A6               	btfsc	4006,1,c	;volatile
  3134  007D7C  D7FE               	goto	l384
  3135                           
  3136                           ;main.c: 814: i++;} while(nova_senha[i-1] && i<16);
  3137  007D7E  0100               	movlb	0	; () banked
  3138  007D80  2BAA               	incf	main@i_840& (0+255),f,b
  3139                           
  3140                           ; BSR set to: 0
  3141  007D82  51AA               	movf	main@i_840& (0+255),w,b
  3142  007D84  0FDB               	addlw	low (_nova_senha+255)
  3143  007D86  6ED9               	movwf	fsr2l,c
  3144  007D88  6ADA               	clrf	fsr2h,c
  3145  007D8A  50DF               	movf	indf2,w,c
  3146  007D8C  E055               	bz	l397
  3147                           
  3148                           ; BSR set to: 0
  3149  007D8E  0E0F               	movlw	15
  3150  007D90  65AA               	cpfsgt	main@i_840& (0+255),b
  3151  007D92  D7C8               	goto	l5955
  3152  007D94  D051               	goto	l397
  3153  007D96                     l5967:
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;main.c: 817: else if(funcao == '0'){
  3157  007D96  0E30               	movlw	48
  3158  007D98  19AD               	xorwf	main@funcao& (0+255),w,b
  3159  007D9A  E14E               	bnz	l397
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;main.c: 818: char tentativas=0;
  3163  007D9C  6BA2               	clrf	main@tentativas_841& (0+255),b
  3164                           
  3165                           ;main.c: 819: while(PORTEbits.RE2==0){
  3166  007D9E  D015               	goto	l5983
  3167  007DA0                     l5971:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;main.c: 820: if(++tentativas == 6){
  3171  007DA0  2BA2               	incf	main@tentativas_841& (0+255),f,b
  3172  007DA2  0E06               	movlw	6
  3173  007DA4  19A2               	xorwf	main@tentativas_841& (0+255),w,b
  3174  007DA6  E102               	bnz	l394
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;main.c: 821: (FLAGS_1 |= (1<<5));
  3178  007DA8  8BB1               	bsf	_FLAGS_1& (0+255),5,b
  3179                           
  3180                           ;main.c: 822: break;}
  3181  007DAA  D046               	goto	l397
  3182  007DAC                     l394:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 823: LATCbits.LC4=1;
  3186  007DAC  888B               	bsf	3979,4,c	;volatile
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;main.c: 824: delay_ms(325);
  3190  007DAE  0E01               	movlw	1
  3191  007DB0  6F61               	movwf	(delay_ms@delay_total+1)& (0+255),b
  3192  007DB2  0E45               	movlw	69
  3193  007DB4  6F60               	movwf	delay_ms@delay_total& (0+255),b
  3194  007DB6  EC2A  F032         	call	_delay_ms	;wreg free
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 825: LATCbits.LC4=0;
  3198  007DBA  988B               	bcf	3979,4,c	;volatile
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 826: if(PORTEbits.RE2==0) delay_ms(100);
  3202  007DBC  B484               	btfsc	3972,2,c	;volatile
  3203  007DBE  D005               	goto	l5983
  3204                           
  3205                           ; BSR set to: 0
  3206  007DC0  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  3207  007DC2  0E64               	movlw	100
  3208  007DC4  6F60               	movwf	delay_ms@delay_total& (0+255),b
  3209  007DC6  EC2A  F032         	call	_delay_ms	;wreg free
  3210  007DCA                     l5983:
  3211                           
  3212                           ; BSR set to: 0
  3213  007DCA  B484               	btfsc	3972,2,c	;volatile
  3214  007DCC  D035               	goto	l397
  3215  007DCE  D7E8               	goto	l5971
  3216  007DD0                     l5985:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 832: else{
  3220                           ;main.c: 834: enviar_caractere_serial('E');
  3221  007DD0  0E45               	movlw	69
  3222  007DD2  EC61  F031         	call	_enviar_caractere_serial
  3223                           
  3224                           ;main.c: 835: if((FLAGS_1 & (1<<1))){
  3225  007DD6  0100               	movlb	0	; () banked
  3226  007DD8  A3B1               	btfss	_FLAGS_1& (0+255),1,b
  3227  007DDA  D008               	goto	l5991
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 836: enviar_string_serial("SE");}
  3231  007DDC  0ECB               	movlw	low STR_18
  3232  007DDE  6F60               	movwf	enviar_string_serial@string_a_enviar& (0+255),b
  3233  007DE0  5160               	movf	enviar_string_serial@string_a_enviar& (0+255),w,b
  3234  007DE2  A4D8               	btfss	status,2,c
  3235  007DE4  0E10               	movlw	high __smallconst
  3236  007DE6  6F61               	movwf	(enviar_string_serial@string_a_enviar+1)& (0+255),b
  3237  007DE8  EC70  F033         	call	_enviar_string_serial	;wreg free
  3238  007DEC                     l5991:
  3239                           
  3240                           ;main.c: 838: if((FLAGS_1 & (1<<5))){
  3241  007DEC  0100               	movlb	0	; () banked
  3242  007DEE  ABB1               	btfss	_FLAGS_1& (0+255),5,b
  3243  007DF0  D003               	goto	l5995
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 839: enviar_caractere_serial('A');}
  3247  007DF2  0E41               	movlw	65
  3248  007DF4  EC61  F031         	call	_enviar_caractere_serial
  3249  007DF8                     l5995:
  3250                           
  3251                           ;main.c: 841: if((FLAGS_1 & (1<<3))){
  3252  007DF8  0100               	movlb	0	; () banked
  3253  007DFA  A7B1               	btfss	_FLAGS_1& (0+255),3,b
  3254  007DFC  D003               	goto	l5999
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 842: enviar_caractere_serial('N');}
  3258  007DFE  0E4E               	movlw	78
  3259  007E00  EC61  F031         	call	_enviar_caractere_serial
  3260  007E04                     l5999:
  3261                           
  3262                           ;main.c: 844: if((FLAGS_1 & (1<<7))){
  3263  007E04  0100               	movlb	0	; () banked
  3264  007E06  AFB1               	btfss	_FLAGS_1& (0+255),7,b
  3265  007E08  D003               	goto	l6003
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;main.c: 845: enviar_caractere_serial('P');}
  3269  007E0A  0E50               	movlw	80
  3270  007E0C  EC61  F031         	call	_enviar_caractere_serial
  3271  007E10                     l6003:
  3272                           
  3273                           ;main.c: 847: if((FLAGS_1 & (1<<4))){
  3274  007E10  0100               	movlb	0	; () banked
  3275  007E12  A9B1               	btfss	_FLAGS_1& (0+255),4,b
  3276  007E14  D003               	goto	l6007
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 848: enviar_caractere_serial('C');}
  3280  007E16  0E43               	movlw	67
  3281  007E18  EC61  F031         	call	_enviar_caractere_serial
  3282  007E1C                     l6007:
  3283                           
  3284                           ;main.c: 850: if((FLAGS_1 & (1<<6))){
  3285  007E1C  0100               	movlb	0	; () banked
  3286  007E1E  ADB1               	btfss	_FLAGS_1& (0+255),6,b
  3287  007E20  D003               	goto	l6011
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 851: enviar_caractere_serial('S');}
  3291  007E22  0E53               	movlw	83
  3292  007E24  EC61  F031         	call	_enviar_caractere_serial
  3293  007E28                     l6011:
  3294                           
  3295                           ;main.c: 853: if((FLAGS_1 & (1<<2))){
  3296  007E28  0100               	movlb	0	; () banked
  3297  007E2A  A5B1               	btfss	_FLAGS_1& (0+255),2,b
  3298  007E2C  D003               	goto	l6015
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 854: enviar_caractere_serial('I');}
  3302  007E2E  0E49               	movlw	73
  3303  007E30  EC61  F031         	call	_enviar_caractere_serial
  3304  007E34                     l6015:
  3305                           
  3306                           ;main.c: 856: FLAGS_1=0;}
  3307  007E34  0100               	movlb	0	; () banked
  3308  007E36  6BB1               	clrf	_FLAGS_1& (0+255),b
  3309  007E38                     l397:
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;main.c: 860: enviar_caractere_serial('F');
  3313  007E38  0E46               	movlw	70
  3314  007E3A  EC61  F031         	call	_enviar_caractere_serial
  3315                           
  3316                           ;main.c: 861: PORTB_SR = PORTB;
  3317  007E3E  CF81 F031          	movff	3969,_PORTB_SR	;volatile
  3318                           
  3319                           ;main.c: 862: RBIE=1;
  3320  007E42  86F2               	bsf	intcon,3,c	;volatile
  3321  007E44                     l6021:
  3322                           
  3323                           ;main.c: 863: }
  3324                           ;main.c: 865: }
  3325                           ;main.c: 867: if((PORTB&0xF0) == 0xF0 && RBIE==0 && (FLAGS_2 & (1<<3)) && (FLAGS_3 & (1<
      +                          <2))){
  3326  007E44  5081               	movf	3969,w,c	;volatile
  3327  007E46  0BF0               	andlw	240
  3328  007E48  0AF0               	xorlw	240
  3329  007E4A  B4D8               	btfsc	status,2,c
  3330  007E4C  B6F2               	btfsc	intcon,3,c	;volatile
  3331  007E4E  D052               	goto	l405
  3332  007E50  B62D               	btfsc	_FLAGS_2,3,c
  3333  007E52  A42E               	btfss	_FLAGS_3,2,c
  3334  007E54  D04F               	goto	l405
  3335                           
  3336                           ;main.c: 869: delay_ms(100);
  3337  007E56  0100               	movlb	0	; () banked
  3338  007E58  6B61               	clrf	(delay_ms@delay_total+1)& (0+255),b
  3339  007E5A  0E64               	movlw	100
  3340  007E5C  6F60               	movwf	delay_ms@delay_total& (0+255),b
  3341  007E5E  EC2A  F032         	call	_delay_ms	;wreg free
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 870: if(caractere_recebido < '0' || caractere_recebido > '9'){
  3345  007E62  0E2F               	movlw	47
  3346  007E64  65B2               	cpfsgt	_caractere_recebido& (0+255),b
  3347  007E66  D003               	goto	l6035
  3348                           
  3349                           ; BSR set to: 0
  3350  007E68  0E39               	movlw	57
  3351  007E6A  65B2               	cpfsgt	_caractere_recebido& (0+255),b
  3352  007E6C  D02A               	goto	l406
  3353  007E6E                     l6035:
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;main.c: 873: resetar_timer1(0xC0,0);
  3357  007E6E  6B60               	clrf	resetar_timer1@valor_l& (0+255),b
  3358  007E70  0EC0               	movlw	192
  3359  007E72  EC68  F031         	call	_resetar_timer1
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 874: ultimo_caractere_recebido = caractere_recebido;
  3363  007E76  C0B2  F0A9         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;main.c: 877: if(caractere_recebido == 'F'){
  3367  007E7A  0E46               	movlw	70
  3368  007E7C  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3369  007E7E  E102               	bnz	l6043
  3370  007E80                     l6041:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 878: (FLAGS_2 |= (1<<1));}
  3374  007E80  822D               	bsf	_FLAGS_2,1,c
  3375  007E82  D033               	goto	l429
  3376  007E84                     l6043:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 880: else if(caractere_recebido == 'A'){
  3380  007E84  0E41               	movlw	65
  3381  007E86  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3382  007E88  E102               	bnz	l6047
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;main.c: 881: (FLAGS_2 ^= (1<<4));}
  3386  007E8A  0E10               	movlw	16
  3387  007E8C  D004               	goto	L4
  3388  007E8E                     l6047:
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 883: else if(caractere_recebido == '*'){
  3392  007E8E  0E2A               	movlw	42
  3393  007E90  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3394  007E92  E103               	bnz	l6051
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;main.c: 884: (FLAGS_2 ^= (1<<5));}
  3398  007E94  0E20               	movlw	32
  3399  007E96                     L4:
  3400  007E96  1A2D               	xorwf	_FLAGS_2,f,c
  3401  007E98  D028               	goto	l429
  3402  007E9A                     l6051:
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 886: else if(caractere_recebido == 'D'){
  3406  007E9A  0E44               	movlw	68
  3407  007E9C  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3408  007E9E  E125               	bnz	l429
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;main.c: 888: if(qtd_caracteres_recebidos_teclado) qtd_caracteres_recebidos_teclado--;
  3412  007EA0  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3413  007EA2  A4D8               	btfss	status,2,c
  3414                           
  3415                           ; BSR set to: 0
  3416  007EA4  0636               	decf	_qtd_caracteres_recebidos_teclado,f,c
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;main.c: 889: buffer_teclado_matricial[qtd_caracteres_recebidos_teclado]=0;
  3420  007EA6  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3421  007EA8  0FB4               	addlw	low _buffer_teclado_matricial
  3422  007EAA  6ED9               	movwf	fsr2l,c
  3423  007EAC  6ADA               	clrf	fsr2h,c
  3424  007EAE  6ADF               	clrf	indf2,c
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 891: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado); printf(" ");
  3428  007EB0  C036  F061         	movff	_qtd_caracteres_recebidos_teclado,lcd_gotoxy@coluna
  3429  007EB4  0E02               	movlw	2
  3430  007EB6  EC4B  F033         	call	_lcd_gotoxy
  3431                           
  3432                           ; BSR set to: 0
  3433  007EBA  0EDA               	movlw	STR_19& (0+255)
  3434  007EBC  EC60  F039         	call	_printf
  3435  007EC0  D014               	goto	l429
  3436  007EC2                     l406:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;main.c: 898: else{
  3440                           ;main.c: 899: if((FLAGS_2 & (1<<4))){
  3441  007EC2  A82D               	btfss	_FLAGS_2,4,c
  3442  007EC4  D7DD               	goto	l6041
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 900: if(ultimo_caractere_recebido == caractere_recebido){
  3446  007EC6  51B2               	movf	_caractere_recebido& (0+255),w,b
  3447  007EC8  19A9               	xorwf	main@ultimo_caractere_recebido& (0+255),w,b
  3448  007ECA  E10B               	bnz	l6073
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 901: if(++qtd_vezes_mesma_tecla_pressionada == 3 || ((qtd_vezes_mesma_tecla_pre
      +                          ssionada==2) && caractere_recebido == '9'))
  3452  007ECC  2BB3               	incf	_qtd_vezes_mesma_tecla_pressionada& (0+255),f,b
  3453  007ECE  0E03               	movlw	3
  3454  007ED0  19B3               	xorwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3455  007ED2  E0D6               	bz	l6041
  3456                           
  3457                           ; BSR set to: 0
  3458  007ED4  0E02               	movlw	2
  3459  007ED6  19B3               	xorwf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3460  007ED8  E108               	bnz	l429
  3461                           
  3462                           ; BSR set to: 0
  3463  007EDA  0E39               	movlw	57
  3464  007EDC  19B2               	xorwf	_caractere_recebido& (0+255),w,b
  3465  007EDE  E0D0               	bz	l6041
  3466  007EE0  D004               	goto	l429
  3467  007EE2                     l6073:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;main.c: 906: else {
  3471                           ;main.c: 907: if(qtd_vezes_mesma_tecla_pressionada) (FLAGS_2 |= (1<<1));
  3472  007EE2  51B3               	movf	_qtd_vezes_mesma_tecla_pressionada& (0+255),w,b
  3473  007EE4  E1CD               	bnz	l6041
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;main.c: 909: else ultimo_caractere_recebido = caractere_recebido;
  3477  007EE6  C0B2  F0A9         	movff	_caractere_recebido,main@ultimo_caractere_recebido
  3478  007EEA                     l429:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;main.c: 920: if((FLAGS_2 & (1<<4))) {TMR1ON=1;}
  3482  007EEA  B82D               	btfsc	_FLAGS_2,4,c
  3483                           
  3484                           ; BSR set to: 0
  3485  007EEC  80CD               	bsf	4045,0,c	;volatile
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;main.c: 922: PORTB_SR=PORTB;
  3489  007EEE  CF81 F031          	movff	3969,_PORTB_SR	;volatile
  3490                           
  3491                           ;main.c: 923: RBIE=1;
  3492  007EF2  86F2               	bsf	intcon,3,c	;volatile
  3493  007EF4                     l405:
  3494                           
  3495                           ;main.c: 924: }
  3496                           ;main.c: 927: if((FLAGS_2 & (1<<7))){
  3497  007EF4  AE2D               	btfss	_FLAGS_2,7,c
  3498  007EF6  D026               	goto	l6089
  3499                           
  3500                           ;main.c: 928: (FLAGS_2 &= ~(1<<7));
  3501  007EF8  9E2D               	bcf	_FLAGS_2,7,c
  3502                           
  3503                           ;main.c: 930: if((FLAGS_3 & (1<<0))){
  3504  007EFA  A02E               	btfss	_FLAGS_3,0,c
  3505  007EFC  D023               	goto	l6089
  3506                           
  3507                           ;main.c: 931: printf("\n\n\n%02d:%02d:%02d-%02d.%02d.%02d",data_atual.hora,data_atual.mi
      +                          nuto,data_atual.segundo, data_atual.dia,data_atual.mes,((data_atual.ano+15)%100) );
  3508  007EFE  C03B  F06C         	movff	_data_atual+3,?_printf
  3509  007F02  0100               	movlb	0	; () banked
  3510  007F04  6B6D               	clrf	(?_printf+1)& (0+255),b
  3511  007F06  C03C  F06E         	movff	_data_atual+4,?_printf+2
  3512  007F0A  6B6F               	clrf	(?_printf+3)& (0+255),b
  3513  007F0C  C03D  F070         	movff	_data_atual+5,?_printf+4
  3514  007F10  6B71               	clrf	(?_printf+5)& (0+255),b
  3515  007F12  C03A  F072         	movff	_data_atual+2,?_printf+6
  3516  007F16  6B73               	clrf	(?_printf+7)& (0+255),b
  3517  007F18  C039  F074         	movff	_data_atual+1,?_printf+8
  3518  007F1C  6B75               	clrf	(?_printf+9)& (0+255),b
  3519  007F1E  0E0F               	movlw	15
  3520  007F20  2438               	addwf	_data_atual,w,c
  3521  007F22  6F60               	movwf	___awmod@dividend& (0+255),b
  3522  007F24  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3523  007F26  0E00               	movlw	0
  3524  007F28  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3525  007F2A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3526  007F2C  0E64               	movlw	100
  3527  007F2E  6F62               	movwf	___awmod@divisor& (0+255),b
  3528  007F30  ECCF  F033         	call	___awmod	;wreg free
  3529  007F34  C060  F076         	movff	?___awmod,?_printf+10
  3530  007F38  C061  F077         	movff	?___awmod+1,?_printf+11
  3531  007F3C  0E27               	movlw	STR_20& (0+255)
  3532  007F3E  EC60  F039         	call	_printf
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;main.c: 932: (FLAGS_3 &= ~(1<<0));
  3536  007F42  902E               	bcf	_FLAGS_3,0,c
  3537  007F44                     l6089:
  3538                           
  3539                           ;main.c: 933: }
  3540                           ;main.c: 936: }
  3541                           ;main.c: 938: if( (!(FLAGS_2 & (1<<7)))&& (!(FLAGS_2 & (1<<1))) && (!(FLAGS_2 & (1<<0)))
      +                           && RBIE && RCIE){
  3542  007F44  AE2D               	btfss	_FLAGS_2,7,c
  3543  007F46  B22D               	btfsc	_FLAGS_2,1,c
  3544  007F48  EF68  F03B         	goto	l5557
  3545  007F4C  A02D               	btfss	_FLAGS_2,0,c
  3546  007F4E  A6F2               	btfss	intcon,3,c	;volatile
  3547  007F50  EF68  F03B         	goto	l5557
  3548  007F54  AA9D               	btfss	3997,5,c	;volatile
  3549  007F56  EF68  F03B         	goto	l5557
  3550  007F5A  0003               	sleep		;# 
  3551                           
  3552                           ;main.c: 940: __nop();}
  3553  007F5C  F000               	nop	
  3554  007F5E  EF68  F03B         	goto	l5557
  3555  007F62                     __end_of_main:
  3556                           	opt stack 0
  3557  007F62                     PL2:
  3558                           	opt stack 20
  3559  007F62  0E00               	movlw	low _buffer_serial
  3560  007F64  25AE               	addwf	main@cont& (0+255),w,b
  3561  007F66  6ED9               	movwf	fsr2l,c
  3562  007F68  6ADA               	clrf	fsr2h,c
  3563  007F6A  0E01               	movlw	high _buffer_serial
  3564  007F6C  22DA               	addwfc	fsr2h,f,c
  3565  007F6E  0012               	return	
  3566  007F70                     __end_ofPL2:
  3567                           	opt stack 0
  3568  007F70                     PL4:
  3569                           	opt stack 20
  3570  007F70  0E01               	movlw	1
  3571  007F72  6F8A               	movwf	(??_main+1)& (0+255),b
  3572  007F74  6B8B               	clrf	(??_main+2)& (0+255),b
  3573  007F76  2B89               	incf	??_main& (0+255),f,b
  3574  007F78  D003               	goto	u6334
  3575  007F7A                     u6335:
  3576  007F7A  90D8               	bcf	status,0,c
  3577  007F7C  378A               	rlcf	(??_main+1)& (0+255),f,b
  3578  007F7E  378B               	rlcf	(??_main+2)& (0+255),f,b
  3579  007F80                     u6334:
  3580  007F80  2F89               	decfsz	??_main& (0+255),f,b
  3581  007F82  D7FB               	goto	u6335
  3582  007F84  0100               	movlb	0	; () banked
  3583  007F86  0012               	return	
  3584  007F88                     __end_ofPL4:
  3585                           	opt stack 0
  3586  007F88                     PL6:
  3587                           	opt stack 20
  3588  007F88  51AB               	movf	main@conta& (0+255),w,b
  3589  007F8A  0D11               	mullw	17
  3590  007F8C  0E5F               	movlw	low (_senha+15)
  3591  007F8E  24F3               	addwf	prodl,w,c
  3592  007F90  6ED9               	movwf	fsr2l,c
  3593  007F92  0E01               	movlw	high (_senha+15)
  3594  007F94  20F4               	addwfc	prodh,w,c
  3595  007F96  6EDA               	movwf	fsr2h,c
  3596  007F98  50DF               	movf	indf2,w,c
  3597  007F9A  0012               	return	
  3598  007F9C                     __end_ofPL6:
  3599                           	opt stack 0
  3600  007F9C                     PL20:
  3601                           	opt stack 20
  3602  007F9C  2BAE               	incf	main@cont& (0+255),f,b
  3603  007F9E  05AE               	decf	main@cont& (0+255),w,b
  3604  007FA0  6F89               	movwf	??_main& (0+255),b
  3605  007FA2  6B8A               	clrf	(??_main+1)& (0+255),b
  3606  007FA4  0E00               	movlw	low _buffer_serial
  3607  007FA6  2589               	addwf	??_main& (0+255),w,b
  3608  007FA8  6ED9               	movwf	fsr2l,c
  3609  007FAA  0E01               	movlw	high _buffer_serial
  3610  007FAC  218A               	addwfc	(??_main+1)& (0+255),w,b
  3611  007FAE  6EDA               	movwf	fsr2h,c
  3612  007FB0  0012               	return	
  3613  007FB2                     __end_ofPL20:
  3614                           	opt stack 0
  3615  007FB2                     PL24:
  3616                           	opt stack 20
  3617  007FB2  0D11               	mullw	17
  3618  007FB4  0E50               	movlw	low _senha
  3619  007FB6  6F89               	movwf	??_main& (0+255),b
  3620  007FB8  0E01               	movlw	high _senha
  3621  007FBA  6F8A               	movwf	(??_main+1)& (0+255),b
  3622  007FBC  50F3               	movf	prodl,w,c
  3623  007FBE  2789               	addwf	??_main& (0+255),f,b
  3624  007FC0  50F4               	movf	prodh,w,c
  3625  007FC2  238A               	addwfc	(??_main+1)& (0+255),f,b
  3626  007FC4  0012               	return	
  3627  007FC6                     __end_ofPL24:
  3628                           	opt stack 0
  3629  007FC6                     PL30:
  3630                           	opt stack 20
  3631  007FC6  5036               	movf	_qtd_caracteres_recebidos_teclado,w,c
  3632  007FC8  0FB4               	addlw	low _buffer_teclado_matricial
  3633  007FCA  6ED9               	movwf	fsr2l,c
  3634  007FCC  6ADA               	clrf	fsr2h,c
  3635  007FCE  50DF               	movf	indf2,w,c
  3636  007FD0  6F6C               	movwf	?_printf& (0+255),b
  3637  007FD2  6B6D               	clrf	(?_printf+1)& (0+255),b
  3638  007FD4  0012               	return	
  3639  007FD6                     __end_ofPL30:
  3640                           	opt stack 0
  3641  007FD6                     PL32:
  3642                           	opt stack 20
  3643  007FD6  51A3               	movf	main@contas_cadastradas& (0+255),w,b
  3644  007FD8  178A               	andwf	(??_main+1)& (0+255),f,b
  3645  007FDA  51A4               	movf	(main@contas_cadastradas+1)& (0+255),w,b
  3646  007FDC  178B               	andwf	(??_main+2)& (0+255),f,b
  3647  007FDE  518A               	movf	(??_main+1)& (0+255),w,b
  3648  007FE0  118B               	iorwf	(??_main+2)& (0+255),w,b
  3649  007FE2  0012               	return	
  3650  007FE4                     __end_ofPL32:
  3651                           	opt stack 0
  3652  007FE4                     PL34:
  3653                           	opt stack 20
  3654  007FE4  0E01               	movlw	1
  3655  007FE6  A484               	btfss	3972,2,c	;volatile
  3656  007FE8  0E00               	movlw	0
  3657  007FEA  6F6C               	movwf	?_printf& (0+255),b
  3658  007FEC  6B6D               	clrf	(?_printf+1)& (0+255),b
  3659  007FEE  0EC8               	movlw	(STR_7+1)& (0+255)
  3660  007FF0  0012               	return	
  3661  007FF2                     __end_ofPL34:
  3662                           	opt stack 0
  3663  007FF2                     PL36:
  3664                           	opt stack 20
  3665  007FF2  0E00               	movlw	low _buffer_serial
  3666  007FF4  25A7               	addwf	main@i& (0+255),w,b
  3667  007FF6  6ED9               	movwf	fsr2l,c
  3668  007FF8  6ADA               	clrf	fsr2h,c
  3669  007FFA  0E01               	movlw	high _buffer_serial
  3670  007FFC  22DA               	addwfc	fsr2h,f,c
  3671  007FFE  0012               	return	
  3672  008000                     __end_ofPL36:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           intcon2	equ	0xFF1
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           indf1	equ	0xFE7
  3685                           postinc1	equ	0xFE6
  3686                           postdec1	equ	0xFE5
  3687                           plusw1	equ	0xFE3
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           plusw2	equ	0xFDB
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function _zerar_string *****************
  3699 ;; Defined at:
  3700 ;;		line 106 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  string_a_zer    2    0[BANK0 ] PTR unsigned char 
  3703 ;;		 -> buffer_teclado_matricial(40), buffer_serial(80), 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;		None               void
  3708 ;; Registers used:
  3709 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3710 ;; Tracked objects:
  3711 ;;		On entry : F/0
  3712 ;;		On exit  : F/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3715 ;;      Params:         0       2       0       0       0       0       0       0       0
  3716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3718 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3719 ;;Total ram usage:        2 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    6
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_main
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text1
  3730  00639E                     __ptext1:
  3731                           	opt stack 0
  3732  00639E                     _zerar_string:
  3733                           	opt stack 24
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;main.c: 108: while(*string_a_zerar != (0)){
  3737                           
  3738                           ;incstack = 0
  3739  00639E  D008               	goto	l5113
  3740  0063A0                     l5109:
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;main.c: 109: *string_a_zerar=0;
  3744  0063A0  C060  FFD9         	movff	zerar_string@string_a_zerar,fsr2l
  3745  0063A4  C061  FFDA         	movff	zerar_string@string_a_zerar+1,fsr2h
  3746  0063A8  0E00               	movlw	0
  3747  0063AA  6EDF               	movwf	indf2,c
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;main.c: 110: string_a_zerar++;}
  3751  0063AC  4B60               	infsnz	zerar_string@string_a_zerar& (0+255),f,b
  3752  0063AE  2B61               	incf	(zerar_string@string_a_zerar+1)& (0+255),f,b
  3753  0063B0                     l5113:
  3754                           
  3755                           ; BSR set to: 0
  3756  0063B0  C060  FFD9         	movff	zerar_string@string_a_zerar,fsr2l
  3757  0063B4  C061  FFDA         	movff	zerar_string@string_a_zerar+1,fsr2h
  3758  0063B8  50DF               	movf	indf2,w,c
  3759  0063BA  B4D8               	btfsc	status,2,c
  3760                           
  3761                           ; BSR set to: 0
  3762  0063BC  0012               	return		;funcret
  3763  0063BE  D7F0               	goto	l5109
  3764  0063C0                     __end_of_zerar_string:
  3765                           	opt stack 0
  3766                           tblptru	equ	0xFF8
  3767                           tblptrh	equ	0xFF7
  3768                           tblptrl	equ	0xFF6
  3769                           tablat	equ	0xFF5
  3770                           prodh	equ	0xFF4
  3771                           prodl	equ	0xFF3
  3772                           intcon	equ	0xFF2
  3773                           intcon2	equ	0xFF1
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           indf1	equ	0xFE7
  3777                           postinc1	equ	0xFE6
  3778                           postdec1	equ	0xFE5
  3779                           plusw1	equ	0xFE3
  3780                           fsr1h	equ	0xFE2
  3781                           fsr1l	equ	0xFE1
  3782                           indf2	equ	0xFDF
  3783                           postinc2	equ	0xFDE
  3784                           postdec2	equ	0xFDD
  3785                           plusw2	equ	0xFDB
  3786                           fsr2h	equ	0xFDA
  3787                           fsr2l	equ	0xFD9
  3788                           status	equ	0xFD8
  3789                           
  3790 ;; *************** function _verificar_num_contas *****************
  3791 ;; Defined at:
  3792 ;;		line 19 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  i               1    3[BANK0 ] unsigned char 
  3797 ;;  qtd_contas      1    2[BANK0 ] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      unsigned char 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : F/0
  3804 ;;		On exit  : F/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3807 ;;      Params:         0       0       0       0       0       0       0       0       0
  3808 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3810 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3811 ;;Total ram usage:        2 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    7
  3814 ;; This function calls:
  3815 ;;		_Read_b_eep
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text2
  3822  00647E                     __ptext2:
  3823                           	opt stack 0
  3824  00647E                     _verificar_num_contas:
  3825                           	opt stack 23
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;eeprom_interna.c: 20: char i;
  3829                           ;eeprom_interna.c: 21: unsigned char qtd_contas=0;
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;incstack = 0
  3833  00647E  6B62               	clrf	verificar_num_contas@qtd_contas& (0+255),b
  3834                           
  3835                           ;eeprom_interna.c: 22: for(i=0;i<16;i++){
  3836  006480  6B63               	clrf	verificar_num_contas@i& (0+255),b
  3837  006482                     l5309:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;eeprom_interna.c: 23: if(Read_b_eep(i*16) != 0xFF) {qtd_contas++;}
  3841  006482  5163               	movf	verificar_num_contas@i& (0+255),w,b
  3842  006484  0D10               	mullw	16
  3843  006486  CFF3 F060          	movff	prodl,Read_b_eep@badd
  3844  00648A  CFF4 F061          	movff	prodh,Read_b_eep@badd+1
  3845  00648E  EC6F  F031         	call	_Read_b_eep	;wreg free
  3846  006492  0AFF               	xorlw	255
  3847  006494  E002               	bz	l599
  3848  006496  0100               	movlb	0	; () banked
  3849  006498  2B62               	incf	verificar_num_contas@qtd_contas& (0+255),f,b
  3850  00649A                     l599:
  3851  00649A  0100               	movlb	0	; () banked
  3852  00649C  2B63               	incf	verificar_num_contas@i& (0+255),f,b
  3853                           
  3854                           ; BSR set to: 0
  3855  00649E  0E0F               	movlw	15
  3856  0064A0  6563               	cpfsgt	verificar_num_contas@i& (0+255),b
  3857  0064A2  D7EF               	goto	l5309
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;eeprom_interna.c: 24: }
  3861                           ;eeprom_interna.c: 25: return (qtd_contas);
  3862  0064A4  5162               	movf	verificar_num_contas@qtd_contas& (0+255),w,b
  3863                           
  3864                           ; BSR set to: 0
  3865  0064A6  0012               	return		;funcret
  3866  0064A8                     __end_of_verificar_num_contas:
  3867                           	opt stack 0
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           intcon	equ	0xFF2
  3875                           intcon2	equ	0xFF1
  3876                           postinc0	equ	0xFEE
  3877                           wreg	equ	0xFE8
  3878                           indf1	equ	0xFE7
  3879                           postinc1	equ	0xFE6
  3880                           postdec1	equ	0xFE5
  3881                           plusw1	equ	0xFE3
  3882                           fsr1h	equ	0xFE2
  3883                           fsr1l	equ	0xFE1
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           postdec2	equ	0xFDD
  3887                           plusw2	equ	0xFDB
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _resetar_timer1 *****************
  3893 ;; Defined at:
  3894 ;;		line 30 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  valor_h         1    wreg     unsigned char 
  3897 ;;  valor_l         1    0[BANK0 ] unsigned char 
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  valor_h         1    1[BANK0 ] unsigned char 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;		None               void
  3902 ;; Registers used:
  3903 ;;		wreg
  3904 ;; Tracked objects:
  3905 ;;		On entry : F/0
  3906 ;;		On exit  : F/0
  3907 ;;		Unchanged: F/0
  3908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3909 ;;      Params:         0       1       0       0       0       0       0       0       0
  3910 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3912 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3913 ;;Total ram usage:        2 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    6
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_main
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text3
  3924  0062D0                     __ptext3:
  3925                           	opt stack 0
  3926  0062D0                     _resetar_timer1:
  3927                           	opt stack 24
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;incstack = 0
  3931                           ;resetar_timer1@valor_h stored from wreg
  3932  0062D0  6F61               	movwf	resetar_timer1@valor_h& (0+255),b
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;time.c: 31: TMR1ON=0;
  3936  0062D2  90CD               	bcf	4045,0,c	;volatile
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;time.c: 32: TMR1H=valor_h;
  3940  0062D4  C061  FFCF         	movff	resetar_timer1@valor_h,4047	;volatile
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;time.c: 33: TMR1L=valor_l;
  3944  0062D8  C060  FFCE         	movff	resetar_timer1@valor_l,4046	;volatile
  3945                           
  3946                           ; BSR set to: 0
  3947  0062DC  0012               	return		;funcret
  3948  0062DE                     __end_of_resetar_timer1:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           intcon	equ	0xFF2
  3957                           intcon2	equ	0xFF1
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           indf1	equ	0xFE7
  3961                           postinc1	equ	0xFE6
  3962                           postdec1	equ	0xFE5
  3963                           plusw1	equ	0xFE3
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           plusw2	equ	0xFDB
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _printf *****************
  3975 ;; Defined at:
  3976 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  f               1    wreg     PTR const unsigned char 
  3979 ;;		 -> STR_20(33), STR_19(2), STR_15(18), STR_14(22), 
  3980 ;;		 -> STR_13(20), STR_12(15), STR_11(19), STR_10(3), 
  3981 ;;		 -> STR_9(17), STR_8(3), STR_7(4), STR_6(5), 
  3982 ;;		 -> STR_3(3), STR_2(3), STR_1(2), 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  f               1   37[BANK0 ] PTR const unsigned char 
  3985 ;;		 -> STR_20(33), STR_19(2), STR_15(18), STR_14(22), 
  3986 ;;		 -> STR_13(20), STR_12(15), STR_11(19), STR_10(3), 
  3987 ;;		 -> STR_9(17), STR_8(3), STR_7(4), STR_6(5), 
  3988 ;;		 -> STR_3(3), STR_2(3), STR_1(2), 
  3989 ;;  tmpval          4    0        struct .
  3990 ;;  width           2   38[BANK0 ] int 
  3991 ;;  len             2   34[BANK0 ] unsigned int 
  3992 ;;  val             2   32[BANK0 ] unsigned int 
  3993 ;;  cp              2   29[BANK0 ] PTR const unsigned char 
  3994 ;;		 -> STR_21(7), printf@c(1), buffer_teclado_matricial(40), 
  3995 ;;  c               1   40[BANK0 ] char 
  3996 ;;  flag            1   36[BANK0 ] unsigned char 
  3997 ;;  ap              1   31[BANK0 ] PTR void [1]
  3998 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3999 ;;  prec            1   28[BANK0 ] char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  2   12[BANK0 ] int 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : F/0
  4006 ;;		On exit  : F/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4009 ;;      Params:         0      12       0       0       0       0       0       0       0
  4010 ;;      Locals:         0      13       0       0       0       0       0       0       0
  4011 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4012 ;;      Totals:         0      29       0       0       0       0       0       0       0
  4013 ;;Total ram usage:       29 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:   10
  4016 ;; This function calls:
  4017 ;;		___lwdiv
  4018 ;;		___lwmod
  4019 ;;		___wmul
  4020 ;;		_isdigit
  4021 ;;		_putch
  4022 ;; This function is called by:
  4023 ;;		_main
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text4
  4028  0072C0                     __ptext4:
  4029                           	opt stack 0
  4030  0072C0                     _printf:
  4031                           	opt stack 20
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;incstack = 0
  4035                           ;printf@f stored from wreg
  4036  0072C0  6F85               	movwf	printf@f& (0+255),b
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;doprnt.c: 466: va_list ap;
  4040                           ;doprnt.c: 499: signed char c;
  4041                           ;doprnt.c: 501: int width;
  4042                           ;doprnt.c: 506: signed char prec;
  4043                           ;doprnt.c: 508: unsigned char flag;
  4044                           ;doprnt.c: 523: union {
  4045                           ;doprnt.c: 524: unsigned long vd;
  4046                           ;doprnt.c: 525: double integ;
  4047                           ;doprnt.c: 526: } tmpval;
  4048                           ;doprnt.c: 528: unsigned int val;
  4049                           ;doprnt.c: 529: unsigned len;
  4050                           ;doprnt.c: 530: const char * cp;
  4051                           ;doprnt.c: 533: *ap = __va_start();
  4052  0072C2  0E6C               	movlw	low ?_printf
  4053  0072C4  6F7F               	movwf	printf@ap& (0+255),b
  4054                           
  4055                           ;doprnt.c: 536: while(c = *f++) {
  4056  0072C6  D159               	goto	l5241
  4057  0072C8                     l5117:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 538: if(c != '%')
  4061  0072C8  0E25               	movlw	37
  4062  0072CA  1988               	xorwf	printf@c& (0+255),w,b
  4063  0072CC  E004               	bz	l762
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;doprnt.c: 540: {
  4067                           ;doprnt.c: 541: (putch(c) );
  4068  0072CE  5188               	movf	printf@c& (0+255),w,b
  4069  0072D0  EC4F  F031         	call	_putch
  4070                           
  4071                           ;doprnt.c: 542: continue;
  4072  0072D4  D152               	goto	l5241
  4073  0072D6                     l762:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;doprnt.c: 543: }
  4077                           ;doprnt.c: 546: width = 0;
  4078  0072D6  6B86               	clrf	printf@width& (0+255),b
  4079  0072D8  6B87               	clrf	(printf@width+1)& (0+255),b
  4080                           
  4081                           ;doprnt.c: 548: flag = 0;
  4082  0072DA  6B84               	clrf	printf@flag& (0+255),b
  4083  0072DC  D002               	goto	l5125
  4084  0072DE                     l5121:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;doprnt.c: 580: flag |= 0x04;
  4088  0072DE  8584               	bsf	printf@flag& (0+255),2,b
  4089                           
  4090                           ;doprnt.c: 581: f++;
  4091  0072E0  2B85               	incf	printf@f& (0+255),f,b
  4092  0072E2                     l5125:
  4093                           
  4094                           ; BSR set to: 0
  4095  0072E2  C085  FFF6         	movff	printf@f,tblptrl
  4096  0072E6  EC48  F039         	call	PL12	;call to abstracted procedure
  4097                           
  4098                           ; Switch size 1, requested type "space"
  4099                           ; Number of cases is 1, Range of values is 48 to 48
  4100                           ; switch strategies available:
  4101                           ; Name         Instructions Cycles
  4102                           ; simple_byte            4     3 (average)
  4103                           ;	Chosen strategy is simple_byte
  4104  0072EA  0A30               	xorlw	48	; case 48
  4105  0072EC  E0F8               	bz	l5121
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4109  0072EE  C085  FFF6         	movff	printf@f,tblptrl
  4110  0072F2  EC48  F039         	call	PL12	;call to abstracted procedure
  4111  0072F6  ECA0  F031         	call	_isdigit
  4112  0072FA  E201 D09F          	bnc	l5177
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;doprnt.c: 598: width = 0;
  4116  0072FE  6B86               	clrf	printf@width& (0+255),b
  4117  007300  6B87               	clrf	(printf@width+1)& (0+255),b
  4118  007302                     l5131:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;doprnt.c: 600: width *= 10;
  4122  007302  C086  F060         	movff	printf@width,___wmul@multiplier
  4123  007306  C087  F061         	movff	printf@width+1,___wmul@multiplier+1
  4124  00730A  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  4125  00730C  0E0A               	movlw	10
  4126  00730E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4127  007310  EC17  F032         	call	___wmul	;wreg free
  4128  007314  C060  F086         	movff	?___wmul,printf@width
  4129  007318  C061  F087         	movff	?___wmul+1,printf@width+1
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;doprnt.c: 601: width += *f++ - '0';
  4133  00731C  0ED0               	movlw	208
  4134  00731E  6F78               	movwf	??_printf& (0+255),b
  4135  007320  6979               	setf	(??_printf+1)& (0+255),b
  4136  007322  C085  FFF6         	movff	printf@f,tblptrl
  4137  007326  EC48  F039         	call	PL12	;call to abstracted procedure
  4138  00732A  6F7A               	movwf	(??_printf+2)& (0+255),b
  4139  00732C  6B7B               	clrf	(??_printf+3)& (0+255),b
  4140  00732E  5178               	movf	??_printf& (0+255),w,b
  4141  007330  277A               	addwf	(??_printf+2)& (0+255),f,b
  4142  007332  5179               	movf	(??_printf+1)& (0+255),w,b
  4143  007334  237B               	addwfc	(??_printf+3)& (0+255),f,b
  4144  007336  517A               	movf	(??_printf+2)& (0+255),w,b
  4145  007338  2786               	addwf	printf@width& (0+255),f,b
  4146  00733A  517B               	movf	(??_printf+3)& (0+255),w,b
  4147  00733C  2387               	addwfc	(printf@width+1)& (0+255),f,b
  4148                           
  4149                           ; BSR set to: 0
  4150  00733E  2B85               	incf	printf@f& (0+255),f,b
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4154  007340  C085  FFF6         	movff	printf@f,tblptrl
  4155  007344  EC48  F039         	call	PL12	;call to abstracted procedure
  4156  007348  ECA0  F031         	call	_isdigit
  4157  00734C  E377               	bnc	l5177
  4158  00734E  D7D9               	goto	l5131
  4159  007350                     l5139:
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4163  007350  517F               	movf	printf@ap& (0+255),w,b
  4164  007352  6ED9               	movwf	fsr2l,c
  4165  007354  6ADA               	clrf	fsr2h,c
  4166  007356  50DF               	movf	indf2,w,c
  4167  007358  6F78               	movwf	??_printf& (0+255),b
  4168  00735A  C078  F07D         	movff	??_printf,printf@cp
  4169  00735E  6B7E               	clrf	(printf@cp+1)& (0+255),b
  4170                           
  4171                           ; BSR set to: 0
  4172  007360  2B7F               	incf	printf@ap& (0+255),f,b
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;doprnt.c: 740: if(!cp)
  4176  007362  517D               	movf	printf@cp& (0+255),w,b
  4177  007364  117E               	iorwf	(printf@cp+1)& (0+255),w,b
  4178  007366  E106               	bnz	l5147
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;doprnt.c: 741: cp = "(null)";
  4182  007368  0EB7               	movlw	low STR_21
  4183  00736A  6F7D               	movwf	printf@cp& (0+255),b
  4184  00736C  517D               	movf	printf@cp& (0+255),w,b
  4185  00736E  A4D8               	btfss	status,2,c
  4186  007370  0E10               	movlw	high __smallconst
  4187  007372  6F7E               	movwf	(printf@cp+1)& (0+255),b
  4188  007374                     l5147:
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;doprnt.c: 745: len = 0;
  4192  007374  6B82               	clrf	printf@len& (0+255),b
  4193  007376  6B83               	clrf	(printf@len+1)& (0+255),b
  4194                           
  4195                           ;doprnt.c: 746: while(cp[len])
  4196  007378  D003               	goto	l5151
  4197  00737A                     l5149:
  4198                           
  4199                           ;doprnt.c: 747: len++;
  4200  00737A  0100               	movlb	0	; () banked
  4201  00737C  4B82               	infsnz	printf@len& (0+255),f,b
  4202  00737E  2B83               	incf	(printf@len+1)& (0+255),f,b
  4203  007380                     l5151:
  4204                           
  4205                           ; BSR set to: 0
  4206  007380  5182               	movf	printf@len& (0+255),w,b
  4207  007382  257D               	addwf	printf@cp& (0+255),w,b
  4208  007384  6F78               	movwf	??_printf& (0+255),b
  4209  007386  5183               	movf	(printf@len+1)& (0+255),w,b
  4210  007388  217E               	addwfc	(printf@cp+1)& (0+255),w,b
  4211  00738A  6F79               	movwf	(??_printf+1)& (0+255),b
  4212  00738C  C078  FFF6         	movff	??_printf,tblptrl
  4213  007390  C079  FFF7         	movff	??_printf+1,tblptrh
  4214  007394  6AF8               	clrf	tblptru,c
  4215  007396  0E07               	movlw	(high __ramtop+-1)
  4216  007398  64F7               	cpfsgt	tblptrh,c
  4217  00739A  D003               	bra	u5847
  4218  00739C  0008               	tblrd		*
  4219  00739E  50F5               	movf	tablat,w,c
  4220  0073A0  D005               	bra	u5840
  4221  0073A2                     u5847:
  4222  0073A2  CFF6 FFE1          	movff	tblptrl,fsr1l
  4223  0073A6  CFF7 FFE2          	movff	tblptrh,fsr1h
  4224  0073AA  50E7               	movf	indf1,w,c
  4225  0073AC                     u5840:
  4226  0073AC  0900               	iorlw	0
  4227  0073AE  E1E5               	bnz	l5149
  4228  0073B0                     l5153:
  4229                           
  4230                           ;doprnt.c: 757: if(width > len)
  4231  0073B0  0100               	movlb	0	; () banked
  4232  0073B2  5186               	movf	printf@width& (0+255),w,b
  4233  0073B4  5D82               	subwf	printf@len& (0+255),w,b
  4234  0073B6  5187               	movf	(printf@width+1)& (0+255),w,b
  4235  0073B8  5983               	subwfb	(printf@len+1)& (0+255),w,b
  4236  0073BA  E205               	bc	l784
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;doprnt.c: 758: width -= len;
  4240  0073BC  5182               	movf	printf@len& (0+255),w,b
  4241  0073BE  5F86               	subwf	printf@width& (0+255),f,b
  4242  0073C0  5183               	movf	(printf@len+1)& (0+255),w,b
  4243  0073C2  5B87               	subwfb	(printf@width+1)& (0+255),f,b
  4244  0073C4  D006               	goto	l5159
  4245  0073C6                     l784:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;doprnt.c: 759: else
  4249                           ;doprnt.c: 760: width = 0;
  4250  0073C6  6B86               	clrf	printf@width& (0+255),b
  4251  0073C8  6B87               	clrf	(printf@width+1)& (0+255),b
  4252  0073CA  D003               	goto	l5159
  4253  0073CC                     l5157:
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 765: (putch(' ') );
  4257  0073CC  0E20               	movlw	32
  4258  0073CE  EC4F  F031         	call	_putch
  4259  0073D2                     l5159:
  4260  0073D2  0100               	movlb	0	; () banked
  4261  0073D4  0786               	decf	printf@width& (0+255),f,b
  4262  0073D6  A0D8               	btfss	status,0,c
  4263  0073D8  0787               	decf	(printf@width+1)& (0+255),f,b
  4264  0073DA  2986               	incf	printf@width& (0+255),w,b
  4265  0073DC  E1F7               	bnz	l5157
  4266  0073DE  2987               	incf	(printf@width+1)& (0+255),w,b
  4267  0073E0  E016               	bz	l5165
  4268  0073E2  D7F4               	goto	l5157
  4269  0073E4                     l5161:
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;doprnt.c: 768: (putch(*cp++) );
  4273  0073E4  C07D  FFF6         	movff	printf@cp,tblptrl
  4274  0073E8  C07E  FFF7         	movff	printf@cp+1,tblptrh
  4275  0073EC  6AF8               	clrf	tblptru,c
  4276  0073EE  0E07               	movlw	(high __ramtop+-1)
  4277  0073F0  64F7               	cpfsgt	tblptrh,c
  4278  0073F2  D003               	bra	u5887
  4279  0073F4  0008               	tblrd		*
  4280  0073F6  50F5               	movf	tablat,w,c
  4281  0073F8  D005               	bra	u5880
  4282  0073FA                     u5887:
  4283  0073FA  CFF6 FFE1          	movff	tblptrl,fsr1l
  4284  0073FE  CFF7 FFE2          	movff	tblptrh,fsr1h
  4285  007402  50E7               	movf	indf1,w,c
  4286  007404                     u5880:
  4287  007404  EC4F  F031         	call	_putch
  4288  007408  0100               	movlb	0	; () banked
  4289  00740A  4B7D               	infsnz	printf@cp& (0+255),f,b
  4290  00740C  2B7E               	incf	(printf@cp+1)& (0+255),f,b
  4291  00740E                     l5165:
  4292                           
  4293                           ; BSR set to: 0
  4294  00740E  0782               	decf	printf@len& (0+255),f,b
  4295  007410  A0D8               	btfss	status,0,c
  4296  007412  0783               	decf	(printf@len+1)& (0+255),f,b
  4297  007414  2982               	incf	printf@len& (0+255),w,b
  4298  007416  E1E6               	bnz	l5161
  4299  007418  2983               	incf	(printf@len+1)& (0+255),w,b
  4300  00741A  E101 D0AE          	bz	l5241
  4301  00741E  D7E2               	goto	l5161
  4302  007420                     l5167:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4306  007420  517F               	movf	printf@ap& (0+255),w,b
  4307  007422  6ED9               	movwf	fsr2l,c
  4308  007424  6ADA               	clrf	fsr2h,c
  4309  007426  50DF               	movf	indf2,w,c
  4310  007428  6F88               	movwf	printf@c& (0+255),b
  4311                           
  4312                           ; BSR set to: 0
  4313  00742A  0E02               	movlw	2
  4314  00742C  277F               	addwf	printf@ap& (0+255),f,b
  4315  00742E                     l5171:
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;doprnt.c: 805: cp = (char *)&c;
  4319  00742E  0E88               	movlw	low printf@c
  4320  007430  6F7D               	movwf	printf@cp& (0+255),b
  4321  007432  6B7E               	clrf	(printf@cp+1)& (0+255),b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;doprnt.c: 806: len = 1;
  4325  007434  6B83               	clrf	(printf@len+1)& (0+255),b
  4326  007436  0E01               	movlw	1
  4327  007438  6F82               	movwf	printf@len& (0+255),b
  4328                           
  4329                           ;doprnt.c: 807: goto dostring;
  4330  00743A  D7BA               	goto	l5153
  4331  00743C                     l5177:
  4332                           
  4333                           ; BSR set to: 0
  4334  00743C  D8A3               	call	PL16	;call to abstracted procedure
  4335                           
  4336                           ; Switch size 1, requested type "space"
  4337                           ; Number of cases is 5, Range of values is 0 to 115
  4338                           ; switch strategies available:
  4339                           ; Name         Instructions Cycles
  4340                           ; simple_byte           16     9 (average)
  4341                           ;	Chosen strategy is simple_byte
  4342  00743E  E101 D0A0          	bz	l815
  4343  007442  0A63               	xorlw	99	; case 99
  4344  007444  E0ED               	bz	l5167
  4345  007446  0A07               	xorlw	7	; case 100
  4346  007448  E006               	bz	l5179
  4347  00744A  0A0D               	xorlw	13	; case 105
  4348  00744C  E004               	bz	l5179
  4349  00744E  0A1A               	xorlw	26	; case 115
  4350  007450  E101 D77E          	bz	l5139
  4351  007454  D7EC               	goto	l5171
  4352  007456                     l5179:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;doprnt.c: 1253: {
  4356                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4357  007456  517F               	movf	printf@ap& (0+255),w,b
  4358  007458  6ED9               	movwf	fsr2l,c
  4359  00745A  6ADA               	clrf	fsr2h,c
  4360  00745C  CFDE F080          	movff	postinc2,printf@val
  4361  007460  CFDD F081          	movff	postdec2,printf@val+1
  4362                           
  4363                           ; BSR set to: 0
  4364  007464  0E02               	movlw	2
  4365  007466  277F               	addwf	printf@ap& (0+255),f,b
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;doprnt.c: 1261: if((int)val < 0) {
  4369  007468  AF81               	btfss	(printf@val+1)& (0+255),7,b
  4370  00746A  D006               	goto	l5189
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;doprnt.c: 1262: flag |= 0x03;
  4374  00746C  0E03               	movlw	3
  4375  00746E  1384               	iorwf	printf@flag& (0+255),f,b
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1263: val = -val;
  4379  007470  6D80               	negf	printf@val& (0+255),b
  4380  007472  1F81               	comf	(printf@val+1)& (0+255),f,b
  4381  007474  B0D8               	btfsc	status,0,c
  4382  007476  2B81               	incf	(printf@val+1)& (0+255),f,b
  4383  007478                     l5189:
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;doprnt.c: 1264: }
  4387                           ;doprnt.c: 1266: }
  4388                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4389  007478  0E01               	movlw	1
  4390  00747A  6F88               	movwf	printf@c& (0+255),b
  4391  00747C                     l5191:
  4392                           
  4393                           ; BSR set to: 0
  4394  00747C  0E05               	movlw	5
  4395  00747E  1988               	xorwf	printf@c& (0+255),w,b
  4396  007480  E00D               	bz	l5203
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;doprnt.c: 1306: if(val < dpowers[c])
  4400  007482  5188               	movf	printf@c& (0+255),w,b
  4401  007484  0D02               	mullw	2
  4402  007486  50F3               	movf	prodl,w,c
  4403  007488  0F1D               	addlw	low _dpowers
  4404  00748A  D888               	call	PL18	;call to abstracted procedure
  4405  00748C  50F5               	movf	tablat,w,c
  4406  00748E  5D80               	subwf	printf@val& (0+255),w,b
  4407  007490  0009               	tblrd		*+
  4408  007492  50F5               	movf	tablat,w,c
  4409  007494  5981               	subwfb	(printf@val+1)& (0+255),w,b
  4410  007496  E302               	bnc	l5203
  4411                           
  4412                           ; BSR set to: 0
  4413  007498  2B88               	incf	printf@c& (0+255),f,b
  4414  00749A  D7F0               	goto	l5191
  4415  00749C                     l5203:
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4419  00749C  5186               	movf	printf@width& (0+255),w,b
  4420  00749E  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4421  0074A0  E008               	bz	l5209
  4422                           
  4423                           ; BSR set to: 0
  4424  0074A2  C084  F078         	movff	printf@flag,??_printf
  4425  0074A6  0E03               	movlw	3
  4426  0074A8  1778               	andwf	??_printf& (0+255),f,b
  4427  0074AA  E003               	bz	l5209
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 1346: width--;
  4431  0074AC  0786               	decf	printf@width& (0+255),f,b
  4432  0074AE  A0D8               	btfss	status,0,c
  4433  0074B0  0787               	decf	(printf@width+1)& (0+255),f,b
  4434  0074B2                     l5209:
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;doprnt.c: 1381: if(width > c)
  4438  0074B2  0E80               	movlw	128
  4439  0074B4  BF88               	btfsc	printf@c& (0+255),7,b
  4440  0074B6  0E7F               	movlw	127
  4441  0074B8  6F78               	movwf	??_printf& (0+255),b
  4442  0074BA  5186               	movf	printf@width& (0+255),w,b
  4443  0074BC  5D88               	subwf	printf@c& (0+255),w,b
  4444  0074BE  5187               	movf	(printf@width+1)& (0+255),w,b
  4445  0074C0  0A80               	xorlw	128
  4446  0074C2  5978               	subwfb	??_printf& (0+255),w,b
  4447  0074C4  E207               	bc	l799
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;doprnt.c: 1382: width -= c;
  4451  0074C6  5188               	movf	printf@c& (0+255),w,b
  4452  0074C8  5F86               	subwf	printf@width& (0+255),f,b
  4453  0074CA  0E00               	movlw	0
  4454  0074CC  BF88               	btfsc	printf@c& (0+255),7,b
  4455  0074CE  0EFF               	movlw	255
  4456  0074D0  5B87               	subwfb	(printf@width+1)& (0+255),f,b
  4457  0074D2  D002               	goto	l800
  4458  0074D4                     l799:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;doprnt.c: 1383: else
  4462                           ;doprnt.c: 1384: width = 0;
  4463  0074D4  6B86               	clrf	printf@width& (0+255),b
  4464  0074D6  6B87               	clrf	(printf@width+1)& (0+255),b
  4465  0074D8                     l800:
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;doprnt.c: 1387: if(flag & 0x04) {
  4469  0074D8  A584               	btfss	printf@flag& (0+255),2,b
  4470  0074DA  D014               	goto	l5223
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;doprnt.c: 1392: if(flag & 0x03)
  4474  0074DC  C084  F078         	movff	printf@flag,??_printf
  4475  0074E0  0E03               	movlw	3
  4476  0074E2  1778               	andwf	??_printf& (0+255),f,b
  4477  0074E4  E003               	bz	l5217
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;doprnt.c: 1393: (putch('-') );
  4481  0074E6  0E2D               	movlw	45
  4482  0074E8  EC4F  F031         	call	_putch
  4483  0074EC                     l5217:
  4484                           
  4485                           ;doprnt.c: 1415: if(width)
  4486  0074EC  0100               	movlb	0	; () banked
  4487  0074EE  5186               	movf	printf@width& (0+255),w,b
  4488  0074F0  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4489  0074F2  E01D               	bz	l5233
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;doprnt.c: 1417: (putch('0') );
  4493  0074F4  0E30               	movlw	48
  4494  0074F6  EC4F  F031         	call	_putch
  4495                           
  4496                           ;doprnt.c: 1418: while(--width);
  4497  0074FA  0100               	movlb	0	; () banked
  4498  0074FC  0786               	decf	printf@width& (0+255),f,b
  4499  0074FE  A0D8               	btfss	status,0,c
  4500  007500  0787               	decf	(printf@width+1)& (0+255),f,b
  4501  007502  D7F5               	goto	L5
  4502  007504                     l5223:
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 1422: {
  4506                           ;doprnt.c: 1424: if(width
  4507                           ;doprnt.c: 1428: )
  4508  007504  5186               	movf	printf@width& (0+255),w,b
  4509  007506  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4510  007508  E00A               	bz	l5229
  4511  00750A                     l5225:
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;doprnt.c: 1430: (putch(' ') );
  4515  00750A  0E20               	movlw	32
  4516  00750C  EC4F  F031         	call	_putch
  4517                           
  4518                           ;doprnt.c: 1431: while(--width);
  4519  007510  0100               	movlb	0	; () banked
  4520  007512  0786               	decf	printf@width& (0+255),f,b
  4521  007514  A0D8               	btfss	status,0,c
  4522  007516  0787               	decf	(printf@width+1)& (0+255),f,b
  4523  007518  5186               	movf	printf@width& (0+255),w,b
  4524  00751A  1187               	iorwf	(printf@width+1)& (0+255),w,b
  4525  00751C  E1F6               	bnz	l5225
  4526  00751E                     l5229:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1438: if(flag & 0x03)
  4530  00751E  C084  F078         	movff	printf@flag,??_printf
  4531  007522  0E03               	movlw	3
  4532  007524  1778               	andwf	??_printf& (0+255),f,b
  4533  007526  E003               	bz	l5233
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;doprnt.c: 1439: (putch('-') );
  4537  007528  0E2D               	movlw	45
  4538  00752A  EC4F  F031         	call	_putch
  4539  00752E                     l5233:
  4540                           
  4541                           ;doprnt.c: 1469: }
  4542                           ;doprnt.c: 1472: prec = c;
  4543  00752E  C088  F07C         	movff	printf@c,printf@prec
  4544                           
  4545                           ;doprnt.c: 1474: while(prec--) {
  4546  007532  D01F               	goto	l5239
  4547  007534                     l5235:
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;doprnt.c: 1478: {
  4551                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4552  007534  517C               	movf	printf@prec& (0+255),w,b
  4553  007536  0D02               	mullw	2
  4554  007538  50F3               	movf	prodl,w,c
  4555  00753A  0F1D               	addlw	low _dpowers
  4556  00753C  D82F               	call	PL18	;call to abstracted procedure
  4557  00753E  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4558  007542  000A               	tblrd		*-
  4559  007544  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4560  007548  C080  F060         	movff	printf@val,___lwdiv@dividend
  4561  00754C  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
  4562  007550  EC26  F033         	call	___lwdiv	;wreg free
  4563  007554  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4564  007558  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4565  00755C  6B6A               	clrf	(___lwmod@divisor+1)& (0+255),b
  4566  00755E  0E0A               	movlw	10
  4567  007560  6F69               	movwf	___lwmod@divisor& (0+255),b
  4568  007562  ECBD  F032         	call	___lwmod	;wreg free
  4569  007566  5167               	movf	?___lwmod& (0+255),w,b
  4570  007568  0F30               	addlw	48
  4571  00756A  6F88               	movwf	printf@c& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 1523: }
  4575                           ;doprnt.c: 1524: (putch(c) );
  4576  00756C  5188               	movf	printf@c& (0+255),w,b
  4577  00756E  EC4F  F031         	call	_putch
  4578  007572                     l5239:
  4579  007572  0100               	movlb	0	; () banked
  4580  007574  077C               	decf	printf@prec& (0+255),f,b
  4581  007576  297C               	incf	printf@prec& (0+255),w,b
  4582  007578  E1DD               	bnz	l5235
  4583  00757A                     l5241:
  4584  00757A  0100               	movlb	0	; () banked
  4585  00757C  D803               	call	PL16	;call to abstracted procedure
  4586  00757E  E001 D6A3          	bnz	l5117
  4587  007582                     l815:
  4588                           
  4589                           ; BSR set to: 0
  4590  007582  0012               	return		;funcret
  4591  007584                     __end_of_printf:
  4592                           	opt stack 0
  4593  007584                     PL16:
  4594                           	opt stack 20
  4595  007584  2B85               	incf	printf@f& (0+255),f,b
  4596  007586  0585               	decf	printf@f& (0+255),w,b
  4597  007588  6F78               	movwf	??_printf& (0+255),b
  4598  00758A  C078  FFF6         	movff	??_printf,tblptrl
  4599  00758E                     	if	1	;There is more than 1 active tblptr byte
  4600  00758E  0E10               	movlw	high __smallconst
  4601  007590  6EF7               	movwf	tblptrh,c
  4602  007592                     	endif
  4603  007592                     	if	0	;tblptru may be non-zero
  4604  007592                     	endif
  4605  007592                     	if	0	;tblptru may be non-zero
  4606  007592                     	endif
  4607  007592  0008               	tblrd		*
  4608  007594  CFF5 F088          	movff	tablat,printf@c
  4609  007598  5188               	movf	printf@c& (0+255),w,b
  4610  00759A  0012               	return	
  4611  00759C                     __end_ofPL16:
  4612                           	opt stack 0
  4613  00759C                     PL18:
  4614                           	opt stack 20
  4615  00759C  6F78               	movwf	??_printf& (0+255),b
  4616  00759E  C078  FFF6         	movff	??_printf,tblptrl
  4617  0075A2                     	if	1	;There is more than 1 active tblptr byte
  4618  0075A2  0E10               	movlw	high __smallconst
  4619  0075A4  6EF7               	movwf	tblptrh,c
  4620  0075A6                     	endif
  4621  0075A6                     	if	0	;tblptru may be non-zero
  4622  0075A6                     	endif
  4623  0075A6                     	if	0	;tblptru may be non-zero
  4624  0075A6                     	endif
  4625  0075A6  0009               	tblrd		*+
  4626  0075A8  0012               	return	
  4627  0075AA                     __end_ofPL18:
  4628                           	opt stack 0
  4629                           tblptru	equ	0xFF8
  4630                           tblptrh	equ	0xFF7
  4631                           tblptrl	equ	0xFF6
  4632                           tablat	equ	0xFF5
  4633                           prodh	equ	0xFF4
  4634                           prodl	equ	0xFF3
  4635                           intcon	equ	0xFF2
  4636                           intcon2	equ	0xFF1
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           indf1	equ	0xFE7
  4640                           postinc1	equ	0xFE6
  4641                           postdec1	equ	0xFE5
  4642                           plusw1	equ	0xFE3
  4643                           fsr1h	equ	0xFE2
  4644                           fsr1l	equ	0xFE1
  4645                           indf2	equ	0xFDF
  4646                           postinc2	equ	0xFDE
  4647                           postdec2	equ	0xFDD
  4648                           plusw2	equ	0xFDB
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function _putch *****************
  4654 ;; Defined at:
  4655 ;;		line 244 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  c               1    wreg     unsigned char 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  c               1    5[BANK0 ] unsigned char 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;		None               void
  4662 ;; Registers used:
  4663 ;;		wreg, status,2, status,0, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4669 ;;      Params:         0       0       0       0       0       0       0       0       0
  4670 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4672 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4673 ;;Total ram usage:        1 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    9
  4676 ;; This function calls:
  4677 ;;		_lcd_putc
  4678 ;; This function is called by:
  4679 ;;		_printf
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           	psect	text5
  4684  00629E                     __ptext5:
  4685                           	opt stack 0
  4686  00629E                     _putch:
  4687                           	opt stack 20
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;incstack = 0
  4691                           ;putch@c stored from wreg
  4692  00629E  0100               	movlb	0	; () banked
  4693  0062A0  6F65               	movwf	putch@c& (0+255),b
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;LCD_ModSauer.c: 246: lcd_putc(c);
  4697  0062A2  5165               	movf	putch@c& (0+255),w,b
  4698  0062A4  EF03  F034         	goto	_lcd_putc
  4699  0062A8                     __end_of_putch:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           intcon2	equ	0xFF1
  4709                           postinc0	equ	0xFEE
  4710                           wreg	equ	0xFE8
  4711                           indf1	equ	0xFE7
  4712                           postinc1	equ	0xFE6
  4713                           postdec1	equ	0xFE5
  4714                           plusw1	equ	0xFE3
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           plusw2	equ	0xFDB
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function _lcd_putc *****************
  4726 ;; Defined at:
  4727 ;;		line 151 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  c               1    wreg     unsigned char 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  c               1    4[BANK0 ] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;		None               void
  4734 ;; Registers used:
  4735 ;;		wreg, status,2, status,0, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : F/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4741 ;;      Params:         0       0       0       0       0       0       0       0       0
  4742 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4744 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4745 ;;Total ram usage:        1 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    8
  4748 ;; This function calls:
  4749 ;;		_lcd_clear
  4750 ;;		_lcd_gotoxy
  4751 ;;		_lcd_write
  4752 ;; This function is called by:
  4753 ;;		_putch
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text6
  4758  006806                     __ptext6:
  4759                           	opt stack 0
  4760  006806                     _lcd_putc:
  4761                           	opt stack 20
  4762                           
  4763                           ;incstack = 0
  4764                           ;lcd_putc@c stored from wreg
  4765  006806  6F64               	movwf	lcd_putc@c& (0+255),b
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;LCD_ModSauer.c: 153: switch (c) {
  4769  006808  D029               	goto	l4949
  4770  00680A                     l4921:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;LCD_ModSauer.c: 157: lcd_clear();
  4774  00680A  EC85  F031         	call	_lcd_clear	;wreg free
  4775                           
  4776                           ;LCD_ModSauer.c: 158: break;
  4777  00680E  D02E               	goto	l726
  4778  006810                     l4923:
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;LCD_ModSauer.c: 164: case 1:
  4782                           ;LCD_ModSauer.c: 165: if(++linha_lcd>4) linha_lcd=1;
  4783  006810  2A33               	incf	_linha_lcd,f,c
  4784  006812  0E04               	movlw	4
  4785  006814  6433               	cpfsgt	_linha_lcd,c
  4786  006816  D00E               	goto	l4935
  4787                           
  4788                           ; BSR set to: 0
  4789  006818  0E01               	movlw	1
  4790  00681A  6E33               	movwf	_linha_lcd,c
  4791  00681C  D00B               	goto	l4935
  4792  00681E                     l4927:
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;LCD_ModSauer.c: 169: case 0:
  4796                           ;LCD_ModSauer.c: 170: if(++linha_lcd>2) linha_lcd=1;
  4797  00681E  2A33               	incf	_linha_lcd,f,c
  4798  006820  0E02               	movlw	2
  4799  006822  D7F8               	goto	L6
  4800  006824                     l4933:
  4801                           
  4802                           ; BSR set to: 0
  4803  006824  5032               	movf	_lcd_type,w,c
  4804                           
  4805                           ; Switch size 1, requested type "space"
  4806                           ; Number of cases is 4, Range of values is 0 to 3
  4807                           ; switch strategies available:
  4808                           ; Name         Instructions Cycles
  4809                           ; simple_byte           13     7 (average)
  4810                           ;	Chosen strategy is simple_byte
  4811  006826  E0FB               	bz	l4927
  4812  006828  0A01               	xorlw	1	; case 1
  4813  00682A  E0F2               	bz	l4923
  4814  00682C  0A03               	xorlw	3	; case 2
  4815  00682E  E0F7               	bz	l4927
  4816  006830  0A01               	xorlw	1	; case 3
  4817  006832  E0EE               	bz	l4923
  4818  006834                     l4935:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;LCD_ModSauer.c: 174: lcd_gotoxy(linha_lcd,1);
  4822  006834  0E01               	movlw	1
  4823  006836  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  4824  006838  5033               	movf	_linha_lcd,w,c
  4825  00683A  EC4B  F033         	call	_lcd_gotoxy
  4826                           
  4827                           ;LCD_ModSauer.c: 175: break;
  4828  00683E  D016               	goto	l726
  4829  006840                     l4937:
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;LCD_ModSauer.c: 177: linha_lcd=1;
  4833  006840  0E01               	movlw	1
  4834  006842  6E33               	movwf	_linha_lcd,c
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;LCD_ModSauer.c: 178: LATEbits.LE0 = 0;
  4838  006844  908D               	bcf	3981,0,c	;volatile
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;LCD_ModSauer.c: 179: lcd_write(0x80);
  4842  006846  0E80               	movlw	128
  4843  006848  ECE0  F031         	call	_lcd_write
  4844                           
  4845                           ;LCD_ModSauer.c: 180: break;
  4846  00684C  D00F               	goto	l726
  4847  00684E                     l725:
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;LCD_ModSauer.c: 183: coluna_lcd++;
  4851  00684E  808D               	bsf	3981,0,c	;volatile
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;LCD_ModSauer.c: 184: linha_lcd=1;
  4855  006850  0E01               	movlw	1
  4856  006852  6E33               	movwf	_linha_lcd,c
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;LCD_ModSauer.c: 185: lcd_write( c );
  4860  006854  5164               	movf	lcd_putc@c& (0+255),w,b
  4861  006856  ECE0  F031         	call	_lcd_write
  4862                           
  4863                           ;LCD_ModSauer.c: 188: break;
  4864  00685A  D008               	goto	l726
  4865  00685C                     l4949:
  4866                           
  4867                           ; BSR set to: 0
  4868  00685C  5164               	movf	lcd_putc@c& (0+255),w,b
  4869                           
  4870                           ; Switch size 1, requested type "space"
  4871                           ; Number of cases is 3, Range of values is 10 to 13
  4872                           ; switch strategies available:
  4873                           ; Name         Instructions Cycles
  4874                           ; simple_byte           10     6 (average)
  4875                           ;	Chosen strategy is simple_byte
  4876  00685E  0A0A               	xorlw	10	; case 10
  4877  006860  E0E1               	bz	l4933
  4878  006862  0A06               	xorlw	6	; case 12
  4879  006864  E0D2               	bz	l4921
  4880  006866  0A01               	xorlw	1	; case 13
  4881  006868  E0EB               	bz	l4937
  4882  00686A  D7F1               	goto	l725
  4883  00686C                     l726:
  4884  00686C  0012               	return		;funcret
  4885  00686E                     __end_of_lcd_putc:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           intcon	equ	0xFF2
  4894                           intcon2	equ	0xFF1
  4895                           postinc0	equ	0xFEE
  4896                           wreg	equ	0xFE8
  4897                           indf1	equ	0xFE7
  4898                           postinc1	equ	0xFE6
  4899                           postdec1	equ	0xFE5
  4900                           plusw1	equ	0xFE3
  4901                           fsr1h	equ	0xFE2
  4902                           fsr1l	equ	0xFE1
  4903                           indf2	equ	0xFDF
  4904                           postinc2	equ	0xFDE
  4905                           postdec2	equ	0xFDD
  4906                           plusw2	equ	0xFDB
  4907                           fsr2h	equ	0xFDA
  4908                           fsr2l	equ	0xFD9
  4909                           status	equ	0xFD8
  4910                           
  4911 ;; *************** function _isdigit *****************
  4912 ;; Defined at:
  4913 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  c               1    wreg     unsigned char 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  c               1    2[BANK0 ] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;		None               void
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0
  4922 ;; Tracked objects:
  4923 ;;		On entry : F/0
  4924 ;;		On exit  : F/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4927 ;;      Params:         0       0       0       0       0       0       0       0       0
  4928 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4929 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4930 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4931 ;;Total ram usage:        3 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    6
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_printf
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text7
  4942  006340                     __ptext7:
  4943                           	opt stack 0
  4944  006340                     _isdigit:
  4945                           	opt stack 23
  4946                           
  4947                           ;incstack = 0
  4948                           ;isdigit@c stored from wreg
  4949  006340  6F62               	movwf	isdigit@c& (0+255),b
  4950                           
  4951                           ; BSR set to: 0
  4952  006342  6B61               	clrf	_isdigit$1524& (0+255),b
  4953                           
  4954                           ; BSR set to: 0
  4955  006344  0E3A               	movlw	58
  4956  006346  6162               	cpfslt	isdigit@c& (0+255),b
  4957  006348  D005               	goto	l4989
  4958                           
  4959                           ; BSR set to: 0
  4960  00634A  0E2F               	movlw	47
  4961  00634C  6562               	cpfsgt	isdigit@c& (0+255),b
  4962  00634E  D002               	goto	l4989
  4963                           
  4964                           ; BSR set to: 0
  4965  006350  0E01               	movlw	1
  4966  006352  6F61               	movwf	_isdigit$1524& (0+255),b
  4967  006354                     l4989:
  4968                           
  4969                           ; BSR set to: 0
  4970  006354  C061  F060         	movff	_isdigit$1524,??_isdigit
  4971  006358  3160               	rrcf	??_isdigit& (0+255),w,b
  4972                           
  4973                           ; BSR set to: 0
  4974  00635A  0012               	return		;funcret
  4975  00635C                     __end_of_isdigit:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           intcon2	equ	0xFF1
  4985                           postinc0	equ	0xFEE
  4986                           wreg	equ	0xFE8
  4987                           indf1	equ	0xFE7
  4988                           postinc1	equ	0xFE6
  4989                           postdec1	equ	0xFE5
  4990                           plusw1	equ	0xFE3
  4991                           fsr1h	equ	0xFE2
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           plusw2	equ	0xFDB
  4997                           fsr2h	equ	0xFDA
  4998                           fsr2l	equ	0xFD9
  4999                           status	equ	0xFD8
  5000                           
  5001 ;; *************** function _numero_para_ascii *****************
  5002 ;; Defined at:
  5003 ;;		line 79 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  numero          1    wreg     unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  numero          1   17[BANK0 ] unsigned char 
  5008 ;;  temp1           2   18[BANK0 ] int 
  5009 ;;  temp2           2   15[BANK0 ] int 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;		None               void
  5012 ;; Registers used:
  5013 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : F/0
  5016 ;;		On exit  : F/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5019 ;;      Params:         0       0       0       0       0       0       0       0       0
  5020 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5021 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5022 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5023 ;;Total ram usage:        6 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    7
  5026 ;; This function calls:
  5027 ;;		___awdiv
  5028 ;;		___lbdiv
  5029 ;;		___wmul
  5030 ;; This function is called by:
  5031 ;;		_main
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text8
  5036  0069C8                     __ptext8:
  5037                           	opt stack 0
  5038  0069C8                     _numero_para_ascii:
  5039                           	opt stack 23
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;incstack = 0
  5043                           ;numero_para_ascii@numero stored from wreg
  5044  0069C8  6F71               	movwf	numero_para_ascii@numero& (0+255),b
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;ascii.c: 80: int temp1;
  5048                           ;ascii.c: 81: int temp2;
  5049                           ;ascii.c: 83: TXREG = '+';
  5050  0069CA  0E2B               	movlw	43
  5051  0069CC  6EAD               	movwf	4013,c	;volatile
  5052  0069CE                     l464:
  5053                           
  5054                           ; BSR set to: 0
  5055  0069CE  A2AC               	btfss	4012,1,c	;volatile
  5056  0069D0  D7FE               	goto	l464
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;ascii.c: 86: temp1 = numero/100;
  5060  0069D2  0E64               	movlw	100
  5061  0069D4  6F60               	movwf	___lbdiv@divisor& (0+255),b
  5062  0069D6  5171               	movf	numero_para_ascii@numero& (0+255),w,b
  5063  0069D8  EC84  F032         	call	___lbdiv
  5064  0069DC  6F72               	movwf	numero_para_ascii@temp1& (0+255),b
  5065  0069DE  6B73               	clrf	(numero_para_ascii@temp1+1)& (0+255),b
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;ascii.c: 87: TXREG = '0'+ temp1;
  5069  0069E0  5172               	movf	numero_para_ascii@temp1& (0+255),w,b
  5070  0069E2  0F30               	addlw	48
  5071  0069E4  6EAD               	movwf	4013,c	;volatile
  5072  0069E6                     l467:
  5073                           
  5074                           ; BSR set to: 0
  5075  0069E6  A2AC               	btfss	4012,1,c	;volatile
  5076  0069E8  D7FE               	goto	l467
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;ascii.c: 90: temp2 = ((numero - temp1*100)/10);
  5080  0069EA  C072  F060         	movff	numero_para_ascii@temp1,___wmul@multiplier
  5081  0069EE  C073  F061         	movff	numero_para_ascii@temp1+1,___wmul@multiplier+1
  5082  0069F2  6963               	setf	(___wmul@multiplicand+1)& (0+255),b
  5083  0069F4  0E9C               	movlw	156
  5084  0069F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5085  0069F8  EC17  F032         	call	___wmul	;wreg free
  5086  0069FC  5171               	movf	numero_para_ascii@numero& (0+255),w,b
  5087  0069FE  2560               	addwf	?___wmul& (0+255),w,b
  5088  006A00  6F66               	movwf	___awdiv@dividend& (0+255),b
  5089  006A02  0E00               	movlw	0
  5090  006A04  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5091  006A06  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
  5092  006A08  6B69               	clrf	(___awdiv@divisor+1)& (0+255),b
  5093  006A0A  0E0A               	movlw	10
  5094  006A0C  6F68               	movwf	___awdiv@divisor& (0+255),b
  5095  006A0E  ECA8  F034         	call	___awdiv	;wreg free
  5096  006A12  C066  F06F         	movff	?___awdiv,numero_para_ascii@temp2
  5097  006A16  C067  F070         	movff	?___awdiv+1,numero_para_ascii@temp2+1
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;ascii.c: 91: TXREG = '0'+ temp2;
  5101  006A1A  516F               	movf	numero_para_ascii@temp2& (0+255),w,b
  5102  006A1C  0F30               	addlw	48
  5103  006A1E  6EAD               	movwf	4013,c	;volatile
  5104  006A20                     l470:
  5105                           
  5106                           ; BSR set to: 0
  5107  006A20  A2AC               	btfss	4012,1,c	;volatile
  5108  006A22  D7FE               	goto	l470
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;ascii.c: 94: TXREG = '0'+ (numero - (temp2*10) - (temp1*100));
  5112  006A24  5172               	movf	numero_para_ascii@temp1& (0+255),w,b
  5113  006A26  0D9C               	mullw	156
  5114  006A28  CFF3 F06E          	movff	prodl,??_numero_para_ascii
  5115  006A2C  516F               	movf	numero_para_ascii@temp2& (0+255),w,b
  5116  006A2E  0DF6               	mullw	246
  5117  006A30  50F3               	movf	prodl,w,c
  5118  006A32  256E               	addwf	??_numero_para_ascii& (0+255),w,b
  5119  006A34  2571               	addwf	numero_para_ascii@numero& (0+255),w,b
  5120  006A36  0F30               	addlw	48
  5121  006A38  6EAD               	movwf	4013,c	;volatile
  5122  006A3A                     l473:
  5123                           
  5124                           ; BSR set to: 0
  5125  006A3A  A2AC               	btfss	4012,1,c	;volatile
  5126  006A3C  D7FE               	goto	l473
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;ascii.c: 97: TXREG = '+';
  5130  006A3E  0E2B               	movlw	43
  5131  006A40  6EAD               	movwf	4013,c	;volatile
  5132  006A42                     l476:
  5133                           
  5134                           ; BSR set to: 0
  5135  006A42  B2AC               	btfsc	4012,1,c	;volatile
  5136                           
  5137                           ; BSR set to: 0
  5138  006A44  0012               	return		;funcret
  5139  006A46  D7FD               	goto	l476
  5140  006A48                     __end_of_numero_para_ascii:
  5141                           	opt stack 0
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           intcon	equ	0xFF2
  5149                           intcon2	equ	0xFF1
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           indf1	equ	0xFE7
  5153                           postinc1	equ	0xFE6
  5154                           postdec1	equ	0xFE5
  5155                           plusw1	equ	0xFE3
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           plusw2	equ	0xFDB
  5162                           fsr2h	equ	0xFDA
  5163                           fsr2l	equ	0xFD9
  5164                           status	equ	0xFD8
  5165                           
  5166 ;; *************** function ___lbdiv *****************
  5167 ;; Defined at:
  5168 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  dividend        1    wreg     unsigned char 
  5171 ;;  divisor         1    0[BANK0 ] unsigned char 
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  dividend        1    1[BANK0 ] unsigned char 
  5174 ;;  quotient        1    3[BANK0 ] unsigned char 
  5175 ;;  counter         1    2[BANK0 ] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      unsigned char 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2, status,0
  5180 ;; Tracked objects:
  5181 ;;		On entry : F/0
  5182 ;;		On exit  : F/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5185 ;;      Params:         0       1       0       0       0       0       0       0       0
  5186 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5188 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5189 ;;Total ram usage:        4 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    6
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_numero_para_ascii
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text9
  5200  006508                     __ptext9:
  5201                           	opt stack 0
  5202  006508                     ___lbdiv:
  5203                           	opt stack 23
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;incstack = 0
  5207                           ;___lbdiv@dividend stored from wreg
  5208  006508  6F61               	movwf	___lbdiv@dividend& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211  00650A  6B63               	clrf	___lbdiv@quotient& (0+255),b
  5212                           
  5213                           ; BSR set to: 0
  5214  00650C  5160               	movf	___lbdiv@divisor& (0+255),w,b
  5215  00650E  E014               	bz	l5065
  5216                           
  5217                           ; BSR set to: 0
  5218  006510  0E01               	movlw	1
  5219  006512  6F62               	movwf	___lbdiv@counter& (0+255),b
  5220  006514  D003               	goto	l5053
  5221  006516                     l5049:
  5222                           
  5223                           ; BSR set to: 0
  5224  006516  90D8               	bcf	status,0,c
  5225  006518  3760               	rlcf	___lbdiv@divisor& (0+255),f,b
  5226                           
  5227                           ; BSR set to: 0
  5228  00651A  2B62               	incf	___lbdiv@counter& (0+255),f,b
  5229  00651C                     l5053:
  5230                           
  5231                           ; BSR set to: 0
  5232  00651C  AF60               	btfss	___lbdiv@divisor& (0+255),7,b
  5233  00651E  D7FB               	goto	l5049
  5234  006520                     l5055:
  5235                           
  5236                           ; BSR set to: 0
  5237  006520  90D8               	bcf	status,0,c
  5238  006522  3763               	rlcf	___lbdiv@quotient& (0+255),f,b
  5239  006524  5160               	movf	___lbdiv@divisor& (0+255),w,b
  5240  006526  5D61               	subwf	___lbdiv@dividend& (0+255),w,b
  5241  006528  E303               	bnc	l5061
  5242                           
  5243                           ; BSR set to: 0
  5244  00652A  5160               	movf	___lbdiv@divisor& (0+255),w,b
  5245  00652C  5F61               	subwf	___lbdiv@dividend& (0+255),f,b
  5246                           
  5247                           ; BSR set to: 0
  5248  00652E  8163               	bsf	___lbdiv@quotient& (0+255),0,b
  5249  006530                     l5061:
  5250                           
  5251                           ; BSR set to: 0
  5252  006530  90D8               	bcf	status,0,c
  5253  006532  3360               	rrcf	___lbdiv@divisor& (0+255),f,b
  5254                           
  5255                           ; BSR set to: 0
  5256  006534  2F62               	decfsz	___lbdiv@counter& (0+255),f,b
  5257  006536  D7F4               	goto	l5055
  5258  006538                     l5065:
  5259                           
  5260                           ; BSR set to: 0
  5261  006538  5163               	movf	___lbdiv@quotient& (0+255),w,b
  5262                           
  5263                           ; BSR set to: 0
  5264  00653A  0012               	return		;funcret
  5265  00653C                     __end_of___lbdiv:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           intcon2	equ	0xFF1
  5275                           postinc0	equ	0xFEE
  5276                           wreg	equ	0xFE8
  5277                           indf1	equ	0xFE7
  5278                           postinc1	equ	0xFE6
  5279                           postdec1	equ	0xFE5
  5280                           plusw1	equ	0xFE3
  5281                           fsr1h	equ	0xFE2
  5282                           fsr1l	equ	0xFE1
  5283                           indf2	equ	0xFDF
  5284                           postinc2	equ	0xFDE
  5285                           postdec2	equ	0xFDD
  5286                           plusw2	equ	0xFDB
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function ___awdiv *****************
  5292 ;; Defined at:
  5293 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  dividend        2    6[BANK0 ] int 
  5296 ;;  divisor         2    8[BANK0 ] int 
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  quotient        2   12[BANK0 ] int 
  5299 ;;  sign            1   11[BANK0 ] unsigned char 
  5300 ;;  counter         1   10[BANK0 ] unsigned char 
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  2    6[BANK0 ] int 
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0
  5305 ;; Tracked objects:
  5306 ;;		On entry : F/0
  5307 ;;		On exit  : F/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5310 ;;      Params:         0       4       0       0       0       0       0       0       0
  5311 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5313 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5314 ;;Total ram usage:        8 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    6
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_numero_para_ascii
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           	psect	text10
  5325  006950                     __ptext10:
  5326                           	opt stack 0
  5327  006950                     ___awdiv:
  5328                           	opt stack 23
  5329                           
  5330                           ; BSR set to: 0
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;incstack = 0
  5334  006950  6B6B               	clrf	___awdiv@sign& (0+255),b
  5335                           
  5336                           ; BSR set to: 0
  5337  006952  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5338  006954  D006               	goto	l5007
  5339                           
  5340                           ; BSR set to: 0
  5341  006956  6D68               	negf	___awdiv@divisor& (0+255),b
  5342  006958  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5343  00695A  B0D8               	btfsc	status,0,c
  5344  00695C  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5345                           
  5346                           ; BSR set to: 0
  5347  00695E  0E01               	movlw	1
  5348  006960  6F6B               	movwf	___awdiv@sign& (0+255),b
  5349  006962                     l5007:
  5350                           
  5351                           ; BSR set to: 0
  5352  006962  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5353  006964  D006               	goto	l5013
  5354                           
  5355                           ; BSR set to: 0
  5356  006966  6D66               	negf	___awdiv@dividend& (0+255),b
  5357  006968  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5358  00696A  B0D8               	btfsc	status,0,c
  5359  00696C  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5360                           
  5361                           ; BSR set to: 0
  5362  00696E  0E01               	movlw	1
  5363  006970  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5364  006972                     l5013:
  5365                           
  5366                           ; BSR set to: 0
  5367  006972  6B6C               	clrf	___awdiv@quotient& (0+255),b
  5368  006974  6B6D               	clrf	(___awdiv@quotient+1)& (0+255),b
  5369                           
  5370                           ; BSR set to: 0
  5371  006976  5168               	movf	___awdiv@divisor& (0+255),w,b
  5372  006978  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5373  00697A  E01B               	bz	l5035
  5374                           
  5375                           ; BSR set to: 0
  5376  00697C  0E01               	movlw	1
  5377  00697E  6F6A               	movwf	___awdiv@counter& (0+255),b
  5378  006980  D004               	goto	l5021
  5379  006982                     l5019:
  5380                           
  5381                           ; BSR set to: 0
  5382  006982  90D8               	bcf	status,0,c
  5383  006984  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5384  006986  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5385  006988  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5386  00698A                     l5021:
  5387                           
  5388                           ; BSR set to: 0
  5389  00698A  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5390  00698C  D7FA               	goto	l5019
  5391  00698E                     l5023:
  5392                           
  5393                           ; BSR set to: 0
  5394  00698E  90D8               	bcf	status,0,c
  5395  006990  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5396  006992  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5397                           
  5398                           ; BSR set to: 0
  5399  006994  5168               	movf	___awdiv@divisor& (0+255),w,b
  5400  006996  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5401  006998  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5402  00699A  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5403  00699C  E305               	bnc	l5031
  5404                           
  5405                           ; BSR set to: 0
  5406  00699E  5168               	movf	___awdiv@divisor& (0+255),w,b
  5407  0069A0  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5408  0069A2  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5409  0069A4  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5410                           
  5411                           ; BSR set to: 0
  5412  0069A6  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5413  0069A8                     l5031:
  5414                           
  5415                           ; BSR set to: 0
  5416  0069A8  90D8               	bcf	status,0,c
  5417  0069AA  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5418  0069AC  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5419                           
  5420                           ; BSR set to: 0
  5421  0069AE  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5422  0069B0  D7EE               	goto	l5023
  5423  0069B2                     l5035:
  5424                           
  5425                           ; BSR set to: 0
  5426  0069B2  516B               	movf	___awdiv@sign& (0+255),w,b
  5427  0069B4  E004               	bz	l5039
  5428                           
  5429                           ; BSR set to: 0
  5430  0069B6  6D6C               	negf	___awdiv@quotient& (0+255),b
  5431  0069B8  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5432  0069BA  B0D8               	btfsc	status,0,c
  5433  0069BC  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5434  0069BE                     l5039:
  5435                           
  5436                           ; BSR set to: 0
  5437  0069BE  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5438  0069C2  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5439                           
  5440                           ; BSR set to: 0
  5441  0069C6  0012               	return		;funcret
  5442  0069C8                     __end_of___awdiv:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           intcon2	equ	0xFF1
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           indf1	equ	0xFE7
  5455                           postinc1	equ	0xFE6
  5456                           postdec1	equ	0xFE5
  5457                           plusw1	equ	0xFE3
  5458                           fsr1h	equ	0xFE2
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           plusw2	equ	0xFDB
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function _limpar_linha *****************
  5469 ;; Defined at:
  5470 ;;		line 22 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  linha           1    wreg     unsigned char 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  linha           1    4[BANK0 ] unsigned char 
  5475 ;;  coluna_atual    1    5[BANK0 ] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;		None               void
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : F/0
  5482 ;;		On exit  : F/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5485 ;;      Params:         0       0       0       0       0       0       0       0       0
  5486 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5488 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5489 ;;Total ram usage:        2 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    8
  5492 ;; This function calls:
  5493 ;;		_lcd_gotoxy
  5494 ;;		_lcd_write
  5495 ;; This function is called by:
  5496 ;;		_main
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text11
  5501  0063E4                     __ptext11:
  5502                           	opt stack 0
  5503  0063E4                     _limpar_linha:
  5504                           	opt stack 22
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;incstack = 0
  5508                           ;limpar_linha@linha stored from wreg
  5509  0063E4  6F64               	movwf	limpar_linha@linha& (0+255),b
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;LCD_ModSauer.c: 23: unsigned char coluna_atual=1;
  5513  0063E6  0E01               	movlw	1
  5514  0063E8  6F65               	movwf	limpar_linha@coluna_atual& (0+255),b
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;LCD_ModSauer.c: 24: lcd_gotoxy(linha,coluna_atual);
  5518  0063EA  6F61               	movwf	lcd_gotoxy@coluna& (0+255),b
  5519  0063EC  5164               	movf	limpar_linha@linha& (0+255),w,b
  5520  0063EE  EC4B  F033         	call	_lcd_gotoxy
  5521                           
  5522                           ;LCD_ModSauer.c: 26: while(coluna_atual<qtd_max_colunas_lcd){
  5523  0063F2  D005               	goto	l5447
  5524  0063F4                     l686:
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;LCD_ModSauer.c: 27: LATEbits.LE0=1;
  5528  0063F4  808D               	bsf	3981,0,c	;volatile
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;LCD_ModSauer.c: 28: lcd_write(0x10);
  5532  0063F6  0E10               	movlw	16
  5533  0063F8  ECE0  F031         	call	_lcd_write
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;LCD_ModSauer.c: 29: coluna_atual++;}
  5537  0063FC  2B65               	incf	limpar_linha@coluna_atual& (0+255),f,b
  5538  0063FE                     l5447:
  5539                           
  5540                           ; BSR set to: 0
  5541  0063FE  5037               	movf	_qtd_max_colunas_lcd,w,c
  5542  006400  5D65               	subwf	limpar_linha@coluna_atual& (0+255),w,b
  5543  006402  B0D8               	btfsc	status,0,c
  5544                           
  5545                           ; BSR set to: 0
  5546  006404  0012               	return		;funcret
  5547  006406  D7F6               	goto	l686
  5548  006408                     __end_of_limpar_linha:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           intcon	equ	0xFF2
  5557                           intcon2	equ	0xFF1
  5558                           postinc0	equ	0xFEE
  5559                           wreg	equ	0xFE8
  5560                           indf1	equ	0xFE7
  5561                           postinc1	equ	0xFE6
  5562                           postdec1	equ	0xFE5
  5563                           plusw1	equ	0xFE3
  5564                           fsr1h	equ	0xFE2
  5565                           fsr1l	equ	0xFE1
  5566                           indf2	equ	0xFDF
  5567                           postinc2	equ	0xFDE
  5568                           postdec2	equ	0xFDD
  5569                           plusw2	equ	0xFDB
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function _lcd_gotoxy *****************
  5575 ;; Defined at:
  5576 ;;		line 218 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  linha           1    wreg     unsigned char 
  5579 ;;  coluna          1    1[BANK0 ] unsigned char 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  linha           1    3[BANK0 ] unsigned char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;		None               void
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : F/0
  5588 ;;		On exit  : F/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5591 ;;      Params:         0       1       0       0       0       0       0       0       0
  5592 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5593 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5594 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5595 ;;Total ram usage:        3 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    7
  5598 ;; This function calls:
  5599 ;;		_lcd_write
  5600 ;; This function is called by:
  5601 ;;		_main
  5602 ;;		_limpar_linha
  5603 ;;		_lcd_putc
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text12
  5608  006696                     __ptext12:
  5609                           	opt stack 0
  5610  006696                     _lcd_gotoxy:
  5611                           	opt stack 20
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;incstack = 0
  5615                           ;lcd_gotoxy@linha stored from wreg
  5616  006696  6F63               	movwf	lcd_gotoxy@linha& (0+255),b
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;LCD_ModSauer.c: 222: linha_lcd_aux_posicao = linha;
  5620  006698  908D               	bcf	3981,0,c	;volatile
  5621                           
  5622                           ;LCD_ModSauer.c: 223: switch(linha){
  5623  00669A  D018               	goto	l4911
  5624  00669C                     l4901:
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;LCD_ModSauer.c: 225: lcd_write(0x80+(coluna-1));
  5628  00669C  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5629  00669E  0F7F               	addlw	127
  5630  0066A0  ECE0  F031         	call	_lcd_write
  5631                           
  5632                           ;LCD_ModSauer.c: 226: break;
  5633  0066A4  D01C               	goto	l744
  5634  0066A6                     l4903:
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;LCD_ModSauer.c: 229: lcd_write(0xC0+(coluna-1));
  5638  0066A6  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5639  0066A8  0FBF               	addlw	191
  5640  0066AA  ECE0  F031         	call	_lcd_write
  5641                           
  5642                           ;LCD_ModSauer.c: 230: break;
  5643  0066AE  D017               	goto	l744
  5644  0066B0                     l4905:
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;LCD_ModSauer.c: 233: lcd_write(Linha_3+(coluna-1));
  5648  0066B0  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5649  0066B2  242F               	addwf	_Linha_3,w,c
  5650  0066B4  6F62               	movwf	??_lcd_gotoxy& (0+255),b
  5651  0066B6  0562               	decf	??_lcd_gotoxy& (0+255),w,b
  5652  0066B8  ECE0  F031         	call	_lcd_write
  5653                           
  5654                           ;LCD_ModSauer.c: 234: break;
  5655  0066BC  D010               	goto	l744
  5656  0066BE                     l4907:
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;LCD_ModSauer.c: 237: lcd_write(Linha_4+(coluna-1));
  5660  0066BE  5161               	movf	lcd_gotoxy@coluna& (0+255),w,b
  5661  0066C0  2430               	addwf	_Linha_4,w,c
  5662  0066C2  6F62               	movwf	??_lcd_gotoxy& (0+255),b
  5663  0066C4  0562               	decf	??_lcd_gotoxy& (0+255),w,b
  5664  0066C6  ECE0  F031         	call	_lcd_write
  5665                           
  5666                           ;LCD_ModSauer.c: 238: break;
  5667  0066CA  D009               	goto	l744
  5668  0066CC                     l4911:
  5669                           
  5670                           ; BSR set to: 0
  5671  0066CC  5163               	movf	lcd_gotoxy@linha& (0+255),w,b
  5672                           
  5673                           ; Switch size 1, requested type "space"
  5674                           ; Number of cases is 4, Range of values is 1 to 4
  5675                           ; switch strategies available:
  5676                           ; Name         Instructions Cycles
  5677                           ; simple_byte           13     7 (average)
  5678                           ;	Chosen strategy is simple_byte
  5679  0066CE  0A01               	xorlw	1	; case 1
  5680  0066D0  E0E5               	bz	l4901
  5681  0066D2  0A03               	xorlw	3	; case 2
  5682  0066D4  E0E8               	bz	l4903
  5683  0066D6  0A01               	xorlw	1	; case 3
  5684  0066D8  E0EB               	bz	l4905
  5685  0066DA  0A07               	xorlw	7	; case 4
  5686  0066DC  E0F0               	bz	l4907
  5687  0066DE                     l744:
  5688                           
  5689                           ; BSR set to: 0
  5690  0066DE  0012               	return		;funcret
  5691  0066E0                     __end_of_lcd_gotoxy:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           intcon	equ	0xFF2
  5700                           intcon2	equ	0xFF1
  5701                           postinc0	equ	0xFEE
  5702                           wreg	equ	0xFE8
  5703                           indf1	equ	0xFE7
  5704                           postinc1	equ	0xFE6
  5705                           postdec1	equ	0xFE5
  5706                           plusw1	equ	0xFE3
  5707                           fsr1h	equ	0xFE2
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           postdec2	equ	0xFDD
  5712                           plusw2	equ	0xFDB
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _lcd_init *****************
  5718 ;; Defined at:
  5719 ;;		line 35 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  definir_tipo    1    wreg     unsigned char 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  definir_tipo    1    3[BANK0 ] unsigned char 
  5724 ;;  init_value      1    0        unsigned char 
  5725 ;; Return value:  Size  Location     Type
  5726 ;;		None               void
  5727 ;; Registers used:
  5728 ;;		wreg, status,2, status,0, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : F/0
  5731 ;;		On exit  : F/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5734 ;;      Params:         0       0       0       0       0       0       0       0       0
  5735 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5736 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5737 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5738 ;;Total ram usage:        3 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    8
  5741 ;; This function calls:
  5742 ;;		_escrever_simbolo_fechadura
  5743 ;;		_lcd_clear
  5744 ;;		_lcd_write
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text13
  5751  006BFC                     __ptext13:
  5752                           	opt stack 0
  5753  006BFC                     _lcd_init:
  5754                           	opt stack 22
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;incstack = 0
  5758                           ;lcd_init@definir_tipo_lcd stored from wreg
  5759  006BFC  6F63               	movwf	lcd_init@definir_tipo_lcd& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;LCD_ModSauer.c: 37: char init_value;
  5763                           ;LCD_ModSauer.c: 38: linha_lcd=1;
  5764  006BFE  0E01               	movlw	1
  5765  006C00  6E33               	movwf	_linha_lcd,c
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;LCD_ModSauer.c: 40: lcd_type = definir_tipo_lcd;
  5769  006C02  C063  F032         	movff	lcd_init@definir_tipo_lcd,_lcd_type
  5770                           
  5771                           ;LCD_ModSauer.c: 42: switch(lcd_type){
  5772  006C06  D012               	goto	l5389
  5773  006C08                     l5379:
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;LCD_ModSauer.c: 44: qtd_max_colunas_lcd=20;
  5777  006C08  0E14               	movlw	20
  5778  006C0A  D001               	goto	L7
  5779  006C0C                     l5381:
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;LCD_ModSauer.c: 48: qtd_max_colunas_lcd=16;
  5783  006C0C  0E10               	movlw	16
  5784  006C0E                     L7:
  5785  006C0E  6E37               	movwf	_qtd_max_colunas_lcd,c
  5786                           
  5787                           ;LCD_ModSauer.c: 49: break;
  5788  006C10  D015               	goto	l693
  5789  006C12                     l5383:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;LCD_ModSauer.c: 52: qtd_max_colunas_lcd=20;
  5793  006C12  0E14               	movlw	20
  5794  006C14  6E37               	movwf	_qtd_max_colunas_lcd,c
  5795                           
  5796                           ;LCD_ModSauer.c: 53: Linha_3 = 0x94;
  5797  006C16  0E94               	movlw	148
  5798  006C18  6E2F               	movwf	_Linha_3,c
  5799                           
  5800                           ;LCD_ModSauer.c: 54: Linha_4 = 0xD4;
  5801  006C1A  0ED4               	movlw	212
  5802  006C1C  D005               	goto	L8
  5803  006C1E                     l5385:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;LCD_ModSauer.c: 58: qtd_max_colunas_lcd=16;
  5807  006C1E  0E10               	movlw	16
  5808  006C20  6E37               	movwf	_qtd_max_colunas_lcd,c
  5809                           
  5810                           ;LCD_ModSauer.c: 59: Linha_3 = 0x90;
  5811  006C22  0E90               	movlw	144
  5812  006C24  6E2F               	movwf	_Linha_3,c
  5813                           
  5814                           ;LCD_ModSauer.c: 60: Linha_4 = 0xD0;
  5815  006C26  0ED0               	movlw	208
  5816  006C28                     L8:
  5817  006C28  6E30               	movwf	_Linha_4,c
  5818                           
  5819                           ;LCD_ModSauer.c: 61: break;
  5820  006C2A  D008               	goto	l693
  5821  006C2C                     l5389:
  5822                           
  5823                           ; BSR set to: 0
  5824  006C2C  5032               	movf	_lcd_type,w,c
  5825                           
  5826                           ; Switch size 1, requested type "space"
  5827                           ; Number of cases is 4, Range of values is 0 to 3
  5828                           ; switch strategies available:
  5829                           ; Name         Instructions Cycles
  5830                           ; simple_byte           13     7 (average)
  5831                           ;	Chosen strategy is simple_byte
  5832  006C2E  E0EE               	bz	l5381
  5833  006C30  0A01               	xorlw	1	; case 1
  5834  006C32  E0F5               	bz	l5385
  5835  006C34  0A03               	xorlw	3	; case 2
  5836  006C36  E0E8               	bz	l5379
  5837  006C38  0A01               	xorlw	1	; case 3
  5838  006C3A  E0EB               	bz	l5383
  5839  006C3C                     l693:
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;LCD_ModSauer.c: 63: LATEbits.LE0 = 0;
  5843  006C3C  908D               	bcf	3981,0,c	;volatile
  5844                           
  5845                           ;LCD_ModSauer.c: 64: LATEbits.LE1 = 0;
  5846  006C3E  928D               	bcf	3981,1,c	;volatile
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;LCD_ModSauer.c: 67: _delay((unsigned long)((15)*(16000000/4000.0)));
  5850  006C40  0E4E               	movlw	78
  5851  006C42  6F62               	movwf	??_lcd_init& (0+255),b
  5852  006C44  0EEB               	movlw	235
  5853  006C46                     u7637:
  5854  006C46  2EE8               	decfsz	wreg,f,c
  5855  006C48  D7FE               	goto	u7637
  5856  006C4A  2F62               	decfsz	??_lcd_init& (0+255),f,b
  5857  006C4C  D7FC               	goto	u7637
  5858  006C4E  F000               	nop	
  5859                           
  5860                           ;LCD_ModSauer.c: 68: LATA = init_value;
  5861  006C50  0E03               	movlw	3
  5862  006C52  6E89               	movwf	3977,c	;volatile
  5863                           
  5864                           ;LCD_ModSauer.c: 69: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5865  006C54  828D               	bsf	3981,1,c	;volatile
  5866  006C56  928D               	bcf	3981,1,c	;volatile
  5867                           
  5868                           ;LCD_ModSauer.c: 70: _delay((unsigned long)((5)*(16000000/4000.0)));
  5869  006C58  0E1A               	movlw	26
  5870  006C5A  0100               	movlb	0	; () banked
  5871  006C5C  6F62               	movwf	??_lcd_init& (0+255),b
  5872  006C5E  0EF8               	movlw	248
  5873  006C60                     u7647:
  5874  006C60  2EE8               	decfsz	wreg,f,c
  5875  006C62  D7FE               	goto	u7647
  5876  006C64  2F62               	decfsz	??_lcd_init& (0+255),f,b
  5877  006C66  D7FC               	goto	u7647
  5878  006C68  D000               	nop2	
  5879                           
  5880                           ;LCD_ModSauer.c: 71: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5881  006C6A  828D               	bsf	3981,1,c	;volatile
  5882  006C6C  928D               	bcf	3981,1,c	;volatile
  5883                           
  5884                           ;LCD_ModSauer.c: 72: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5885  006C6E  0EC8               	movlw	200
  5886  006C70                     u7657:
  5887  006C70  F000               	nop	
  5888  006C72  2EE8               	decfsz	wreg,f,c
  5889  006C74  D7FD               	goto	u7657
  5890                           
  5891                           ;LCD_ModSauer.c: 73: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5892  006C76  828D               	bsf	3981,1,c	;volatile
  5893  006C78  928D               	bcf	3981,1,c	;volatile
  5894                           
  5895                           ;LCD_ModSauer.c: 74: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5896  006C7A  0EC8               	movlw	200
  5897  006C7C                     u7667:
  5898  006C7C  F000               	nop	
  5899  006C7E  2EE8               	decfsz	wreg,f,c
  5900  006C80  D7FD               	goto	u7667
  5901                           
  5902                           ;LCD_ModSauer.c: 75: LATA = 2;
  5903  006C82  0E02               	movlw	2
  5904  006C84  6E89               	movwf	3977,c	;volatile
  5905                           
  5906                           ;LCD_ModSauer.c: 76: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  5907  006C86  828D               	bsf	3981,1,c	;volatile
  5908  006C88  928D               	bcf	3981,1,c	;volatile
  5909                           
  5910                           ;LCD_ModSauer.c: 78: lcd_write(0x28);
  5911  006C8A  0E28               	movlw	40
  5912  006C8C  ECE0  F031         	call	_lcd_write
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;LCD_ModSauer.c: 79: lcd_write(0x0C);
  5916  006C90  0E0C               	movlw	12
  5917  006C92  ECE0  F031         	call	_lcd_write
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;LCD_ModSauer.c: 80: lcd_clear();
  5921  006C96  EC85  F031         	call	_lcd_clear	;wreg free
  5922                           
  5923                           ;LCD_ModSauer.c: 81: lcd_write(0x6);
  5924  006C9A  0E06               	movlw	6
  5925  006C9C  ECE0  F031         	call	_lcd_write
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;LCD_ModSauer.c: 83: escrever_simbolo_fechadura();
  5929  006CA0  EF37  F034         	goto	_escrever_simbolo_fechadura	;wreg free
  5930  006CA4                     __end_of_lcd_init:
  5931                           	opt stack 0
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           intcon2	equ	0xFF1
  5940                           postinc0	equ	0xFEE
  5941                           wreg	equ	0xFE8
  5942                           indf1	equ	0xFE7
  5943                           postinc1	equ	0xFE6
  5944                           postdec1	equ	0xFE5
  5945                           plusw1	equ	0xFE3
  5946                           fsr1h	equ	0xFE2
  5947                           fsr1l	equ	0xFE1
  5948                           indf2	equ	0xFDF
  5949                           postinc2	equ	0xFDE
  5950                           postdec2	equ	0xFDD
  5951                           plusw2	equ	0xFDB
  5952                           fsr2h	equ	0xFDA
  5953                           fsr2l	equ	0xFD9
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function _lcd_clear *****************
  5957 ;; Defined at:
  5958 ;;		line 140 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;		None               void
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : F/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0
  5973 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5974 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5975 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5976 ;;Total ram usage:        1 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    7
  5979 ;; This function calls:
  5980 ;;		_lcd_write
  5981 ;; This function is called by:
  5982 ;;		_lcd_init
  5983 ;;		_lcd_putc
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text14
  5988  00630A                     __ptext14:
  5989                           	opt stack 0
  5990  00630A                     _lcd_clear:
  5991                           	opt stack 20
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;LCD_ModSauer.c: 142: LATEbits.LE0 = 0;
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;incstack = 0
  5998  00630A  908D               	bcf	3981,0,c	;volatile
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;LCD_ModSauer.c: 143: lcd_write(0x1);
  6002  00630C  0E01               	movlw	1
  6003  00630E  ECE0  F031         	call	_lcd_write
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;LCD_ModSauer.c: 144: _delay((unsigned long)((2)*(16000000/4000.0)));
  6007  006312  0E0B               	movlw	11
  6008  006314  6F61               	movwf	??_lcd_clear& (0+255),b
  6009  006316  0E62               	movlw	98
  6010  006318                     u7677:
  6011  006318  2EE8               	decfsz	wreg,f,c
  6012  00631A  D7FE               	goto	u7677
  6013  00631C  2F61               	decfsz	??_lcd_clear& (0+255),f,b
  6014  00631E  D7FC               	goto	u7677
  6015  006320  D000               	nop2	
  6016  006322  0012               	return		;funcret
  6017  006324                     __end_of_lcd_clear:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           indf1	equ	0xFE7
  6030                           postinc1	equ	0xFE6
  6031                           postdec1	equ	0xFE5
  6032                           plusw1	equ	0xFE3
  6033                           fsr1h	equ	0xFE2
  6034                           fsr1l	equ	0xFE1
  6035                           indf2	equ	0xFDF
  6036                           postinc2	equ	0xFDE
  6037                           postdec2	equ	0xFDD
  6038                           plusw2	equ	0xFDB
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _escrever_simbolo_fechadura *****************
  6044 ;; Defined at:
  6045 ;;		line 87 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;		None               void
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : F/0
  6056 ;;		On exit  : F/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6062 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    7
  6066 ;; This function calls:
  6067 ;;		_lcd_write
  6068 ;; This function is called by:
  6069 ;;		_lcd_init
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text15
  6074  00686E                     __ptext15:
  6075                           	opt stack 0
  6076  00686E                     _escrever_simbolo_fechadura:
  6077                           	opt stack 22
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;LCD_ModSauer.c: 88: LATEbits.LE0=0;
  6081                           
  6082                           ;incstack = 0
  6083  00686E  908D               	bcf	3981,0,c	;volatile
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;LCD_ModSauer.c: 89: lcd_write(0x40);
  6087  006870  0E40               	movlw	64
  6088  006872  ECE0  F031         	call	_lcd_write
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;LCD_ModSauer.c: 90: LATEbits.LE0=1;
  6092  006876  808D               	bsf	3981,0,c	;volatile
  6093                           
  6094                           ;LCD_ModSauer.c: 92: lcd_write(0x0E);
  6095  006878  0E0E               	movlw	14
  6096  00687A  ECE0  F031         	call	_lcd_write
  6097                           
  6098                           ;LCD_ModSauer.c: 93: lcd_write(0x0A);
  6099  00687E  0E0A               	movlw	10
  6100  006880  ECE0  F031         	call	_lcd_write
  6101                           
  6102                           ;LCD_ModSauer.c: 94: lcd_write(0x0A);
  6103  006884  0E0A               	movlw	10
  6104  006886  ECE0  F031         	call	_lcd_write
  6105                           
  6106                           ;LCD_ModSauer.c: 95: lcd_write(0x0A);
  6107  00688A  0E0A               	movlw	10
  6108  00688C  ECE0  F031         	call	_lcd_write
  6109                           
  6110                           ;LCD_ModSauer.c: 96: lcd_write(0x1F);
  6111  006890  0E1F               	movlw	31
  6112  006892  ECE0  F031         	call	_lcd_write
  6113                           
  6114                           ;LCD_ModSauer.c: 97: lcd_write(0x1B);
  6115  006896  0E1B               	movlw	27
  6116  006898  ECE0  F031         	call	_lcd_write
  6117                           
  6118                           ;LCD_ModSauer.c: 98: lcd_write(0x1B);
  6119  00689C  0E1B               	movlw	27
  6120  00689E  ECE0  F031         	call	_lcd_write
  6121                           
  6122                           ;LCD_ModSauer.c: 99: lcd_write(0x1F);
  6123  0068A2  0E1F               	movlw	31
  6124  0068A4  ECE0  F031         	call	_lcd_write
  6125                           
  6126                           ;LCD_ModSauer.c: 102: lcd_write(0x03);
  6127  0068A8  0E03               	movlw	3
  6128  0068AA  ECE0  F031         	call	_lcd_write
  6129                           
  6130                           ;LCD_ModSauer.c: 103: lcd_write(0x02);
  6131  0068AE  0E02               	movlw	2
  6132  0068B0  ECE0  F031         	call	_lcd_write
  6133                           
  6134                           ;LCD_ModSauer.c: 104: lcd_write(0x02);
  6135  0068B4  0E02               	movlw	2
  6136  0068B6  ECE0  F031         	call	_lcd_write
  6137                           
  6138                           ;LCD_ModSauer.c: 105: lcd_write(0x02);
  6139  0068BA  0E02               	movlw	2
  6140  0068BC  ECE0  F031         	call	_lcd_write
  6141                           
  6142                           ;LCD_ModSauer.c: 106: lcd_write(0x1F);
  6143  0068C0  0E1F               	movlw	31
  6144  0068C2  ECE0  F031         	call	_lcd_write
  6145                           
  6146                           ;LCD_ModSauer.c: 107: lcd_write(0x1B);
  6147  0068C6  0E1B               	movlw	27
  6148  0068C8  ECE0  F031         	call	_lcd_write
  6149                           
  6150                           ;LCD_ModSauer.c: 108: lcd_write(0x1B);
  6151  0068CC  0E1B               	movlw	27
  6152  0068CE  ECE0  F031         	call	_lcd_write
  6153                           
  6154                           ;LCD_ModSauer.c: 109: lcd_write(0x1F);
  6155  0068D2  0E1F               	movlw	31
  6156  0068D4  ECE0  F031         	call	_lcd_write
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;LCD_ModSauer.c: 111: LATEbits.LE0=0;
  6160  0068D8  908D               	bcf	3981,0,c	;volatile
  6161                           
  6162                           ; BSR set to: 0
  6163  0068DA  0012               	return		;funcret
  6164  0068DC                     __end_of_escrever_simbolo_fechadura:
  6165                           	opt stack 0
  6166                           tblptru	equ	0xFF8
  6167                           tblptrh	equ	0xFF7
  6168                           tblptrl	equ	0xFF6
  6169                           tablat	equ	0xFF5
  6170                           prodh	equ	0xFF4
  6171                           prodl	equ	0xFF3
  6172                           intcon	equ	0xFF2
  6173                           intcon2	equ	0xFF1
  6174                           postinc0	equ	0xFEE
  6175                           wreg	equ	0xFE8
  6176                           indf1	equ	0xFE7
  6177                           postinc1	equ	0xFE6
  6178                           postdec1	equ	0xFE5
  6179                           plusw1	equ	0xFE3
  6180                           fsr1h	equ	0xFE2
  6181                           fsr1l	equ	0xFE1
  6182                           indf2	equ	0xFDF
  6183                           postinc2	equ	0xFDE
  6184                           postdec2	equ	0xFDD
  6185                           plusw2	equ	0xFDB
  6186                           fsr2h	equ	0xFDA
  6187                           fsr2l	equ	0xFD9
  6188                           status	equ	0xFD8
  6189                           
  6190 ;; *************** function _lcd_write *****************
  6191 ;; Defined at:
  6192 ;;		line 124 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  c               1    wreg     unsigned char 
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;  c               1    0[BANK0 ] unsigned char 
  6197 ;; Return value:  Size  Location     Type
  6198 ;;		None               void
  6199 ;; Registers used:
  6200 ;;		wreg, status,2, status,0, cstack
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : F/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6206 ;;      Params:         0       0       0       0       0       0       0       0       0
  6207 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6209 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6210 ;;Total ram usage:        1 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    6
  6213 ;; This function calls:
  6214 ;;		Nothing
  6215 ;; This function is called by:
  6216 ;;		_limpar_linha
  6217 ;;		_lcd_init
  6218 ;;		_escrever_simbolo_fechadura
  6219 ;;		_lcd_clear
  6220 ;;		_lcd_putc
  6221 ;;		_lcd_gotoxy
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text16
  6226  0063C0                     __ptext16:
  6227                           	opt stack 0
  6228  0063C0                     _lcd_write:
  6229                           	opt stack 21
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;incstack = 0
  6233                           ;lcd_write@c stored from wreg
  6234  0063C0  0100               	movlb	0	; () banked
  6235  0063C2  6F60               	movwf	lcd_write@c& (0+255),b
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;LCD_ModSauer.c: 126: _delay((unsigned long)((40)*(16000000/4000000.0)));
  6239  0063C4  0E35               	movlw	53
  6240  0063C6                     u7687:
  6241  0063C6  2EE8               	decfsz	wreg,f,c
  6242  0063C8  D7FE               	goto	u7687
  6243  0063CA  F000               	nop	
  6244                           
  6245                           ;LCD_ModSauer.c: 127: LATA &= 0xF0;
  6246  0063CC  0EF0               	movlw	240
  6247  0063CE  1689               	andwf	3977,f,c	;volatile
  6248                           
  6249                           ;LCD_ModSauer.c: 128: LATA |= ( ( c >> 4 ) & 0x0F );
  6250  0063D0  0100               	movlb	0	; () banked
  6251  0063D2  3960               	swapf	lcd_write@c& (0+255),w,b
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;LCD_ModSauer.c: 129: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6255                           
  6256                           ; BSR set to: 0
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;LCD_ModSauer.c: 130: LATA &=0xF0;
  6260  0063D4  EC63  F032         	call	PL38	;call to abstracted procedure
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;LCD_ModSauer.c: 131: LATA |= ( c & 0x0F );
  6264  0063D8  5160               	movf	lcd_write@c& (0+255),w,b
  6265  0063DA  0B0F               	andlw	15
  6266  0063DC  1289               	iorwf	3977,f,c	;volatile
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;LCD_ModSauer.c: 132: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  6270  0063DE  828D               	bsf	3981,1,c	;volatile
  6271                           
  6272                           ; BSR set to: 0
  6273  0063E0  928D               	bcf	3981,1,c	;volatile
  6274                           
  6275                           ; BSR set to: 0
  6276  0063E2  0012               	return		;funcret
  6277  0063E4                     __end_of_lcd_write:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           intcon2	equ	0xFF1
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           indf1	equ	0xFE7
  6290                           postinc1	equ	0xFE6
  6291                           postdec1	equ	0xFE5
  6292                           plusw1	equ	0xFE3
  6293                           fsr1h	equ	0xFE2
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           plusw2	equ	0xFDB
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function _enviar_string_serial *****************
  6304 ;; Defined at:
  6305 ;;		line 27 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  string_a_env    2    0[BANK0 ] PTR const unsigned char 
  6308 ;;		 -> STR_18(3), STR_17(3), STR_16(3), nova_senha(16), 
  6309 ;;		 -> STR_5(4), STR_4(3), main@endereco_modulo_repasse(18), senha(272), 
  6310 ;;		 -> buffer_serial(80), 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;		None               void
  6315 ;; Registers used:
  6316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  6317 ;; Tracked objects:
  6318 ;;		On entry : F/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6322 ;;      Params:         0       2       0       0       0       0       0       0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6325 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6326 ;;Total ram usage:        2 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    6
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text17
  6337  0066E0                     __ptext17:
  6338                           	opt stack 0
  6339  0066E0                     _enviar_string_serial:
  6340                           	opt stack 24
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;serial.c: 28: while(*string_a_enviar != (0)){
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;incstack = 0
  6347  0066E0  D016               	goto	l5351
  6348  0066E2                     l5347:
  6349                           
  6350                           ;serial.c: 29: TXREG = *string_a_enviar;
  6351  0066E2  C060  FFF6         	movff	enviar_string_serial@string_a_enviar,tblptrl
  6352  0066E6  C061  FFF7         	movff	enviar_string_serial@string_a_enviar+1,tblptrh
  6353  0066EA  6AF8               	clrf	tblptru,c
  6354  0066EC  0E07               	movlw	(high __ramtop+-1)
  6355  0066EE  64F7               	cpfsgt	tblptrh,c
  6356  0066F0  D003               	bra	u6157
  6357  0066F2  0008               	tblrd		*
  6358  0066F4  50F5               	movf	tablat,w,c
  6359  0066F6  D005               	bra	u6150
  6360  0066F8                     u6157:
  6361  0066F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  6362  0066FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  6363  006700  50E7               	movf	indf1,w,c
  6364  006702                     u6150:
  6365  006702  6EAD               	movwf	4013,c	;volatile
  6366  006704                     l647:
  6367  006704  A2AC               	btfss	4012,1,c	;volatile
  6368  006706  D7FE               	goto	l647
  6369                           
  6370                           ;serial.c: 31: string_a_enviar++;}
  6371  006708  0100               	movlb	0	; () banked
  6372  00670A  4B60               	infsnz	enviar_string_serial@string_a_enviar& (0+255),f,b
  6373  00670C  2B61               	incf	(enviar_string_serial@string_a_enviar+1)& (0+255),f,b
  6374  00670E                     l5351:
  6375                           
  6376                           ; BSR set to: 0
  6377  00670E  C060  FFF6         	movff	enviar_string_serial@string_a_enviar,tblptrl
  6378  006712  C061  FFF7         	movff	enviar_string_serial@string_a_enviar+1,tblptrh
  6379  006716  6AF8               	clrf	tblptru,c
  6380  006718  0E07               	movlw	(high __ramtop+-1)
  6381  00671A  64F7               	cpfsgt	tblptrh,c
  6382  00671C  D003               	bra	u6177
  6383  00671E  0008               	tblrd		*
  6384  006720  50F5               	movf	tablat,w,c
  6385  006722  D005               	bra	u6170
  6386  006724                     u6177:
  6387  006724  CFF6 FFE1          	movff	tblptrl,fsr1l
  6388  006728  CFF7 FFE2          	movff	tblptrh,fsr1h
  6389  00672C  50E7               	movf	indf1,w,c
  6390  00672E                     u6170:
  6391  00672E  0900               	iorlw	0
  6392  006730  B4D8               	btfsc	status,2,c
  6393  006732  0012               	return		;funcret
  6394  006734  D7D6               	goto	l5347
  6395  006736                     __end_of_enviar_string_serial:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           intcon2	equ	0xFF1
  6405                           postinc0	equ	0xFEE
  6406                           wreg	equ	0xFE8
  6407                           indf1	equ	0xFE7
  6408                           postinc1	equ	0xFE6
  6409                           postdec1	equ	0xFE5
  6410                           plusw1	equ	0xFE3
  6411                           fsr1h	equ	0xFE2
  6412                           fsr1l	equ	0xFE1
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           plusw2	equ	0xFDB
  6417                           fsr2h	equ	0xFDA
  6418                           fsr2l	equ	0xFD9
  6419                           status	equ	0xFD8
  6420                           
  6421 ;; *************** function _enviar_caractere_serial *****************
  6422 ;; Defined at:
  6423 ;;		line 22 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  carater_a_en    1    wreg     unsigned char 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;  carater_a_en    1    0[BANK0 ] unsigned char 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		wreg
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0
  6438 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6440 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6441 ;;Total ram usage:        1 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    6
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_main
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text18
  6452  0062C2                     __ptext18:
  6453                           	opt stack 0
  6454  0062C2                     _enviar_caractere_serial:
  6455                           	opt stack 24
  6456                           
  6457                           ;incstack = 0
  6458                           ;enviar_caractere_serial@carater_a_enviar stored from wreg
  6459  0062C2  0100               	movlb	0	; () banked
  6460  0062C4  6F60               	movwf	enviar_caractere_serial@carater_a_enviar& (0+255),b
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;serial.c: 23: TXREG = carater_a_enviar;
  6464  0062C6  C060  FFAD         	movff	enviar_caractere_serial@carater_a_enviar,4013	;volatile
  6465  0062CA                     l639:
  6466  0062CA  B2AC               	btfsc	4012,1,c	;volatile
  6467  0062CC  0012               	return		;funcret
  6468  0062CE  D7FD               	goto	l639
  6469  0062D0                     __end_of_enviar_caractere_serial:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           intcon	equ	0xFF2
  6478                           intcon2	equ	0xFF1
  6479                           postinc0	equ	0xFEE
  6480                           wreg	equ	0xFE8
  6481                           indf1	equ	0xFE7
  6482                           postinc1	equ	0xFE6
  6483                           postdec1	equ	0xFE5
  6484                           plusw1	equ	0xFE3
  6485                           fsr1h	equ	0xFE2
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           plusw2	equ	0xFDB
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _eeprom_config_inicial *****************
  6496 ;; Defined at:
  6497 ;;		line 29 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;		None
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  i               1    4[BANK0 ] unsigned char 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;		None               void
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0
  6512 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6513 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6514 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6515 ;;Total ram usage:        1 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    7
  6518 ;; This function calls:
  6519 ;;		_Busy_eep
  6520 ;;		_Write_b_eep
  6521 ;; This function is called by:
  6522 ;;		_main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text19
  6527  006A48                     __ptext19:
  6528                           	opt stack 0
  6529  006A48                     _eeprom_config_inicial:
  6530                           	opt stack 23
  6531                           
  6532                           ;eeprom_interna.c: 30: unsigned char i;
  6533                           ;eeprom_interna.c: 32: for(i=0;i<10;i++){
  6534                           
  6535                           ;incstack = 0
  6536  006A48  0100               	movlb	0	; () banked
  6537  006A4A  6B64               	clrf	eeprom_config_inicial@i& (0+255),b
  6538  006A4C                     l5255:
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;eeprom_interna.c: 33: (Busy_eep(), Write_b_eep(i,('0'+i)));
  6542  006A4C  EC48  F031         	call	_Busy_eep	;wreg free
  6543  006A50  C064  F060         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  6544  006A54  0100               	movlb	0	; () banked
  6545  006A56  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6546  006A58  5164               	movf	eeprom_config_inicial@i& (0+255),w,b
  6547  006A5A  0F30               	addlw	48
  6548  006A5C  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  6549  006A5E  EC6A  F032         	call	_Write_b_eep	;wreg free
  6550                           
  6551                           ;eeprom_interna.c: 34: (Busy_eep(), Write_b_eep(16+i,('a'+i)));
  6552  006A62  EC48  F031         	call	_Busy_eep	;wreg free
  6553  006A66  D82C               	call	PL28	;call to abstracted procedure
  6554  006A68  5164               	movf	eeprom_config_inicial@i& (0+255),w,b
  6555  006A6A  0F61               	addlw	97
  6556  006A6C  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  6557  006A6E  EC6A  F032         	call	_Write_b_eep	;wreg free
  6558  006A72  0100               	movlb	0	; () banked
  6559  006A74  2B64               	incf	eeprom_config_inicial@i& (0+255),f,b
  6560                           
  6561                           ; BSR set to: 0
  6562  006A76  0E09               	movlw	9
  6563  006A78  6564               	cpfsgt	eeprom_config_inicial@i& (0+255),b
  6564  006A7A  D7E8               	goto	l5255
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;eeprom_interna.c: 36: }
  6568                           ;eeprom_interna.c: 37: (Busy_eep(), Write_b_eep(i,0));
  6569  006A7C  EC48  F031         	call	_Busy_eep	;wreg free
  6570  006A80  C064  F060         	movff	eeprom_config_inicial@i,Write_b_eep@badd
  6571  006A84  0100               	movlb	0	; () banked
  6572  006A86  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6573  006A88  6B62               	clrf	Write_b_eep@bdat& (0+255),b
  6574  006A8A  EC6A  F032         	call	_Write_b_eep	;wreg free
  6575                           
  6576                           ;eeprom_interna.c: 38: (Busy_eep(), Write_b_eep(16+i,0));
  6577  006A8E  EC48  F031         	call	_Busy_eep	;wreg free
  6578  006A92  D816               	call	PL28	;call to abstracted procedure
  6579  006A94  6B62               	clrf	Write_b_eep@bdat& (0+255),b
  6580  006A96  EC6A  F032         	call	_Write_b_eep	;wreg free
  6581                           
  6582                           ;eeprom_interna.c: 40: (Busy_eep(), Write_b_eep(16-1,255));
  6583  006A9A  EC48  F031         	call	_Busy_eep	;wreg free
  6584  006A9E  0100               	movlb	0	; () banked
  6585  006AA0  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6586  006AA2  0E0F               	movlw	15
  6587  006AA4  6F60               	movwf	Write_b_eep@badd& (0+255),b
  6588  006AA6  6962               	setf	Write_b_eep@bdat& (0+255),b
  6589  006AA8  EC6A  F032         	call	_Write_b_eep	;wreg free
  6590                           
  6591                           ;eeprom_interna.c: 41: (Busy_eep(), Write_b_eep(((16*2)-1),0b11111100));
  6592  006AAC  EC48  F031         	call	_Busy_eep	;wreg free
  6593  006AB0  0100               	movlb	0	; () banked
  6594  006AB2  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6595  006AB4  0E1F               	movlw	31
  6596  006AB6  6F60               	movwf	Write_b_eep@badd& (0+255),b
  6597  006AB8  0EFC               	movlw	252
  6598  006ABA  6F62               	movwf	Write_b_eep@bdat& (0+255),b
  6599  006ABC  EF6A  F032         	goto	_Write_b_eep	;wreg free
  6600  006AC0                     __end_of_eeprom_config_inicial:
  6601                           	opt stack 0
  6602  006AC0                     PL28:
  6603                           	opt stack 23
  6604  006AC0  0E10               	movlw	16
  6605  006AC2  0100               	movlb	0	; () banked
  6606  006AC4  2564               	addwf	eeprom_config_inicial@i& (0+255),w,b
  6607  006AC6  6F60               	movwf	Write_b_eep@badd& (0+255),b
  6608  006AC8  6B61               	clrf	(Write_b_eep@badd+1)& (0+255),b
  6609  006ACA  0E00               	movlw	0
  6610  006ACC  2361               	addwfc	(Write_b_eep@badd+1)& (0+255),f,b
  6611  006ACE  0C00               	retlw	0
  6612  006AD0                     __end_ofPL28:
  6613                           	opt stack 0
  6614                           tblptru	equ	0xFF8
  6615                           tblptrh	equ	0xFF7
  6616                           tblptrl	equ	0xFF6
  6617                           tablat	equ	0xFF5
  6618                           prodh	equ	0xFF4
  6619                           prodl	equ	0xFF3
  6620                           intcon	equ	0xFF2
  6621                           intcon2	equ	0xFF1
  6622                           postinc0	equ	0xFEE
  6623                           wreg	equ	0xFE8
  6624                           indf1	equ	0xFE7
  6625                           postinc1	equ	0xFE6
  6626                           postdec1	equ	0xFE5
  6627                           plusw1	equ	0xFE3
  6628                           fsr1h	equ	0xFE2
  6629                           fsr1l	equ	0xFE1
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           postdec2	equ	0xFDD
  6633                           plusw2	equ	0xFDB
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638 ;; *************** function _Write_b_eep *****************
  6639 ;; Defined at:
  6640 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\write_B.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;  badd            2    0[BANK0 ] unsigned int 
  6643 ;;  bdat            1    2[BANK0 ] unsigned char 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;		None               void
  6648 ;; Registers used:
  6649 ;;		wreg, status,2
  6650 ;; Tracked objects:
  6651 ;;		On entry : F/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6655 ;;      Params:         0       3       0       0       0       0       0       0       0
  6656 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6658 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6659 ;;Total ram usage:        4 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    6
  6662 ;; This function calls:
  6663 ;;		Nothing
  6664 ;; This function is called by:
  6665 ;;		_main
  6666 ;;		_eeprom_config_inicial
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text20
  6671  0064D4                     __ptext20:
  6672                           	opt stack 0
  6673  0064D4                     _Write_b_eep:
  6674                           	opt stack 23
  6675                           
  6676                           ; BSR set to: 0
  6677                           
  6678                           ;incstack = 0
  6679  0064D4  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  6680  0064D8  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  6681  0064DC  9EA6               	bcf	4006,7,c	;volatile
  6682  0064DE  9CA6               	bcf	4006,6,c	;volatile
  6683  0064E0  84A6               	bsf	4006,2,c	;volatile
  6684                           
  6685                           ; BSR set to: 0
  6686  0064E2  0E00               	movlw	0
  6687  0064E4  BEF2               	btfsc	intcon,7,c	;volatile
  6688  0064E6  0E01               	movlw	1
  6689  0064E8  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
  6690                           
  6691                           ; BSR set to: 0
  6692  0064EA  9EF2               	bcf	intcon,7,c	;volatile
  6693                           
  6694                           ; BSR set to: 0
  6695  0064EC  0E55               	movlw	85
  6696  0064EE  6EA7               	movwf	4007,c	;volatile
  6697                           
  6698                           ; BSR set to: 0
  6699  0064F0  0EAA               	movlw	170
  6700  0064F2  6EA7               	movwf	4007,c	;volatile
  6701                           
  6702                           ; BSR set to: 0
  6703  0064F4  82A6               	bsf	4006,1,c	;volatile
  6704  0064F6                     l847:
  6705                           
  6706                           ; BSR set to: 0
  6707  0064F6  B2A6               	btfsc	4006,1,c	;volatile
  6708  0064F8  D7FE               	goto	l847
  6709                           
  6710                           ; BSR set to: 0
  6711  0064FA  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
  6712  0064FC  D002               	bra	u5615
  6713  0064FE  9EF2               	bcf	intcon,7,c	;volatile
  6714  006500  D001               	bra	u5616
  6715  006502                     u5615:
  6716  006502  8EF2               	bsf	intcon,7,c	;volatile
  6717  006504                     u5616:
  6718  006504  94A6               	bcf	4006,2,c	;volatile
  6719  006506  0012               	return		;funcret
  6720  006508                     __end_of_Write_b_eep:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           intcon2	equ	0xFF1
  6730                           postinc0	equ	0xFEE
  6731                           wreg	equ	0xFE8
  6732                           indf1	equ	0xFE7
  6733                           postinc1	equ	0xFE6
  6734                           postdec1	equ	0xFE5
  6735                           plusw1	equ	0xFE3
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           plusw2	equ	0xFDB
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function _Busy_eep *****************
  6747 ;; Defined at:
  6748 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\busy_eep.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;		None
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		None
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6762 ;;      Params:         0       0       0       0       0       0       0       0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6765 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6766 ;;Total ram usage:        0 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    6
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_main
  6773 ;;		_eeprom_config_inicial
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text21
  6778  006290                     __ptext21:
  6779                           	opt stack 0
  6780  006290                     _Busy_eep:
  6781                           	opt stack 23
  6782  006290                     l820:
  6783  006290  A2A6               	btfss	4006,1,c	;volatile
  6784  006292  0012               	return		;funcret
  6785  006294  D7FD               	goto	l820
  6786  006296                     __end_of_Busy_eep:
  6787                           	opt stack 0
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           intcon	equ	0xFF2
  6795                           intcon2	equ	0xFF1
  6796                           postinc0	equ	0xFEE
  6797                           wreg	equ	0xFE8
  6798                           indf1	equ	0xFE7
  6799                           postinc1	equ	0xFE6
  6800                           postdec1	equ	0xFE5
  6801                           plusw1	equ	0xFE3
  6802                           fsr1h	equ	0xFE2
  6803                           fsr1l	equ	0xFE1
  6804                           indf2	equ	0xFDF
  6805                           postinc2	equ	0xFDE
  6806                           postdec2	equ	0xFDD
  6807                           plusw2	equ	0xFDB
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _dia_da_semana *****************
  6813 ;; Defined at:
  6814 ;;		line 12 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  ano             2   12[BANK0 ] unsigned int 
  6817 ;;  mes             1   14[BANK0 ] unsigned char 
  6818 ;;  dia             1   15[BANK0 ] unsigned char 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  tabela_mes     12   21[BANK0 ] unsigned char [12]
  6821 ;;  seculo          1   33[BANK0 ] unsigned char 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      unsigned char 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : F/0
  6828 ;;		On exit  : F/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6831 ;;      Params:         0       4       0       0       0       0       0       0       0
  6832 ;;      Locals:         0      13       0       0       0       0       0       0       0
  6833 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6834 ;;      Totals:         0      22       0       0       0       0       0       0       0
  6835 ;;Total ram usage:       22 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    7
  6838 ;; This function calls:
  6839 ;;		___lwdiv
  6840 ;;		___lwmod
  6841 ;;		___wmul
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text22
  6848  006CA4                     __ptext22:
  6849                           	opt stack 0
  6850  006CA4                     _dia_da_semana:
  6851                           	opt stack 23
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;time.c: 14: char tabela_mes[]= {0,3,3,6,1,4,6,2,5,0,3,5};
  6855                           
  6856                           ;incstack = 0
  6857  006CA4  EE20  F0EC         	lfsr	2,dia_da_semana@F5265
  6858  006CA8  EE10  F075         	lfsr	1,dia_da_semana@tabela_mes
  6859  006CAC  0E0B               	movlw	11
  6860  006CAE                     u6191:
  6861  006CAE  CFDB FFE3          	movff	plusw2,plusw1
  6862  006CB2  06E8               	decf	wreg,f,c
  6863  006CB4  E2FC               	bc	u6191
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;time.c: 15: unsigned char seculo;
  6867                           ;time.c: 17: ano+=15;
  6868  006CB6  0E0F               	movlw	15
  6869  006CB8  276C               	addwf	dia_da_semana@ano& (0+255),f,b
  6870  006CBA  0E00               	movlw	0
  6871  006CBC  236D               	addwfc	(dia_da_semana@ano+1)& (0+255),f,b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;time.c: 18: seculo = ano/100;
  6875  006CBE  C06C  F060         	movff	dia_da_semana@ano,___lwdiv@dividend
  6876  006CC2  C06D  F061         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  6877  006CC6  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
  6878  006CC8  0E64               	movlw	100
  6879  006CCA  6F62               	movwf	___lwdiv@divisor& (0+255),b
  6880  006CCC  EC26  F033         	call	___lwdiv	;wreg free
  6881  006CD0  5160               	movf	?___lwdiv& (0+255),w,b
  6882  006CD2  6F81               	movwf	dia_da_semana@seculo& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;time.c: 19: ano-= (ano/100);
  6886  006CD4  C06C  F060         	movff	dia_da_semana@ano,___lwdiv@dividend
  6887  006CD8  C06D  F061         	movff	dia_da_semana@ano+1,___lwdiv@dividend+1
  6888  006CDC  6B63               	clrf	(___lwdiv@divisor+1)& (0+255),b
  6889  006CDE  0E64               	movlw	100
  6890  006CE0  6F62               	movwf	___lwdiv@divisor& (0+255),b
  6891  006CE2  EC26  F033         	call	___lwdiv	;wreg free
  6892  006CE6  5160               	movf	?___lwdiv& (0+255),w,b
  6893  006CE8  5F6C               	subwf	dia_da_semana@ano& (0+255),f,b
  6894  006CEA  5161               	movf	(?___lwdiv+1)& (0+255),w,b
  6895  006CEC  5B6D               	subwfb	(dia_da_semana@ano+1)& (0+255),f,b
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;time.c: 21: if(! ((ano+3)%4) ){
  6899  006CEE  C06C  F070         	movff	dia_da_semana@ano,??_dia_da_semana
  6900  006CF2  0E03               	movlw	3
  6901  006CF4  2770               	addwf	??_dia_da_semana& (0+255),f,b
  6902  006CF6  1770               	andwf	??_dia_da_semana& (0+255),f,b
  6903  006CF8  E10B               	bnz	l5371
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;time.c: 22: if (mes==1) tabela_mes[mes-1]=6;
  6907  006CFA  056E               	decf	dia_da_semana@mes& (0+255),w,b
  6908  006CFC  E103               	bnz	l5367
  6909                           
  6910                           ; BSR set to: 0
  6911  006CFE  D841               	call	PL26	;call to abstracted procedure
  6912  006D00  0E06               	movlw	6
  6913  006D02  D005               	goto	L9
  6914  006D04                     l5367:
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;time.c: 23: else if(mes==2) tabela_mes[mes-1]=2;}
  6918  006D04  0E02               	movlw	2
  6919  006D06  196E               	xorwf	dia_da_semana@mes& (0+255),w,b
  6920  006D08  E103               	bnz	l5371
  6921                           
  6922                           ; BSR set to: 0
  6923  006D0A  D83B               	call	PL26	;call to abstracted procedure
  6924  006D0C  0E02               	movlw	2
  6925  006D0E                     L9:
  6926  006D0E  6EDF               	movwf	indf2,c
  6927  006D10                     l5371:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;time.c: 25: return (( (6 - seculo*2) + dia + tabela_mes[mes-1] + ano + (ano/4))%7);
  6931  006D10  C081  F060         	movff	dia_da_semana@seculo,___wmul@multiplier
  6932  006D14  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  6933  006D16  6963               	setf	(___wmul@multiplicand+1)& (0+255),b
  6934  006D18  0EFE               	movlw	254
  6935  006D1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6936  006D1C  EC17  F032         	call	___wmul	;wreg free
  6937  006D20  C06C  F070         	movff	dia_da_semana@ano,??_dia_da_semana
  6938  006D24  C06D  F071         	movff	dia_da_semana@ano+1,??_dia_da_semana+1
  6939  006D28  90D8               	bcf	status,0,c
  6940  006D2A  3371               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  6941  006D2C  3370               	rrcf	??_dia_da_semana& (0+255),f,b
  6942  006D2E  90D8               	bcf	status,0,c
  6943  006D30  3371               	rrcf	(??_dia_da_semana+1)& (0+255),f,b
  6944  006D32  3370               	rrcf	??_dia_da_semana& (0+255),f,b
  6945  006D34  C06E  F072         	movff	dia_da_semana@mes,??_dia_da_semana+2
  6946  006D38  0772               	decf	(??_dia_da_semana+2)& (0+255),f,b
  6947  006D3A  5172               	movf	(??_dia_da_semana+2)& (0+255),w,b
  6948  006D3C  0F75               	addlw	low dia_da_semana@tabela_mes
  6949  006D3E  6ED9               	movwf	fsr2l,c
  6950  006D40  6ADA               	clrf	fsr2h,c
  6951  006D42  50DF               	movf	indf2,w,c
  6952  006D44  C06F  F073         	movff	dia_da_semana@dia,??_dia_da_semana+3
  6953  006D48  6B74               	clrf	(??_dia_da_semana+4)& (0+255),b
  6954  006D4A  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6955  006D4C  0E00               	movlw	0
  6956  006D4E  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6957  006D50  5170               	movf	??_dia_da_semana& (0+255),w,b
  6958  006D52  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6959  006D54  5171               	movf	(??_dia_da_semana+1)& (0+255),w,b
  6960  006D56  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6961  006D58  5160               	movf	?___wmul& (0+255),w,b
  6962  006D5A  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6963  006D5C  5161               	movf	(?___wmul+1)& (0+255),w,b
  6964  006D5E  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6965  006D60  516C               	movf	dia_da_semana@ano& (0+255),w,b
  6966  006D62  2773               	addwf	(??_dia_da_semana+3)& (0+255),f,b
  6967  006D64  516D               	movf	(dia_da_semana@ano+1)& (0+255),w,b
  6968  006D66  2374               	addwfc	(??_dia_da_semana+4)& (0+255),f,b
  6969  006D68  0E06               	movlw	6
  6970  006D6A  2573               	addwf	(??_dia_da_semana+3)& (0+255),w,b
  6971  006D6C  6F67               	movwf	___lwmod@dividend& (0+255),b
  6972  006D6E  0E00               	movlw	0
  6973  006D70  2174               	addwfc	(??_dia_da_semana+4)& (0+255),w,b
  6974  006D72  6F68               	movwf	(___lwmod@dividend+1)& (0+255),b
  6975  006D74  6B6A               	clrf	(___lwmod@divisor+1)& (0+255),b
  6976  006D76  0E07               	movlw	7
  6977  006D78  6F69               	movwf	___lwmod@divisor& (0+255),b
  6978  006D7A  ECBD  F032         	call	___lwmod	;wreg free
  6979  006D7E  5167               	movf	?___lwmod& (0+255),w,b
  6980                           
  6981                           ; BSR set to: 0
  6982  006D80  0012               	return		;funcret
  6983  006D82                     __end_of_dia_da_semana:
  6984                           	opt stack 0
  6985  006D82                     PL26:
  6986                           	opt stack 23
  6987  006D82  C06E  F070         	movff	dia_da_semana@mes,??_dia_da_semana
  6988  006D86  0770               	decf	??_dia_da_semana& (0+255),f,b
  6989  006D88  5170               	movf	??_dia_da_semana& (0+255),w,b
  6990  006D8A  0F75               	addlw	low dia_da_semana@tabela_mes
  6991  006D8C  6ED9               	movwf	fsr2l,c
  6992  006D8E  6ADA               	clrf	fsr2h,c
  6993  006D90  0012               	return	
  6994  006D92                     __end_ofPL26:
  6995                           	opt stack 0
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           intcon2	equ	0xFF1
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           indf1	equ	0xFE7
  7007                           postinc1	equ	0xFE6
  7008                           postdec1	equ	0xFE5
  7009                           plusw1	equ	0xFE3
  7010                           fsr1h	equ	0xFE2
  7011                           fsr1l	equ	0xFE1
  7012                           indf2	equ	0xFDF
  7013                           postinc2	equ	0xFDE
  7014                           postdec2	equ	0xFDD
  7015                           plusw2	equ	0xFDB
  7016                           fsr2h	equ	0xFDA
  7017                           fsr2l	equ	0xFD9
  7018                           status	equ	0xFD8
  7019                           
  7020 ;; *************** function ___wmul *****************
  7021 ;; Defined at:
  7022 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7025 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  product         2    4[BANK0 ] unsigned int 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  2    0[BANK0 ] unsigned int 
  7030 ;; Registers used:
  7031 ;;		wreg, status,2, status,0, prodl, prodh
  7032 ;; Tracked objects:
  7033 ;;		On entry : F/0
  7034 ;;		On exit  : F/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7037 ;;      Params:         0       4       0       0       0       0       0       0       0
  7038 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7040 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7041 ;;Total ram usage:        6 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:    6
  7044 ;; This function calls:
  7045 ;;		Nothing
  7046 ;; This function is called by:
  7047 ;;		_numero_para_ascii
  7048 ;;		_dia_da_semana
  7049 ;;		_printf
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text23
  7054  00642E                     __ptext23:
  7055                           	opt stack 0
  7056  00642E                     ___wmul:
  7057                           	opt stack 23
  7058                           
  7059                           ; BSR set to: 0
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;incstack = 0
  7063  00642E  5160               	movf	___wmul@multiplier& (0+255),w,b
  7064  006430  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7065  006432  CFF3 F064          	movff	prodl,___wmul@product
  7066  006436  CFF4 F065          	movff	prodh,___wmul@product+1
  7067  00643A  5160               	movf	___wmul@multiplier& (0+255),w,b
  7068  00643C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7069  00643E  50F3               	movf	prodl,w,c
  7070  006440  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7071  006442  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7072  006444  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7073  006446  50F3               	movf	prodl,w,c
  7074  006448  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7075                           
  7076                           ; BSR set to: 0
  7077  00644A  C064  F060         	movff	___wmul@product,?___wmul
  7078  00644E  C065  F061         	movff	___wmul@product+1,?___wmul+1
  7079                           
  7080                           ; BSR set to: 0
  7081  006452  0012               	return		;funcret
  7082  006454                     __end_of___wmul:
  7083                           	opt stack 0
  7084                           tblptru	equ	0xFF8
  7085                           tblptrh	equ	0xFF7
  7086                           tblptrl	equ	0xFF6
  7087                           tablat	equ	0xFF5
  7088                           prodh	equ	0xFF4
  7089                           prodl	equ	0xFF3
  7090                           intcon	equ	0xFF2
  7091                           intcon2	equ	0xFF1
  7092                           postinc0	equ	0xFEE
  7093                           wreg	equ	0xFE8
  7094                           indf1	equ	0xFE7
  7095                           postinc1	equ	0xFE6
  7096                           postdec1	equ	0xFE5
  7097                           plusw1	equ	0xFE3
  7098                           fsr1h	equ	0xFE2
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           plusw2	equ	0xFDB
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function ___lwmod *****************
  7109 ;; Defined at:
  7110 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  dividend        2    7[BANK0 ] unsigned int 
  7113 ;;  divisor         2    9[BANK0 ] unsigned int 
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;  counter         1   11[BANK0 ] unsigned char 
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  2    7[BANK0 ] unsigned int 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0
  7120 ;; Tracked objects:
  7121 ;;		On entry : F/0
  7122 ;;		On exit  : F/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7125 ;;      Params:         0       4       0       0       0       0       0       0       0
  7126 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7128 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7129 ;;Total ram usage:        5 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    6
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		_dia_da_semana
  7136 ;;		_printf
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text24
  7141  00657A                     __ptext24:
  7142                           	opt stack 0
  7143  00657A                     ___lwmod:
  7144                           	opt stack 23
  7145                           
  7146                           ; BSR set to: 0
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;incstack = 0
  7150  00657A  5169               	movf	___lwmod@divisor& (0+255),w,b
  7151  00657C  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7152  00657E  E017               	bz	l1386
  7153                           
  7154                           ; BSR set to: 0
  7155  006580  0E01               	movlw	1
  7156  006582  6F6B               	movwf	___lwmod@counter& (0+255),b
  7157  006584  D004               	goto	l5097
  7158  006586                     l5095:
  7159                           
  7160                           ; BSR set to: 0
  7161  006586  90D8               	bcf	status,0,c
  7162  006588  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  7163  00658A  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7164  00658C  2B6B               	incf	___lwmod@counter& (0+255),f,b
  7165  00658E                     l5097:
  7166                           
  7167                           ; BSR set to: 0
  7168  00658E  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7169  006590  D7FA               	goto	l5095
  7170  006592                     l5099:
  7171                           
  7172                           ; BSR set to: 0
  7173  006592  5169               	movf	___lwmod@divisor& (0+255),w,b
  7174  006594  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  7175  006596  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7176  006598  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7177  00659A  E304               	bnc	l5103
  7178                           
  7179                           ; BSR set to: 0
  7180  00659C  5169               	movf	___lwmod@divisor& (0+255),w,b
  7181  00659E  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  7182  0065A0  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7183  0065A2  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7184  0065A4                     l5103:
  7185                           
  7186                           ; BSR set to: 0
  7187  0065A4  90D8               	bcf	status,0,c
  7188  0065A6  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7189  0065A8  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  7190                           
  7191                           ; BSR set to: 0
  7192  0065AA  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  7193  0065AC  D7F2               	goto	l5099
  7194  0065AE                     l1386:
  7195                           
  7196                           ; BSR set to: 0
  7197  0065AE  C067  F067         	movff	___lwmod@dividend,?___lwmod
  7198  0065B2  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  7199                           
  7200                           ; BSR set to: 0
  7201  0065B6  0012               	return		;funcret
  7202  0065B8                     __end_of___lwmod:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           intcon2	equ	0xFF1
  7212                           postinc0	equ	0xFEE
  7213                           wreg	equ	0xFE8
  7214                           indf1	equ	0xFE7
  7215                           postinc1	equ	0xFE6
  7216                           postdec1	equ	0xFE5
  7217                           plusw1	equ	0xFE3
  7218                           fsr1h	equ	0xFE2
  7219                           fsr1l	equ	0xFE1
  7220                           indf2	equ	0xFDF
  7221                           postinc2	equ	0xFDE
  7222                           postdec2	equ	0xFDD
  7223                           plusw2	equ	0xFDB
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function ___lwdiv *****************
  7229 ;; Defined at:
  7230 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  dividend        2    0[BANK0 ] unsigned int 
  7233 ;;  divisor         2    2[BANK0 ] unsigned int 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  quotient        2    5[BANK0 ] unsigned int 
  7236 ;;  counter         1    4[BANK0 ] unsigned char 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  2    0[BANK0 ] unsigned int 
  7239 ;; Registers used:
  7240 ;;		wreg, status,2, status,0
  7241 ;; Tracked objects:
  7242 ;;		On entry : F/0
  7243 ;;		On exit  : F/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7246 ;;      Params:         0       4       0       0       0       0       0       0       0
  7247 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7249 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7250 ;;Total ram usage:        7 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    6
  7253 ;; This function calls:
  7254 ;;		Nothing
  7255 ;; This function is called by:
  7256 ;;		_dia_da_semana
  7257 ;;		_printf
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text25
  7262  00664C                     __ptext25:
  7263                           	opt stack 0
  7264  00664C                     ___lwdiv:
  7265                           	opt stack 23
  7266                           
  7267                           ; BSR set to: 0
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;incstack = 0
  7271  00664C  6B65               	clrf	___lwdiv@quotient& (0+255),b
  7272  00664E  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
  7273                           
  7274                           ; BSR set to: 0
  7275  006650  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7276  006652  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7277  006654  E01B               	bz	l1376
  7278                           
  7279                           ; BSR set to: 0
  7280  006656  0E01               	movlw	1
  7281  006658  6F64               	movwf	___lwdiv@counter& (0+255),b
  7282  00665A  D004               	goto	l5077
  7283  00665C                     l5075:
  7284                           
  7285                           ; BSR set to: 0
  7286  00665C  90D8               	bcf	status,0,c
  7287  00665E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  7288  006660  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7289  006662  2B64               	incf	___lwdiv@counter& (0+255),f,b
  7290  006664                     l5077:
  7291                           
  7292                           ; BSR set to: 0
  7293  006664  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7294  006666  D7FA               	goto	l5075
  7295  006668                     l5079:
  7296                           
  7297                           ; BSR set to: 0
  7298  006668  90D8               	bcf	status,0,c
  7299  00666A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  7300  00666C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7301                           
  7302                           ; BSR set to: 0
  7303  00666E  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7304  006670  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  7305  006672  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7306  006674  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7307  006676  E305               	bnc	l5087
  7308                           
  7309                           ; BSR set to: 0
  7310  006678  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7311  00667A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  7312  00667C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7313  00667E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7314                           
  7315                           ; BSR set to: 0
  7316  006680  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  7317  006682                     l5087:
  7318                           
  7319                           ; BSR set to: 0
  7320  006682  90D8               	bcf	status,0,c
  7321  006684  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7322  006686  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  7323                           
  7324                           ; BSR set to: 0
  7325  006688  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  7326  00668A  D7EE               	goto	l5079
  7327  00668C                     l1376:
  7328                           
  7329                           ; BSR set to: 0
  7330  00668C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  7331  006690  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7332                           
  7333                           ; BSR set to: 0
  7334  006694  0012               	return		;funcret
  7335  006696                     __end_of___lwdiv:
  7336                           	opt stack 0
  7337                           tblptru	equ	0xFF8
  7338                           tblptrh	equ	0xFF7
  7339                           tblptrl	equ	0xFF6
  7340                           tablat	equ	0xFF5
  7341                           prodh	equ	0xFF4
  7342                           prodl	equ	0xFF3
  7343                           intcon	equ	0xFF2
  7344                           intcon2	equ	0xFF1
  7345                           postinc0	equ	0xFEE
  7346                           wreg	equ	0xFE8
  7347                           indf1	equ	0xFE7
  7348                           postinc1	equ	0xFE6
  7349                           postdec1	equ	0xFE5
  7350                           plusw1	equ	0xFE3
  7351                           fsr1h	equ	0xFE2
  7352                           fsr1l	equ	0xFE1
  7353                           indf2	equ	0xFDF
  7354                           postinc2	equ	0xFDE
  7355                           postdec2	equ	0xFDD
  7356                           plusw2	equ	0xFDB
  7357                           fsr2h	equ	0xFDA
  7358                           fsr2l	equ	0xFD9
  7359                           status	equ	0xFD8
  7360                           
  7361 ;; *************** function _delay_ms *****************
  7362 ;; Defined at:
  7363 ;;		line 5 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  delay_total     2    0[BANK0 ] unsigned int 
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;  temp            2    3[BANK0 ] unsigned int 
  7368 ;; Return value:  Size  Location     Type
  7369 ;;		None               void
  7370 ;; Registers used:
  7371 ;;		wreg, status,2, status,0
  7372 ;; Tracked objects:
  7373 ;;		On entry : F/0
  7374 ;;		On exit  : F/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7377 ;;      Params:         0       2       0       0       0       0       0       0       0
  7378 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7379 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7380 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7381 ;;Total ram usage:        5 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    6
  7384 ;; This function calls:
  7385 ;;		Nothing
  7386 ;; This function is called by:
  7387 ;;		_main
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           	psect	text26
  7392  006454                     __ptext26:
  7393                           	opt stack 0
  7394  006454                     _delay_ms:
  7395                           	opt stack 24
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;time.c: 6: unsigned int temp = 0;
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;incstack = 0
  7402  006454  6B63               	clrf	delay_ms@temp& (0+255),b
  7403  006456  6B64               	clrf	(delay_ms@temp+1)& (0+255),b
  7404                           
  7405                           ;time.c: 7: while(temp < delay_total){
  7406  006458  D00B               	goto	l566
  7407  00645A                     l5427:
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;time.c: 8: _delay((unsigned long)((1)*(16000000/4000.0)));
  7411  00645A  0E06               	movlw	6
  7412  00645C  6F62               	movwf	??_delay_ms& (0+255),b
  7413  00645E  0E30               	movlw	48
  7414  006460                     u7697:
  7415  006460  2EE8               	decfsz	wreg,f,c
  7416  006462  D7FE               	goto	u7697
  7417  006464  2F62               	decfsz	??_delay_ms& (0+255),f,b
  7418  006466  D7FC               	goto	u7697
  7419  006468  D000               	nop2	
  7420                           
  7421                           ;time.c: 9: temp++;}
  7422  00646A  0100               	movlb	0	; () banked
  7423  00646C  4B63               	infsnz	delay_ms@temp& (0+255),f,b
  7424  00646E  2B64               	incf	(delay_ms@temp+1)& (0+255),f,b
  7425  006470                     l566:
  7426                           
  7427                           ; BSR set to: 0
  7428  006470  5160               	movf	delay_ms@delay_total& (0+255),w,b
  7429  006472  5D63               	subwf	delay_ms@temp& (0+255),w,b
  7430  006474  5161               	movf	(delay_ms@delay_total+1)& (0+255),w,b
  7431  006476  5964               	subwfb	(delay_ms@temp+1)& (0+255),w,b
  7432  006478  B0D8               	btfsc	status,0,c
  7433                           
  7434                           ; BSR set to: 0
  7435  00647A  0012               	return		;funcret
  7436  00647C  D7EE               	goto	l5427
  7437  00647E                     __end_of_delay_ms:
  7438                           	opt stack 0
  7439                           tblptru	equ	0xFF8
  7440                           tblptrh	equ	0xFF7
  7441                           tblptrl	equ	0xFF6
  7442                           tablat	equ	0xFF5
  7443                           prodh	equ	0xFF4
  7444                           prodl	equ	0xFF3
  7445                           intcon	equ	0xFF2
  7446                           intcon2	equ	0xFF1
  7447                           postinc0	equ	0xFEE
  7448                           wreg	equ	0xFE8
  7449                           indf1	equ	0xFE7
  7450                           postinc1	equ	0xFE6
  7451                           postdec1	equ	0xFE5
  7452                           plusw1	equ	0xFE3
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           plusw2	equ	0xFDB
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _config_serial *****************
  7464 ;; Defined at:
  7465 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\serial.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  baud            1    wreg     unsigned char 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  baud            1    0[BANK0 ] unsigned char 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;		None               void
  7472 ;; Registers used:
  7473 ;;		wreg
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : F/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0
  7480 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7482 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7483 ;;Total ram usage:        1 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    6
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		_main
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text27
  7494  00637C                     __ptext27:
  7495                           	opt stack 0
  7496  00637C                     _config_serial:
  7497                           	opt stack 24
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;incstack = 0
  7501                           ;config_serial@baud stored from wreg
  7502  00637C  0100               	movlb	0	; () banked
  7503  00637E  6F60               	movwf	config_serial@baud& (0+255),b
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;serial.c: 7: SYNC=0;
  7507  006380  98AC               	bcf	4012,4,c	;volatile
  7508                           
  7509                           ;serial.c: 8: BRGH=1;
  7510  006382  84AC               	bsf	4012,2,c	;volatile
  7511                           
  7512                           ;serial.c: 9: BRG16=1;
  7513  006384  86B8               	bsf	4024,3,c	;volatile
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;serial.c: 10: SPBRG=baud;
  7517  006386  C060  FFAF         	movff	config_serial@baud,4015	;volatile
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;serial.c: 11: TX9=0;
  7521  00638A  9CAC               	bcf	4012,6,c	;volatile
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;serial.c: 12: RX9=0;
  7525  00638C  9CAB               	bcf	4011,6,c	;volatile
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;serial.c: 13: TXEN=1;
  7529  00638E  8AAC               	bsf	4012,5,c	;volatile
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;serial.c: 14: RCIE=0;
  7533  006390  9A9D               	bcf	3997,5,c	;volatile
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;serial.c: 15: CREN=1;
  7537  006392  88AB               	bsf	4011,4,c	;volatile
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;serial.c: 16: SPEN=1;
  7541  006394  8EAB               	bsf	4011,7,c	;volatile
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;serial.c: 17: TXCKP = 0;
  7545  006396  98B8               	bcf	4024,4,c	;volatile
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;serial.c: 18: TXIE = 0;
  7549  006398  989D               	bcf	3997,4,c	;volatile
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;serial.c: 19: TX9 = 0;
  7553  00639A  9CAC               	bcf	4012,6,c	;volatile
  7554                           
  7555                           ; BSR set to: 0
  7556  00639C  0012               	return		;funcret
  7557  00639E                     __end_of_config_serial:
  7558                           	opt stack 0
  7559                           tblptru	equ	0xFF8
  7560                           tblptrh	equ	0xFF7
  7561                           tblptrl	equ	0xFF6
  7562                           tablat	equ	0xFF5
  7563                           prodh	equ	0xFF4
  7564                           prodl	equ	0xFF3
  7565                           intcon	equ	0xFF2
  7566                           intcon2	equ	0xFF1
  7567                           postinc0	equ	0xFEE
  7568                           wreg	equ	0xFE8
  7569                           indf1	equ	0xFE7
  7570                           postinc1	equ	0xFE6
  7571                           postdec1	equ	0xFE5
  7572                           plusw1	equ	0xFE3
  7573                           fsr1h	equ	0xFE2
  7574                           fsr1l	equ	0xFE1
  7575                           indf2	equ	0xFDF
  7576                           postinc2	equ	0xFDE
  7577                           postdec2	equ	0xFDD
  7578                           plusw2	equ	0xFDB
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _carregar_senha *****************
  7584 ;; Defined at:
  7585 ;;		line 6 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\eeprom_interna.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  conta           1    wreg     unsigned char 
  7588 ;;  senha_a_carr    2    2[BANK0 ] PTR unsigned char [17]
  7589 ;;		 -> senha(272), 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  conta           1    9[BANK0 ] unsigned char 
  7592 ;;  i               1    8[BANK0 ] unsigned char 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;		None               void
  7595 ;; Registers used:
  7596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7597 ;; Tracked objects:
  7598 ;;		On entry : F/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7602 ;;      Params:         0       2       0       0       0       0       0       0       0
  7603 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7604 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7605 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7606 ;;Total ram usage:        8 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    7
  7609 ;; This function calls:
  7610 ;;		_Read_b_eep
  7611 ;; This function is called by:
  7612 ;;		_main
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text28
  7617  006AD0                     __ptext28:
  7618                           	opt stack 0
  7619  006AD0                     _carregar_senha:
  7620                           	opt stack 23
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;incstack = 0
  7624                           ;carregar_senha@conta stored from wreg
  7625  006AD0  6F69               	movwf	carregar_senha@conta& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;eeprom_interna.c: 8: char i = 0;
  7629  006AD2  6B68               	clrf	carregar_senha@i& (0+255),b
  7630  006AD4                     l5335:
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;eeprom_interna.c: 11: senha_a_carregar[conta][i] = Read_b_eep((conta*16) + i);
  7634  006AD4  D82A               	call	PL8	;call to abstracted procedure
  7635  006AD6  5168               	movf	carregar_senha@i& (0+255),w,b
  7636  006AD8  D833               	call	PL10	;call to abstracted procedure
  7637  006ADA  5168               	movf	carregar_senha@i& (0+255),w,b
  7638  006ADC  2566               	addwf	(??_carregar_senha+2)& (0+255),w,b
  7639  006ADE  6F60               	movwf	Read_b_eep@badd& (0+255),b
  7640  006AE0  0E00               	movlw	0
  7641  006AE2  2167               	addwfc	(??_carregar_senha+3)& (0+255),w,b
  7642  006AE4  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  7643  006AE6  EC6F  F031         	call	_Read_b_eep	;wreg free
  7644  006AEA  6EDF               	movwf	indf2,c
  7645                           
  7646                           ;eeprom_interna.c: 12: i++;} while( senha_a_carregar[conta][i-1] && i<(16-1));
  7647  006AEC  0100               	movlb	0	; () banked
  7648  006AEE  2B68               	incf	carregar_senha@i& (0+255),f,b
  7649                           
  7650                           ; BSR set to: 0
  7651  006AF0  D81C               	call	PL8	;call to abstracted procedure
  7652  006AF2  5168               	movf	carregar_senha@i& (0+255),w,b
  7653  006AF4  2764               	addwf	??_carregar_senha& (0+255),f,b
  7654  006AF6  0E00               	movlw	0
  7655  006AF8  2365               	addwfc	(??_carregar_senha+1)& (0+255),f,b
  7656  006AFA  0EFF               	movlw	255
  7657  006AFC  2564               	addwf	??_carregar_senha& (0+255),w,b
  7658  006AFE  6ED9               	movwf	fsr2l,c
  7659  006B00  0EFF               	movlw	255
  7660  006B02  2165               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  7661  006B04  6EDA               	movwf	fsr2h,c
  7662  006B06  50DF               	movf	indf2,w,c
  7663  006B08  E003               	bz	l5343
  7664                           
  7665                           ; BSR set to: 0
  7666  006B0A  0E0E               	movlw	14
  7667  006B0C  6568               	cpfsgt	carregar_senha@i& (0+255),b
  7668  006B0E  D7E2               	goto	l5335
  7669  006B10                     l5343:
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;eeprom_interna.c: 16: senha_a_carregar[conta][16-1] = Read_b_eep((16*(conta+1))-1);
  7673  006B10  D80C               	call	PL8	;call to abstracted procedure
  7674  006B12  0E0F               	movlw	15
  7675  006B14  D815               	call	PL10	;call to abstracted procedure
  7676  006B16  0E0F               	movlw	15
  7677  006B18  2566               	addwf	(??_carregar_senha+2)& (0+255),w,b
  7678  006B1A  6F60               	movwf	Read_b_eep@badd& (0+255),b
  7679  006B1C  0E00               	movlw	0
  7680  006B1E  2167               	addwfc	(??_carregar_senha+3)& (0+255),w,b
  7681  006B20  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  7682  006B22  EC6F  F031         	call	_Read_b_eep	;wreg free
  7683  006B26  6EDF               	movwf	indf2,c
  7684  006B28  0012               	return		;funcret
  7685  006B2A                     __end_of_carregar_senha:
  7686                           	opt stack 0
  7687  006B2A                     PL8:
  7688                           	opt stack 23
  7689  006B2A  5169               	movf	carregar_senha@conta& (0+255),w,b
  7690  006B2C  0D11               	mullw	17
  7691  006B2E  C062  F064         	movff	carregar_senha@senha_a_carregar,??_carregar_senha
  7692  006B32  C063  F065         	movff	carregar_senha@senha_a_carregar+1,??_carregar_senha+1
  7693  006B36  50F3               	movf	prodl,w,c
  7694  006B38  2764               	addwf	??_carregar_senha& (0+255),f,b
  7695  006B3A  50F4               	movf	prodh,w,c
  7696  006B3C  2365               	addwfc	(??_carregar_senha+1)& (0+255),f,b
  7697  006B3E  0012               	return	
  7698  006B40                     __end_ofPL8:
  7699                           	opt stack 0
  7700  006B40                     PL10:
  7701                           	opt stack 23
  7702  006B40  2564               	addwf	??_carregar_senha& (0+255),w,b
  7703  006B42  6ED9               	movwf	fsr2l,c
  7704  006B44  0E00               	movlw	0
  7705  006B46  2165               	addwfc	(??_carregar_senha+1)& (0+255),w,b
  7706  006B48  6EDA               	movwf	fsr2h,c
  7707  006B4A  5169               	movf	carregar_senha@conta& (0+255),w,b
  7708  006B4C  6F66               	movwf	(??_carregar_senha+2)& (0+255),b
  7709  006B4E  6B67               	clrf	(??_carregar_senha+3)& (0+255),b
  7710  006B50  3B66               	swapf	(??_carregar_senha+2)& (0+255),f,b
  7711  006B52  3B67               	swapf	(??_carregar_senha+3)& (0+255),f,b
  7712  006B54  0EF0               	movlw	240
  7713  006B56  1767               	andwf	(??_carregar_senha+3)& (0+255),f,b
  7714  006B58  5166               	movf	(??_carregar_senha+2)& (0+255),w,b
  7715  006B5A  0B0F               	andlw	15
  7716  006B5C  1367               	iorwf	(??_carregar_senha+3)& (0+255),f,b
  7717  006B5E  0EF0               	movlw	240
  7718  006B60  1766               	andwf	(??_carregar_senha+2)& (0+255),f,b
  7719  006B62  0CF0               	retlw	240
  7720  006B64                     __end_ofPL10:
  7721                           	opt stack 0
  7722                           tblptru	equ	0xFF8
  7723                           tblptrh	equ	0xFF7
  7724                           tblptrl	equ	0xFF6
  7725                           tablat	equ	0xFF5
  7726                           prodh	equ	0xFF4
  7727                           prodl	equ	0xFF3
  7728                           intcon	equ	0xFF2
  7729                           intcon2	equ	0xFF1
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           indf1	equ	0xFE7
  7733                           postinc1	equ	0xFE6
  7734                           postdec1	equ	0xFE5
  7735                           plusw1	equ	0xFE3
  7736                           fsr1h	equ	0xFE2
  7737                           fsr1l	equ	0xFE1
  7738                           indf2	equ	0xFDF
  7739                           postinc2	equ	0xFDE
  7740                           postdec2	equ	0xFDD
  7741                           plusw2	equ	0xFDB
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function _Read_b_eep *****************
  7747 ;; Defined at:
  7748 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\read_B.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  badd            2    0[BANK0 ] unsigned int 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;		None
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  1    wreg      unsigned char 
  7755 ;; Registers used:
  7756 ;;		wreg, status,2
  7757 ;; Tracked objects:
  7758 ;;		On entry : F/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7762 ;;      Params:         0       2       0       0       0       0       0       0       0
  7763 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7765 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7766 ;;Total ram usage:        2 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    6
  7769 ;; This function calls:
  7770 ;;		Nothing
  7771 ;; This function is called by:
  7772 ;;		_main
  7773 ;;		_carregar_senha
  7774 ;;		_verificar_num_contas
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text29
  7779  0062DE                     __ptext29:
  7780                           	opt stack 0
  7781  0062DE                     _Read_b_eep:
  7782                           	opt stack 23
  7783                           
  7784                           ; BSR set to: 0
  7785                           
  7786                           ;incstack = 0
  7787  0062DE  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  7788  0062E2  9CA6               	bcf	4006,6,c	;volatile
  7789  0062E4  9EA6               	bcf	4006,7,c	;volatile
  7790  0062E6  80A6               	bsf	4006,0,c	;volatile
  7791  0062E8  F000               	nop	
  7792  0062EA  F000               	nop	
  7793  0062EC  50A8               	movf	4008,w,c	;volatile
  7794  0062EE  0012               	return		;funcret
  7795  0062F0                     __end_of_Read_b_eep:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon2	equ	0xFF1
  7805                           postinc0	equ	0xFEE
  7806                           wreg	equ	0xFE8
  7807                           indf1	equ	0xFE7
  7808                           postinc1	equ	0xFE6
  7809                           postdec1	equ	0xFE5
  7810                           plusw1	equ	0xFE3
  7811                           fsr1h	equ	0xFE2
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           plusw2	equ	0xFDB
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _ascii_para_numero *****************
  7822 ;; Defined at:
  7823 ;;		line 101 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  caractere3      1    wreg     unsigned char 
  7826 ;;  caractere2      1    0[BANK0 ] unsigned char 
  7827 ;;  caractere1      1    1[BANK0 ] unsigned char 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  caractere3      1    2[BANK0 ] unsigned char 
  7830 ;;  numero          1    3[BANK0 ] unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      unsigned char 
  7833 ;; Registers used:
  7834 ;;		wreg, status,2, status,0, prodl, prodh
  7835 ;; Tracked objects:
  7836 ;;		On entry : F/0
  7837 ;;		On exit  : F/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7840 ;;      Params:         0       2       0       0       0       0       0       0       0
  7841 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7842 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7843 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7844 ;;Total ram usage:        4 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    6
  7847 ;; This function calls:
  7848 ;;		Nothing
  7849 ;; This function is called by:
  7850 ;;		_main
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text30
  7855  00635C                     __ptext30:
  7856                           	opt stack 0
  7857  00635C                     _ascii_para_numero:
  7858                           	opt stack 24
  7859                           
  7860                           ;incstack = 0
  7861                           ;ascii_para_numero@caractere3 stored from wreg
  7862  00635C  6F62               	movwf	ascii_para_numero@caractere3& (0+255),b
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;ascii.c: 102: char numero;
  7866                           ;ascii.c: 103: numero=((caractere3 - '0')*100);
  7867  00635E  5162               	movf	ascii_para_numero@caractere3& (0+255),w,b
  7868  006360  0FD0               	addlw	208
  7869  006362  0D64               	mullw	100
  7870  006364  CFF3 F063          	movff	prodl,ascii_para_numero@numero
  7871                           
  7872                           ;ascii.c: 104: numero+=((caractere2 - '0')*10);
  7873  006368  5160               	movf	ascii_para_numero@caractere2& (0+255),w,b
  7874  00636A  0FD0               	addlw	208
  7875  00636C  0D0A               	mullw	10
  7876  00636E  50F3               	movf	prodl,w,c
  7877  006370  2763               	addwf	ascii_para_numero@numero& (0+255),f,b
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;ascii.c: 105: numero+=(caractere1 - '0');
  7881  006372  5161               	movf	ascii_para_numero@caractere1& (0+255),w,b
  7882  006374  0FD0               	addlw	208
  7883  006376  2763               	addwf	ascii_para_numero@numero& (0+255),f,b
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;ascii.c: 106: return numero;}
  7887  006378  5163               	movf	ascii_para_numero@numero& (0+255),w,b
  7888                           
  7889                           ; BSR set to: 0
  7890  00637A  0012               	return		;funcret
  7891  00637C                     __end_of_ascii_para_numero:
  7892                           	opt stack 0
  7893                           tblptru	equ	0xFF8
  7894                           tblptrh	equ	0xFF7
  7895                           tblptrl	equ	0xFF6
  7896                           tablat	equ	0xFF5
  7897                           prodh	equ	0xFF4
  7898                           prodl	equ	0xFF3
  7899                           intcon	equ	0xFF2
  7900                           intcon2	equ	0xFF1
  7901                           postinc0	equ	0xFEE
  7902                           wreg	equ	0xFE8
  7903                           indf1	equ	0xFE7
  7904                           postinc1	equ	0xFE6
  7905                           postdec1	equ	0xFE5
  7906                           plusw1	equ	0xFE3
  7907                           fsr1h	equ	0xFE2
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           plusw2	equ	0xFDB
  7913                           fsr2h	equ	0xFDA
  7914                           fsr2l	equ	0xFD9
  7915                           status	equ	0xFD8
  7916                           
  7917 ;; *************** function ___awmod *****************
  7918 ;; Defined at:
  7919 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  dividend        2    0[BANK0 ] int 
  7922 ;;  divisor         2    2[BANK0 ] int 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  sign            1    5[BANK0 ] unsigned char 
  7925 ;;  counter         1    4[BANK0 ] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  2    0[BANK0 ] int 
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0
  7930 ;; Tracked objects:
  7931 ;;		On entry : F/0
  7932 ;;		On exit  : F/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7935 ;;      Params:         0       4       0       0       0       0       0       0       0
  7936 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7938 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7939 ;;Total ram usage:        6 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    6
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_main
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text31
  7950  00679E                     __ptext31:
  7951                           	opt stack 0
  7952  00679E                     ___awmod:
  7953                           	opt stack 24
  7954                           
  7955                           ; BSR set to: 0
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;incstack = 0
  7959  00679E  6B65               	clrf	___awmod@sign& (0+255),b
  7960                           
  7961                           ; BSR set to: 0
  7962  0067A0  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7963  0067A2  D006               	goto	l5457
  7964                           
  7965                           ; BSR set to: 0
  7966  0067A4  6D60               	negf	___awmod@dividend& (0+255),b
  7967  0067A6  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7968  0067A8  B0D8               	btfsc	status,0,c
  7969  0067AA  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7970                           
  7971                           ; BSR set to: 0
  7972  0067AC  0E01               	movlw	1
  7973  0067AE  6F65               	movwf	___awmod@sign& (0+255),b
  7974  0067B0                     l5457:
  7975                           
  7976                           ; BSR set to: 0
  7977  0067B0  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7978  0067B2  D004               	goto	l5461
  7979                           
  7980                           ; BSR set to: 0
  7981  0067B4  6D62               	negf	___awmod@divisor& (0+255),b
  7982  0067B6  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  7983  0067B8  B0D8               	btfsc	status,0,c
  7984  0067BA  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  7985  0067BC                     l5461:
  7986                           
  7987                           ; BSR set to: 0
  7988  0067BC  5162               	movf	___awmod@divisor& (0+255),w,b
  7989  0067BE  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7990  0067C0  E017               	bz	l5477
  7991                           
  7992                           ; BSR set to: 0
  7993  0067C2  0E01               	movlw	1
  7994  0067C4  6F64               	movwf	___awmod@counter& (0+255),b
  7995  0067C6  D004               	goto	l5467
  7996  0067C8                     l5465:
  7997                           
  7998                           ; BSR set to: 0
  7999  0067C8  90D8               	bcf	status,0,c
  8000  0067CA  3762               	rlcf	___awmod@divisor& (0+255),f,b
  8001  0067CC  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8002  0067CE  2B64               	incf	___awmod@counter& (0+255),f,b
  8003  0067D0                     l5467:
  8004                           
  8005                           ; BSR set to: 0
  8006  0067D0  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8007  0067D2  D7FA               	goto	l5465
  8008  0067D4                     l5469:
  8009                           
  8010                           ; BSR set to: 0
  8011  0067D4  5162               	movf	___awmod@divisor& (0+255),w,b
  8012  0067D6  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8013  0067D8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8014  0067DA  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8015  0067DC  E304               	bnc	l5473
  8016                           
  8017                           ; BSR set to: 0
  8018  0067DE  5162               	movf	___awmod@divisor& (0+255),w,b
  8019  0067E0  5F60               	subwf	___awmod@dividend& (0+255),f,b
  8020  0067E2  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8021  0067E4  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8022  0067E6                     l5473:
  8023                           
  8024                           ; BSR set to: 0
  8025  0067E6  90D8               	bcf	status,0,c
  8026  0067E8  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8027  0067EA  3362               	rrcf	___awmod@divisor& (0+255),f,b
  8028                           
  8029                           ; BSR set to: 0
  8030  0067EC  2F64               	decfsz	___awmod@counter& (0+255),f,b
  8031  0067EE  D7F2               	goto	l5469
  8032  0067F0                     l5477:
  8033                           
  8034                           ; BSR set to: 0
  8035  0067F0  5165               	movf	___awmod@sign& (0+255),w,b
  8036  0067F2  E004               	bz	l5481
  8037                           
  8038                           ; BSR set to: 0
  8039  0067F4  6D60               	negf	___awmod@dividend& (0+255),b
  8040  0067F6  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8041  0067F8  B0D8               	btfsc	status,0,c
  8042  0067FA  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8043  0067FC                     l5481:
  8044                           
  8045                           ; BSR set to: 0
  8046  0067FC  C060  F060         	movff	___awmod@dividend,?___awmod
  8047  006800  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  8048                           
  8049                           ; BSR set to: 0
  8050  006804  0012               	return		;funcret
  8051  006806                     __end_of___awmod:
  8052                           	opt stack 0
  8053                           tblptru	equ	0xFF8
  8054                           tblptrh	equ	0xFF7
  8055                           tblptrl	equ	0xFF6
  8056                           tablat	equ	0xFF5
  8057                           prodh	equ	0xFF4
  8058                           prodl	equ	0xFF3
  8059                           intcon	equ	0xFF2
  8060                           intcon2	equ	0xFF1
  8061                           postinc0	equ	0xFEE
  8062                           wreg	equ	0xFE8
  8063                           indf1	equ	0xFE7
  8064                           postinc1	equ	0xFE6
  8065                           postdec1	equ	0xFE5
  8066                           plusw1	equ	0xFE3
  8067                           fsr1h	equ	0xFE2
  8068                           fsr1l	equ	0xFE1
  8069                           indf2	equ	0xFDF
  8070                           postinc2	equ	0xFDE
  8071                           postdec2	equ	0xFDD
  8072                           plusw2	equ	0xFDB
  8073                           fsr2h	equ	0xFDA
  8074                           fsr2l	equ	0xFD9
  8075                           status	equ	0xFD8
  8076                           
  8077 ;; *************** function _aux *****************
  8078 ;; Defined at:
  8079 ;;		line 114 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\main.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;		None
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  temp            1    0        unsigned char 
  8084 ;;  temp            1    0        unsigned char 
  8085 ;;  linha           1   43[COMRAM] unsigned char 
  8086 ;;  coluna          1   42[COMRAM] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0
  8097 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8098 ;;      Temps:         11       0       0       0       0       0       0       0       0
  8099 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8100 ;;Total ram usage:       15 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    5
  8103 ;; This function calls:
  8104 ;;		_teclado_matricial
  8105 ;;		i2_lcd_gotoxy
  8106 ;;		i2_printf
  8107 ;;		i2_resetar_timer1
  8108 ;; This function is called by:
  8109 ;;		Interrupt level 2
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           	psect	intcode
  8114  001008                     __pintcode:
  8115                           	opt stack 0
  8116  001008                     _aux:
  8117                           	opt stack 20
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;incstack = 0
  8121  001008  CFE1 F01F          	movff	fsr1l,??_aux+1
  8122  00100C  CFE2 F020          	movff	fsr1h,??_aux+2
  8123  001010  CFD9 F021          	movff	fsr2l,??_aux+3
  8124  001014  EDC9  F036         	call	int_func,f	;refresh shadow registers
  8125                           tblptru	equ	0xFF8
  8126                           tblptrh	equ	0xFF7
  8127                           tblptrl	equ	0xFF6
  8128                           tablat	equ	0xFF5
  8129                           prodh	equ	0xFF4
  8130                           prodl	equ	0xFF3
  8131                           intcon	equ	0xFF2
  8132                           intcon2	equ	0xFF1
  8133                           postinc0	equ	0xFEE
  8134                           wreg	equ	0xFE8
  8135                           indf1	equ	0xFE7
  8136                           postinc1	equ	0xFE6
  8137                           postdec1	equ	0xFE5
  8138                           plusw1	equ	0xFE3
  8139                           fsr1h	equ	0xFE2
  8140                           fsr1l	equ	0xFE1
  8141                           indf2	equ	0xFDF
  8142                           postinc2	equ	0xFDE
  8143                           postdec2	equ	0xFDD
  8144                           plusw2	equ	0xFDB
  8145                           fsr2h	equ	0xFDA
  8146                           fsr2l	equ	0xFD9
  8147                           status	equ	0xFD8
  8148                           
  8149                           	psect	intcode_body
  8150  006D92                     __pintcode_body:
  8151                           	opt stack 20
  8152  006D92                     int_func:
  8153                           	opt stack 20
  8154  006D92  0006               	pop		; remove dummy address from shadow register refresh
  8155  006D94  CFDA F022          	movff	fsr2h,??_aux+4
  8156  006D98  CFF3 F023          	movff	prodl,??_aux+5
  8157  006D9C  CFF4 F024          	movff	prodh,??_aux+6
  8158  006DA0  CFF6 F025          	movff	tblptrl,??_aux+7
  8159  006DA4  CFF7 F026          	movff	tblptrh,??_aux+8
  8160  006DA8  CFF8 F027          	movff	tblptru,??_aux+9
  8161  006DAC  CFF5 F028          	movff	tablat,??_aux+10
  8162                           
  8163                           ;main.c: 116: if(TMR1IE && TMR1IF){
  8164  006DB0  B09D               	btfsc	3997,0,c	;volatile
  8165  006DB2  A09E               	btfss	3998,0,c	;volatile
  8166  006DB4  D01D               	goto	i2l4105
  8167                           
  8168                           ;main.c: 117: TMR1IF=0;
  8169  006DB6  909E               	bcf	3998,0,c	;volatile
  8170                           
  8171                           ;main.c: 118: TMR1H=0xC0;
  8172  006DB8  0EC0               	movlw	192
  8173  006DBA  6ECF               	movwf	4047,c	;volatile
  8174                           
  8175                           ;main.c: 120: if((!((FLAGS_3 & (1<<3))))){
  8176  006DBC  B62E               	btfsc	_FLAGS_3,3,c
  8177  006DBE  D006               	goto	i2l180
  8178                           
  8179                           ;main.c: 121: qtd_caracteres_recebidos_serial=0;
  8180  006DC0  6A35               	clrf	_qtd_caracteres_recebidos_serial,c
  8181                           
  8182                           ;main.c: 122: (FLAGS_1 |= (1<<1));
  8183  006DC2  0100               	movlb	0	; () banked
  8184  006DC4  83B1               	bsf	_FLAGS_1& (0+255),1,b
  8185                           
  8186                           ;main.c: 123: (FLAGS_2 |= (1<<0));
  8187  006DC6  802D               	bsf	_FLAGS_2,0,c
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;main.c: 124: TMR1ON=0;
  8191  006DC8  90CD               	bcf	4045,0,c	;volatile
  8192                           
  8193                           ;main.c: 125: }
  8194  006DCA  D012               	goto	i2l4105
  8195  006DCC                     i2l180:
  8196                           
  8197                           ;main.c: 129: else if((FLAGS_3 & (1<<2)) && ++num_interrupt_timer1==5){
  8198  006DCC  A42E               	btfss	_FLAGS_3,2,c
  8199  006DCE  D010               	goto	i2l4105
  8200  006DD0  2A34               	incf	_num_interrupt_timer1,f,c
  8201  006DD2  0E05               	movlw	5
  8202  006DD4  1834               	xorwf	_num_interrupt_timer1,w,c
  8203  006DD6  E10C               	bnz	i2l4105
  8204                           
  8205                           ;main.c: 130: if((FLAGS_2 & (1<<4))){(FLAGS_2 |= (1<<1));}
  8206  006DD8  B82D               	btfsc	_FLAGS_2,4,c
  8207  006DDA  822D               	bsf	_FLAGS_2,1,c
  8208                           
  8209                           ;main.c: 131: lcd_gotoxy(2,qtd_caracteres_recebidos_teclado);
  8210  006DDC  C036  F002         	movff	_qtd_caracteres_recebidos_teclado,i2lcd_gotoxy@coluna
  8211  006DE0  0E02               	movlw	2
  8212  006DE2  EC01  F033         	call	i2_lcd_gotoxy
  8213                           
  8214                           ;main.c: 132: printf("*");
  8215  006DE6  0EDC               	movlw	STR_1& (0+255)
  8216  006DE8  ECF4  F037         	call	i2_printf
  8217                           
  8218                           ;main.c: 133: TMR1ON=0;
  8219  006DEC  90CD               	bcf	4045,0,c	;volatile
  8220                           
  8221                           ;main.c: 134: num_interrupt_timer1=0;}
  8222  006DEE  6A34               	clrf	_num_interrupt_timer1,c
  8223  006DF0                     i2l4105:
  8224                           
  8225                           ;main.c: 136: }
  8226                           ;main.c: 138: if(TMR0IE && TMR0IF){
  8227  006DF0  BAF2               	btfsc	intcon,5,c	;volatile
  8228  006DF2  A4F2               	btfss	intcon,2,c	;volatile
  8229  006DF4  D051               	goto	i2l184
  8230                           
  8231                           ;main.c: 139: TMR0H = 0xC2;
  8232  006DF6  0EC2               	movlw	194
  8233  006DF8  6ED7               	movwf	4055,c	;volatile
  8234                           
  8235                           ;main.c: 140: TMR0L+=0xF7;
  8236  006DFA  0EF7               	movlw	247
  8237  006DFC  26D6               	addwf	4054,f,c	;volatile
  8238                           
  8239                           ;main.c: 141: TMR0IF=0;
  8240  006DFE  94F2               	bcf	intcon,2,c	;volatile
  8241                           
  8242                           ;main.c: 142: LATDbits.LD1^=1;
  8243  006E00  728C               	btg	3980,1,c	;volatile
  8244                           
  8245                           ;main.c: 143: (FLAGS_2 |= (1<<7));
  8246  006E02  8E2D               	bsf	_FLAGS_2,7,c
  8247                           
  8248                           ;main.c: 144: (FLAGS_3 |= (1<<0));
  8249  006E04  802E               	bsf	_FLAGS_3,0,c
  8250                           
  8251                           ;main.c: 145: if(++data_atual.segundo>59){
  8252  006E06  2A3D               	incf	_data_atual+5,f,c
  8253  006E08  0E3B               	movlw	59
  8254  006E0A  643D               	cpfsgt	_data_atual+5,c
  8255  006E0C  D045               	goto	i2l184
  8256                           
  8257                           ;main.c: 146: data_atual.segundo=0;
  8258  006E0E  6A3D               	clrf	_data_atual+5,c
  8259                           
  8260                           ;main.c: 148: if(++data_atual.minuto>59){
  8261  006E10  2A3C               	incf	_data_atual+4,f,c
  8262  006E12  0E3B               	movlw	59
  8263  006E14  643C               	cpfsgt	_data_atual+4,c
  8264  006E16  D040               	goto	i2l184
  8265                           
  8266                           ;main.c: 151: data_atual.minuto=0;
  8267  006E18  6A3C               	clrf	_data_atual+4,c
  8268                           
  8269                           ;main.c: 153: if(++data_atual.hora>23){
  8270  006E1A  2A3B               	incf	_data_atual+3,f,c
  8271  006E1C  0E17               	movlw	23
  8272  006E1E  643B               	cpfsgt	_data_atual+3,c
  8273  006E20  D03B               	goto	i2l184
  8274                           
  8275                           ;main.c: 155: data_atual.hora=0;
  8276  006E22  6A3B               	clrf	_data_atual+3,c
  8277                           
  8278                           ;main.c: 156: if(++data_atual.dia_da_semana > 6) data_atual.dia_da_semana = 1;
  8279  006E24  2A3E               	incf	_data_atual+6,f,c
  8280  006E26  0E06               	movlw	6
  8281  006E28  643E               	cpfsgt	_data_atual+6,c
  8282  006E2A  D002               	goto	i2l4137
  8283  006E2C  0E01               	movlw	1
  8284  006E2E  6E3E               	movwf	_data_atual+6,c
  8285  006E30                     i2l4137:
  8286                           
  8287                           ;main.c: 158: if(++data_atual.dia >= qtd_max_dias) {
  8288  006E30  2A3A               	incf	_data_atual+2,f,c
  8289  006E32  503F               	movf	_qtd_max_dias,w,c
  8290  006E34  5C3A               	subwf	_data_atual+2,w,c
  8291  006E36  E330               	bnc	i2l184
  8292                           
  8293                           ;main.c: 159: data_atual.dia=1;
  8294  006E38  0E01               	movlw	1
  8295  006E3A  6E3A               	movwf	_data_atual+2,c
  8296                           
  8297                           ;main.c: 161: switch(++data_atual.mes){
  8298  006E3C  D012               	goto	i2l4157
  8299  006E3E                     i2l4141:
  8300                           
  8301                           ;main.c: 163: case 3:
  8302                           ;main.c: 164: case 5:
  8303                           ;main.c: 165: case 7:
  8304                           ;main.c: 166: case 8:
  8305                           ;main.c: 167: case 10:
  8306                           ;main.c: 168: case 12:
  8307                           ;main.c: 169: qtd_max_dias=31;
  8308  006E3E  0E1F               	movlw	31
  8309  006E40  D00B               	goto	L12
  8310  006E42                     i2l4143:
  8311                           
  8312                           ;main.c: 173: if(!((data_atual.ano+3)%4)) qtd_max_dias=29;
  8313  006E42  C038  F01E         	movff	_data_atual,??_aux
  8314  006E46  0E03               	movlw	3
  8315  006E48  261E               	addwf	??_aux,f,c
  8316  006E4A  161E               	andwf	??_aux,f,c
  8317  006E4C  E102               	bnz	i2l4147
  8318  006E4E  0E1D               	movlw	29
  8319  006E50  D003               	goto	L12
  8320  006E52                     i2l4147:
  8321                           
  8322                           ;main.c: 174: else qtd_max_dias=28;
  8323  006E52  0E1C               	movlw	28
  8324  006E54  D001               	goto	L12
  8325  006E56                     i2l4149:
  8326                           
  8327                           ;main.c: 178: case 6:
  8328                           ;main.c: 179: case 9:
  8329                           ;main.c: 180: case 11:
  8330                           ;main.c: 181: qtd_max_dias=30;
  8331  006E56  0E1E               	movlw	30
  8332  006E58                     L12:
  8333  006E58  6E3F               	movwf	_qtd_max_dias,c
  8334                           
  8335                           ;main.c: 182: break;
  8336  006E5A  D01E               	goto	i2l184
  8337  006E5C                     i2l4151:
  8338                           
  8339                           ;main.c: 185: data_atual.ano++;
  8340  006E5C  2A38               	incf	_data_atual,f,c
  8341                           
  8342                           ;main.c: 186: data_atual.mes=0;
  8343  006E5E  6A39               	clrf	_data_atual+1,c
  8344                           
  8345                           ;main.c: 187: break;}
  8346  006E60  D01B               	goto	i2l184
  8347  006E62                     i2l4157:
  8348  006E62  2A39               	incf	_data_atual+1,f,c
  8349  006E64  5039               	movf	_data_atual+1,w,c
  8350                           
  8351                           ; Switch size 1, requested type "space"
  8352                           ; Number of cases is 12, Range of values is 1 to 12
  8353                           ; switch strategies available:
  8354                           ; Name         Instructions Cycles
  8355                           ; simple_byte           37    19 (average)
  8356                           ;	Chosen strategy is simple_byte
  8357  006E66  0A01               	xorlw	1	; case 1
  8358  006E68  E0EA               	bz	i2l4141
  8359  006E6A  0A03               	xorlw	3	; case 2
  8360  006E6C  E0EA               	bz	i2l4143
  8361  006E6E  0A01               	xorlw	1	; case 3
  8362  006E70  E0E6               	bz	i2l4141
  8363  006E72  0A07               	xorlw	7	; case 4
  8364  006E74  E0F0               	bz	i2l4149
  8365  006E76  0A01               	xorlw	1	; case 5
  8366  006E78  E0E2               	bz	i2l4141
  8367  006E7A  0A03               	xorlw	3	; case 6
  8368  006E7C  E0EC               	bz	i2l4149
  8369  006E7E  0A01               	xorlw	1	; case 7
  8370  006E80  E0DE               	bz	i2l4141
  8371  006E82  0A0F               	xorlw	15	; case 8
  8372  006E84  E0DC               	bz	i2l4141
  8373  006E86  0A01               	xorlw	1	; case 9
  8374  006E88  E0E6               	bz	i2l4149
  8375  006E8A  0A03               	xorlw	3	; case 10
  8376  006E8C  E0D8               	bz	i2l4141
  8377  006E8E  0A01               	xorlw	1	; case 11
  8378  006E90  E0E2               	bz	i2l4149
  8379  006E92  0A07               	xorlw	7	; case 12
  8380  006E94  E0D4               	bz	i2l4141
  8381  006E96  D7E2               	goto	i2l4151
  8382  006E98                     i2l184:
  8383                           
  8384                           ;main.c: 188: }
  8385                           ;main.c: 190: }
  8386                           ;main.c: 191: }
  8387                           ;main.c: 192: }
  8388                           ;main.c: 195: }
  8389                           ;main.c: 199: if(RBIE && RBIF){
  8390  006E98  B6F2               	btfsc	intcon,3,c	;volatile
  8391  006E9A  A0F2               	btfss	intcon,0,c	;volatile
  8392  006E9C  D056               	goto	i2l4217
  8393                           
  8394                           ;main.c: 201: PORTB_SR=(PORTB&0xF0);
  8395  006E9E  5081               	movf	3969,w,c	;volatile
  8396  006EA0  0BF0               	andlw	240
  8397  006EA2  6E31               	movwf	_PORTB_SR,c
  8398                           
  8399                           ;main.c: 202: RBIF=0;
  8400  006EA4  90F2               	bcf	intcon,0,c	;volatile
  8401                           
  8402                           ;main.c: 203: if(PORTB_SR != 0xF0) {
  8403  006EA6  0EF0               	movlw	240
  8404  006EA8  1831               	xorwf	_PORTB_SR,w,c
  8405  006EAA  E04C               	bz	i2l4215
  8406                           
  8407                           ;main.c: 204: RBIE=0;
  8408  006EAC  96F2               	bcf	intcon,3,c	;volatile
  8409                           
  8410                           ;main.c: 205: (FLAGS_2 |= (1<<3));
  8411  006EAE  862D               	bsf	_FLAGS_2,3,c
  8412                           
  8413                           ;main.c: 206: (FLAGS_3 |= (1<<3));
  8414  006EB0  862E               	bsf	_FLAGS_3,3,c
  8415                           
  8416                           ;main.c: 207: LATDbits.LD0^=1;
  8417  006EB2  708C               	btg	3980,0,c	;volatile
  8418                           
  8419                           ;main.c: 210: if(PORTBbits.RB7==0){coluna=1;}
  8420  006EB4  BE81               	btfsc	3969,7,c	;volatile
  8421  006EB6  D002               	goto	i2l209
  8422  006EB8  0E01               	movlw	1
  8423  006EBA  D00B               	goto	L15
  8424  006EBC                     i2l209:
  8425                           
  8426                           ;main.c: 212: else if(PORTBbits.RB6==0){coluna=2;}
  8427  006EBC  BC81               	btfsc	3969,6,c	;volatile
  8428  006EBE  D002               	goto	i2l211
  8429  006EC0  0E02               	movlw	2
  8430  006EC2  D007               	goto	L15
  8431  006EC4                     i2l211:
  8432                           
  8433                           ;main.c: 214: else if(PORTBbits.RB5==0){coluna=3;}
  8434  006EC4  BA81               	btfsc	3969,5,c	;volatile
  8435  006EC6  D002               	goto	i2l213
  8436  006EC8  0E03               	movlw	3
  8437  006ECA  D003               	goto	L15
  8438  006ECC                     i2l213:
  8439                           
  8440                           ;main.c: 216: else if(PORTBbits.RB4==0){coluna=4;}
  8441  006ECC  B881               	btfsc	3969,4,c	;volatile
  8442  006ECE  D003               	goto	i2l215
  8443  006ED0  0E04               	movlw	4
  8444  006ED2                     L15:
  8445  006ED2  6E2B               	movwf	aux@coluna,c
  8446  006ED4  D001               	goto	i2l4183
  8447  006ED6                     i2l215:
  8448                           
  8449                           ;main.c: 218: else{coluna=0;}
  8450  006ED6  6A2B               	clrf	aux@coluna,c
  8451  006ED8                     i2l4183:
  8452                           
  8453                           ;main.c: 221: TRISB&=0x0F;
  8454  006ED8  0E0F               	movlw	15
  8455  006EDA  1693               	andwf	3987,f,c	;volatile
  8456                           
  8457                           ;main.c: 222: LATB|=0xF0;
  8458  006EDC  0EF0               	movlw	240
  8459  006EDE  128A               	iorwf	3978,f,c	;volatile
  8460  006EE0                     i2l4185:
  8461  006EE0  CF83 F01E          	movff	3971,??_aux	;volatile
  8462  006EE4  0EF0               	movlw	240
  8463  006EE6  161E               	andwf	??_aux,f,c
  8464  006EE8  E1FB               	bnz	i2l4185
  8465                           
  8466                           ;main.c: 228: TRISD|=0xF0;
  8467  006EEA  1295               	iorwf	3989,f,c	;volatile
  8468                           
  8469                           ;main.c: 232: if(PORTDbits.RD4==1){linha=1;}
  8470  006EEC  A883               	btfss	3971,4,c	;volatile
  8471  006EEE  D002               	goto	i2l223
  8472  006EF0  0E01               	movlw	1
  8473  006EF2  D00B               	goto	L18
  8474  006EF4                     i2l223:
  8475                           
  8476                           ;main.c: 234: else if(PORTDbits.RD5==1){linha=2;}
  8477  006EF4  AA83               	btfss	3971,5,c	;volatile
  8478  006EF6  D002               	goto	i2l225
  8479  006EF8  0E02               	movlw	2
  8480  006EFA  D007               	goto	L18
  8481  006EFC                     i2l225:
  8482                           
  8483                           ;main.c: 236: else if(PORTDbits.RD6==1){linha=3;}
  8484  006EFC  AC83               	btfss	3971,6,c	;volatile
  8485  006EFE  D002               	goto	i2l227
  8486  006F00  0E03               	movlw	3
  8487  006F02  D003               	goto	L18
  8488  006F04                     i2l227:
  8489                           
  8490                           ;main.c: 238: else if(PORTDbits.RD7==1){linha=4;}
  8491  006F04  AE83               	btfss	3971,7,c	;volatile
  8492  006F06  D003               	goto	i2l229
  8493  006F08  0E04               	movlw	4
  8494  006F0A                     L18:
  8495  006F0A  6E2C               	movwf	aux@linha,c
  8496  006F0C  D001               	goto	i2l4199
  8497  006F0E                     i2l229:
  8498                           
  8499                           ;main.c: 240: else{linha=0;}
  8500  006F0E  6A2C               	clrf	aux@linha,c
  8501  006F10                     i2l4199:
  8502                           
  8503                           ;main.c: 242: if(linha && coluna){
  8504  006F10  502C               	movf	aux@linha,w,c
  8505  006F12  E009               	bz	i2l4205
  8506  006F14  502B               	movf	aux@coluna,w,c
  8507  006F16  E007               	bz	i2l4205
  8508                           
  8509                           ;main.c: 244: caractere_recebido = teclado_matricial(coluna,linha);
  8510  006F18  C02C  F001         	movff	aux@linha,teclado_matricial@linha
  8511  006F1C  502B               	movf	aux@coluna,w,c
  8512  006F1E  ECB2  F035         	call	_teclado_matricial
  8513  006F22  0100               	movlb	0	; () banked
  8514  006F24  6FB2               	movwf	_caractere_recebido& (0+255),b
  8515  006F26                     i2l4205:
  8516                           
  8517                           ;main.c: 246: }
  8518                           ;main.c: 250: TRISB|=0xF0;
  8519  006F26  0EF0               	movlw	240
  8520  006F28  1293               	iorwf	3987,f,c	;volatile
  8521                           
  8522                           ;main.c: 251: LATD&=0x0F;
  8523  006F2A  0E0F               	movlw	15
  8524  006F2C  168C               	andwf	3980,f,c	;volatile
  8525                           
  8526                           ;main.c: 252: TRISD&=0X0F;
  8527  006F2E  0E0F               	movlw	15
  8528  006F30  1695               	andwf	3989,f,c	;volatile
  8529  006F32                     i2l4211:
  8530  006F32  CF83 F01E          	movff	3971,??_aux	;volatile
  8531  006F36  0EF0               	movlw	240
  8532  006F38  161E               	andwf	??_aux,f,c
  8533  006F3A  E1FB               	bnz	i2l4211
  8534  006F3C                     i2l4213:
  8535  006F3C  5081               	movf	3969,w,c	;volatile
  8536  006F3E  0BF0               	andlw	240
  8537  006F40  0AF0               	xorlw	240
  8538  006F42  E1FC               	bnz	i2l4213
  8539  006F44                     i2l4215:
  8540                           
  8541                           ;main.c: 257: }
  8542                           ;main.c: 259: PORTB_SR=(PORTB&0xF0);}
  8543  006F44  5081               	movf	3969,w,c	;volatile
  8544  006F46  0BF0               	andlw	240
  8545  006F48  6E31               	movwf	_PORTB_SR,c
  8546  006F4A                     i2l4217:
  8547                           
  8548                           ;main.c: 261: if(RCIE && RCIF){
  8549  006F4A  BA9D               	btfsc	3997,5,c	;volatile
  8550  006F4C  AA9E               	btfss	3998,5,c	;volatile
  8551  006F4E  D037               	goto	i2l252
  8552                           
  8553                           ;main.c: 262: (FLAGS_3 &= ~(1<<2));
  8554  006F50  942E               	bcf	_FLAGS_3,2,c
  8555                           
  8556                           ;main.c: 264: if(OERR==1){
  8557  006F52  A2AB               	btfss	4011,1,c	;volatile
  8558  006F54  D00A               	goto	i2l239
  8559                           
  8560                           ;main.c: 265: (FLAGS_1 |= (1<<4));
  8561  006F56  0100               	movlb	0	; () banked
  8562  006F58  89B1               	bsf	_FLAGS_1& (0+255),4,b
  8563  006F5A                     i2l4227:
  8564  006F5A  50AE               	movf	4014,w,c	;volatile
  8565                           
  8566                           ;main.c: 269: CREN = 0;
  8567  006F5C  98AB               	bcf	4011,4,c	;volatile
  8568                           
  8569                           ;main.c: 270: CREN = 1;
  8570  006F5E  88AB               	bsf	4011,4,c	;volatile
  8571                           
  8572                           ;main.c: 273: }while(OERR);
  8573  006F60  B2AB               	btfsc	4011,1,c	;volatile
  8574  006F62  D7FB               	goto	i2l4227
  8575  006F64                     i2l4235:
  8576                           
  8577                           ;main.c: 275: (FLAGS_2 |= (1<<0));
  8578  006F64  802D               	bsf	_FLAGS_2,0,c
  8579                           
  8580                           ;main.c: 276: (FLAGS_2 &= ~(1<<1));
  8581  006F66  922D               	bcf	_FLAGS_2,1,c
  8582                           
  8583                           ;main.c: 278: }
  8584  006F68  D029               	goto	i2l4263
  8585  006F6A                     i2l239:
  8586                           
  8587                           ;main.c: 280: else if(FERR==1){
  8588  006F6A  A4AB               	btfss	4011,2,c	;volatile
  8589  006F6C  D008               	goto	i2l4249
  8590                           
  8591                           ;main.c: 281: (FLAGS_1 |= (1<<4));
  8592  006F6E  0100               	movlb	0	; () banked
  8593  006F70  89B1               	bsf	_FLAGS_1& (0+255),4,b
  8594  006F72                     i2l4239:
  8595  006F72  50AE               	movf	4014,w,c	;volatile
  8596                           
  8597                           ;main.c: 285: SPEN=0;
  8598  006F74  9EAB               	bcf	4011,7,c	;volatile
  8599                           
  8600                           ;main.c: 286: SPEN=1;
  8601  006F76  8EAB               	bsf	4011,7,c	;volatile
  8602                           
  8603                           ;main.c: 288: }while(FERR);
  8604  006F78  A4AB               	btfss	4011,2,c	;volatile
  8605  006F7A  D7F4               	goto	i2l4235
  8606  006F7C  D7FA               	goto	i2l4239
  8607  006F7E                     i2l4249:
  8608                           
  8609                           ;main.c: 293: else{
  8610                           ;main.c: 294: resetar_timer1(0xC0,0);
  8611  006F7E  6A01               	clrf	i2resetar_timer1@valor_l,c
  8612  006F80  0EC0               	movlw	192
  8613  006F82  EC5A  F031         	call	i2_resetar_timer1
  8614                           
  8615                           ;main.c: 295: buffer_serial[qtd_caracteres_recebidos_serial] = RCREG;
  8616  006F86  0E00               	movlw	low _buffer_serial
  8617  006F88  2435               	addwf	_qtd_caracteres_recebidos_serial,w,c
  8618  006F8A  6ED9               	movwf	fsr2l,c
  8619  006F8C  6ADA               	clrf	fsr2h,c
  8620  006F8E  0E01               	movlw	high _buffer_serial
  8621  006F90  22DA               	addwfc	fsr2h,f,c
  8622  006F92  CFAE FFDF          	movff	4014,indf2	;volatile
  8623                           
  8624                           ;main.c: 297: TMR1ON=1;
  8625  006F96  80CD               	bsf	4045,0,c	;volatile
  8626                           
  8627                           ;main.c: 299: if(++qtd_caracteres_recebidos_serial == 80 || buffer_serial[qtd_caracteres
      +                          _recebidos_serial-1] == 'F'){
  8628  006F98  2A35               	incf	_qtd_caracteres_recebidos_serial,f,c
  8629  006F9A  0E50               	movlw	80
  8630  006F9C  1835               	xorwf	_qtd_caracteres_recebidos_serial,w,c
  8631  006F9E  E009               	bz	i2l4259
  8632  006FA0  0EFF               	movlw	low (_buffer_serial+65535)
  8633  006FA2  2435               	addwf	_qtd_caracteres_recebidos_serial,w,c
  8634  006FA4  6ED9               	movwf	fsr2l,c
  8635  006FA6  6ADA               	clrf	fsr2h,c
  8636  006FA8  0E00               	movlw	high (_buffer_serial+65535)
  8637  006FAA  22DA               	addwfc	fsr2h,f,c
  8638  006FAC  0E46               	movlw	70
  8639  006FAE  18DE               	xorwf	postinc2,w,c
  8640  006FB0  E105               	bnz	i2l4263
  8641  006FB2                     i2l4259:
  8642                           
  8643                           ;main.c: 300: (FLAGS_2 |= (1<<1));
  8644  006FB2  822D               	bsf	_FLAGS_2,1,c
  8645                           
  8646                           ;main.c: 301: resetar_timer1(0xC0,0);}
  8647  006FB4  6A01               	clrf	i2resetar_timer1@valor_l,c
  8648  006FB6  0EC0               	movlw	192
  8649  006FB8  EC5A  F031         	call	i2_resetar_timer1
  8650  006FBC                     i2l4263:
  8651                           
  8652                           ;main.c: 302: }
  8653                           ;main.c: 304: RCIF=0;}
  8654  006FBC  9A9E               	bcf	3998,5,c	;volatile
  8655  006FBE                     i2l252:
  8656  006FBE  C028  FFF5         	movff	??_aux+10,tablat
  8657  006FC2  C027  FFF8         	movff	??_aux+9,tblptru
  8658  006FC6  C026  FFF7         	movff	??_aux+8,tblptrh
  8659  006FCA  C025  FFF6         	movff	??_aux+7,tblptrl
  8660  006FCE  C024  FFF4         	movff	??_aux+6,prodh
  8661  006FD2  C023  FFF3         	movff	??_aux+5,prodl
  8662  006FD6  C022  FFDA         	movff	??_aux+4,fsr2h
  8663  006FDA  C021  FFD9         	movff	??_aux+3,fsr2l
  8664  006FDE  C020  FFE2         	movff	??_aux+2,fsr1h
  8665  006FE2  C01F  FFE1         	movff	??_aux+1,fsr1l
  8666  006FE6  0011               	retfie		f
  8667  006FE8                     __end_of_aux:
  8668                           	opt stack 0
  8669                           tblptru	equ	0xFF8
  8670                           tblptrh	equ	0xFF7
  8671                           tblptrl	equ	0xFF6
  8672                           tablat	equ	0xFF5
  8673                           prodh	equ	0xFF4
  8674                           prodl	equ	0xFF3
  8675                           intcon	equ	0xFF2
  8676                           intcon2	equ	0xFF1
  8677                           postinc0	equ	0xFEE
  8678                           wreg	equ	0xFE8
  8679                           indf1	equ	0xFE7
  8680                           postinc1	equ	0xFE6
  8681                           postdec1	equ	0xFE5
  8682                           plusw1	equ	0xFE3
  8683                           fsr1h	equ	0xFE2
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           plusw2	equ	0xFDB
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function i2_resetar_timer1 *****************
  8694 ;; Defined at:
  8695 ;;		line 30 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\time.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;  valor_h         1    wreg     unsigned char 
  8698 ;;  valor_l         1    0[COMRAM] unsigned char 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  valor_h         1    1[COMRAM] unsigned char 
  8701 ;; Return value:  Size  Location     Type
  8702 ;;		None               void
  8703 ;; Registers used:
  8704 ;;		wreg
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8710 ;;      Params:         1       0       0       0       0       0       0       0       0
  8711 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8713 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8714 ;;Total ram usage:        2 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_aux
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text33
  8724  0062B4                     __ptext33:
  8725                           	opt stack 0
  8726  0062B4                     i2_resetar_timer1:
  8727                           	opt stack 24
  8728                           
  8729                           ;incstack = 0
  8730                           ;i2resetar_timer1@valor_h stored from wreg
  8731  0062B4  6E02               	movwf	i2resetar_timer1@valor_h,c
  8732                           
  8733                           ;time.c: 31: TMR1ON=0;
  8734  0062B6  90CD               	bcf	4045,0,c	;volatile
  8735                           
  8736                           ;time.c: 32: TMR1H=valor_h;
  8737  0062B8  C002  FFCF         	movff	i2resetar_timer1@valor_h,4047	;volatile
  8738                           
  8739                           ;time.c: 33: TMR1L=valor_l;
  8740  0062BC  C001  FFCE         	movff	i2resetar_timer1@valor_l,4046	;volatile
  8741  0062C0  0012               	return		;funcret
  8742  0062C2                     __end_ofi2_resetar_timer1:
  8743                           	opt stack 0
  8744                           tblptru	equ	0xFF8
  8745                           tblptrh	equ	0xFF7
  8746                           tblptrl	equ	0xFF6
  8747                           tablat	equ	0xFF5
  8748                           prodh	equ	0xFF4
  8749                           prodl	equ	0xFF3
  8750                           intcon	equ	0xFF2
  8751                           intcon2	equ	0xFF1
  8752                           postinc0	equ	0xFEE
  8753                           wreg	equ	0xFE8
  8754                           indf1	equ	0xFE7
  8755                           postinc1	equ	0xFE6
  8756                           postdec1	equ	0xFE5
  8757                           plusw1	equ	0xFE3
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           plusw2	equ	0xFDB
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function i2_printf *****************
  8769 ;; Defined at:
  8770 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  f               1    wreg     PTR const unsigned char 
  8773 ;;		 -> STR_20(33), STR_19(2), STR_15(18), STR_14(22), 
  8774 ;;		 -> STR_13(20), STR_12(15), STR_11(19), STR_10(3), 
  8775 ;;		 -> STR_9(17), STR_8(3), STR_7(4), STR_6(5), 
  8776 ;;		 -> STR_3(3), STR_2(3), STR_1(2), 
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;  f               1   16[COMRAM] PTR const unsigned char 
  8779 ;;		 -> STR_20(33), STR_19(2), STR_15(18), STR_14(22), 
  8780 ;;		 -> STR_13(20), STR_12(15), STR_11(19), STR_10(3), 
  8781 ;;		 -> STR_9(17), STR_8(3), STR_7(4), STR_6(5), 
  8782 ;;		 -> STR_3(3), STR_2(3), STR_1(2), 
  8783 ;;  printf          4    0        struct .
  8784 ;;  printf          2   26[COMRAM] int 
  8785 ;;  printf          2   23[COMRAM] unsigned int 
  8786 ;;  printf          2   21[COMRAM] unsigned int 
  8787 ;;  printf          2   18[COMRAM] PTR const unsigned char 
  8788 ;;		 -> STR_21(7), printf@c(1), buffer_teclado_matricial(40), 
  8789 ;;  printf          1   28[COMRAM] char 
  8790 ;;  printf          1   25[COMRAM] unsigned char 
  8791 ;;  printf          1   20[COMRAM] PTR void [1]
  8792 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8793 ;;  printf          1   17[COMRAM] char 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  2    0[None  ] int 
  8796 ;; Registers used:
  8797 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0
  8804 ;;      Locals:        13       0       0       0       0       0       0       0       0
  8805 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8806 ;;      Totals:        17       0       0       0       0       0       0       0       0
  8807 ;;Total ram usage:       17 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    4
  8810 ;; This function calls:
  8811 ;;		i2___lwdiv
  8812 ;;		i2___lwmod
  8813 ;;		i2___wmul
  8814 ;;		i2_isdigit
  8815 ;;		i2_putch
  8816 ;; This function is called by:
  8817 ;;		_aux
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           	psect	text34
  8822  006FE8                     __ptext34:
  8823                           	opt stack 0
  8824  006FE8                     i2_printf:
  8825                           	opt stack 20
  8826                           
  8827                           ;incstack = 0
  8828                           ;i2printf@f stored from wreg
  8829  006FE8  6E11               	movwf	i2printf@f,c
  8830                           
  8831                           ;doprnt.c: 466: va_list ap;
  8832                           ;doprnt.c: 499: signed char c;
  8833                           ;doprnt.c: 501: int width;
  8834                           ;doprnt.c: 506: signed char prec;
  8835                           ;doprnt.c: 508: unsigned char flag;
  8836                           ;doprnt.c: 523: union {
  8837                           ;doprnt.c: 524: unsigned long vd;
  8838                           ;doprnt.c: 525: double integ;
  8839                           ;doprnt.c: 526: } tmpval;
  8840                           ;doprnt.c: 528: unsigned int val;
  8841                           ;doprnt.c: 529: unsigned len;
  8842                           ;doprnt.c: 530: const char * cp;
  8843                           ;doprnt.c: 533: *ap = __va_start();
  8844  006FEA  0E01               	movlw	low ?i2_printf
  8845  006FEC  6E15               	movwf	i2printf@ap,c
  8846                           
  8847                           ;doprnt.c: 536: while(c = *f++) {
  8848  006FEE  D14C               	goto	i2l4073
  8849  006FF0                     i2l3949:
  8850                           
  8851                           ;doprnt.c: 538: if(c != '%')
  8852  006FF0  0E25               	movlw	37
  8853  006FF2  181D               	xorwf	i2printf@c,w,c
  8854  006FF4  E004               	bz	i2l762
  8855                           
  8856                           ;doprnt.c: 540: {
  8857                           ;doprnt.c: 541: (putch(c) );
  8858  006FF6  501D               	movf	i2printf@c,w,c
  8859  006FF8  EC4B  F031         	call	i2_putch
  8860                           
  8861                           ;doprnt.c: 542: continue;
  8862  006FFC  D145               	goto	i2l4073
  8863  006FFE                     i2l762:
  8864                           
  8865                           ;doprnt.c: 543: }
  8866                           ;doprnt.c: 546: width = 0;
  8867  006FFE  6A1B               	clrf	i2printf@width,c
  8868  007000  6A1C               	clrf	i2printf@width+1,c
  8869                           
  8870                           ;doprnt.c: 548: flag = 0;
  8871  007002  6A1A               	clrf	i2printf@flag,c
  8872  007004  D002               	goto	i2l3957
  8873  007006                     i2l3953:
  8874                           
  8875                           ;doprnt.c: 580: flag |= 0x04;
  8876  007006  841A               	bsf	i2printf@flag,2,c
  8877                           
  8878                           ;doprnt.c: 581: f++;
  8879  007008  2A11               	incf	i2printf@f,f,c
  8880  00700A                     i2l3957:
  8881  00700A  C011  FFF6         	movff	i2printf@f,tblptrl
  8882  00700E  D940               	call	PL12	;call to abstracted procedure
  8883                           
  8884                           ; Switch size 1, requested type "space"
  8885                           ; Number of cases is 1, Range of values is 48 to 48
  8886                           ; switch strategies available:
  8887                           ; Name         Instructions Cycles
  8888                           ; simple_byte            4     3 (average)
  8889                           ;	Chosen strategy is simple_byte
  8890  007010  0A30               	xorlw	48	; case 48
  8891  007012  E0F9               	bz	i2l3953
  8892                           
  8893                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8894  007014  C011  FFF6         	movff	i2printf@f,tblptrl
  8895  007018  D93B               	call	PL12	;call to abstracted procedure
  8896  00701A  EC92  F031         	call	i2_isdigit
  8897  00701E  E201 D099          	bnc	i2l4009
  8898                           
  8899                           ;doprnt.c: 598: width = 0;
  8900  007022  6A1B               	clrf	i2printf@width,c
  8901  007024  6A1C               	clrf	i2printf@width+1,c
  8902  007026                     i2l3963:
  8903                           
  8904                           ;doprnt.c: 600: width *= 10;
  8905  007026  C01B  F001         	movff	i2printf@width,i2___wmul@multiplier
  8906  00702A  C01C  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8907  00702E  6A04               	clrf	i2___wmul@multiplicand+1,c
  8908  007030  0E0A               	movlw	10
  8909  007032  6E03               	movwf	i2___wmul@multiplicand,c
  8910  007034  EC04  F032         	call	i2___wmul	;wreg free
  8911  007038  C001  F01B         	movff	?i2___wmul,i2printf@width
  8912  00703C  C002  F01C         	movff	?i2___wmul+1,i2printf@width+1
  8913                           
  8914                           ;doprnt.c: 601: width += *f++ - '0';
  8915  007040  0ED0               	movlw	208
  8916  007042  6E0D               	movwf	??i2_printf& (0+255),c
  8917  007044  680E               	setf	(??i2_printf+1)& (0+255),c
  8918  007046  C011  FFF6         	movff	i2printf@f,tblptrl
  8919  00704A  D922               	call	PL12	;call to abstracted procedure
  8920  00704C  6E0F               	movwf	(??i2_printf+2)& (0+255),c
  8921  00704E  6A10               	clrf	(??i2_printf+3)& (0+255),c
  8922  007050  500D               	movf	??i2_printf,w,c
  8923  007052  260F               	addwf	??i2_printf+2,f,c
  8924  007054  500E               	movf	??i2_printf+1,w,c
  8925  007056  2210               	addwfc	??i2_printf+3,f,c
  8926  007058  500F               	movf	??i2_printf+2,w,c
  8927  00705A  261B               	addwf	i2printf@width,f,c
  8928  00705C  5010               	movf	??i2_printf+3,w,c
  8929  00705E  221C               	addwfc	i2printf@width+1,f,c
  8930  007060  2A11               	incf	i2printf@f,f,c
  8931                           
  8932                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8933  007062  C011  FFF6         	movff	i2printf@f,tblptrl
  8934  007066  D914               	call	PL12	;call to abstracted procedure
  8935  007068  EC92  F031         	call	i2_isdigit
  8936  00706C  E373               	bnc	i2l4009
  8937  00706E  D7DB               	goto	i2l3963
  8938  007070                     i2l3971:
  8939                           
  8940                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8941  007070  5015               	movf	i2printf@ap,w,c
  8942  007072  6ED9               	movwf	fsr2l,c
  8943  007074  6ADA               	clrf	fsr2h,c
  8944  007076  50DF               	movf	indf2,w,c
  8945  007078  6E0D               	movwf	??i2_printf& (0+255),c
  8946  00707A  C00D  F013         	movff	??i2_printf,i2printf@cp
  8947  00707E  6A14               	clrf	i2printf@cp+1,c
  8948  007080  2A15               	incf	i2printf@ap,f,c
  8949                           
  8950                           ;doprnt.c: 740: if(!cp)
  8951  007082  5013               	movf	i2printf@cp,w,c
  8952  007084  1014               	iorwf	i2printf@cp+1,w,c
  8953  007086  E106               	bnz	i2l3979
  8954                           
  8955                           ;doprnt.c: 741: cp = "(null)";
  8956  007088  0EB7               	movlw	low STR_21
  8957  00708A  6E13               	movwf	i2printf@cp,c
  8958  00708C  5013               	movf	i2printf@cp,w,c
  8959  00708E  A4D8               	btfss	status,2,c
  8960  007090  0E10               	movlw	high __smallconst
  8961  007092  6E14               	movwf	i2printf@cp+1,c
  8962  007094                     i2l3979:
  8963                           
  8964                           ;doprnt.c: 745: len = 0;
  8965  007094  6A18               	clrf	i2printf@len,c
  8966  007096  6A19               	clrf	i2printf@len+1,c
  8967                           
  8968                           ;doprnt.c: 746: while(cp[len])
  8969  007098  D002               	goto	i2l3983
  8970  00709A                     i2l3981:
  8971                           
  8972                           ;doprnt.c: 747: len++;
  8973  00709A  4A18               	infsnz	i2printf@len,f,c
  8974  00709C  2A19               	incf	i2printf@len+1,f,c
  8975  00709E                     i2l3983:
  8976  00709E  5018               	movf	i2printf@len,w,c
  8977  0070A0  2413               	addwf	i2printf@cp,w,c
  8978  0070A2  6E0D               	movwf	??i2_printf& (0+255),c
  8979  0070A4  5019               	movf	i2printf@len+1,w,c
  8980  0070A6  2014               	addwfc	i2printf@cp+1,w,c
  8981  0070A8  6E0E               	movwf	(??i2_printf+1)& (0+255),c
  8982  0070AA  C00D  FFF6         	movff	??i2_printf,tblptrl
  8983  0070AE  C00E  FFF7         	movff	??i2_printf+1,tblptrh
  8984  0070B2  6AF8               	clrf	tblptru,c
  8985  0070B4  0E07               	movlw	(high __ramtop+-1)
  8986  0070B6  64F7               	cpfsgt	tblptrh,c
  8987  0070B8  D003               	bra	i2u368_47
  8988  0070BA  0008               	tblrd		*
  8989  0070BC  50F5               	movf	tablat,w,c
  8990  0070BE  D005               	bra	i2u368_40
  8991  0070C0                     i2u368_47:
  8992  0070C0  CFF6 FFE1          	movff	tblptrl,fsr1l
  8993  0070C4  CFF7 FFE2          	movff	tblptrh,fsr1h
  8994  0070C8  50E7               	movf	indf1,w,c
  8995  0070CA                     i2u368_40:
  8996  0070CA  0900               	iorlw	0
  8997  0070CC  E1E6               	bnz	i2l3981
  8998  0070CE                     i2l3985:
  8999                           
  9000                           ;doprnt.c: 757: if(width > len)
  9001  0070CE  501B               	movf	i2printf@width,w,c
  9002  0070D0  5C18               	subwf	i2printf@len,w,c
  9003  0070D2  501C               	movf	i2printf@width+1,w,c
  9004  0070D4  5819               	subwfb	i2printf@len+1,w,c
  9005  0070D6  E205               	bc	i2l784
  9006                           
  9007                           ;doprnt.c: 758: width -= len;
  9008  0070D8  5018               	movf	i2printf@len,w,c
  9009  0070DA  5E1B               	subwf	i2printf@width,f,c
  9010  0070DC  5019               	movf	i2printf@len+1,w,c
  9011  0070DE  5A1C               	subwfb	i2printf@width+1,f,c
  9012  0070E0  D006               	goto	i2l3991
  9013  0070E2                     i2l784:
  9014                           
  9015                           ;doprnt.c: 759: else
  9016                           ;doprnt.c: 760: width = 0;
  9017  0070E2  6A1B               	clrf	i2printf@width,c
  9018  0070E4  6A1C               	clrf	i2printf@width+1,c
  9019  0070E6  D003               	goto	i2l3991
  9020  0070E8                     i2l3989:
  9021                           
  9022                           ;doprnt.c: 765: (putch(' ') );
  9023  0070E8  0E20               	movlw	32
  9024  0070EA  EC4B  F031         	call	i2_putch
  9025  0070EE                     i2l3991:
  9026  0070EE  061B               	decf	i2printf@width,f,c
  9027  0070F0  A0D8               	btfss	status,0,c
  9028  0070F2  061C               	decf	i2printf@width+1,f,c
  9029  0070F4  281B               	incf	i2printf@width,w,c
  9030  0070F6  E1F8               	bnz	i2l3989
  9031  0070F8  281C               	incf	i2printf@width+1,w,c
  9032  0070FA  E015               	bz	i2l3997
  9033  0070FC  D7F5               	goto	i2l3989
  9034  0070FE                     i2l3993:
  9035                           
  9036                           ;doprnt.c: 768: (putch(*cp++) );
  9037  0070FE  C013  FFF6         	movff	i2printf@cp,tblptrl
  9038  007102  C014  FFF7         	movff	i2printf@cp+1,tblptrh
  9039  007106  6AF8               	clrf	tblptru,c
  9040  007108  0E07               	movlw	(high __ramtop+-1)
  9041  00710A  64F7               	cpfsgt	tblptrh,c
  9042  00710C  D003               	bra	i2u372_47
  9043  00710E  0008               	tblrd		*
  9044  007110  50F5               	movf	tablat,w,c
  9045  007112  D005               	bra	i2u372_40
  9046  007114                     i2u372_47:
  9047  007114  CFF6 FFE1          	movff	tblptrl,fsr1l
  9048  007118  CFF7 FFE2          	movff	tblptrh,fsr1h
  9049  00711C  50E7               	movf	indf1,w,c
  9050  00711E                     i2u372_40:
  9051  00711E  EC4B  F031         	call	i2_putch
  9052  007122  4A13               	infsnz	i2printf@cp,f,c
  9053  007124  2A14               	incf	i2printf@cp+1,f,c
  9054  007126                     i2l3997:
  9055  007126  0618               	decf	i2printf@len,f,c
  9056  007128  A0D8               	btfss	status,0,c
  9057  00712A  0619               	decf	i2printf@len+1,f,c
  9058  00712C  2818               	incf	i2printf@len,w,c
  9059  00712E  E1E7               	bnz	i2l3993
  9060  007130  2819               	incf	i2printf@len+1,w,c
  9061  007132  E101 D0A9          	bz	i2l4073
  9062  007136  D7E3               	goto	i2l3993
  9063  007138                     i2l3999:
  9064                           
  9065                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  9066  007138  5015               	movf	i2printf@ap,w,c
  9067  00713A  6ED9               	movwf	fsr2l,c
  9068  00713C  6ADA               	clrf	fsr2h,c
  9069  00713E  50DF               	movf	indf2,w,c
  9070  007140  6E1D               	movwf	i2printf@c,c
  9071  007142  0E02               	movlw	2
  9072  007144  2615               	addwf	i2printf@ap,f,c
  9073  007146                     i2l4003:
  9074                           
  9075                           ;doprnt.c: 805: cp = (char *)&c;
  9076  007146  0E1D               	movlw	low i2printf@c
  9077  007148  6E13               	movwf	i2printf@cp,c
  9078  00714A  6A14               	clrf	i2printf@cp+1,c
  9079                           
  9080                           ;doprnt.c: 806: len = 1;
  9081  00714C  6A19               	clrf	i2printf@len+1,c
  9082  00714E  0E01               	movlw	1
  9083  007150  6E18               	movwf	i2printf@len,c
  9084                           
  9085                           ;doprnt.c: 807: goto dostring;
  9086  007152  D7BD               	goto	i2l3985
  9087  007154                     i2l4009:
  9088  007154  D8A2               	call	PL14	;call to abstracted procedure
  9089                           
  9090                           ; Switch size 1, requested type "space"
  9091                           ; Number of cases is 5, Range of values is 0 to 115
  9092                           ; switch strategies available:
  9093                           ; Name         Instructions Cycles
  9094                           ; simple_byte           16     9 (average)
  9095                           ;	Chosen strategy is simple_byte
  9096  007156  E101 D09A          	bz	i2l815
  9097  00715A  0A63               	xorlw	99	; case 99
  9098  00715C  E0ED               	bz	i2l3999
  9099  00715E  0A07               	xorlw	7	; case 100
  9100  007160  E005               	bz	i2l4011
  9101  007162  0A0D               	xorlw	13	; case 105
  9102  007164  E003               	bz	i2l4011
  9103  007166  0A1A               	xorlw	26	; case 115
  9104  007168  E083               	bz	i2l3971
  9105  00716A  D7ED               	goto	i2l4003
  9106  00716C                     i2l4011:
  9107                           
  9108                           ;doprnt.c: 1253: {
  9109                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9110  00716C  5015               	movf	i2printf@ap,w,c
  9111  00716E  6ED9               	movwf	fsr2l,c
  9112  007170  6ADA               	clrf	fsr2h,c
  9113  007172  CFDE F016          	movff	postinc2,i2printf@val
  9114  007176  CFDD F017          	movff	postdec2,i2printf@val+1
  9115  00717A  0E02               	movlw	2
  9116  00717C  2615               	addwf	i2printf@ap,f,c
  9117                           
  9118                           ;doprnt.c: 1261: if((int)val < 0) {
  9119  00717E  AE17               	btfss	i2printf@val+1,7,c
  9120  007180  D006               	goto	i2l4021
  9121                           
  9122                           ;doprnt.c: 1262: flag |= 0x03;
  9123  007182  0E03               	movlw	3
  9124  007184  121A               	iorwf	i2printf@flag,f,c
  9125                           
  9126                           ;doprnt.c: 1263: val = -val;
  9127  007186  6C16               	negf	i2printf@val,c
  9128  007188  1E17               	comf	i2printf@val+1,f,c
  9129  00718A  B0D8               	btfsc	status,0,c
  9130  00718C  2A17               	incf	i2printf@val+1,f,c
  9131  00718E                     i2l4021:
  9132                           
  9133                           ;doprnt.c: 1264: }
  9134                           ;doprnt.c: 1266: }
  9135                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9136  00718E  0E01               	movlw	1
  9137  007190  6E1D               	movwf	i2printf@c,c
  9138  007192                     i2l4023:
  9139  007192  0E05               	movlw	5
  9140  007194  181D               	xorwf	i2printf@c,w,c
  9141  007196  E00D               	bz	i2l4035
  9142                           
  9143                           ;doprnt.c: 1306: if(val < dpowers[c])
  9144  007198  501D               	movf	i2printf@c,w,c
  9145  00719A  0D02               	mullw	2
  9146  00719C  50F3               	movf	prodl,w,c
  9147  00719E  0F1D               	addlw	low _dpowers
  9148  0071A0  D888               	call	PL22	;call to abstracted procedure
  9149  0071A2  50F5               	movf	tablat,w,c
  9150  0071A4  5C16               	subwf	i2printf@val,w,c
  9151  0071A6  0009               	tblrd		*+
  9152  0071A8  50F5               	movf	tablat,w,c
  9153  0071AA  5817               	subwfb	i2printf@val+1,w,c
  9154  0071AC  E302               	bnc	i2l4035
  9155  0071AE  2A1D               	incf	i2printf@c,f,c
  9156  0071B0  D7F0               	goto	i2l4023
  9157  0071B2                     i2l4035:
  9158                           
  9159                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9160  0071B2  501B               	movf	i2printf@width,w,c
  9161  0071B4  101C               	iorwf	i2printf@width+1,w,c
  9162  0071B6  E008               	bz	i2l4041
  9163  0071B8  C01A  F00D         	movff	i2printf@flag,??i2_printf
  9164  0071BC  0E03               	movlw	3
  9165  0071BE  160D               	andwf	??i2_printf,f,c
  9166  0071C0  E003               	bz	i2l4041
  9167                           
  9168                           ;doprnt.c: 1346: width--;
  9169  0071C2  061B               	decf	i2printf@width,f,c
  9170  0071C4  A0D8               	btfss	status,0,c
  9171  0071C6  061C               	decf	i2printf@width+1,f,c
  9172  0071C8                     i2l4041:
  9173                           
  9174                           ;doprnt.c: 1381: if(width > c)
  9175  0071C8  0E80               	movlw	128
  9176  0071CA  BE1D               	btfsc	i2printf@c,7,c
  9177  0071CC  0E7F               	movlw	127
  9178  0071CE  6E0D               	movwf	??i2_printf& (0+255),c
  9179  0071D0  501B               	movf	i2printf@width,w,c
  9180  0071D2  5C1D               	subwf	i2printf@c,w,c
  9181  0071D4  501C               	movf	i2printf@width+1,w,c
  9182  0071D6  0A80               	xorlw	128
  9183  0071D8  580D               	subwfb	??i2_printf& (0+255),w,c
  9184  0071DA  E207               	bc	i2l799
  9185                           
  9186                           ;doprnt.c: 1382: width -= c;
  9187  0071DC  501D               	movf	i2printf@c,w,c
  9188  0071DE  5E1B               	subwf	i2printf@width,f,c
  9189  0071E0  0E00               	movlw	0
  9190  0071E2  BE1D               	btfsc	i2printf@c,7,c
  9191  0071E4  0EFF               	movlw	255
  9192  0071E6  5A1C               	subwfb	i2printf@width+1,f,c
  9193  0071E8  D002               	goto	i2l800
  9194  0071EA                     i2l799:
  9195                           
  9196                           ;doprnt.c: 1383: else
  9197                           ;doprnt.c: 1384: width = 0;
  9198  0071EA  6A1B               	clrf	i2printf@width,c
  9199  0071EC  6A1C               	clrf	i2printf@width+1,c
  9200  0071EE                     i2l800:
  9201                           
  9202                           ;doprnt.c: 1387: if(flag & 0x04) {
  9203  0071EE  A41A               	btfss	i2printf@flag,2,c
  9204  0071F0  D012               	goto	i2l4055
  9205                           
  9206                           ;doprnt.c: 1392: if(flag & 0x03)
  9207  0071F2  C01A  F00D         	movff	i2printf@flag,??i2_printf
  9208  0071F6  0E03               	movlw	3
  9209  0071F8  160D               	andwf	??i2_printf,f,c
  9210  0071FA  E003               	bz	i2l4049
  9211                           
  9212                           ;doprnt.c: 1393: (putch('-') );
  9213  0071FC  0E2D               	movlw	45
  9214  0071FE  EC4B  F031         	call	i2_putch
  9215  007202                     i2l4049:
  9216                           
  9217                           ;doprnt.c: 1415: if(width)
  9218  007202  501B               	movf	i2printf@width,w,c
  9219  007204  101C               	iorwf	i2printf@width+1,w,c
  9220  007206  E01B               	bz	i2l4065
  9221                           
  9222                           ;doprnt.c: 1417: (putch('0') );
  9223  007208  0E30               	movlw	48
  9224  00720A  EC4B  F031         	call	i2_putch
  9225                           
  9226                           ;doprnt.c: 1418: while(--width);
  9227  00720E  061B               	decf	i2printf@width,f,c
  9228  007210  A0D8               	btfss	status,0,c
  9229  007212  061C               	decf	i2printf@width+1,f,c
  9230  007214  D7F6               	goto	i2l4049
  9231  007216                     i2l4055:
  9232                           
  9233                           ;doprnt.c: 1422: {
  9234                           ;doprnt.c: 1424: if(width
  9235                           ;doprnt.c: 1428: )
  9236  007216  501B               	movf	i2printf@width,w,c
  9237  007218  101C               	iorwf	i2printf@width+1,w,c
  9238  00721A  E009               	bz	i2l4061
  9239  00721C                     i2l4057:
  9240                           
  9241                           ;doprnt.c: 1430: (putch(' ') );
  9242  00721C  0E20               	movlw	32
  9243  00721E  EC4B  F031         	call	i2_putch
  9244                           
  9245                           ;doprnt.c: 1431: while(--width);
  9246  007222  061B               	decf	i2printf@width,f,c
  9247  007224  A0D8               	btfss	status,0,c
  9248  007226  061C               	decf	i2printf@width+1,f,c
  9249  007228  501B               	movf	i2printf@width,w,c
  9250  00722A  101C               	iorwf	i2printf@width+1,w,c
  9251  00722C  E1F7               	bnz	i2l4057
  9252  00722E                     i2l4061:
  9253                           
  9254                           ;doprnt.c: 1438: if(flag & 0x03)
  9255  00722E  C01A  F00D         	movff	i2printf@flag,??i2_printf
  9256  007232  0E03               	movlw	3
  9257  007234  160D               	andwf	??i2_printf,f,c
  9258  007236  E003               	bz	i2l4065
  9259                           
  9260                           ;doprnt.c: 1439: (putch('-') );
  9261  007238  0E2D               	movlw	45
  9262  00723A  EC4B  F031         	call	i2_putch
  9263  00723E                     i2l4065:
  9264                           
  9265                           ;doprnt.c: 1469: }
  9266                           ;doprnt.c: 1472: prec = c;
  9267  00723E  C01D  F012         	movff	i2printf@c,i2printf@prec
  9268                           
  9269                           ;doprnt.c: 1474: while(prec--) {
  9270  007242  D01F               	goto	i2l4071
  9271  007244                     i2l4067:
  9272                           
  9273                           ;doprnt.c: 1478: {
  9274                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9275  007244  5012               	movf	i2printf@prec,w,c
  9276  007246  0D02               	mullw	2
  9277  007248  50F3               	movf	prodl,w,c
  9278  00724A  0F1D               	addlw	low _dpowers
  9279  00724C  D832               	call	PL22	;call to abstracted procedure
  9280  00724E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9281  007252  000A               	tblrd		*-
  9282  007254  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9283  007258  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9284  00725C  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9285  007260  ECDC  F032         	call	i2___lwdiv	;wreg free
  9286  007264  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9287  007268  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9288  00726C  6A0B               	clrf	i2___lwmod@divisor+1,c
  9289  00726E  0E0A               	movlw	10
  9290  007270  6E0A               	movwf	i2___lwmod@divisor,c
  9291  007272  EC9E  F032         	call	i2___lwmod	;wreg free
  9292  007276  5008               	movf	?i2___lwmod,w,c
  9293  007278  0F30               	addlw	48
  9294  00727A  6E1D               	movwf	i2printf@c,c
  9295                           
  9296                           ;doprnt.c: 1523: }
  9297                           ;doprnt.c: 1524: (putch(c) );
  9298  00727C  501D               	movf	i2printf@c,w,c
  9299  00727E  EC4B  F031         	call	i2_putch
  9300  007282                     i2l4071:
  9301  007282  0612               	decf	i2printf@prec,f,c
  9302  007284  2812               	incf	i2printf@prec,w,c
  9303  007286  E1DE               	bnz	i2l4067
  9304  007288                     i2l4073:
  9305  007288  D808               	call	PL14	;call to abstracted procedure
  9306  00728A  E001 D6B1          	bnz	i2l3949
  9307  00728E                     i2l815:
  9308  00728E  0012               	return		;funcret
  9309  007290                     __end_ofi2_printf:
  9310                           	opt stack 0
  9311  007290                     PL12:
  9312                           	opt stack 20
  9313  007290                     	if	1	;There is more than 1 active tblptr byte
  9314  007290  0E10               	movlw	high __smallconst
  9315  007292  6EF7               	movwf	tblptrh,c
  9316  007294                     	endif
  9317  007294                     	if	0	;tblptru may be non-zero
  9318  007294                     	endif
  9319  007294                     	if	0	;tblptru may be non-zero
  9320  007294                     	endif
  9321  007294  0008               	tblrd		*
  9322  007296  50F5               	movf	tablat,w,c
  9323  007298  0012               	return	
  9324  00729A                     __end_ofPL12:
  9325                           	opt stack 0
  9326  00729A                     PL14:
  9327                           	opt stack 20
  9328  00729A  2A11               	incf	i2printf@f,f,c
  9329  00729C  0411               	decf	i2printf@f,w,c
  9330  00729E  6E0D               	movwf	??i2_printf& (0+255),c
  9331  0072A0  C00D  FFF6         	movff	??i2_printf,tblptrl
  9332  0072A4                     	if	1	;There is more than 1 active tblptr byte
  9333  0072A4  0E10               	movlw	high __smallconst
  9334  0072A6  6EF7               	movwf	tblptrh,c
  9335  0072A8                     	endif
  9336  0072A8                     	if	0	;tblptru may be non-zero
  9337  0072A8                     	endif
  9338  0072A8                     	if	0	;tblptru may be non-zero
  9339  0072A8                     	endif
  9340  0072A8  0008               	tblrd		*
  9341  0072AA  CFF5 F01D          	movff	tablat,i2printf@c
  9342  0072AE  501D               	movf	i2printf@c,w,c
  9343  0072B0  0012               	return	
  9344  0072B2                     __end_ofPL14:
  9345                           	opt stack 0
  9346  0072B2                     PL22:
  9347                           	opt stack 20
  9348  0072B2  6E0D               	movwf	??i2_printf& (0+255),c
  9349  0072B4  C00D  FFF6         	movff	??i2_printf,tblptrl
  9350  0072B8                     	if	1	;There is more than 1 active tblptr byte
  9351  0072B8  0E10               	movlw	high __smallconst
  9352  0072BA  6EF7               	movwf	tblptrh,c
  9353  0072BC                     	endif
  9354  0072BC                     	if	0	;tblptru may be non-zero
  9355  0072BC                     	endif
  9356  0072BC                     	if	0	;tblptru may be non-zero
  9357  0072BC                     	endif
  9358  0072BC  0009               	tblrd		*+
  9359  0072BE  0012               	return	
  9360  0072C0                     __end_ofPL22:
  9361                           	opt stack 0
  9362                           tblptru	equ	0xFF8
  9363                           tblptrh	equ	0xFF7
  9364                           tblptrl	equ	0xFF6
  9365                           tablat	equ	0xFF5
  9366                           prodh	equ	0xFF4
  9367                           prodl	equ	0xFF3
  9368                           intcon	equ	0xFF2
  9369                           intcon2	equ	0xFF1
  9370                           postinc0	equ	0xFEE
  9371                           wreg	equ	0xFE8
  9372                           indf1	equ	0xFE7
  9373                           postinc1	equ	0xFE6
  9374                           postdec1	equ	0xFE5
  9375                           plusw1	equ	0xFE3
  9376                           fsr1h	equ	0xFE2
  9377                           fsr1l	equ	0xFE1
  9378                           indf2	equ	0xFDF
  9379                           postinc2	equ	0xFDE
  9380                           postdec2	equ	0xFDD
  9381                           plusw2	equ	0xFDB
  9382                           fsr2h	equ	0xFDA
  9383                           fsr2l	equ	0xFD9
  9384                           status	equ	0xFD8
  9385                           
  9386 ;; *************** function i2_putch *****************
  9387 ;; Defined at:
  9388 ;;		line 244 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  c               1    wreg     unsigned char 
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;  c               1    5[COMRAM] unsigned char 
  9393 ;; Return value:  Size  Location     Type
  9394 ;;		None               void
  9395 ;; Registers used:
  9396 ;;		wreg, status,2, status,0, cstack
  9397 ;; Tracked objects:
  9398 ;;		On entry : 0/0
  9399 ;;		On exit  : 0/0
  9400 ;;		Unchanged: 0/0
  9401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9402 ;;      Params:         0       0       0       0       0       0       0       0       0
  9403 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9405 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9406 ;;Total ram usage:        1 bytes
  9407 ;; Hardware stack levels used:    1
  9408 ;; Hardware stack levels required when called:    3
  9409 ;; This function calls:
  9410 ;;		i2_lcd_putc
  9411 ;; This function is called by:
  9412 ;;		i2_printf
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text35
  9417  006296                     __ptext35:
  9418                           	opt stack 0
  9419  006296                     i2_putch:
  9420                           	opt stack 20
  9421                           
  9422                           ;incstack = 0
  9423                           ;i2putch@c stored from wreg
  9424  006296  6E06               	movwf	i2putch@c,c
  9425                           
  9426                           ;LCD_ModSauer.c: 246: lcd_putc(c);
  9427  006298  5006               	movf	i2putch@c,w,c
  9428  00629A  EF9B  F033         	goto	i2_lcd_putc
  9429  00629E                     __end_ofi2_putch:
  9430                           	opt stack 0
  9431                           tblptru	equ	0xFF8
  9432                           tblptrh	equ	0xFF7
  9433                           tblptrl	equ	0xFF6
  9434                           tablat	equ	0xFF5
  9435                           prodh	equ	0xFF4
  9436                           prodl	equ	0xFF3
  9437                           intcon	equ	0xFF2
  9438                           intcon2	equ	0xFF1
  9439                           postinc0	equ	0xFEE
  9440                           wreg	equ	0xFE8
  9441                           indf1	equ	0xFE7
  9442                           postinc1	equ	0xFE6
  9443                           postdec1	equ	0xFE5
  9444                           plusw1	equ	0xFE3
  9445                           fsr1h	equ	0xFE2
  9446                           fsr1l	equ	0xFE1
  9447                           indf2	equ	0xFDF
  9448                           postinc2	equ	0xFDE
  9449                           postdec2	equ	0xFDD
  9450                           plusw2	equ	0xFDB
  9451                           fsr2h	equ	0xFDA
  9452                           fsr2l	equ	0xFD9
  9453                           status	equ	0xFD8
  9454                           
  9455 ;; *************** function i2_lcd_putc *****************
  9456 ;; Defined at:
  9457 ;;		line 151 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  c               1    wreg     unsigned char 
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  c               1    4[COMRAM] unsigned char 
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, status,2, status,0, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0
  9472 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9474 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9475 ;;Total ram usage:        1 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    2
  9478 ;; This function calls:
  9479 ;;		i2_lcd_clear
  9480 ;;		i2_lcd_gotoxy
  9481 ;;		i2_lcd_write
  9482 ;; This function is called by:
  9483 ;;		i2_putch
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           	psect	text36
  9488  006736                     __ptext36:
  9489                           	opt stack 0
  9490  006736                     i2_lcd_putc:
  9491                           	opt stack 20
  9492                           
  9493                           ;incstack = 0
  9494                           ;i2lcd_putc@c stored from wreg
  9495  006736  6E05               	movwf	i2lcd_putc@c,c
  9496                           
  9497                           ;LCD_ModSauer.c: 153: switch (c) {
  9498  006738  D029               	goto	i2l3305
  9499  00673A                     i2l3277:
  9500                           
  9501                           ;LCD_ModSauer.c: 157: lcd_clear();
  9502  00673A  EC78  F031         	call	i2_lcd_clear	;wreg free
  9503                           
  9504                           ;LCD_ModSauer.c: 158: break;
  9505  00673E  D02E               	goto	i2l726
  9506  006740                     i2l3279:
  9507                           
  9508                           ;LCD_ModSauer.c: 164: case 1:
  9509                           ;LCD_ModSauer.c: 165: if(++linha_lcd>4) linha_lcd=1;
  9510  006740  2A33               	incf	_linha_lcd,f,c
  9511  006742  0E04               	movlw	4
  9512  006744  6433               	cpfsgt	_linha_lcd,c
  9513  006746  D00E               	goto	i2l3291
  9514  006748  0E01               	movlw	1
  9515  00674A  6E33               	movwf	_linha_lcd,c
  9516  00674C  D00B               	goto	i2l3291
  9517  00674E                     i2l3283:
  9518                           
  9519                           ;LCD_ModSauer.c: 169: case 0:
  9520                           ;LCD_ModSauer.c: 170: if(++linha_lcd>2) linha_lcd=1;
  9521  00674E  2A33               	incf	_linha_lcd,f,c
  9522  006750  0E02               	movlw	2
  9523  006752  D7F8               	goto	L19
  9524  006754                     i2l3289:
  9525  006754  5032               	movf	_lcd_type,w,c
  9526                           
  9527                           ; Switch size 1, requested type "space"
  9528                           ; Number of cases is 4, Range of values is 0 to 3
  9529                           ; switch strategies available:
  9530                           ; Name         Instructions Cycles
  9531                           ; simple_byte           13     7 (average)
  9532                           ;	Chosen strategy is simple_byte
  9533  006756  E0FB               	bz	i2l3283
  9534  006758  0A01               	xorlw	1	; case 1
  9535  00675A  E0F2               	bz	i2l3279
  9536  00675C  0A03               	xorlw	3	; case 2
  9537  00675E  E0F7               	bz	i2l3283
  9538  006760  0A01               	xorlw	1	; case 3
  9539  006762  E0EE               	bz	i2l3279
  9540  006764                     i2l3291:
  9541                           
  9542                           ;LCD_ModSauer.c: 174: lcd_gotoxy(linha_lcd,1);
  9543  006764  0E01               	movlw	1
  9544  006766  6E02               	movwf	i2lcd_gotoxy@coluna,c
  9545  006768  5033               	movf	_linha_lcd,w,c
  9546  00676A  EC01  F033         	call	i2_lcd_gotoxy
  9547                           
  9548                           ;LCD_ModSauer.c: 175: break;
  9549  00676E  D016               	goto	i2l726
  9550  006770                     i2l3293:
  9551                           
  9552                           ;LCD_ModSauer.c: 177: linha_lcd=1;
  9553  006770  0E01               	movlw	1
  9554  006772  6E33               	movwf	_linha_lcd,c
  9555                           
  9556                           ;LCD_ModSauer.c: 178: LATEbits.LE0 = 0;
  9557  006774  908D               	bcf	3981,0,c	;volatile
  9558                           
  9559                           ;LCD_ModSauer.c: 179: lcd_write(0x80);
  9560  006776  0E80               	movlw	128
  9561  006778  EC54  F032         	call	i2_lcd_write
  9562                           
  9563                           ;LCD_ModSauer.c: 180: break;
  9564  00677C  D00F               	goto	i2l726
  9565  00677E                     i2l725:
  9566                           
  9567                           ;LCD_ModSauer.c: 183: coluna_lcd++;
  9568  00677E  808D               	bsf	3981,0,c	;volatile
  9569                           
  9570                           ;LCD_ModSauer.c: 184: linha_lcd=1;
  9571  006780  0E01               	movlw	1
  9572  006782  6E33               	movwf	_linha_lcd,c
  9573                           
  9574                           ;LCD_ModSauer.c: 185: lcd_write( c );
  9575  006784  5005               	movf	i2lcd_putc@c,w,c
  9576  006786  EC54  F032         	call	i2_lcd_write
  9577                           
  9578                           ;LCD_ModSauer.c: 188: break;
  9579  00678A  D008               	goto	i2l726
  9580  00678C                     i2l3305:
  9581  00678C  5005               	movf	i2lcd_putc@c,w,c
  9582                           
  9583                           ; Switch size 1, requested type "space"
  9584                           ; Number of cases is 3, Range of values is 10 to 13
  9585                           ; switch strategies available:
  9586                           ; Name         Instructions Cycles
  9587                           ; simple_byte           10     6 (average)
  9588                           ;	Chosen strategy is simple_byte
  9589  00678E  0A0A               	xorlw	10	; case 10
  9590  006790  E0E1               	bz	i2l3289
  9591  006792  0A06               	xorlw	6	; case 12
  9592  006794  E0D2               	bz	i2l3277
  9593  006796  0A01               	xorlw	1	; case 13
  9594  006798  E0EB               	bz	i2l3293
  9595  00679A  D7F1               	goto	i2l725
  9596  00679C                     i2l726:
  9597  00679C  0012               	return		;funcret
  9598  00679E                     __end_ofi2_lcd_putc:
  9599                           	opt stack 0
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           prodh	equ	0xFF4
  9605                           prodl	equ	0xFF3
  9606                           intcon	equ	0xFF2
  9607                           intcon2	equ	0xFF1
  9608                           postinc0	equ	0xFEE
  9609                           wreg	equ	0xFE8
  9610                           indf1	equ	0xFE7
  9611                           postinc1	equ	0xFE6
  9612                           postdec1	equ	0xFE5
  9613                           plusw1	equ	0xFE3
  9614                           fsr1h	equ	0xFE2
  9615                           fsr1l	equ	0xFE1
  9616                           indf2	equ	0xFDF
  9617                           postinc2	equ	0xFDE
  9618                           postdec2	equ	0xFDD
  9619                           plusw2	equ	0xFDB
  9620                           fsr2h	equ	0xFDA
  9621                           fsr2l	equ	0xFD9
  9622                           status	equ	0xFD8
  9623                           
  9624 ;; *************** function i2_lcd_gotoxy *****************
  9625 ;; Defined at:
  9626 ;;		line 218 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;  linha           1    wreg     unsigned char 
  9629 ;;  coluna          1    1[COMRAM] unsigned char 
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;  linha           1    3[COMRAM] unsigned char 
  9632 ;; Return value:  Size  Location     Type
  9633 ;;		None               void
  9634 ;; Registers used:
  9635 ;;		wreg, status,2, status,0, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9641 ;;      Params:         1       0       0       0       0       0       0       0       0
  9642 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9643 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9644 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9645 ;;Total ram usage:        3 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    1
  9648 ;; This function calls:
  9649 ;;		i2_lcd_write
  9650 ;; This function is called by:
  9651 ;;		_aux
  9652 ;;		i2_lcd_putc
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           	psect	text37
  9657  006602                     __ptext37:
  9658                           	opt stack 0
  9659  006602                     i2_lcd_gotoxy:
  9660                           	opt stack 20
  9661                           
  9662                           ;incstack = 0
  9663                           ;i2lcd_gotoxy@linha stored from wreg
  9664  006602  6E04               	movwf	i2lcd_gotoxy@linha,c
  9665                           
  9666                           ;LCD_ModSauer.c: 222: linha_lcd_aux_posicao = linha;
  9667  006604  908D               	bcf	3981,0,c	;volatile
  9668                           
  9669                           ;LCD_ModSauer.c: 223: switch(linha){
  9670  006606  D018               	goto	i2l3241
  9671  006608                     i2l3231:
  9672                           
  9673                           ;LCD_ModSauer.c: 225: lcd_write(0x80+(coluna-1));
  9674  006608  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9675  00660A  0F7F               	addlw	127
  9676  00660C  EC54  F032         	call	i2_lcd_write
  9677                           
  9678                           ;LCD_ModSauer.c: 226: break;
  9679  006610  D01C               	goto	i2l744
  9680  006612                     i2l3233:
  9681                           
  9682                           ;LCD_ModSauer.c: 229: lcd_write(0xC0+(coluna-1));
  9683  006612  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9684  006614  0FBF               	addlw	191
  9685  006616  EC54  F032         	call	i2_lcd_write
  9686                           
  9687                           ;LCD_ModSauer.c: 230: break;
  9688  00661A  D017               	goto	i2l744
  9689  00661C                     i2l3235:
  9690                           
  9691                           ;LCD_ModSauer.c: 233: lcd_write(Linha_3+(coluna-1));
  9692  00661C  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9693  00661E  242F               	addwf	_Linha_3,w,c
  9694  006620  6E03               	movwf	??i2_lcd_gotoxy& (0+255),c
  9695  006622  0403               	decf	??i2_lcd_gotoxy,w,c
  9696  006624  EC54  F032         	call	i2_lcd_write
  9697                           
  9698                           ;LCD_ModSauer.c: 234: break;
  9699  006628  D010               	goto	i2l744
  9700  00662A                     i2l3237:
  9701                           
  9702                           ;LCD_ModSauer.c: 237: lcd_write(Linha_4+(coluna-1));
  9703  00662A  5002               	movf	i2lcd_gotoxy@coluna,w,c
  9704  00662C  2430               	addwf	_Linha_4,w,c
  9705  00662E  6E03               	movwf	??i2_lcd_gotoxy& (0+255),c
  9706  006630  0403               	decf	??i2_lcd_gotoxy,w,c
  9707  006632  EC54  F032         	call	i2_lcd_write
  9708                           
  9709                           ;LCD_ModSauer.c: 238: break;
  9710  006636  D009               	goto	i2l744
  9711  006638                     i2l3241:
  9712  006638  5004               	movf	i2lcd_gotoxy@linha,w,c
  9713                           
  9714                           ; Switch size 1, requested type "space"
  9715                           ; Number of cases is 4, Range of values is 1 to 4
  9716                           ; switch strategies available:
  9717                           ; Name         Instructions Cycles
  9718                           ; simple_byte           13     7 (average)
  9719                           ;	Chosen strategy is simple_byte
  9720  00663A  0A01               	xorlw	1	; case 1
  9721  00663C  E0E5               	bz	i2l3231
  9722  00663E  0A03               	xorlw	3	; case 2
  9723  006640  E0E8               	bz	i2l3233
  9724  006642  0A01               	xorlw	1	; case 3
  9725  006644  E0EB               	bz	i2l3235
  9726  006646  0A07               	xorlw	7	; case 4
  9727  006648  E0F0               	bz	i2l3237
  9728  00664A                     i2l744:
  9729  00664A  0012               	return		;funcret
  9730  00664C                     __end_ofi2_lcd_gotoxy:
  9731                           	opt stack 0
  9732                           tblptru	equ	0xFF8
  9733                           tblptrh	equ	0xFF7
  9734                           tblptrl	equ	0xFF6
  9735                           tablat	equ	0xFF5
  9736                           prodh	equ	0xFF4
  9737                           prodl	equ	0xFF3
  9738                           intcon	equ	0xFF2
  9739                           intcon2	equ	0xFF1
  9740                           postinc0	equ	0xFEE
  9741                           wreg	equ	0xFE8
  9742                           indf1	equ	0xFE7
  9743                           postinc1	equ	0xFE6
  9744                           postdec1	equ	0xFE5
  9745                           plusw1	equ	0xFE3
  9746                           fsr1h	equ	0xFE2
  9747                           fsr1l	equ	0xFE1
  9748                           indf2	equ	0xFDF
  9749                           postinc2	equ	0xFDE
  9750                           postdec2	equ	0xFDD
  9751                           plusw2	equ	0xFDB
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function i2_lcd_clear *****************
  9757 ;; Defined at:
  9758 ;;		line 140 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;		None
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;		None
  9763 ;; Return value:  Size  Location     Type
  9764 ;;		None               void
  9765 ;; Registers used:
  9766 ;;		wreg, status,2, status,0, cstack
  9767 ;; Tracked objects:
  9768 ;;		On entry : 0/0
  9769 ;;		On exit  : 0/0
  9770 ;;		Unchanged: 0/0
  9771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9772 ;;      Params:         0       0       0       0       0       0       0       0       0
  9773 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9774 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9775 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9776 ;;Total ram usage:        1 bytes
  9777 ;; Hardware stack levels used:    1
  9778 ;; Hardware stack levels required when called:    1
  9779 ;; This function calls:
  9780 ;;		i2_lcd_write
  9781 ;; This function is called by:
  9782 ;;		i2_lcd_putc
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text38
  9787  0062F0                     __ptext38:
  9788                           	opt stack 0
  9789  0062F0                     i2_lcd_clear:
  9790                           	opt stack 20
  9791                           
  9792                           ;LCD_ModSauer.c: 142: LATEbits.LE0 = 0;
  9793                           
  9794                           ;incstack = 0
  9795  0062F0  908D               	bcf	3981,0,c	;volatile
  9796                           
  9797                           ;LCD_ModSauer.c: 143: lcd_write(0x1);
  9798  0062F2  0E01               	movlw	1
  9799  0062F4  EC54  F032         	call	i2_lcd_write
  9800                           
  9801                           ;LCD_ModSauer.c: 144: _delay((unsigned long)((2)*(16000000/4000.0)));
  9802  0062F8  0E0B               	movlw	11
  9803  0062FA  6E02               	movwf	??i2_lcd_clear& (0+255),c
  9804  0062FC  0E62               	movlw	98
  9805  0062FE                     i2u770_47:
  9806  0062FE  2EE8               	decfsz	wreg,f,c
  9807  006300  D7FE               	goto	i2u770_47
  9808  006302  2E02               	decfsz	??i2_lcd_clear& (0+255),f,c
  9809  006304  D7FC               	goto	i2u770_47
  9810  006306  D000               	nop2	
  9811  006308  0012               	return		;funcret
  9812  00630A                     __end_ofi2_lcd_clear:
  9813                           	opt stack 0
  9814                           tblptru	equ	0xFF8
  9815                           tblptrh	equ	0xFF7
  9816                           tblptrl	equ	0xFF6
  9817                           tablat	equ	0xFF5
  9818                           prodh	equ	0xFF4
  9819                           prodl	equ	0xFF3
  9820                           intcon	equ	0xFF2
  9821                           intcon2	equ	0xFF1
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           indf1	equ	0xFE7
  9825                           postinc1	equ	0xFE6
  9826                           postdec1	equ	0xFE5
  9827                           plusw1	equ	0xFE3
  9828                           fsr1h	equ	0xFE2
  9829                           fsr1l	equ	0xFE1
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           postdec2	equ	0xFDD
  9833                           plusw2	equ	0xFDB
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function i2_lcd_write *****************
  9839 ;; Defined at:
  9840 ;;		line 124 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\LCD_ModSauer.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;  c               1    wreg     unsigned char 
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;  c               1    0[COMRAM] unsigned char 
  9845 ;; Return value:  Size  Location     Type
  9846 ;;		None               void
  9847 ;; Registers used:
  9848 ;;		wreg, status,2, status,0, cstack
  9849 ;; Tracked objects:
  9850 ;;		On entry : 0/0
  9851 ;;		On exit  : 0/0
  9852 ;;		Unchanged: 0/0
  9853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9854 ;;      Params:         0       0       0       0       0       0       0       0       0
  9855 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9856 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9857 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9858 ;;Total ram usage:        1 bytes
  9859 ;; Hardware stack levels used:    1
  9860 ;; This function calls:
  9861 ;;		Nothing
  9862 ;; This function is called by:
  9863 ;;		i2_lcd_clear
  9864 ;;		i2_lcd_putc
  9865 ;;		i2_lcd_gotoxy
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           	psect	text39
  9870  0064A8                     __ptext39:
  9871                           	opt stack 0
  9872  0064A8                     i2_lcd_write:
  9873                           	opt stack 21
  9874                           
  9875                           ;incstack = 0
  9876                           ;i2lcd_write@c stored from wreg
  9877  0064A8  6E01               	movwf	i2lcd_write@c,c
  9878                           
  9879                           ;LCD_ModSauer.c: 126: _delay((unsigned long)((40)*(16000000/4000000.0)));
  9880  0064AA  0E35               	movlw	53
  9881  0064AC                     i2u771_47:
  9882  0064AC  2EE8               	decfsz	wreg,f,c
  9883  0064AE  D7FE               	goto	i2u771_47
  9884  0064B0  F000               	nop	
  9885                           
  9886                           ;LCD_ModSauer.c: 127: LATA &= 0xF0;
  9887  0064B2  0EF0               	movlw	240
  9888  0064B4  1689               	andwf	3977,f,c	;volatile
  9889                           
  9890                           ;LCD_ModSauer.c: 128: LATA |= ( ( c >> 4 ) & 0x0F );
  9891  0064B6  3801               	swapf	i2lcd_write@c,w,c
  9892                           
  9893                           ;LCD_ModSauer.c: 129: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  9894                           
  9895                           ;LCD_ModSauer.c: 130: LATA &=0xF0;
  9896  0064B8  D806               	call	PL38	;call to abstracted procedure
  9897                           
  9898                           ;LCD_ModSauer.c: 131: LATA |= ( c & 0x0F );
  9899  0064BA  5001               	movf	i2lcd_write@c,w,c
  9900  0064BC  0B0F               	andlw	15
  9901  0064BE  1289               	iorwf	3977,f,c	;volatile
  9902                           
  9903                           ;LCD_ModSauer.c: 132: ((LATEbits.LE1 = 1),(LATEbits.LE1=0));
  9904  0064C0  828D               	bsf	3981,1,c	;volatile
  9905  0064C2  928D               	bcf	3981,1,c	;volatile
  9906  0064C4  0012               	return		;funcret
  9907  0064C6                     __end_ofi2_lcd_write:
  9908                           	opt stack 0
  9909  0064C6                     PL38:
  9910                           	opt stack 21
  9911  0064C6  0B0F               	andlw	15
  9912  0064C8  1289               	iorwf	3977,f,c	;volatile
  9913  0064CA  828D               	bsf	3981,1,c	;volatile
  9914  0064CC  928D               	bcf	3981,1,c	;volatile
  9915  0064CE  0EF0               	movlw	240
  9916  0064D0  1689               	andwf	3977,f,c	;volatile
  9917  0064D2  0CF0               	retlw	240
  9918  0064D4                     __end_ofPL38:
  9919                           	opt stack 0
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           indf1	equ	0xFE7
  9931                           postinc1	equ	0xFE6
  9932                           postdec1	equ	0xFE5
  9933                           plusw1	equ	0xFE3
  9934                           fsr1h	equ	0xFE2
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           plusw2	equ	0xFDB
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8
  9943                           
  9944 ;; *************** function i2_isdigit *****************
  9945 ;; Defined at:
  9946 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;  c               1    wreg     unsigned char 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  c               1    2[COMRAM] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0
  9961 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9962 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9963 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9964 ;;Total ram usage:        3 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; This function calls:
  9967 ;;		Nothing
  9968 ;; This function is called by:
  9969 ;;		i2_printf
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           	psect	text40
  9974  006324                     __ptext40:
  9975                           	opt stack 0
  9976  006324                     i2_isdigit:
  9977                           	opt stack 23
  9978                           
  9979                           ;incstack = 0
  9980                           ;i2isdigit@c stored from wreg
  9981  006324  6E03               	movwf	i2isdigit@c,c
  9982  006326  6A02               	clrf	i2_isdigit$1524,c
  9983  006328  0E3A               	movlw	58
  9984  00632A  6003               	cpfslt	i2isdigit@c,c
  9985  00632C  D005               	goto	i2l3479
  9986  00632E  0E2F               	movlw	47
  9987  006330  6403               	cpfsgt	i2isdigit@c,c
  9988  006332  D002               	goto	i2l3479
  9989  006334  0E01               	movlw	1
  9990  006336  6E02               	movwf	i2_isdigit$1524,c
  9991  006338                     i2l3479:
  9992  006338  C002  F001         	movff	i2_isdigit$1524,??i2_isdigit
  9993  00633C  3001               	rrcf	??i2_isdigit,w,c
  9994  00633E  0012               	return		;funcret
  9995  006340                     __end_ofi2_isdigit:
  9996                           	opt stack 0
  9997                           tblptru	equ	0xFF8
  9998                           tblptrh	equ	0xFF7
  9999                           tblptrl	equ	0xFF6
 10000                           tablat	equ	0xFF5
 10001                           prodh	equ	0xFF4
 10002                           prodl	equ	0xFF3
 10003                           intcon	equ	0xFF2
 10004                           intcon2	equ	0xFF1
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           indf1	equ	0xFE7
 10008                           postinc1	equ	0xFE6
 10009                           postdec1	equ	0xFE5
 10010                           plusw1	equ	0xFE3
 10011                           fsr1h	equ	0xFE2
 10012                           fsr1l	equ	0xFE1
 10013                           indf2	equ	0xFDF
 10014                           postinc2	equ	0xFDE
 10015                           postdec2	equ	0xFDD
 10016                           plusw2	equ	0xFDB
 10017                           fsr2h	equ	0xFDA
 10018                           fsr2l	equ	0xFD9
 10019                           status	equ	0xFD8
 10020                           
 10021 ;; *************** function i2___wmul *****************
 10022 ;; Defined at:
 10023 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;  multiplier      2    0[COMRAM] unsigned int 
 10026 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;  __wmul          2    4[COMRAM] unsigned int 
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  2    0[COMRAM] unsigned int 
 10031 ;; Registers used:
 10032 ;;		wreg, status,2, status,0, prodl, prodh
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10038 ;;      Params:         4       0       0       0       0       0       0       0       0
 10039 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10041 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10042 ;;Total ram usage:        6 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; This function calls:
 10045 ;;		Nothing
 10046 ;; This function is called by:
 10047 ;;		i2_printf
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           	psect	text41
 10052  006408                     __ptext41:
 10053                           	opt stack 0
 10054  006408                     i2___wmul:
 10055                           	opt stack 23
 10056                           
 10057                           ;incstack = 0
 10058  006408  5001               	movf	i2___wmul@multiplier,w,c
 10059  00640A  0203               	mulwf	i2___wmul@multiplicand,c
 10060  00640C  CFF3 F005          	movff	prodl,i2___wmul@product
 10061  006410  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10062  006414  5001               	movf	i2___wmul@multiplier,w,c
 10063  006416  0204               	mulwf	i2___wmul@multiplicand+1,c
 10064  006418  50F3               	movf	prodl,w,c
 10065  00641A  2606               	addwf	i2___wmul@product+1,f,c
 10066  00641C  5002               	movf	i2___wmul@multiplier+1,w,c
 10067  00641E  0203               	mulwf	i2___wmul@multiplicand,c
 10068  006420  50F3               	movf	prodl,w,c
 10069  006422  2606               	addwf	i2___wmul@product+1,f,c
 10070  006424  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10071  006428  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10072  00642C  0012               	return		;funcret
 10073  00642E                     __end_ofi2___wmul:
 10074                           	opt stack 0
 10075                           tblptru	equ	0xFF8
 10076                           tblptrh	equ	0xFF7
 10077                           tblptrl	equ	0xFF6
 10078                           tablat	equ	0xFF5
 10079                           prodh	equ	0xFF4
 10080                           prodl	equ	0xFF3
 10081                           intcon	equ	0xFF2
 10082                           intcon2	equ	0xFF1
 10083                           postinc0	equ	0xFEE
 10084                           wreg	equ	0xFE8
 10085                           indf1	equ	0xFE7
 10086                           postinc1	equ	0xFE6
 10087                           postdec1	equ	0xFE5
 10088                           plusw1	equ	0xFE3
 10089                           fsr1h	equ	0xFE2
 10090                           fsr1l	equ	0xFE1
 10091                           indf2	equ	0xFDF
 10092                           postinc2	equ	0xFDE
 10093                           postdec2	equ	0xFDD
 10094                           plusw2	equ	0xFDB
 10095                           fsr2h	equ	0xFDA
 10096                           fsr2l	equ	0xFD9
 10097                           status	equ	0xFD8
 10098                           
 10099 ;; *************** function i2___lwmod *****************
 10100 ;; Defined at:
 10101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;  dividend        2    7[COMRAM] unsigned int 
 10104 ;;  divisor         2    9[COMRAM] unsigned int 
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  2    7[COMRAM] unsigned int 
 10109 ;; Registers used:
 10110 ;;		wreg, status,2, status,0
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10116 ;;      Params:         4       0       0       0       0       0       0       0       0
 10117 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10118 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10119 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10120 ;;Total ram usage:        5 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		i2_printf
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text42
 10130  00653C                     __ptext42:
 10131                           	opt stack 0
 10132  00653C                     i2___lwmod:
 10133                           	opt stack 23
 10134                           
 10135                           ;incstack = 0
 10136  00653C  500A               	movf	i2___lwmod@divisor,w,c
 10137  00653E  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10138  006540  E017               	bz	i2l1386
 10139  006542  0E01               	movlw	1
 10140  006544  6E0C               	movwf	i2___lwmod@counter,c
 10141  006546  D004               	goto	i2l3511
 10142  006548                     i2l3509:
 10143  006548  90D8               	bcf	status,0,c
 10144  00654A  360A               	rlcf	i2___lwmod@divisor,f,c
 10145  00654C  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10146  00654E  2A0C               	incf	i2___lwmod@counter,f,c
 10147  006550                     i2l3511:
 10148  006550  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10149  006552  D7FA               	goto	i2l3509
 10150  006554                     i2l3513:
 10151  006554  500A               	movf	i2___lwmod@divisor,w,c
 10152  006556  5C08               	subwf	i2___lwmod@dividend,w,c
 10153  006558  500B               	movf	i2___lwmod@divisor+1,w,c
 10154  00655A  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10155  00655C  E304               	bnc	i2l3517
 10156  00655E  500A               	movf	i2___lwmod@divisor,w,c
 10157  006560  5E08               	subwf	i2___lwmod@dividend,f,c
 10158  006562  500B               	movf	i2___lwmod@divisor+1,w,c
 10159  006564  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10160  006566                     i2l3517:
 10161  006566  90D8               	bcf	status,0,c
 10162  006568  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10163  00656A  320A               	rrcf	i2___lwmod@divisor,f,c
 10164  00656C  2E0C               	decfsz	i2___lwmod@counter,f,c
 10165  00656E  D7F2               	goto	i2l3513
 10166  006570                     i2l1386:
 10167  006570  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10168  006574  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10169  006578  0012               	return		;funcret
 10170  00657A                     __end_ofi2___lwmod:
 10171                           	opt stack 0
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           intcon	equ	0xFF2
 10179                           intcon2	equ	0xFF1
 10180                           postinc0	equ	0xFEE
 10181                           wreg	equ	0xFE8
 10182                           indf1	equ	0xFE7
 10183                           postinc1	equ	0xFE6
 10184                           postdec1	equ	0xFE5
 10185                           plusw1	equ	0xFE3
 10186                           fsr1h	equ	0xFE2
 10187                           fsr1l	equ	0xFE1
 10188                           indf2	equ	0xFDF
 10189                           postinc2	equ	0xFDE
 10190                           postdec2	equ	0xFDD
 10191                           plusw2	equ	0xFDB
 10192                           fsr2h	equ	0xFDA
 10193                           fsr2l	equ	0xFD9
 10194                           status	equ	0xFD8
 10195                           
 10196 ;; *************** function i2___lwdiv *****************
 10197 ;; Defined at:
 10198 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;  dividend        2    0[COMRAM] unsigned int 
 10201 ;;  divisor         2    2[COMRAM] unsigned int 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10204 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  2    0[COMRAM] unsigned int 
 10207 ;; Registers used:
 10208 ;;		wreg, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10214 ;;      Params:         4       0       0       0       0       0       0       0       0
 10215 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10217 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10218 ;;Total ram usage:        7 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; This function calls:
 10221 ;;		Nothing
 10222 ;; This function is called by:
 10223 ;;		i2_printf
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           	psect	text43
 10228  0065B8                     __ptext43:
 10229                           	opt stack 0
 10230  0065B8                     i2___lwdiv:
 10231                           	opt stack 23
 10232                           
 10233                           ;incstack = 0
 10234  0065B8  6A05               	clrf	i2___lwdiv@quotient,c
 10235  0065BA  6A06               	clrf	i2___lwdiv@quotient+1,c
 10236  0065BC  5003               	movf	i2___lwdiv@divisor,w,c
 10237  0065BE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10238  0065C0  E01B               	bz	i2l1376
 10239  0065C2  0E01               	movlw	1
 10240  0065C4  6E07               	movwf	i2___lwdiv@counter,c
 10241  0065C6  D004               	goto	i2l3491
 10242  0065C8                     i2l3489:
 10243  0065C8  90D8               	bcf	status,0,c
 10244  0065CA  3603               	rlcf	i2___lwdiv@divisor,f,c
 10245  0065CC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10246  0065CE  2A07               	incf	i2___lwdiv@counter,f,c
 10247  0065D0                     i2l3491:
 10248  0065D0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10249  0065D2  D7FA               	goto	i2l3489
 10250  0065D4                     i2l3493:
 10251  0065D4  90D8               	bcf	status,0,c
 10252  0065D6  3605               	rlcf	i2___lwdiv@quotient,f,c
 10253  0065D8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10254  0065DA  5003               	movf	i2___lwdiv@divisor,w,c
 10255  0065DC  5C01               	subwf	i2___lwdiv@dividend,w,c
 10256  0065DE  5004               	movf	i2___lwdiv@divisor+1,w,c
 10257  0065E0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10258  0065E2  E305               	bnc	i2l3501
 10259  0065E4  5003               	movf	i2___lwdiv@divisor,w,c
 10260  0065E6  5E01               	subwf	i2___lwdiv@dividend,f,c
 10261  0065E8  5004               	movf	i2___lwdiv@divisor+1,w,c
 10262  0065EA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10263  0065EC  8005               	bsf	i2___lwdiv@quotient,0,c
 10264  0065EE                     i2l3501:
 10265  0065EE  90D8               	bcf	status,0,c
 10266  0065F0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10267  0065F2  3203               	rrcf	i2___lwdiv@divisor,f,c
 10268  0065F4  2E07               	decfsz	i2___lwdiv@counter,f,c
 10269  0065F6  D7EE               	goto	i2l3493
 10270  0065F8                     i2l1376:
 10271  0065F8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10272  0065FC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10273  006600  0012               	return		;funcret
 10274  006602                     __end_ofi2___lwdiv:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           postinc0	equ	0xFEE
 10285                           wreg	equ	0xFE8
 10286                           indf1	equ	0xFE7
 10287                           postinc1	equ	0xFE6
 10288                           postdec1	equ	0xFE5
 10289                           plusw1	equ	0xFE3
 10290                           fsr1h	equ	0xFE2
 10291                           fsr1l	equ	0xFE1
 10292                           indf2	equ	0xFDF
 10293                           postinc2	equ	0xFDE
 10294                           postdec2	equ	0xFDD
 10295                           plusw2	equ	0xFDB
 10296                           fsr2h	equ	0xFDA
 10297                           fsr2l	equ	0xFD9
 10298                           status	equ	0xFD8
 10299                           
 10300 ;; *************** function _teclado_matricial *****************
 10301 ;; Defined at:
 10302 ;;		line 5 in file "D:\Dropbox\Micros\2015\TC_2015\18F4550\ascii.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;  coluna          1    wreg     unsigned char 
 10305 ;;  linha           1    0[COMRAM] unsigned char 
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;  coluna          1    1[COMRAM] unsigned char 
 10308 ;;  caractere       1    3[COMRAM] unsigned char 
 10309 ;;  temp            1    2[COMRAM] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  1    wreg      unsigned char 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0, prodl, prodh
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10319 ;;      Params:         1       0       0       0       0       0       0       0       0
 10320 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10321 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10322 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10323 ;;Total ram usage:        4 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; This function calls:
 10326 ;;		Nothing
 10327 ;; This function is called by:
 10328 ;;		_aux
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           	psect	text44
 10333  006B64                     __ptext44:
 10334                           	opt stack 0
 10335  006B64                     _teclado_matricial:
 10336                           	opt stack 24
 10337                           
 10338                           ;incstack = 0
 10339                           ;teclado_matricial@coluna stored from wreg
 10340  006B64  6E02               	movwf	teclado_matricial@coluna,c
 10341                           
 10342                           ;ascii.c: 7: char temp = ((linha-1)*4) + coluna;
 10343  006B66  5001               	movf	teclado_matricial@linha,w,c
 10344  006B68  0D04               	mullw	4
 10345  006B6A  50F3               	movf	prodl,w,c
 10346  006B6C  2402               	addwf	teclado_matricial@coluna,w,c
 10347  006B6E  0FFC               	addlw	252
 10348  006B70  6E03               	movwf	teclado_matricial@temp,c
 10349                           
 10350                           ;ascii.c: 8: char caractere;
 10351                           ;ascii.c: 10: switch(temp){
 10352  006B72  D021               	goto	i2l3693
 10353  006B74                     i2l3659:
 10354                           
 10355                           ;ascii.c: 12: caractere = '*';
 10356  006B74  0E2A               	movlw	42
 10357  006B76  D01D               	goto	L34
 10358  006B78                     i2l3661:
 10359                           
 10360                           ;ascii.c: 16: caractere = '0';
 10361  006B78  0E30               	movlw	48
 10362  006B7A  D01B               	goto	L34
 10363  006B7C                     i2l3663:
 10364                           
 10365                           ;ascii.c: 20: caractere = 'F';
 10366  006B7C  0E46               	movlw	70
 10367  006B7E  D019               	goto	L34
 10368  006B80                     i2l3665:
 10369                           
 10370                           ;ascii.c: 24: caractere = 'D';
 10371  006B80  0E44               	movlw	68
 10372  006B82  D017               	goto	L34
 10373  006B84                     i2l3667:
 10374                           
 10375                           ;ascii.c: 28: caractere = '7';
 10376  006B84  0E37               	movlw	55
 10377  006B86  D015               	goto	L34
 10378  006B88                     i2l3669:
 10379                           
 10380                           ;ascii.c: 32: caractere = '8';
 10381  006B88  0E38               	movlw	56
 10382  006B8A  D013               	goto	L34
 10383  006B8C                     i2l3671:
 10384                           
 10385                           ;ascii.c: 36: caractere = '9';
 10386  006B8C  0E39               	movlw	57
 10387  006B8E  D011               	goto	L34
 10388  006B90                     i2l3673:
 10389                           
 10390                           ;ascii.c: 40: caractere = 'C';
 10391  006B90  0E43               	movlw	67
 10392  006B92  D00F               	goto	L34
 10393  006B94                     i2l3675:
 10394                           
 10395                           ;ascii.c: 44: caractere = '4';
 10396  006B94  0E34               	movlw	52
 10397  006B96  D00D               	goto	L34
 10398  006B98                     i2l3677:
 10399                           
 10400                           ;ascii.c: 48: caractere = '5';
 10401  006B98  0E35               	movlw	53
 10402  006B9A  D00B               	goto	L34
 10403  006B9C                     i2l3679:
 10404                           
 10405                           ;ascii.c: 52: caractere = '6';
 10406  006B9C  0E36               	movlw	54
 10407  006B9E  D009               	goto	L34
 10408  006BA0                     i2l3681:
 10409                           
 10410                           ;ascii.c: 56: caractere = 'B';
 10411  006BA0  0E42               	movlw	66
 10412  006BA2  D007               	goto	L34
 10413  006BA4                     i2l3683:
 10414                           
 10415                           ;ascii.c: 60: caractere = '1';
 10416  006BA4  0E31               	movlw	49
 10417  006BA6  D005               	goto	L34
 10418  006BA8                     i2l3685:
 10419                           
 10420                           ;ascii.c: 64: caractere = '2';
 10421  006BA8  0E32               	movlw	50
 10422  006BAA  D003               	goto	L34
 10423  006BAC                     i2l3687:
 10424                           
 10425                           ;ascii.c: 68: caractere = '3';
 10426  006BAC  0E33               	movlw	51
 10427  006BAE  D001               	goto	L34
 10428  006BB0                     i2l3689:
 10429                           
 10430                           ;ascii.c: 72: caractere = 'A';
 10431  006BB0  0E41               	movlw	65
 10432  006BB2                     L34:
 10433  006BB2  6E04               	movwf	teclado_matricial@caractere,c
 10434                           
 10435                           ;ascii.c: 73: break;}
 10436  006BB4  D021               	goto	i2l3695
 10437  006BB6                     i2l3693:
 10438  006BB6  5003               	movf	teclado_matricial@temp,w,c
 10439                           
 10440                           ; Switch size 1, requested type "space"
 10441                           ; Number of cases is 16, Range of values is 1 to 16
 10442                           ; switch strategies available:
 10443                           ; Name         Instructions Cycles
 10444                           ; simple_byte           49    25 (average)
 10445                           ;	Chosen strategy is simple_byte
 10446  006BB8  0A01               	xorlw	1	; case 1
 10447  006BBA  E0DC               	bz	i2l3659
 10448  006BBC  0A03               	xorlw	3	; case 2
 10449  006BBE  E0DC               	bz	i2l3661
 10450  006BC0  0A01               	xorlw	1	; case 3
 10451  006BC2  E0DC               	bz	i2l3663
 10452  006BC4  0A07               	xorlw	7	; case 4
 10453  006BC6  E0DC               	bz	i2l3665
 10454  006BC8  0A01               	xorlw	1	; case 5
 10455  006BCA  E0DC               	bz	i2l3667
 10456  006BCC  0A03               	xorlw	3	; case 6
 10457  006BCE  E0DC               	bz	i2l3669
 10458  006BD0  0A01               	xorlw	1	; case 7
 10459  006BD2  E0DC               	bz	i2l3671
 10460  006BD4  0A0F               	xorlw	15	; case 8
 10461  006BD6  E0DC               	bz	i2l3673
 10462  006BD8  0A01               	xorlw	1	; case 9
 10463  006BDA  E0DC               	bz	i2l3675
 10464  006BDC  0A03               	xorlw	3	; case 10
 10465  006BDE  E0DC               	bz	i2l3677
 10466  006BE0  0A01               	xorlw	1	; case 11
 10467  006BE2  E0DC               	bz	i2l3679
 10468  006BE4  0A07               	xorlw	7	; case 12
 10469  006BE6  E0DC               	bz	i2l3681
 10470  006BE8  0A01               	xorlw	1	; case 13
 10471  006BEA  E0DC               	bz	i2l3683
 10472  006BEC  0A03               	xorlw	3	; case 14
 10473  006BEE  E0DC               	bz	i2l3685
 10474  006BF0  0A01               	xorlw	1	; case 15
 10475  006BF2  E0DC               	bz	i2l3687
 10476  006BF4  0A1F               	xorlw	31	; case 16
 10477  006BF6  E0DC               	bz	i2l3689
 10478  006BF8                     i2l3695:
 10479                           
 10480                           ;ascii.c: 75: return caractere;
 10481  006BF8  5004               	movf	teclado_matricial@caractere,w,c
 10482  006BFA  0012               	return		;funcret
 10483  006BFC                     __end_of_teclado_matricial:
 10484                           	opt stack 0
 10485                           tblptru	equ	0xFF8
 10486                           tblptrh	equ	0xFF7
 10487                           tblptrl	equ	0xFF6
 10488                           tablat	equ	0xFF5
 10489                           prodh	equ	0xFF4
 10490                           prodl	equ	0xFF3
 10491                           intcon	equ	0xFF2
 10492                           intcon2	equ	0xFF1
 10493                           postinc0	equ	0xFEE
 10494                           wreg	equ	0xFE8
 10495                           indf1	equ	0xFE7
 10496                           postinc1	equ	0xFE6
 10497                           postdec1	equ	0xFE5
 10498                           plusw1	equ	0xFE3
 10499                           fsr1h	equ	0xFE2
 10500                           fsr1l	equ	0xFE1
 10501                           indf2	equ	0xFDF
 10502                           postinc2	equ	0xFDE
 10503                           postdec2	equ	0xFDD
 10504                           plusw2	equ	0xFDB
 10505                           fsr2h	equ	0xFDA
 10506                           fsr2l	equ	0xFD9
 10507                           status	equ	0xFD8
 10508                           tblptru	equ	0xFF8
 10509                           tblptrh	equ	0xFF7
 10510                           tblptrl	equ	0xFF6
 10511                           tablat	equ	0xFF5
 10512                           prodh	equ	0xFF4
 10513                           prodl	equ	0xFF3
 10514                           intcon	equ	0xFF2
 10515                           intcon2	equ	0xFF1
 10516                           postinc0	equ	0xFEE
 10517                           wreg	equ	0xFE8
 10518                           indf1	equ	0xFE7
 10519                           postinc1	equ	0xFE6
 10520                           postdec1	equ	0xFE5
 10521                           plusw1	equ	0xFE3
 10522                           fsr1h	equ	0xFE2
 10523                           fsr1l	equ	0xFE1
 10524                           indf2	equ	0xFDF
 10525                           postinc2	equ	0xFDE
 10526                           postdec2	equ	0xFDD
 10527                           plusw2	equ	0xFDB
 10528                           fsr2h	equ	0xFDA
 10529                           fsr2l	equ	0xFD9
 10530                           status	equ	0xFD8
 10531                           
 10532                           	psect	rparam
 10533  0000                     tblptru	equ	0xFF8
 10534                           tblptrh	equ	0xFF7
 10535                           tblptrl	equ	0xFF6
 10536                           tablat	equ	0xFF5
 10537                           prodh	equ	0xFF4
 10538                           prodl	equ	0xFF3
 10539                           intcon	equ	0xFF2
 10540                           intcon2	equ	0xFF1
 10541                           postinc0	equ	0xFEE
 10542                           wreg	equ	0xFE8
 10543                           indf1	equ	0xFE7
 10544                           postinc1	equ	0xFE6
 10545                           postdec1	equ	0xFE5
 10546                           plusw1	equ	0xFE3
 10547                           fsr1h	equ	0xFE2
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           plusw2	equ	0xFDB
 10553                           fsr2h	equ	0xFDA
 10554                           fsr2l	equ	0xFD9
 10555                           status	equ	0xFD8
 10556                           tblptru	equ	0xFF8
 10557                           tblptrh	equ	0xFF7
 10558                           tblptrl	equ	0xFF6
 10559                           tablat	equ	0xFF5
 10560                           prodh	equ	0xFF4
 10561                           prodl	equ	0xFF3
 10562                           intcon	equ	0xFF2
 10563                           intcon2	equ	0xFF1
 10564                           postinc0	equ	0xFEE
 10565                           wreg	equ	0xFE8
 10566                           indf1	equ	0xFE7
 10567                           postinc1	equ	0xFE6
 10568                           postdec1	equ	0xFE5
 10569                           plusw1	equ	0xFE3
 10570                           fsr1h	equ	0xFE2
 10571                           fsr1l	equ	0xFE1
 10572                           indf2	equ	0xFDF
 10573                           postinc2	equ	0xFDE
 10574                           postdec2	equ	0xFDD
 10575                           plusw2	equ	0xFDB
 10576                           fsr2h	equ	0xFDA
 10577                           fsr2l	equ	0xFD9
 10578                           status	equ	0xFD8


Data Sizes:
    Strings     183
    Constant    10
    Data        13
    BSS         431
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      63
    BANK0           160     79     152
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_21(CODE[7]), printf@c(BANK0[1]), buffer_teclado_matricial(BANK0[40]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_20(CODE[33]), STR_19(CODE[2]), STR_15(CODE[18]), STR_14(CODE[22]), 
		 -> STR_13(CODE[20]), STR_12(CODE[15]), STR_11(CODE[19]), STR_10(CODE[3]), 
		 -> STR_9(CODE[17]), STR_8(CODE[3]), STR_7(CODE[4]), STR_6(CODE[5]), 
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    enviar_string_serial@string_a_enviar	PTR const unsigned char  size(2) Largest target is 272
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), nova_senha(BANK0[16]), 
		 -> STR_5(CODE[4]), STR_4(CODE[3]), main@endereco_modulo_repasse(BANK0[18]), senha(BIGRAM[272]), 
		 -> buffer_serial(BANK1[80]), 

    carregar_senha@senha_a_carregar	PTR unsigned char [17] size(2) Largest target is 272
		 -> senha(BIGRAM[272]), 

    ptr_data	PTR unsigned char  size(2) Largest target is 7
		 -> NULL(NULL[0]), data_atual.ano(COMRAM[1]), data_atual(COMRAM[7]), 

    zerar_string@string_a_zerar	PTR unsigned char  size(2) Largest target is 80
		 -> buffer_teclado_matricial(BANK0[40]), buffer_serial(BANK1[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _aux in COMRAM

    _aux->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcd_putc
    i2_lcd_putc->i2_lcd_gotoxy
    i2_lcd_gotoxy->i2_lcd_write
    i2_lcd_clear->i2_lcd_write
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_printf
    _verificar_num_contas->_Read_b_eep
    _printf->___lwmod
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _numero_para_ascii->___awdiv
    ___awdiv->___wmul
    _limpar_linha->_lcd_gotoxy
    _lcd_gotoxy->_lcd_write
    _lcd_init->_lcd_clear
    _lcd_clear->_lcd_write
    _escrever_simbolo_fechadura->_lcd_write
    _eeprom_config_inicial->_Write_b_eep
    _dia_da_semana->___lwmod
    ___lwmod->___lwdiv
    _carregar_senha->_Read_b_eep

Critical Paths under _aux in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aux in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aux in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aux in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aux in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aux in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _aux in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _aux in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   24031
                                             41 BANK0     38    38      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                            ___awmod
                  _ascii_para_numero
                     _carregar_senha
                      _config_serial
                           _delay_ms
                      _dia_da_semana
              _eeprom_config_inicial
            _enviar_caractere_serial
               _enviar_string_serial
                         _lcd_gotoxy
                           _lcd_init
                       _limpar_linha
                  _numero_para_ascii
                             _printf
                     _resetar_timer1
               _verificar_num_contas
                       _zerar_string
 ---------------------------------------------------------------------------------
 (1) _zerar_string                                         2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _verificar_num_contas                                 2     2      0     475
                                              2 BANK0      2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _resetar_timer1                                       2     1      1     377
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _printf                                              33    21     12    5506
                                             12 BANK0     29    17     12
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1118
                                              5 BANK0      1     1      0
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1087
                                              4 BANK0      1     1      0
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _numero_para_ascii                                    6     6      0    2213
                                             14 BANK0      6     6      0
                            ___awdiv
                            ___lbdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     318
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _limpar_linha                                         2     2      0    1062
                                              4 BANK0      2     2      0
                         _lcd_gotoxy
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1     901
                                              1 BANK0      3     2      1
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     251
                                              2 BANK0      3     3      0
         _escrever_simbolo_fechadura
                          _lcd_clear
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_clear                                            1     1      0      62
                                              1 BANK0      1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _escrever_simbolo_fechadura                           0     0      0      62
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enviar_string_serial                                 2     0      2     835
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _enviar_caractere_serial                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_config_inicial                                1     1      0    1431
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    1177
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dia_da_semana                                       22    18      4    3239
                                             12 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1042
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     540
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     703
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     684
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _config_serial                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _carregar_senha                                       8     6      2     794
                                              2 BANK0      8     6      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2     339
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ascii_para_numero                                    4     2      2     595
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     587
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _aux                                                 15    15      0    2746
                                             29 COMRAM    15    15      0
                  _teclado_matricial
                       i2_lcd_gotoxy
                           i2_printf
                   i2_resetar_timer1
 ---------------------------------------------------------------------------------
 (7) i2_resetar_timer1                                     2     1      1      96
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            21    21      0    2108
                                             12 COMRAM    17    17      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     382
                                              5 COMRAM     1     1      0
                         i2_lcd_putc
 ---------------------------------------------------------------------------------
 (9) i2_lcd_putc                                           1     1      0     360
                                              4 COMRAM     1     1      0
                        i2_lcd_clear
                       i2_lcd_gotoxy
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_gotoxy                                        3     2      1     228
                                              1 COMRAM     3     2      1
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_clear                                         1     1      0      44
                                              1 COMRAM     1     1      0
                        i2_lcd_write
 ---------------------------------------------------------------------------------
 (10) i2_lcd_write                                         1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _teclado_matricial                                    4     3      1     169
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Busy_eep
   _Read_b_eep
   _Write_b_eep
   ___awmod
   _ascii_para_numero
   _carregar_senha
     _Read_b_eep
   _config_serial
   _delay_ms
   _dia_da_semana
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul
   _eeprom_config_inicial
     _Busy_eep
     _Write_b_eep
   _enviar_caractere_serial
   _enviar_string_serial
   _lcd_gotoxy
     _lcd_write
   _lcd_init
     _escrever_simbolo_fechadura
       _lcd_write
     _lcd_clear
       _lcd_write
     _lcd_write
   _limpar_linha
     _lcd_gotoxy
       _lcd_write
     _lcd_write
   _numero_para_ascii
     ___awdiv
       ___wmul (ARG)
     ___lbdiv
     ___wmul
   _printf
     ___awmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcd_putc
         _lcd_clear
           _lcd_write
         _lcd_gotoxy
           _lcd_write
         _lcd_write
   _resetar_timer1
   _verificar_num_contas
     _Read_b_eep
   _zerar_string

 _aux (ROOT)
   _teclado_matricial
   i2_lcd_gotoxy
     i2_lcd_write
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcd_putc
         i2_lcd_clear
           i2_lcd_write
         i2_lcd_gotoxy
           i2_lcd_write
         i2_lcd_write
   i2_resetar_timer1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     110      21       13.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      3F       1       66.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     127      20        0.0%
DATA                 0      0     237       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 08 17:37:54 2015

                   main@qtd_total_contas 00A5                                       PL2 7F62  
                  __end_of_dia_da_semana 6D82                                       PL4 7F70  
                                     PL6 7F88                                       PL8 6B2A  
                  _eeprom_config_inicial 6A48                                       _WR 007D31  
                           ___awdiv@sign 006B                      ___wmul@multiplicand 0062  
                     i2___lwdiv@dividend 0001                       __CFG_FOSC$XTPLL_XT 000000  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    PL10 6B40                                      PL20 7F9C  
                                    PL12 7290                                      PL30 7FC6  
                                    PL22 72B2                                      PL14 729A  
                                    PL32 7FD6                                      PL24 7FB2  
                                    PL16 7584                                      PL34 7FE4  
                                    PL26 6D82                                      PL18 759C  
                                    PL36 7FF2                                      PL28 6AC0  
                                    PL38 64C6                  __size_of_carregar_senha 005A  
                                    l320 79CC                                      l340 7A9E  
                                    l405 7EF4                                      l261 7A58  
                                    l406 7EC2                                      l262 777C  
                                    l274 77A8                                      l371 7C7A  
                                    l268 7782                                      l429 7EEA  
                                    l373 7C86                                      l365 7C1C  
                                    l470 6A20                                      l294 78B4  
                                    l464 69CE                                      l800 74D8  
                                    l384 7D7A                                      l473 6A3A  
                                    l394 7DAC                                      l467 69E6  
                                    l820 6290                                      l476 6A42  
                                    l725 684E                                      l397 7E38  
                                    l566 6470                                      l726 686C  
                                    l639 62CA                                      l647 6704  
                                    l815 7582                                      l744 66DE  
                                    l762 72D6                                      l693 6C3C  
                                    l686 63F4                                      l847 64F6  
                                    l599 649A                                      l784 73C6  
                                    l799 74D4                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000                                      _RX9 007D5E  
                                    _TX9 007D66                             __CFG_BOR$OFF 000000  
                                    _aux 1008                     __size_of_Write_b_eep 0034  
                           ___awmod@sign 0065                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_LVP$OFF 000000  
                           __CFG_WDT$OFF 000000                                     l1376 668C  
                                   l1386 65AE                                     l5021 698A  
                                   l5013 6972                                     l5103 65A4  
                                   l5031 69A8                                     l5023 698E  
                                   l5007 6962                                     l5121 72DE  
                                   l5113 63B0                                     l5019 6982  
                                   l5035 69B2                                     l5203 749C  
                                   l5131 7302                                     l6011 7E28  
                                   l6003 7E10                                     l5061 6530  
                                   l5053 651C                                     l5125 72E2  
                                   l5117 72C8                                     l5109 63A0  
                                   l6021 7E44                                     l5039 69BE  
                                   l5055 6520                                     l5223 7504  
                                   l5151 7380                                     l6015 7E34  
                                   l6007 7E1C                                     l5049 6516  
                                   l5065 6538                                     l5225 750A  
                                   l5233 752E                                     l5217 74EC  
                                   l5209 74B2                                     l5161 73E4  
                                   l5153 73B0                                     l5241 757A  
                                   l6041 7E80                                     l5075 665C  
                                   l5235 7534                                     l5171 742E  
                                   l5147 7374                                     l5139 7350  
                                   l6051 7E9A                                     l6043 7E84  
                                   l6035 7E6E                                     l5077 6664  
                                   l5229 751E                                     l5165 740E  
                                   l5157 73CC                                     l5149 737A  
                                   l5309 6482                                     ?_aux 0001  
                 ??_verificar_num_contas 0062                                     l5343 6B10  
                                   l5335 6AD4                                     l5087 6682  
                                   l5079 6668                                     l5095 6586  
                                   l5255 6A4C                                     l5351 670E  
                                   l5239 7572                                     l5191 747C  
                                   l5167 7420                                     l5159 73D2  
                                   l6047 7E8E                                     l5097 658E  
                                   l5177 743C                                     l6073 7EE2  
                                   l5427 645A                                     l5099 6592  
                                   l5371 6D10                                     l5347 66E2  
                                   l5179 7456                                     l5603 77AC  
                                   l5515 7626                                     l5461 67BC  
                                   l5381 6C0C                                     l4901 669C  
                                   l5189 7478                                     l5621 77E6  
                                   l5613 77C4                                     l5525 7666  
                                   l5367 6D04                                     l5383 6C12  
                                   l4903 66A6                                     l4911 66CC  
                                   l5447 63FE                                     l5711 7988  
                                   l5703 7974                                     l5615 77C6  
                                   l5481 67FC                                     l5473 67E6  
                                   l5465 67C8                                     l5457 67B0  
                                   l5385 6C1E                                     l4905 66B0  
                                   l4921 680A                                     l6089 7F44  
                                   l5467 67D0                                     l5379 6C08  
                                   l4907 66BE                                     l4923 6810  
                                   l5723 79A0                                     l5715 7990  
                                   l5707 7980                                     l5643 7886  
                                   l5627 77F6                                     l5619 77E2  
                                   l5635 7850                                     l5469 67D4  
                                   l5477 67F0                                     l5389 6C2C  
                                   l4933 6824                                     l5805 7AA2  
                                   l5741 79CE                                     l5733 79C2  
                                   l5725 79A6                                     l5573 7704  
                                   l5557 76D0                                     l4927 681E  
                                   l4935 6834                                     l5911 7C3E  
                                   l5823 7AE2                                     l5831 7AFA  
                                   l5751 79EA                                     l5743 79D6  
                                   l5719 7998                                     l5671 78F4  
                                   l5639 785A                                     l5647 78A0  
                                   l4937 6840                                     l5921 7C60  
                                   l5825 7AE6                                     l5809 7AAE  
                                   l5745 79DA                                     l5729 79B2  
                                   l5657 78B6                                     l5665 78E4  
                                   l5593 7792                                     l5577 771C  
                                   l5907 7C38                                     l5923 7C68  
                                   l5835 7B10                                     l5763 7A14  
                                   l5755 79FC                                     l4949 685C  
                                   l5909 7C3A                                     l5933 7C92  
                                   l5853 7B4C                                     l5845 7B38  
                                   l5757 7A0A                                     l5685 7910  
                                   l5597 779A                                     l5951 7D14  
                                   l5863 7B9C                                     l5847 7B3C  
                                   l5783 7A4C                                     l5679 7902  
                                   l5767 7A20                                     l5871 7BB8  
                             i2_lcd_putc 6736                                     l5857 7B54  
                                   l5777 7A40                                     l5785 7A4E  
                                   l5971 7DA0                                     l5955 7D24  
                                   l5947 7D08                                     l5859 7B5C  
                                   l5699 796C                                     l4989 6354  
                                   l5869 7BB4                                     l5991 7DEC  
                                   l5983 7DCA                                     l5967 7D96  
                                   l5985 7DD0                                     l5897 7C10  
                                   l5995 7DF8                                     l5999 7E04  
                                   STR_1 10DC                                     STR_2 10C8  
                                   STR_3 10D7                                     STR_4 10D4  
                                   STR_5 10C3                                     STR_6 10BE  
                                   STR_7 10C7                                     STR_8 10C8  
                                   STR_9 1097                                     _BRGH 007D62  
                                   _CREN 007D5C                                     _FERR 007D5A  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATD 000F8C                                     _PIE1 000F9D  
                                   u6150 6702                                     _RBIE 007F93  
                                   _RBIF 007F90                                     u6170 672E  
                                   _RCIE 007CED                                     _RCIF 007CF5  
                                   u6157 66F8                                     u6334 7F80  
                                   u6191 6CAE                                     u5615 6502  
                                   u6335 7F7A                                     u5616 6504  
                                   u6600 78D8                                     u6177 6724  
                                   u6514 7814                                     u6515 7810  
                                   u6534 783A                                     u6535 7836  
                                   u5840 73AC                                     _OERR 007D59  
                                   u5847 73A2                                     u5880 7404  
                                   u7627 7BF4                                     u7637 6C46  
                                   u7647 6C60                                     u5887 73FA  
                                   u7657 6C70                                     u7667 6C7C  
                                   u7677 6318                                     u7687 63C6  
                                   u7697 6460                                     _SPEN 007D5F  
                                   _TRMT 007D61                                     _TXIE 007CEC  
                                   _TXEN 007D65                                     _SYNC 007D64  
                           __CFG_PWRT$ON 000000                                     _main 75AA  
                                   fsr1h 000FE2                       i2___lwdiv@quotient 0005  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     prodh 000FF4  
                                   prodl 000FF3                                     start 1018  
                  __size_of_zerar_string 0022                            __CFG_IESO$OFF 000000  
                        __end_ofi2_putch 629E                            __CFG_MCLRE$ON 000000  
                           ___param_bank 000010                  i2resetar_timer1@valor_h 0002  
                i2resetar_timer1@valor_l 0001                                    ??_aux 001E  
                          __CFG_PLLDIV$1 000000                              i2_lcd_clear 62F0  
                                  ?_main 0001                          __end_of___awdiv 69C8  
                        __end_of___lbdiv 653C                                    _EEADR 000FA9  
                                  STR_10 10C8                                    STR_11 1072  
                                  STR_12 10A8                                    STR_20 1027  
                                  STR_21 10B7                                    STR_13 105E  
                                  STR_14 1048                                    STR_15 1085  
                                  STR_16 10CE                                    _BRG16 007DC3  
                                  STR_17 10D1                                    STR_18 10CB  
                                  STR_19 10DA                          __end_of___awmod 6806  
                                  _CMCON 000FB4                              i2_lcd_write 64A8  
                                  _T0CON 000FD5                          ___awdiv@divisor 0068  
                                  _T1CON 000FCD                        config_serial@baud 0060  
                        __end_of___lwdiv 6696                   ??_enviar_string_serial 0062  
                        __end_of___lwmod 65B8                                    i2l211 6EC4  
                                  i2l213 6ECC                                    i2l223 6EF4  
                                  i2l215 6ED6                                    i2l225 6EFC  
                                  i2l209 6EBC                                    i2l227 6F04  
                                  i2l252 6FBE                                    i2l180 6DCC  
                                  i2l229 6F0E                                    i2l239 6F6A  
                                  i2l184 6E98                                    i2l800 71EE  
                                  i2l725 677E                                    i2l726 679C  
                                  i2l815 728E                                    i2l744 664A  
                                  i2l762 6FFE                                    i2l784 70E2  
                        ___awdiv@counter 006A                                    i2l799 71EA  
                                  _RCREG 000FAE                                    _TMR0H 000FD7  
                                  _TMR1H 000FCF                                    _TMR0L 000FD6  
                                  _TMR1L 000FCE                                    _SPBRG 000FAF  
                                  _PORTB 000F81                                    _PORTD 000F83  
                                  _PORTE 000F84                            __CFG_USBDIV$1 000000  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _TXCKP 007DC4  
                                  _TXREG 000FAD                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                __size_ofi2_resetar_timer1 000E  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0060                           __CFG_EBTRB$OFF 000000  
                             i2isdigit@c 0003                          __end_of_dpowers 1027  
                 Write_b_eep@GIE_BIT_VAL 0063                          __end_of_isdigit 635C  
                                  _senha 0150                                    _putch 629E  
                                  main@i 00A7                             _zerar_string 639E  
                                  tablat 000FF5                         __end_ofi2___wmul 642E  
                   _num_interrupt_timer1 0034                                    plusw1 000FE3  
                                  plusw2 000FDB                                    status 000FD8  
                        ??_config_serial 0060                    __size_ofi2_lcd_gotoxy 004A  
                        ___lbdiv@divisor 0060                          ___lbdiv@counter 0062  
                          i2printf@width 001B                         __end_ofi2_printf 7290  
                     __size_ofi2___lwdiv 004A                       __size_ofi2___lwmod 003E  
               _buffer_teclado_matricial 00B4                 lcd_init@definir_tipo_lcd 0063  
                        __initialization 68DC                             __end_of_main 7F62  
                 ?_eeprom_config_inicial 0001                               i2printf@ap 0015  
                             i2printf@cp 0013                               _Read_b_eep 62DE  
                       __end_of_Busy_eep 6296                  ascii_para_numero@numero 0063  
                     __size_ofi2_isdigit 001C                                   ??_main 0089  
                          __activetblptr 000002                         lcd_gotoxy@coluna 0061  
                            i2lcd_putc@c 0005                          __CFG_CCP2MX$OFF 000000  
                           i2_lcd_gotoxy 6602                                   _ADCON1 000FC1  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                       ___awdiv@dividend 0066                                   ?_putch 0001  
                            ?i2_lcd_putc 0001                                   i2l4011 716C  
                                 i2l4003 7146                                   i2l4021 718E  
                                 i2l3231 6608                                   i2l4023 7192  
                                 i2l1376 65F8                                   i2l3233 6612  
                                 i2l3241 6638                                   i2l3305 678C  
                                 i2l4041 71C8                                   i2l4009 7154  
                                 i2l4105 6DF0                                   i2l1386 6570  
                                 i2l3235 661C                                   i2l4035 71B2  
                                 i2l4211 6F32                                   i2l3501 65EE  
                                 i2l3237 662A                                   i2l4061 722E  
                                 i2l4213 6F3C                                   i2l4205 6F26  
                                 i2l4141 6E3E                                   i2l3511 6550  
                                 i2l4071 7282                                   i2l4055 7216  
                                 i2l4215 6F44                                   i2l4151 6E5C  
                                 i2l4143 6E42                                   i2l3513 6554  
                                 i2l4057 721C                                   i2l4065 723E  
                                 i2l4049 7202                                   i2l4073 7288  
                                 i2l4217 6F4A                                   i2l4137 6E30  
                                 i2l3283 674E                                   i2l3291 6764  
                                 i2l4067 7244                                   i2l4235 6F64  
                                 i2l4227 6F5A                                   i2l4147 6E52  
                                 i2l3517 6566                                   i2l3509 6548  
                                 i2l3293 6770                                   i2l3277 673A  
                                 i2l4149 6E56                                   i2l4157 6E62  
                                 i2l3279 6740                                   i2l4239 6F72  
                                 i2l4263 6FBC                                   i2l4183 6ED8  
                                 i2l3289 6754                                   i2l4249 6F7E  
                                 i2l4185 6EE0                                   i2l3491 65D0  
                                 i2l4259 6FB2                                   i2l3661 6B78  
                                 i2l3493 65D4                                   i2l3671 6B8C  
                                 i2l3663 6B7C                                   i2l3479 6338  
                                 i2l4199 6F10                                   i2l3681 6BA0  
                                 i2l3673 6B90                                   i2l3665 6B80  
                                 i2l3489 65C8                                   i2l3683 6BA4  
                                 i2l3675 6B94                                   i2l3667 6B84  
                                 i2l3659 6B74                                   i2l3685 6BA8  
                                 i2l3677 6B98                                   i2l3669 6B88  
                                 i2l3693 6BB6                                   i2l3687 6BAC  
                                 i2l3679 6B9C                                   i2l3695 6BF8  
                                 _INTCON 000FF2                                   i2l3689 6BB0  
                                 i2l3953 7006                                   i2l3971 7070  
                                 i2l3963 7026                                   i2l3981 709A  
                                 i2l3957 700A                                   i2l3949 6FF0  
                                 i2l3991 70EE                                   i2l3983 709E  
                                 i2l3993 70FE                                   i2l3985 70CE  
                                 i2l3979 7094                                   i2l3997 7126  
                                 i2l3989 70E8                                   i2l3999 7138  
                                 _OSCCON 000FD3                                   _TMR0IE 007F95  
                                 _TMR0IF 007F92                                ??i2_putch 0006  
                                 _TMR1IE 007CE8                                   _TMR1IF 007CF0  
                                 _TMR1ON 007E68                       main@tentativas_841 00A2  
                         __CFG_VREGEN$ON 000000                         __end_of_delay_ms 647E  
                         __CFG_XINST$OFF 000000                        _teclado_matricial 6B64  
                      _ascii_para_numero 635C                         __end_of_lcd_init 6CA4  
                       __end_of_lcd_putc 686E                                   ___wmul 642E  
                              ??___awdiv 006A                       ?_teclado_matricial 0001  
                              ??___lbdiv 0061                           __CFG_STVREN$ON 000000  
                              ??___awmod 0064             ??_escrever_simbolo_fechadura 0061  
                     ?_ascii_para_numero 0060                                ??___lwdiv 0064  
                              ??___lwmod 006B                                   clear_0 68E4  
                                 clear_1 68F6                                   clear_2 6902  
                                 clear_3 690E                         ___awdiv@quotient 006C  
                        ___awmod@divisor 0062                          ___awmod@counter 0064  
                                 _printf 72C0                           _carregar_senha 6AD0  
                    ??_teclado_matricial 0002                      ??_ascii_para_numero 0062  
               ?_enviar_caractere_serial 0001                             __pdataCOMRAM 003F  
                          ?_limpar_linha 0001                                ??_isdigit 0060  
                dia_da_semana@tabela_mes 0075                        __end_ofi2___lwdiv 6602  
                           __mediumconst 0000                        __end_ofi2___lwmod 657A  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                                   putch@c 0065  
                    carregar_senha@conta 0069                         ___lbdiv@dividend 0061  
                      __end_ofi2_isdigit 6340                               __accesstop 0060  
                __end_of__initialization 6946                          __CFG_PBADEN$OFF 000000  
                      i2lcd_gotoxy@linha 0004      __size_of_escrever_simbolo_fechadura 006E  
              __end_of_teclado_matricial 6BFC                            ___rparam_used 000001  
              __end_of_ascii_para_numero 637C                  __size_of_resetar_timer1 000E  
                     i2___lwmod@dividend 0008                           __pcstackCOMRAM 0001  
                           __pidataBANK0 62A8                              ?_Read_b_eep 0060  
                 __end_of_carregar_senha 6B2A                            __end_of_putch 62A8  
                            i2printf@len 0018                      __size_ofi2_lcd_putc 0068  
                            i2printf@val 0016                               __end_ofPL2 7F70  
                             __end_ofPL4 7F88                               __end_ofPL6 7F9C  
                             __end_ofPL8 6B40                         ___lbdiv@quotient 0063  
                              ?i2___wmul 0001                           ??_limpar_linha 0064  
                       i2_resetar_timer1 62B4                       __size_of_lcd_clear 001A  
                              ?i2_printf 0001                       __size_of_lcd_write 0024  
                                ??_putch 0065                               __pbssBANK0 00AF  
                             __pbssBANK1 0100                                ?_Busy_eep 0001  
                             _data_atual 0038                   eeprom_config_inicial@i 0064  
                           i2lcd_write@c 0001                                  ?___wmul 0060  
                 main@contas_cadastradas 00A3                          ?_carregar_senha 0062  
                           ?i2_lcd_clear 0001                            ??_Write_b_eep 0063  
                                ?_printf 006C                                  _FLAGS_1 00B1  
                                _FLAGS_2 002D                                  _FLAGS_3 002E  
                           ?i2_lcd_write 0001                               ??i2___wmul 0005  
                                _INTCON2 000FF1                                ?_delay_ms 0060  
                             _lcd_gotoxy 6696                               ??i2_printf 000D  
                              ?_lcd_init 0001                                ?_lcd_putc 0001  
                    __size_of_Read_b_eep 0012                   __size_of_dia_da_semana 00DE  
                             ??_Busy_eep 0060            __size_of_verificar_num_contas 002A  
                                i2_putch 6296                       dia_da_semana@F5265 00EC  
             __size_of_teclado_matricial 0098               __size_of_ascii_para_numero 0020  
                                _Linha_3 002F                                  _Linha_4 0030  
                ??_eeprom_config_inicial 0064                                  __Hparam 0000  
                                __Lparam 0000                        __end_of_lcd_clear 6324  
     __end_of_escrever_simbolo_fechadura 68DC               _escrever_simbolo_fechadura 686E  
enviar_caractere_serial@carater_a_enviar 0060                                  ___awdiv 6950  
                                ___lbdiv 6508            main@ultimo_caractere_recebido 00A9  
                                ___awmod 679E                        __end_of_lcd_write 63E4  
                        __size_of___wmul 0026                                  ___lwdiv 664C  
                                ___lwmod 657A                             __psmallconst 101C  
                                __pcinit 68DC                                  __ramtop 0800  
                                __ptext0 75AA                                  __ptext1 639E  
                                __ptext2 647E                                  __ptext3 62D0  
                                __ptext4 72C0                                  __ptext5 629E  
                                __ptext6 6806                                  __ptext7 6340  
                                __ptext8 69C8                                  __ptext9 6508  
                        __size_of_printf 02C4                                  _dpowers 101D  
                           __size_of_aux 5FE0                                  _isdigit 6340  
                       ___awmod@dividend 0060      enviar_string_serial@string_a_enviar 0060  
             zerar_string@string_a_zerar 0060            __size_of_enviar_string_serial 0056  
            main@endereco_modulo_repasse 008F                               ??_delay_ms 0062  
                    __end_of_Write_b_eep 6508                               ??_lcd_init 0062  
                           ??i2_lcd_putc 0005                           __pintcode_body 6D92  
                             ??_lcd_putc 0064                     end_of_initialization 6946  
                         main@tentativas 00A1                            __Lmediumconst 0000  
                                int_func 6D92                      i2___wmul@multiplier 0001  
                  __end_of_config_serial 639E                     __end_of_limpar_linha 6408  
                         _resetar_timer1 62D0                               _nova_senha 00DC  
                                printf@c 0088                                  printf@f 0085  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                        _numero_para_ascii 69C8  
                          _dia_da_semana 6CA4                       __end_ofi2_lcd_putc 679E  
                     ?_numero_para_ascii 0001                                _PORTBbits 000F81  
                              _PORTDbits 000F83                                _PORTEbits 000F84  
      _qtd_vezes_mesma_tecla_pressionada 00B3                    teclado_matricial@temp 0003  
                            ?_lcd_gotoxy 0061                      ??_numero_para_ascii 006E  
                     i2lcd_gotoxy@coluna 0002                        i2___lwdiv@divisor 0003  
                              i2___lwdiv 65B8                                i2___lwmod 653C  
                      i2___lwdiv@counter 0007                   __end_of_resetar_timer1 62DE  
       __size_of_enviar_caractere_serial 000E                              printf@width 0086  
                             main@funcao 00AD               teclado_matricial@caractere 0004  
                              i2_isdigit 6324                               lcd_write@c 0060  
               __end_ofi2_resetar_timer1 62C2                __end_of_numero_para_ascii 6A48  
                           ??_Read_b_eep 0062                           ?_dia_da_semana 006C  
                  verificar_num_contas@i 0063                           __end_of___wmul 6454  
                          __pidataCOMRAM 1004                              _Write_b_eep 64D4  
                   __size_ofi2_lcd_clear 001A                         i2___wmul@product 0005  
                         __end_of_printf 7584                             i2printf@flag 001A  
                            __end_ofPL10 6B64                              __end_ofPL20 7FB2  
                            __end_ofPL12 729A                              __end_ofPL30 7FD6  
                            __end_ofPL22 72C0                              __end_ofPL14 72B2  
                            __end_ofPL32 7FE4                              __end_ofPL24 7FC6  
                            __end_ofPL16 759C                              __end_ofPL34 7FF2  
                            __end_ofPL26 6D92                              __end_ofPL18 75AA  
                            __end_ofPL36 8000                              __end_ofPL28 6AD0  
                            __end_ofPL38 64D4                             i2printf@prec 0012  
                    start_initialization 68DC                     __size_ofi2_lcd_write 001E  
                      __size_ofi2___wmul 0026                              __end_of_aux 6FE8  
                              i2printf@c 001D                                i2printf@f 0011  
        _qtd_caracteres_recebidos_serial 0035                               ?i2___lwdiv 0001  
                             ?i2___lwmod 0008                        __size_ofi2_printf 02A8  
                        lcd_gotoxy@linha 0063                       __end_of_Read_b_eep 62F0  
                        ?_resetar_timer1 0060                        __size_of_Busy_eep 0006  
                             ?i2_isdigit 0001                         ??_carregar_senha 0064  
               main@conta_a_ser_alterada 00A6                      __size_of_lcd_gotoxy 004A  
                               ??___wmul 0064                              __pdataBANK0 00EC  
                       __CFG_LPT1OSC$OFF 000000                       _caractere_recebido 00B2  
                               ??_printf 0078                              __pbssBIGRAM 0150  
                            __pbssCOMRAM 002D                            __pcstackBANK0 0060  
                      i2___lwmod@divisor 000A                        i2___lwmod@counter 000C  
                numero_para_ascii@numero 0071                             _isdigit$1524 0061  
                          ?_zerar_string 0060                        __size_of_delay_ms 002A  
                  __size_of_limpar_linha 0024                        __size_of_lcd_init 00A8  
                               ?i2_putch 0001                        __size_of_lcd_putc 0068  
                       ___lwdiv@dividend 0060           __size_of_eeprom_config_inicial 0078  
          __end_of_eeprom_config_inicial 6AC0               __size_of_numero_para_ascii 0080  
                        ??_dia_da_semana 0070                                __pintcode 1008  
            ?_escrever_simbolo_fechadura 0001                                 ?___awdiv 0066  
                               ?___lbdiv 0060                                 ?___awmod 0060  
                               ?___lwdiv 0060                                 ?___lwmod 0067  
           __end_of_verificar_num_contas 64A8                                _lcd_clear 630A  
                              _lcd_write 63C0                              __smallconst 101C  
                               ?_isdigit 0001              ascii_para_numero@caractere1 0061  
            ascii_para_numero@caractere2 0060              ascii_para_numero@caractere3 0062  
                           _limpar_linha 63E4                            ?i2_lcd_gotoxy 0002  
                         ??_zerar_string 0062                         ___lwdiv@quotient 0065  
                              _linha_lcd 0033                              ??i2___lwdiv 0005  
                            ??i2___lwmod 000C                           __size_of_putch 000A  
                _enviar_caractere_serial 62C2                      _qtd_max_colunas_lcd 0037  
                         ___wmul@product 0064                                 _LATCbits 000F8B  
                               _LATDbits 000F8C                                 _LATEbits 000F8D  
                            ??i2_isdigit 0001             __end_of_enviar_string_serial 6736  
                               i2u372_40 711E                                 i2u372_47 7114  
                               i2u368_40 70CA                                 i2u368_47 70C0  
                               i2u770_47 62FE                                 i2u771_47 64AC  
                               _RCONbits 000FD0         _qtd_caracteres_recebidos_teclado 0036  
                               _PORTB_SR 0031                               ?_lcd_clear 0001  
                              aux@coluna 002B                                main@i_840 00AA  
                             ?_lcd_write 0001                        ___wmul@multiplier 0060  
                               i2___wmul 6408                          Write_b_eep@badd 0060  
                        Write_b_eep@bdat 0062                               printf@flag 0084  
                             printf@prec 007C                                main@conta 00AB  
                              main@etapa 00A8                                lcd_putc@c 0064  
                              main@ordem 00AC                           ??i2_lcd_gotoxy 0003  
                           ??_lcd_gotoxy 0062                                 i2_printf 6FE8  
                           delay_ms@temp 0063                                copy_data0 6928  
                               _Busy_eep 6290                                 i2putch@c 0006  
               limpar_linha@coluna_atual 0065                         __size_ofi2_putch 0008  
                             _EECON1bits 000FA6                                 __Hrparam 0000  
                               __Lrparam 0000                        ?i2_resetar_timer1 0001  
                      limpar_linha@linha 0064                       __end_of_lcd_gotoxy 66E0  
                     ??i2_resetar_timer1 0002                         __size_of___awdiv 0078  
                       __size_of___lbdiv 0034                         __size_of___awmod 0068  
                  i2___wmul@multiplicand 0003                         __size_of___lwdiv 004A  
                       __size_of___lwmod 003E                   numero_para_ascii@temp1 0072  
                 numero_para_ascii@temp2 006F                             ?_Write_b_eep 0060  
                    dia_da_semana@seculo 0081                         __size_of_isdigit 001C  
                 __size_of_config_serial 0022                                 _delay_ms 6454  
                        ___lwdiv@divisor 0062                          ___lwdiv@counter 0064  
                               __ptext10 6950                                 __ptext11 63E4  
                               __ptext20 64D4                                 __ptext12 6696  
                               __ptext21 6290                                 __ptext13 6BFC  
                               __ptext30 635C                                 __ptext22 6CA4  
                               __ptext14 630A                                 __ptext31 679E  
                               __ptext23 642E                                 __ptext15 686E  
                               __ptext40 6324                                 __ptext24 657A  
                               __ptext16 63C0                                 __ptext41 6408  
                               __ptext33 62B4                                 __ptext25 664C  
                               __ptext17 66E0                                 __ptext42 653C  
                               __ptext34 6FE8                                 __ptext26 6454  
                               __ptext18 62C2                                 __ptext43 65B8  
                               __ptext35 6296                                 __ptext27 637C  
                               __ptext19 6A48                                 __ptext44 6B64  
                               __ptext36 6736                                 __ptext28 6AD0  
                               __ptext37 6602                                 __ptext29 62DE  
                               __ptext38 62F0                                 __ptext39 64A8  
              ??_enviar_caractere_serial 0060                         ??_resetar_timer1 0061  
                               _lcd_init 6BFC                                 _lcd_putc 6806  
         carregar_senha@senha_a_carregar 0062                                 _lcd_type 0032  
                         i2_isdigit$1524 0002                     _verificar_num_contas 647E  
                       dia_da_semana@dia 006F                         dia_da_semana@ano 006C  
                       dia_da_semana@mes 006E                            __size_of_main 09B8  
                               _ptr_data 00AF                     __end_of_zerar_string 63C0  
                               aux@linha 002C                    resetar_timer1@valor_h 0061  
                  resetar_timer1@valor_l 0060                            ??i2_lcd_clear 0002  
                              printf@len 0082                              ??_lcd_clear 0061  
                              printf@val 0080                                 main@cont 00AE  
                          ??i2_lcd_write 0001                              ??_lcd_write 0060  
                  __CFG_CPUDIV$OSC4_PLL6 000000                               _INTCONbits 000FF2  
                   _enviar_string_serial 66E0                      delay_ms@delay_total 0060  
                               isdigit@c 0062                                 intlevel2 0000  
                  ?_verificar_num_contas 0001                         ___lwmod@dividend 0067  
                           _qtd_max_dias 003F                            _config_serial 637C  
                   __end_ofi2_lcd_gotoxy 664C          __end_of_enviar_caractere_serial 62D0  
                          _buffer_serial 0100                                 printf@ap 007F  
                               printf@cp 007D                          carregar_senha@i 0068  
                        ___lwmod@divisor 0069                    ?_enviar_string_serial 0060  
                        ___lwmod@counter 006B                      __end_ofi2_lcd_clear 630A  
                    __end_ofi2_lcd_write 64C6                  teclado_matricial@coluna 0002  
         verificar_num_contas@qtd_contas 0062                   teclado_matricial@linha 0001  
                         ?_config_serial 0001  
